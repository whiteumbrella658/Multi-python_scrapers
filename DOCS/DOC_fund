Tesoralia scrapers documentation

Бизнес требования

Скрапинг состояния балансов счетов конкретного пользователя в течение 10 секунд
Скрапинг истории платежей конкретного пользователя 30 секунд
Параллельная обработка данных для всех аккаунтов пользователя
Доставка обновленных данных клиенту как можно скорее


Технические требования

Независимый сервер для работы скраперов
Интеграция с существующей БД MSSQL
Возможность одновременной обработки запросов на обновление данных от нескольких пользователей
Windows/Linux сервер



Сценарии использования
Процесс верхнего уровня

Пользователь в UI нажимает кнопку обновить
Клиентский код посылает запрос серверу на обновление данных
Веб-сервер со стороны пользователя посылает HTTP-запрос веб-серверу на стороне скраперов
При успешной обработке и валидации запроса, стартуют скраперы в отдельном системном процессе
По мере работы каждый скрапер обновляет БД новыми данными, также содержащими информацию о стадии процесса скрапинга
В течение работы скраперов клиентский код периодически запрашивет оновленные данные и обновляет UI
После окончания работы скраперов клиентский код получает информацию о прекращении их работы и перестает обновлять UI


Архитектурные решения

Язык программирования Python
Использование специального фреймворка - не используется
Для взаимодействия с БД используется внутренний пакет проекта, реализущий все требуемые функции
Все скраперы наследуются от BasicScraper, реализующий базовые методы


Выбор языка программирования и архитектуры

Python - интерпретируемый императивный мультипарадигмный язык программировния со строгой динамической типизаций и опциональной аннотацией типов
Имеет богатую стандартную библиотеку
Может исполняться на ОС Linux, Windows, Mac OS
Имеет чистый синтаксис и устоявшийся свод правил по разработке, пропагандирующих подходы, облегчающие разработку и сопровождение проектов
Зарекомендовал себя как язык для веб-программирования, веб-скрапинга и машинного обучения
Относится к группе языков с классической реализацией парадигмы ООП


Для использования преимуществ языков со статической типизацией, в данном проекте используются
1. аннотации типов, способствуюшие проверке типов на этапе разработки
2. строгие контейнеры данных namedtuple, соответствующие struct или DataClass в других языках программирования


Проблемы и решения

Проблема:
	требуется большое количество параллельных запросов для быстрого получения информации
Решение:
	использовать низкоуровневые запросы, которые можно легко их параллелить. Не использовать движки браузера и Selenium, так как они не позволят 1. экономить память, 2. обеспечить надежность, 3. обеспечить ожидаемое поведение

Проблема:
	многие финансовые сущности дополнительно шифруют пароль и имя пользователя на строне клиента, используя JavaScript
Решение:
	повторить данное поведение на стороне скрапинг-сервера, вызывая скаченные и сохраненные локально с сайта шифрующие скрипты с требуемыми параметрами, используя взаимодействие Python и Node.js

Проблема:
	при большом количестве параллельных процессов (корутин), а также при взаимодейтсвии Python и Node, вероятно падение основного процесса в результате нарушения целостности памяти
Решение:
	1. выделить дополнительные размер кэша для главного процесса чтобы избежать падение в Python
	2. ограничить количество одновременно обрабатываемых доступов пользователя до 24
	3. использовать SSD

Проблема:
	deadlock при попытке обновления БД при больщом количестве параллельных запросов на обновление БД
Решение:
	1. все обращения к БД на запись ставятся в очередь (libs/queue) для ограничения количества параллельных обрадещений к БД на запись
	2. использовать SSD

Проблема:
	некотрые сайты могут блокировать IP в качестве борьбы с ботами и DDoS-атакми
Решение:
	1. Использовать пул прокси с частными локальными IP адресами
	2. Менять IP только в случае неудачного обращения с другого IP (в отличие от стандартной практики ротирования IP адресов на каждом запросе)








