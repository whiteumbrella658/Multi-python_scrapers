<html>
 
 <head><meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<!-- I.SEPA_TRANSFORMACION -->
<script type='text/javascript' src='/SESTLSB/../SESKYOP/kyop_mult_web_pub/min/jquery-1.9.1.js'></script>
<script type='text/javascript' src='/SESTLSB/../SESKYOP/kyop_mult_web_pub/min/SEPA_funciones_IBAN.min.js'></script>
<link rel='stylesheet' type='text/css' href='/SESTLSB/../SESKYOP/kyop_mult_web_pub/resources/css/sepa_iban.min.css'>
<!-- F.SEPA_TRANSFORMACION -->
<link rel="stylesheet" href="/SESTLSB/TLSCMult/kdpo_201_0000_compo_es.css" type="text/css" />
<link rel="stylesheet" href="/SESTLSB/TLSCMult/kdpo_201_0000_posic_es.css" type="text/css" />
<link rel="stylesheet" href="/SESTLSB/TLSCMult/kdpo_201_0000_visua_es.css" type="text/css" />



<link rel="stylesheet" href="/SESTLSB/mult/newLook.css?1607719912290" type="text/css" />
<link rel="stylesheet" href="/SESTLSB/mult/ajustes.css?1607719912290" type="text/css" />
<!-- <link rel="stylesheet" href="/mult/sb/shadowbox.css" type="text/css" /> -->







 







	
		
		
		
				
				
				
		
		
		
				
							
	












<script language="javascript">	
var _idioma_TUX = "es";
var FORMATOS = {
 s_for_fec : 'dd/mm/aaaa',
 s_for_imp : '0.000,00'
};

</script>

	<script type="text/javascript" src="/SESTLSB/"></script>
<title>TLBHHisTraCriteriosSeleccion</title>
 
 
<script language="javascript" src="/SESTLSB/mult/TLBHFuncions_CAS.js"></script>
<script language="javascript" src="/SESTLSB/mult/Fecha_CAS.js"></script>	
<script language="javascript" src="/SESTLSB/mult/Importe_CAS.js"></script>
<script language="javascript" src="/SESTLSB/mult/Lista_CAS.js"></script>
<script language="javascript" src="/SESTLSB/mult/TLBHUtilidades_CAS.js"></script>	
<script language="javascript">
var acceso="4";
function iniciarFechas(){
		var f=document.transferencias;
        fechaSistema = "11-12-2020";
        var diaH=fechaSistema.substring(0,2);
        var mesH=fechaSistema.substring(3,5);
        var anyoH=fechaSistema.substring(6,10);
        var diaD;
        var mesD;
        var anyoD;
		f.diaHasta.value=fechaSistema.substring(0,2);
		f.mesHasta.value=fechaSistema.substring(3,5);
		f.anioHasta.value=fechaSistema.substring(6,10);
		if(mesH==1){
			anyoD=parseInt(anyoH)-1;	
			mesD=12;
			if(diaH.substring(0,1)!="0"){
				diaD=parseInt(diaH);
			}else{
				diaD=parseInt(diaH.substring(1,2));
			}	
		}else{
			if(mesH.substring(0,1)!="0"){
				mesD=parseInt(mesH)-1;
			}else{
				mesD=parseInt(mesH.substring(1,2))-1;
			}	
			anyoD=parseInt(anyoH);
			if(diaH.substring(0,1)!="0"){
				diaD=parseInt(diaH);
			}else{
				diaD=parseInt(diaH.substring(1,2));
			}	
		}	
			
		if ((mesD == 4) || (mesD == 6) || (mesD == 9) || (mesD == 11))	{
				if (diaD==31){
					diaD=30;
				}	
		}else{
				if (mesD == 2){
					if (esBisiesto(anyoD)){
						if(diaD==30){
							diaD=29;
						}
					}else{
						if (diaD==29){
						 diaD=28;
						} 
					}
				}
		}
		if (diaD < 10){
			// Si el dï¿½a es inferior a 10, aï¿½adimos un cero a su izquierda.
			diaD = "0" + diaD;
		}
		if (mesD < 10){
			// Si el mes es inferior a 10, aï¿½adimos un cero a su izquierda.
			mesD = "0" + mesD;
		}
		f.diaDesde.value=diaD;
		f.mesDesde.value=mesD;
		f.anioDesde.value=anyoD;
}
function cargarConceptos(){
	if(acceso!="3"){
		document.transferencias.concepto.options.length=4;
		document.transferencias.concepto.options[0].value="009";
		document.transferencias.concepto.options[1].value="007";
		document.transferencias.concepto.options[2].value="107";
		//document.transferencias.concepto.options[3].value="317";
		//document.transferencias.concepto.options[3].value="707";
		document.transferencias.concepto.options[3].value="153";
		//document.transferencias.concepto.options[0].text="Seleccione Tipo";
		document.transferencias.concepto.options[0].text="Todos";
		document.transferencias.concepto.options[1].text="Transferencias";
		document.transferencias.concepto.options[2].text="Beneficiario no residente";
		//document.transferencias.concepto.options[3].text="Nóminas";
		document.transferencias.concepto.options[3].text="Banco de España";
	
	}
	iniciarFechas();
}
function numerico(f)
{
  	if(isNaN(f.value))
  	{
		alert("Introduzca un dato numérico");
		f.value="";
		f.focus();
	}
}
  
function Dia(f)
{
	numerico(f);	
	if((f.value!=="") && ((f.value < 1) ||(f.value > 31)))
	{
		alert("Día erroneo");
		f.focus();
	}
}
		
function Mes(f)
{
	numerico(f);
	if((f.value!=="") && ((f.value < 1) ||(f.value > 12)))
	{
		alert("Mes erroneo");
		f.focus();
	}
}
		
function Anio(f){
  	numerico(f);
	if((f.value!=="") && (f.value < 1900))
	{
		alert("Año erroneo");
		f.focus();
	}
}	
		
function validarFormulario(f)
{
	var okvalida=false;
	if ((f.diaDesde.value == "") && (f.mesDesde.value == "") && (f.anioDesde.value == "")){ 
		alert("Rellene la \"Fecha Desde\"");
		f.diaDesde.focus();
		
	} else {
		if(((f.diaDesde.value !== "") && ((f.mesDesde.value == "") || (f.anioDesde.value == ""))) 
		|| ((f.mesDesde.value !== "") && ((f.diaDesde.value == "") || (f.anioDesde.value == ""))) 
		|| ((f.anioDesde.value !== "") && ((f.diaDesde.value == "") || (f.mesDesde.value == ""))))
		{
			alert("Complete la \"Fecha Desde\"");
			f.diaDesde.focus();
		}else{
			okvalida=true;
		}	
	} 
	if(okvalida){
		if(f.diaHasta.value == "" && f.mesHasta.value == "" && f.anioHasta.value == ""){
				alert("Rellene la \"Fecha Hasta\"");
				f.diaHasta.focus();
				return false;
		} else {
		 	if(((f.diaHasta.value !== "") && ((f.mesHasta.value == "") || (f.anioHasta.value == ""))) 
				|| ((f.mesHasta.value !== "") && ((f.diaHasta.value == "") || (f.anioHasta.value == ""))) 
				|| ((f.anioHasta.value !== "") && ((f.diaHasta.value == "") || (f.mesHasta.value == ""))))
			{
				alert("Complete la \"Fecha Hasta\"");
				f.diaHasta.focus();
			}else{
				okvalida=true;
			}	
		}
	}	
	if (okvalida){	
		if(Validarfecha(f))	{
			if(Cuentaseleccionada(f))	{
				if(f.imported.value!="" && f.importeh.value!=""){
					okvalida=validarImportes(f);
					
				} else {
					if (f.imported.value=="" && f.importeh.value!=""){
						alert("Rellene el importe desde");
						f.imported.focus();
						okvalida=false;
					}else if(f.imported.value!="" && f.importeh.value==""){
						alert("Rellene el importe Hasta");
						f.importeh.focus();
						okvalida=false;
						//okvalida=validarImporteD(f);
						//f.importeHasta.value=parseInt(0);
					}else if(f.imported.value=="" && f.importeh.value==""){
						f.importeDesde.value=parseInt(0);
						f.importeHasta.value=parseInt(0);
					}	
				}
			}else{
				okvalida=false;
			}			
		}else{
			okvalida=false;
		}	
	}
	
	if(okvalida){
		var lCuentas = f.listaCuentas.value;
		lCuentas = lCuentas.substring(0,lCuentas.indexOf("@")+1);
		f.listaCuentas.options[f.listaCuentas.selectedIndex].value = lCuentas;
	}
	
	return okvalida;	
 } 
 
function Validarfecha(f)
{
	
	fechad = new Fecha(f.diaDesde, f.mesDesde, f.anioDesde, "Fecha Desde");
	fechad.xsnmin = true;
	fechad.delim = "";
	fechad.fmt = "amd";
	fechah = new Fecha(f.diaHasta, f.mesHasta, f.anioHasta, "Fecha Hasta");
	fechah.xsnmin = false;
	fechah.delim = "";
	fechah.fmt = "amd";
	var okFechas = false;
	if (fechad.okValida() && fechah.okValida())
	{
		okFechas=fechad.equals(fechah, "<=");
		if(okFechas){
			okFechas=comprobarFecha();
			if (okFechas) {
				if((f.anioHasta.value*1)>(f.anioDesde.value*1)){
					if(((f.anioHasta.value*1)-(f.anioDesde.value*1))>1){
						okFechas=false;
						alert("No se permiten consultas con antigüedad mayor a un año");
					}else{
						if((f.mesHasta.value*1)>(f.mesDesde.value*1)){
							okFechas=false;
							alert("El rango máximo de la consulta debe ser un mes");
						}else{
							if(((f.mesDesde.value*1)!=12) && ((f.mesHasta.value*1)!=1)){
								okFechas=false;
								alert("El rango máximo de la consulta debe ser un mes");
							}
						}
					}
				}else{
					if((f.anioHasta.value*1)==(f.anioDesde.value*1)){
						if((f.mesHasta.value*1)>(f.mesDesde.value*1)){
							if( ((f.mesDesde.value*1)+1)!=(f.mesHasta.value*1)){
								okFechas=false;
								alert("El rango máximo de la consulta debe ser un mes");
							}
						}
					}
				}
				f.fechaDesde.value = fechad.toString();
				f.fechaHasta.value = fechah.toString();
			}
		}else{
			f.diaDesde.focus();
		}	
	}
	return okFechas;
}	
function comprobarFecha(){
        
        fechaSistema = "11-12-2020";
        var diaS;
        var mesS;
        var anyoS;
        var diaU;
        var mesU;
        var anyoU;
        diaS = fechaSistema.substring(0,2);
        mesS = fechaSistema.substring(3,5);
        anyoS = fechaSistema.substring(6,10);
        diaU = document.transferencias.diaDesde.value;                     
        mesU = document.transferencias.mesDesde.value;
        anyoU = document.transferencias.anioDesde.value;
		if(parseInt((parseInt(anyoS) * 10000)+ (mesS * 100) + diaS/1) < parseInt((parseInt(anyoU) * 10000) + (mesU * 100) + diaU/1)){
                alert("La fecha debe ser menor que la fecha del día");
                document.transferencias.diaDesde.focus();
                return false;
                
        }else if (((parseInt(anyoS) * 10000)+(mesS * 100)+ diaS/1) > fechaSumaDias(diaU/1, mesU/1, parseInt(anyoU), 365)) {
                alert("No se permiten consultas con antigüedad mayor a un año");
                document.transferencias.diaDesde.focus();
                return false;
        
        }else{
        
        	return true;    
        }	
}
function fechaSumaDias(dia, mes, anyo, resta) {
        diasMes = new Array (31,28,31,30,31,30,31,31,30,31,30,31);
        
        if (resta >= dia) {
                while (resta >= dia) {
                        resta -= dia;
                        mes = mes - 1;
                        // si estï¿½bamos en Enero pasamos a Diciembre del aï¿½o anterior
                        if (mes==0) {
                                mes = 12;
                                anyo = anyo + 1;
                                // Si el aï¿½o es bisisesto entonces Febrero tiene 29 dï¿½as
                                if(((anyo % 4 == 0) && (anyo % 100 != 0)) || (anyo % 400 == 0)) {
                                        diasMes[1] = 29;
                                } else {
                                        diasMes[1] = 28;
                                }
                        }
                        dia = diasMes[mes - 1];
                }
        } else {
                dia += resta;
                return ((anyo*10000) + (mes*100) + dia );
        }
        // si la resta coincide con el dï¿½a entonces establecemos a resta el nï¿½ de dï¿½as del mï¿½s
        if (resta == 0) {
                resta = diasMes[mes - 1];
        } else {
                resta = dia - resta;
        }
        return ((anyo*10000) + (mes*100) + resta);
}
function fechaValida(dia_s, mes_s, ano_s)
{
	var formatoCorrecto= (ano_s.length == 4 && mes_s.length == 2 && dia_s.length == 2);
	
	if((mes_s == 4) || (mes_s == 6) || (mes_s == 9) || (mes_s == 11))
	{
		return((dia_s < 31) && formatoCorrecto);
	}
	else
	{
		if(mes_s == 2)
		{
			if(esBisiesto(ano_s))
			{
				return(dia_s<30 && formatoCorrecto);
			}
			else
			{
				return(dia_s<29 && formatoCorrecto);
			}
		}
		else
		{
			return(dia_s<32 && formatoCorrecto);
		}
	}						
}
function esBisiesto(anyo_i)
{
	var anyo= parseInt(anyo_i);
	
	if(((anyo % 4 == 0) && (anyo % 100 !=0)) || (anyo % 400 == 0))
	{
		return true;
	}
	else
	{
		return false;
	}
}  
function Validar(f)
{
	if(f.value!=="" && (document.transferencias.diaDesde.value=="" || document.transferencias.mesDesde.value=="" || document.transferencias.anioDesde.value==""))
	{
		if (document.transferencias.diaDesde.value == "")
			document.transferencias.diaDesde.focus();
		else if (document.transferencias.mesDesde.value == "")
			document.transferencias.mesDesde.focus();
		else if (document.transferencias.anioDesde.value == "")
			document.transferencias.anioDesde.focus();
		alert("Debe introducir primero la \"Fecha Desde\"");	
	}
}  
function validarImportes(f)
{
	
	var imported, importeh;
	var divisa = "EUR";
	imported = new Importe(f.imported, divisa, "Importe Desde");
	imported.xsnmin = true;
	imported.xsnneg = true;
	imported.DGTOSINT = 9;
	imported.DGTOSDEC = 2;		
	imported.xsndelim = true;
	
	importeh = new Importe(f.importeh, divisa, "Importe Hasta");
	importeh.xsnmin = false;
	importeh.xsnneg = true;
	importeh.DGTOSINT = 9;
	importeh.DGTOSDEC = 2;	
	importeh.xsndelim = true;	
	
	var okImportes = false;
	
	if (imported.okValido() && importeh.okValido())
	{
		
		okImportes = imported.equals(importeh, "<=");
		if(okImportes){
			f.importeDesde.value=f.imported.value;
			f.importeHasta.value=f.importeh.value;
			f.importeD.value=f.importeDesde.value;
			f.importeH.value=f.importeHasta.value;
		}
		
	}
	
	return okImportes;
	
}
function validarImporteD(f)
{
	//Validamos que sea correcto el importe
	var imported;
	var divisa = "EUR";
	imported = new Importe(f.imported, divisa, "Importe Desde");
	imported.xsnmin = true;
	imported.xsnneg = true;
	imported.DGTOSINT = 9;
	imported.DGTOSDEC = 2;		
	var okImportes = false;
	
	okImportes=imported.okValido();
	f.importeDesde.value = imported.toString();
	f.importeD.value=f.importeDesde.value;
	return okImportes;
}
function Importe(obj, divisa, id) // Constructor. 
{ 
	// Datos Constantes, configurables por el usuario. 
	this.IMIN = -99999999999;		// Importe mï¿½nimo negativo. 
	this.ICERO = 0;					// Importe mï¿½nimo positivo. 
	this.IMAX = 999999999999;		// Importe mï¿½ximo. 
	this.DGTOSINT =	12;				// Nï¿½mero de dï¿½gitos enteros permitidos. 
	this.DGTOSDEC = 2;				// Nï¿½mero de dï¿½gitos decimales permitidos.	 
	// Datos Dinï¿½micos, configurables por el usuario. 
	this.id = id;					// Identificador dentro del cï¿½digo html del campo importe. 
	this.svalor = obj.value;		// Valor del importe expresado como string. 
	this.signo = obj.value.charAt(0);// Signo del importe: Blancos (positivo) y - si negativo. 
	this.divisa = divisa.toUpperCase();	// Divisa en la que se expresa el importe. 
	this.xsnneg = false;			// Permitir importe negativo o no. 
	this.xsnmin = true;				// Es el importe mï¿½nimo del intervalo. 
	this.delim = ",";				// Delimitador de parte decimal del importe. 
	this.delimmiles = null;			// Delimitador de miles.
	this.numeroMiles = 0;			// Nï¿½mero de puntos de miles dentro del importe.
	this.xsndelim = false;			// Indica si quiere que aparezca el dlimitador de decimales.
	// Datos De uso interno. 
	this.ivalor = "";				// Parte entera del importe. 
	this.dvalor = "";				// Parte decimal del importe. 
	this.okVacio = (obj.value == "") ? true : false; // Campo que identifica si es o no vacï¿½o el importe. 
	// Mï¿½todos. 
	this.okValido = okValidoImporte;	// Valida el formato correcto del importe. 
	this.equals = equalsImporte;		// Compara importes. 
	this.toString = toStringImporte;	// Convierte a cadena el valor del importe sin delimitadores. 
} 
 
function okValidoImporte() 
{
	
	// Por defecto, el importe es correcto. 
	var okImporte = true; 
	if (this.delimmiles != null)
	{
		// Eliminamos del importe el separador de miles no es necesario para conversiones a nï¿½meros.
		var newSValor = "";
		for (var dgtox = 0; dgtox < this.svalor.length; dgtox++)
		{
			if (this.svalor.charAt(dgtox) != this.delimmiles)
			{
				newSValor += this.svalor.charAt(dgtox); 
			}
			else
			{
				this.numeroMiles++;			
			}
		}
		if (newSValor != "")
		{
			// Reasignamos el nuevo valor.
			this.svalor = newSValor;
		}
	}
	if (!this.xsnneg && (this.signo == '-')) 
	{ 
		alert(this.id + " no admite valores negativos"); 
		okImporte = false; 
	} 
	if ((this.divisa == "ESP") && (this.svalor.length > this.DGTOSINT)) 
	{ 
		alert("El tamaño del " + this.id + " excede del máximo permitido<br/>para la divisa Pesetas"); 
		okImporte = false; 
	} 
	if (this.svalor.length > this.DGTOSINT + this.DGTOSDEC + 1) 
	{ 
		alert("El tamaño del " + this.id + " excede del máximo permitido"); 
		okImporte = false; 
	} 	
	if (okImporte && !this.okVacio) 
	{ 
		// Primero, comprobamos si el importe sigue un formato sin decimales. 
		var patron = new RegExp("^(-{0,1}\\d{1," + this.DGTOSINT + "})$"); 
		var str = patron.exec(this.svalor); 
		if (okImporte = patron.test(this.svalor)) 
		{ 
			// Sï¿½lamente existe parte entera. 
			this.ivalor = str[1]; 
			// Rellenamos los decimales por defecto a 00. 
			this.dvalor = (this.ivalor != "0") ? "00" : ""; 
		} 	
		// Solamente la divisa europea admite parte decimal, comprobaremos el segundo formato si el primero falla. 
		if (!okImporte && (this.divisa == "EUR")) 
		{ 
			// Al encontrarse dentro de una cadena el carï¿½cter especial:. le aï¿½adimos dos barras. 
			var delim = (this.delim == ".") ? "\\." : this.delim; 
			patron = new RegExp("^(-{0,1}\\d{1," + this.DGTOSINT + "})" + delim + "(\\d{1," + this.DGTOSDEC + "})$"); 
			str = patron.exec(this.svalor); 
			if (okImporte = patron.test(this.svalor)) 
			{ 
				// Almacenamos la parte entera. 
				this.ivalor = str[1]; 
				// Almacenamos la parte decimal sin delimitador. 
				this.dvalor = str[2]; 
			} 
		} 		
		if (this.delimmiles != null)
		{
			// Comprobamos que los puntos de miles han sido bien colocados.
			okImporte = okImporte && ((this.numeroMiles == 0) || (Math.floor((this.ivalor.length - 1) / 3) == this.numeroMiles));
		}
		
		if (!okImporte) 
		{ 
			if (this.delimmiles != null)
			{
				
				alert("El formato del " + this.id + " es INCORRECTO.\nParte entera: " + this.DGTOSINT + " dígitos\nParte decimal (EUR): " + this.DGTOSDEC + " dígitos\nDelimitador Decimales (EUR): " + this.delim + "\nDelimitador Miles: " + this.delimmiles);
				if(this.id=="Importe Desde")
				{
					document.transferencias.imported.focus();				
				}
				else
				{
					document.transferencias.importeh.focus();
				}	
			}
			else
			{
				
				alert("El formato del " + this.id + " es INCORRECTO.\nParte entera: " + this.DGTOSINT + " dígitos\nParte decimal (EUR): " + this.DGTOSDEC + " dígitos\nDelimitador (EUR): " + this.delim);
				if(this.id=="Importe Desde")
				{
					document.transferencias.imported.focus();				
				}
				else
				{
					document.transferencias.importeh.focus();
				}
				
			}
		} 
	}
	
	return okImporte; 
} 
 
function equalsImporte(importeh, op)	 
{	 
	// Por defecto, la comparaciï¿½n se cumple. 
	var okEquals = true; 
	if (!importeh.okVacio) 
	{ 
		if (!this.okVacio) 
		{ 
			// Contruimos un importe con la parte entera y la decimal si la hubiera. 
			var importeDesde = this.toString() - 0; 
			var importeHasta = importeh.toString() - 0; 
			var strOperador = ""; 
			switch (op) 
			{ 
				case "==":// Comprobamos si el importe (this) es igual que (importe). 
						strOperador = "IGUAL que"; 
						okEquals = (importeDesde == importeHasta); 
						break; 
				case "<=":// Comprobamos si el importe (this) es menor o igual que (importe). 
						strOperador = "MENOR O IGUAL que"; 
						okEquals = (importeDesde <= importeHasta); 
						break; 
				case ">=":// Comprobamos si el importe (this) es mayor o igual que (importe). 
						strOperador = "MAYOR O IGUAL que"; 
						okEquals = (importeDesde >= importeHasta); 
						break; 
				case  "<":// Comprobamos si el importe (this) es menor que (importe). 
						strOperador = "MENOR que"; 
						okEquals = (importeDesde < importeHasta); 
						break; 
				case  ">":// Comprobamos si el importe (this) es mayor que (importe). 
						strOperador = "MAYOR que"; 
						okEquals = (aimporteDesde > importeHasta); 
						break; 
				default:// Comprobamos si el importe (this) es menor o igual que (importe). 
						strOperador = "MENOR O IGUAL que"; 
						okEquals = (importeDesde <= importeHasta); 
						break; 
			} 
			if (!okEquals) 
			{ 
				alert("El " + this.id + " tiene que ser \n" + strOperador + " el " + importeh.id + ""); 
			} 
		} 
		else 
		{ 
			alert("Si el " + this.id + " está vacío, no <br/>se permite rellenar el "+ importeh.id + ""); 
			okEquals = false; 
		} 
	} 
	return okEquals; 
} 
 
function toStringImporte()	 
{	 
	// Comprobamos si el importe es vacï¿½o en la web. 
	if (this.okVacio) 
	{ 
		// El importe es vacï¿½o. 
		if (this.xsnmin) 
		{ 
			// El importe es el mï¿½s pequeï¿½o del intervalo, nos quedamos con el mï¿½nimo dependiendo de si se admiten negativos. 
			this.ivalor = this.xsnneg ? this.IMIN : this.ICERO; 
			this.dvalor = this.xsnneg ? "99" : ""; 
		} 
		else 
		{ 
			// El importe es el mï¿½ximo del intervalo. 
			this.ivalor = this.IMAX;		 
			this.dvalor = "99"; 
		} 
	} 
	// Comprobamos en que divisa se expresa el importe. 
	if ((this.divisa == "EUR") && (this.svalor != "0")) 
	{ 
		// Rellenaremos la parte decimal con CEROS en funciï¿½n del nï¿½mero de decimales introducidos por el usuario. 
		var decs = this.DGTOSDEC - this.dvalor.length; 
		for (; decs > 0 ; this.dvalor += "0", decs--); 
	} 
	// Devolvemos la concatenaciï¿½n de la parte entera y decimal sin delimitador. 
	if (this.xsndelim)
	{
		return this.ivalor + "." + this.dvalor; 
	}
	else
	{
		return this.ivalor + this.dvalor; 	
	}
} 
// Parï¿½metros:
// delimDec - true o false 	(importe con delimitador de decimales o no)
// negativo - true o false	(se permite importe negativo o no)
function ImporteParam(obj, divisa, id, delimDec, negativo) // Constructor. 
{ 
	// Datos Constantes, configurables por el usuario. 
	this.IMIN = -99999999999;		// Importe mï¿½nimo negativo. 
	this.ICERO = 0;				// Importe mï¿½nimo positivo. 
	this.IMAX = 999999999999;		// Importe mï¿½ximo. 
	this.DGTOSINT =	12;			// Nï¿½mero de dï¿½gitos enteros permitidos. 
	this.DGTOSDEC = 2;			// Nï¿½mero de dï¿½gitos decimales permitidos.	 
	// Datos Dinï¿½micos, configurables por el usuario. 
	this.id = id;				// Identificador dentro del cï¿½digo html del campo importe. 
	this.svalor = obj.value;		// Valor del importe expresado como string. 
	this.signo = obj.value.charAt(0);	// Signo del importe: Blancos (positivo) y - si negativo. 
	this.divisa = divisa.toUpperCase();	// Divisa en la que se expresa el importe. 
	this.xsnneg = negativo;			// Permitir importe negativo o no. 
	this.xsnmin = true;			// Es el importe mï¿½nimo del intervalo. 
	this.delim = ",";			// Delimitador de parte decimal del importe. 
	this.delimmiles = null;			// Delimitador de miles.
	this.numeroMiles = 0;			// Nï¿½mero de puntos de miles dentro del importe.
	this.xsndelim = delimDec;		// Indica si quiere que aparezca el dlimitador de decimales.
	// Datos De uso interno. 
	this.ivalor = "";			// Parte entera del importe. 
	this.dvalor = "";			// Parte decimal del importe. 
	this.okVacio = (obj.value == "") ? true : false; // Campo que identifica si es o no vacï¿½o el importe. 
	// Mï¿½todos. 
	this.okValido = okValidoImporte;	// Valida el formato correcto del importe. 
	this.equals = equalsImporte;		// Compara importes. 
	this.toString = toStringImporte;	// Convierte a cadena el valor del importe sin delimitadores. 
}
function quitar_foco(n){
	var p =document.transferencias;
	if (p.sel[n].checked==true){
		
		
				
		p.sel[n].focus();
	}
}
function deshabilita(){
	for ( var a=0; a < document.transferencias.concepto; a++){
		document.transferencias.concepto.options[a] = null;
	}	
	if(document.transferencias.sel[0].checked==true){
		document.getElementById("canal").disabled = false;  
		cargarConceptos();
	}else{
		document.transferencias.canal[0].selected=true; 
		document.getElementById("canal").disabled = true; 
		document.transferencias.concepto.options.length=4;
		document.transferencias.concepto.options[0].value="009";
		document.transferencias.concepto.options[1].value="007";
		document.transferencias.concepto.options[2].value="107";
		//document.transferencias.concepto.options[3].value="707";
		document.transferencias.concepto.options[3].value="153";
		document.transferencias.concepto.options[0].text="Todos";
		//document.transferencias.concepto.options[0].text="Seleccione Tipo";
		document.transferencias.concepto.options[1].text="Transferencias";
		document.transferencias.concepto.options[2].text="Ordenante no residente";
		document.transferencias.concepto.options[3].text="Banco de España";
	}	
}
function modoAcceso4()
{
	if(acceso == "4")
	{
		deshabilitaRecibidas();
	}
}
function deshabilitaRecibidas()
{
	for ( var a=0; a < document.transferencias.concepto; a++)
	{
		document.transferencias.concepto.options[a] = null;
	}
	document.transferencias.canal[0].selected=true; 
	document.getElementById("canal").disabled = true; 
	document.transferencias.concepto.options.length=4;
	document.transferencias.concepto.options[0].value="009";
	document.transferencias.concepto.options[1].value="007";
	document.transferencias.concepto.options[2].value="107";
	document.transferencias.concepto.options[3].value="153";
	document.transferencias.concepto.options[0].text="Todos";
	//document.transferencias.concepto.options[0].text="Seleccione Tipo";
	document.transferencias.concepto.options[1].text="Transferencias";
	document.transferencias.concepto.options[2].text="Ordenante no residente";
	document.transferencias.concepto.options[3].text="Banco de España";
}
function Cuentaseleccionada(f)
{
	var cuentaEscrita = false;
	var cuentaSeleccionada = false;
	
	if((f.banco.value !=="") && (f.oficina.value !=="") && (f.DC.value !=="") && (f.cuenta.value !==""))
	{ 
			var cadenaCompleta = f.banco.value + f.oficina.value + f.DC.value + f.cuenta.value; 
			if (cadenaCompleta != "") 
			{
				cadenaCompleta = f.banco.value + " " + f.oficina.value + " " + f.DC.value + " " + f.cuenta.value; 
				var tamanio = f.listaCuentas.options.length;
				for(var i=0; i < tamanio; i++)
				{				
					var opcion = f.listaCuentas.options[i];
					var cuentaName = opcion.value.substring(opcion.value.indexOf("@") + 1);
					var campoLista = cuentaName.substring(3);
					if (campoLista==cadenaCompleta)
					{
						f.listaCuentas.options[i].selected = true;
						cuentaEscrita = true;
					}			
				}
			}
			else
			{
				cuentaEscrita = true;
			}
		
	}else{
		cuentaEscrita=true;
	}
	
	if(!cuentaEscrita){
		alert("La cuenta introducida no existe en la lista de Cuentas");
		f.banco.value = "";
		f.oficina.value = "";
		f.DC.value = "";
		f.cuenta.value = "";
		cuentaSeleccionada=false;
		cuentaEscrita=false;
	}else{
		var unaLista = new Lista(f.listaCuentas);
		if ((f.numeroAsuntos.value = unaLista.size()) > 0)
		{
			f.listaAsuntos.value = unaLista.toStringCompuesto("@");
			cuentaSeleccionada = true;
		}
		else
		{
			alert("Seleccione al menos una cuenta, por favor.");
			cuentaEscrita=false;
		}
	}	
	
	if((cuentaEscrita == true) || (cuentaSeleccionada == true))
	{
		return true;
	}
	else
	{
		return false;
	}
}						
</script>
</head>
<body   link="#660099" onLoad="controlPibee();cargarConceptos();modoAcceso4()">
<form name="transferencias" action="OperacionCBTFServlet" method="post" onsubmit="javascript:return validarFormulario(this);">
<input type="hidden" name="proceso" value="TLBHPrHisTraConsultaHistorico">
<input type="hidden" name="operacion" value="TLBHOpHisTraListaTransferencias">
<input type="hidden" name="accion" value="execute">
<input type="hidden" name="importeDesde" value="">
<input type="hidden" name="importeHasta" value="">
<input type="hidden" name="fechaDesde" value="">
<input type="hidden" name="fechaHasta" value="">
<input type="hidden" name="numeroCuenta" value="0">
<input type="hidden" name="numeroPagina" value="0">
<input type="hidden" name="listaAsuntos" value="">
<input type="hidden" name="numeroAsuntos" value="">
<input type="hidden" name="numOPRequest" value="2">
<input type="hidden" name="importeD" value="">
<input type="hidden" name="importeH" value="">
<h2>

		Transferencias Recibidas
	
</h2>
<div class="caja_tabla2">
<table class='tabla_espana' cellpadding="3" cellspacing="0" border="0" width="100%">
<tr>
	<td>		
		<div class="tituloTabla texto"><h2 class="left">Criterios de Selección</h2></div>
		<table class='tabla_espana formulario' align="center" cellpadding="3" cellspacing="0" border="0" width="100%">
			
				<input type="hidden" name="sel" value="2">
			
			<tr>
				<td class="bgfila2"><p class="txtselec2">&nbsp;</p></td>
				<td class="bgfila" colspan="6"><p class="txtselec2 left darker">Rango de Fechas (dd/mm/aaaa):</p></td>
			</tr>
			<tr>
				<td class="bgfila2"width="10%"><p class="txtselec2">&nbsp;</p></td>
				<td class="bgfila2"width="20%"><p class="txtselec2">Desde:&nbsp;</p></td>
				<td class="bgfila2" align="left" width="20%"><input type="text" class="ancho20"name="diaDesde" size="2" maxlength="2" onblur=Dia(this) onkeyup="saltoFoco(form,this)">&nbsp;/&nbsp;<input type="text" class="ancho20" name="mesDesde" size="2" maxlength="2" onblur=Mes(this) onkeyup="saltoFoco(form,this)">&nbsp;/&nbsp;<input type="text" class="ancho35" name="anioDesde" size="4" maxlength="4" onblur=Anio(this) onkeyup="saltoFoco(form,this)"></td>
				<td class="bgfila2"width="10%"><p class="txtselec2">Hasta:&nbsp;</p></td>
				<td class="bgfila2" align="left"width="40%"><input type="text" class="ancho20" name="diaHasta" size="2" maxlength="2" onblur=Dia(this) onkeyup="saltoFoco(form,this)">&nbsp;/&nbsp;<input type="text" class="ancho20" name="mesHasta" size="2" maxlength="2" onblur=Mes(this) onkeyup="saltoFoco(form,this)">&nbsp;/&nbsp;<input type="text"  class="ancho35" name="anioHasta" size="4" maxlength="4" onblur=Anio(this) ></td>
			</tr>
			
			<tr>
			<tr>
				<td class="bgfila2"><p class="txtselec2">&nbsp;</p></td>
				<td class="bgfila" colspan="6"><p class="txtselec2 left darker">Cuenta que desea consultar:</p></td>
			</tr>
			<tr>
				<td class="bgfila2"><p class="txtselec2">&nbsp;</p></td>
				<td class="bgfila2"><p class="txtselec2">Por cuenta:</p></td> 
				<td class="bgfila2" colspan="4"><p class="txtselec2 left">
					<input type="text" name="banco" size="4" maxlength="4" onkeyup="saltoFoco(form,this)">
					<input type="text" name="oficina" size="4" maxlength="4" onkeyup="saltoFoco(form,this)">
					<input type="text" name="DC" size="2" maxlength="2" onkeyup="saltoFoco(form,this)">
					<input type="text" name="cuenta" size="10" maxlength="10"></p></td>
			</tr>
			<tr>
				<td class="bgfila"><p class="txtselec2">&nbsp;</p></td>
				<td class="bgfila"><p class="txtselec2">Cuentas:&nbsp;</p></td>
				<td class="bgfila">
					<select name="listaCuentas" class="left" size="8" /multiple>
												
										<option value="0@EUR0182 1299 41 0010225005">0182 1299 41 0010225005   &nbsp;</option>
																		
										<option value="1@EUR0182 2355 26 0208000593">0182 2355 26 0208000593   &nbsp;</option>
																		
										<option value="2@EUR0182 5699 61 0201503804">0182 5699 61 0201503804   &nbsp;</option>
																		
										<option value="3@USD0182 5699 61 2012013039">0182 5699 61 2012013039   &nbsp;</option>
																		
										<option value="4@EUR0182 5699 62 0201504494">0182 5699 62 0201504494   &nbsp;</option>
																		
										<option value="5@EUR0182 5699 63 0201504074">0182 5699 63 0201504074   &nbsp;</option>
																		
										<option value="6@EUR0182 5699 64 0201502719">0182 5699 64 0201502719   &nbsp;</option>
																		
										<option value="7@EUR0182 5699 66 0010101079">0182 5699 66 0010101079   &nbsp;</option>
																		
										<option value="8@EUR0182 5699 66 0201502559">0182 5699 66 0201502559   &nbsp;</option>
																		
										<option value="9@EUR0182 5699 66 0201592633">0182 5699 66 0201592633   &nbsp;</option>
														
					</select>
			<tr>
				<td class="bgfila2"><p class="txtselec2">&nbsp;</p></td>
				<td class="bgfila2"><p class="txtselec2">&nbsp;</p></td>
				<td class="bgfila" colspan="6"><p class="txtselec2 left" >
					Nota: Para&nbsp;selección múltiple&nbsp;mantenga pulsada&nbsp;la tecla Control</p>
				</td>
			</tr>
								
				</td>
	
			</tr>
			<tr>
					<td class="bgfila2"><p class="txtselec2">&nbsp;</p></td>
				<td class="bgfila2" colspan="6"><p class="txtselec2 left darker">Importe:</p></td>
			</tr>
			<tr>  
				<td class="bgfila2" width="10%"><p class="txtselec2">&nbsp;</p></td>
				<td class="bgfila"width="20%"><p class="txtselec2">Desde:&nbsp;</p></td>
				<td class="bgfila" width="26%"><input name="imported" class="left" type=text size=20 maxlength="12"><p class="txtselec2 left">&nbsp;Eur.</p></td>
				<td class="bgfila" width="10%"><p class="txtselec2">Hasta:&nbsp;</p></td>
				<td class="bgfila" width="40%"><input name="importeh" class="left" type=text size=20 maxlength="12"><p class="txtselec2 left">&nbsp;Eur.</p>
			</tr>
				
				<tr>
					<td class="bgfila2"><p class="txtselec2">&nbsp;</p></td>
					<td class="bgfila2"><p class="txtselec2">Tipo:</p></td>
					<td class="bgfila2" colspan="5"> 
						<select class="left" name="concepto"> 
						</select>
					</td>		
				</tr>
			
			<tr>
				<td class="bgfila" colspan="2"><p class="txtselec2">Canal origen de la operación:</p></td>
				<td class="bgfila" colspan="4"> 
					<select name="canal" id="canal" class="left" onclick="javascript:quitar_foco(1)" ondblclick="javascript:quitar_foco(1);"> 
						<option value="0000">Todos</option>
						<!--<option value="0004">Banca a distancia</option>-->
						<option value="0004">Banca electrónica</option>
						<!-- <option value="0003">Banca Telefonica</option>-->
						<option value="0001">Oficinas</option>
						<!-- <option value="0002">Cajeros Automáticos</option>-->
					</select>
				</td>		
			</tr>
			
			<tr>
				<td colspan="6" align="left">
					<br />
					<p class="txtselec2 left">El periodo máximo consultable será de un mes y siempre con una antigüedad máxima de un año.</p></td>
			</tr>
		</table>					
		
	<br>	
		<tr>
			<td  align="right" class="noborder" height="40" colspan="5"><input type="submit" class="aceptar2 grandote" value="Aceptar"></td>	
		</tr>
	</td>
</tr>		
</table>		
</form>
</div>
<script language="javascript" src="/SESTLSB/mult/jquerylib.js"></script>	
<script language="javascript" src="/SESTLSB/mult/tux.js"></script>	
<script language="javascript" src="/SESTLSB/../SESKYOP/kyop_mult_web_pub/external/utilPortalKyop.js?Aaaa"></script>	
     
<script>
var $focused;
if (!$("#impresiontop").length) {
window.alert = function (message) { jAlert(message, "", function(){
	 if(typeof $focused != 'undefined') if ($focused.length > 0) $focused.focus();
});};
}
console.log("Antes de comprobar el producto");

console.info("Nombre proceso. ");
var bAccesoNet = false;
var sNombreProcesoPasos = "";
</script>

</body>
 
</html>
<SCRIPT type="text/javascript">
/*<![CDATA[*/ 
document.cookie = "IV_JCT=%2FSESTLSB; path=/; secure";
/*]]>*/ 
</SCRIPT>
