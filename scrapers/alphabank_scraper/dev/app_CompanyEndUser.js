function getTotalBalance(n) {
  for (var i = 0, t = 0; t < n.length; t++) i += n[t].AmountInEUR;
  return i
}
function getTotalTaxFree(n) {
  var t = 0;
  return n.forEach(function (n) {
    t += n.Total
  }),
  t < 0 && (t = 0),
  t
}
var __assign = this && this.__assign || Object.assign || function (n) {
  for (var t, r, i = 1, u = arguments.length; i < u; i++) {
    t = arguments[i];
    for (r in t) Object.prototype.hasOwnProperty.call(t, r) && (n[r] = t[r])
  }
  return n
},
arrayPrototype,
Donut,
ScrollerElement,
ScrollerController,
taxfreeDonut,
CustomUiSelectCtrl,
SearchStringState,
customUiSelectByKeyCtrl,
counter,
CustomUiSelectMatchCtrl,
compatdirectives,
AppInsights,
dynamicfieldsdirective,
shareddirectives,
navigation,
JobInfoUtils,
alphaPhoneDirectives,
alphaPhoneFilters,
P2PControllerCorp,
P2PEnableControllerCorp,
P2PDisableControllerCorp,
__extends,
alpha;
(function (n) {
  var t,
  r,
  i,
  u;
  n.services = angular.module('alpha.services', [
  ]);
  n.navigation = angular.module('navigation', [
    'ui.router'
  ]);
  n.shareddirectives = angular.module('shareddirectives', [
  ]);
  n.fileupload = angular.module('fileUpload', [
    'ngFileUpload'
  ]);
  n.alphaPhoneDirectives = angular.module('alphaPhoneDirectives', [
  ]);
  n.alphaPhoneFilters = angular.module('alphaPhoneFilters', [
  ]);
  t = [
    'angular-loading-bar',
    'ngTouch',
    'infinite-scroll',
    'ui.router',
    'ui.select',
    'alpha.common.services',
    'alpha.accounts',
    'alpha.cards',
    'alpha.messages',
    'alpha.oAuth',
    'alpha.loans',
    'alpha.overview',
    'alpha.profile',
    'alpha.transactions',
    'alpha.jobs',
    'alpha.transfers',
    'alpha.payments',
    'alpha.investments',
    'alpha.eBankingServices',
    'alpha.misc',
    'alpha.myBank',
    'alpha.iris',
    'alpha.cash',
    'navigation',
    'ui.bootstrap',
    'shareddirectives',
    'pasvaz.bindonce',
    'dynamicfieldsdirective',
    'fileUpload',
    'alphaPhoneDirectives',
    'alphaPhoneFilters'
  ];
  angular.version.minor >= 3 && (angular.module('compatdirectives', [
  ]), t.push('compatdirectives'), t.push('ngSanitize'));
  n.app = angular.module('alpha', t);
  r = [
  ];
  n.registerInterceptor = function (n) {
    r.push(n)
  };
  i = {
  };
  n.registerDecorator = function (n, t) {
    i[n] = t
  };
  angular.version.minor >= 3 && n.app.config(['$compileProvider',
  '$windowProvider',
  function (n, t) {
    var i = t.$get().document.querySelector('meta[name = \'AllowDebugOnClient\']');
    i && i.getAttribute('content') == 'true' || n.debugInfoEnabled(!1)
  }
  ]);
  u = [
    'otpOnceOff',
    'optInnerMessage'
  ];
  n.app.config(function () {
    for (var r, f = document.querySelector('meta[name = \'Role\']'), e = f.getAttribute('content') === 'Alphaphone', t = 0, i = u; t < i.length; t++) r = i[t],
    n.registerDecorator(r + 'Directive', [
      '$delegate',
      function (n) {
        return e ? n : [
        ]
      }
    ])
  });
  n.app.value('baseUrl', {
  });
  n.app.config(['$httpProvider',
  '$stateProvider',
  '$urlRouterProvider',
  '$provide',
  '$windowProvider',
  function (n, t, u, f, e) {
    r.sort(function (n, t) {
      return t.interceptorProcessIndex - n.interceptorProcessIndex
    }).forEach(function (t) {
      return n.interceptors.unshift(t.interceptorValue)
    });
    for (var o in i) f.decorator(o, i[o]);
    u.otherwise(function (n) {
      var i = n.get('$state'),
      t = e.$get().document.querySelector('meta[name = \'Role\']');
      t && t.getAttribute('content') == 'Alphaphone' ? i.go('root.services.alphaphone.cartolini')  : (t = e.$get().document.querySelector('meta[name = \'IsCashManagement\']'), t && t.getAttribute('content') == 'True' ? i.go('root.cash.overview')  : i.go('root.overview'))
    });
    t.state('root', {
      abstract: !0,
      url: '',
      template: '<div check-valid-of-state="" look-parents=true data-ui-view=""></div>',
      resolve: {
      }
    }).state('root.error', {
      url: '/error',
      templateUrl: 'Templates/common/Error'
    });
    f.decorator('paginationDirective', [
      '$delegate',
      function (n) {
        return n[0].templateUrl = 'Templates/common/Directives/angular-ui-pagination',
        n
      }
    ])
  }
  ]);
  n.app.config(['$provide',
  function (n) {
    n.decorator('$state', [
      '$delegate',
      function (n) {
        var t = n,
        i;
        return t.baseGo = t.go,
        i = function (n, i, r) {
          var u = t.get(n),
          e,
          o;
          if (u) {
            var f = u ? u.modal : !1,
            s = u.templateUrl,
            h = u.controller,
            c = u.controllerProvider,
            l = t.current.name;
            if (u.name == 'root.transfers.new.intrabank' && i == null && (i = {
              id: null,
              key: null,
              type: null
            }), e = function () {
              return t.current.name.indexOf('root.transfers.new') != - 1 || t.current.name.indexOf('root.payments') != - 1 && t.current.name.indexOf('root.payments.history') == - 1 && t.current.name.indexOf('root.payments.pending') == - 1 || t.current.name.indexOf('root.payments.recurring.list') != - 1 || t.current.name.indexOf('root.transfers.recurring.list') != - 1 || t.current.name.indexOf('root.cards.bonus.transfer') != - 1 || u.name === 'root.investments.e-timedeposit' && t.current.name.indexOf('root.investments.e-timedeposit.') !== - 1 || u.name === 'root.investments.e-timedeposit-bonus' && t.current.name.indexOf('root.investments.e-timedeposit-bonus.') !== - 1
            }, e() && (r = __assign({
            }, r, {
              reload: !0
            })), f && !u.initialized && (u.controller = 'ModalStateController as vm', u.controllerProvider = null, u.templateUrl = null, u.dialogController = h, u.dialogControllerProvider = c, u.dialogTemplateUrl = s, u.returnState = l, u.initialized = !0), f && u.returnState == '') return o = u.name.lastIndexOf('.'),
            u.returnState = u.name.substr(0, o),
            this.baseGo(u.returnState, i, r)
          }
          return this.baseGo(n, i, r)
        },
        t.go = i,
        n
      }
    ]);
    n.decorator('$state', [
      '$delegate',
      '$stateParams',
      '$timeout',
      function (n, t, i) {
        return n.forceReload = function () {
          var r = function () {
            n.transitionTo(n.current, angular.copy(t), {
              reload: !0,
              inherit: !0,
              notify: !0
            })
          };
          r();
          i(r, 100)
        },
        n
      }
    ])
  }
  ]);
  n.app.value('otpTransitioning', !1);
  n.app.value('userPassword', {
    valid: !1
  });
  n.app.run(['$http',
  '$rootScope',
  '$log',
  '$state',
  '$document',
  'baseUrl',
  '$modalStack',
  '$window',
  'userPassword',
  'SecurityService',
  'AppEventsService',
  'StateChangeValidationService',
  'WhiteListPathProvider',
  '$q',
  'RoleService',
  'ApprovalsService',
  'AppEventsService',
  'SharedDataService',
  'QueriesService',
  'OtherBankProductsService',
  'OtpHandlerService',
  'VersionFilterService',
  function (t, i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k, d) {
    var it,
    rt,
    g,
    ut,
    tt,
    nt;
    if (i.$on('$stateChangeError', function (t, i, f, e, o, s) {
      var c,
      h,
      a;
      (c = n.utils.getErrorMsg(s), s != 'ProductNotFound' && r.error('failed moving from ' + e.name + ' to state ' + i.name + '.\n Error message:' + (c || 'No error defined')), t.preventDefault(), s.otpNotAvailable) || (h = '', /^root\.[^\.]+\.details\./.test(i.name) ? (a = i.name.indexOf('.details.'), h = i.name.substr(0, a) + '.list')  : /^root\.investments\.[a-zA-Z\.]+details$/.test(i.name) ? h = 'root.investments.list' : /^root\.profile\.products/.test(i.name) ? h = n.constants.stateNames.settingsAlphaAccounts : /^root\.services\.estatements\.update\.[a-zA-Z]+/.test(i.name) && (h = 'root.services.estatements.' + i.name.substring(33) + 's-list'), l.tryPublish(n.common.services.AppEventsService.StateChangeErrorEvent, {
        toState: i && i.name,
        fromState: e && e.name,
        error: s,
        errorMsg: c || 'No error defined',
        fallbackState: n.utils.isUndefinedOrNullorWhiteSpace(h) ? 'root.error' : h
      }), n.utils.isUndefinedOrNullorWhiteSpace(h) ? u.go('root.error')  : u.go(h))
    }), i.$watch(function () {
      return o.getTop()
    }, function (n, t) {
      (null != n || null != t) && (null == t ? $('body').addClass('printmodal')  : $('body').removeClass('printmodal'))
    }), i.$on('$locationChangeSuccess', function () {
      f.scrollTop(0)
    }), e.value = f.find('head base') [0].getAttribute('href'), i.HideAmounts = !1, it = $('input[name=\'__RequestVerificationToken\']').val(), t.defaults.headers.common['x-xsrf-token'] = it, t.defaults.headers.common['application-id'] = 'web-banking', jQuery.ajaxSetup({
      headers: {
        'x-xsrf-token': it
      }
    }), a.registerGuard(function (t, r, u) {
      return c.getUserSessionInfo().then(function (t) {
        return i.OTPChannel = t.OTPChannel,
        n.utils.isUndefinedOrNullorWhiteSpace(t.MyBankReferenceID) ? (l.publish(n.common.services.AppEventsService.MyBankValidationSuccess_Event), {
          action: 'continue'
        })  : u.name == n.constants.stateNames.myBankState ? {
          action: 'block'
        }
         : {
          action: 'redirect',
          state: {
            to: n.constants.stateNames.myBankState,
            params: null
          }
        }
      })
    }), a.registerGuard(function (t, r, u) {
      return c.getUserSessionInfo().then(function (t) {
        return i.OTPChannel = t.OTPChannel,
        n.utils.isUndefinedOrNullorWhiteSpace(t.IrisReferenceID) ? {
          action: 'continue'
        }
         : u.name == n.constants.stateNames.irisState ? {
          action: 'block'
        }
         : {
          action: 'redirect',
          state: {
            to: n.constants.stateNames.irisState,
            params: null
          }
        }
      })
    }), a.registerGuard(function () {
      var t = {
        action: 'continue'
      };
      return p.IsRetail() ? y.when(t)  : d.getDatesAndOnLineStatus().then(function (n) {
        var t = {
          JobStatus: 3,
          Type: 2,
          Source: 1,
          GetCountOnly: !0,
          FromTransferDate: n.CurrentWorkingDate,
          ExpireJobs: !0
        };
        return w.getJobs(t)
      }).then(function (i) {
        return k.SetGlobalControllerData(n.server.Controllers.Badge, n.common.services.AppEventsService.jobApprovalCount, i.TotalRecords),
        b.publish(n.common.services.AppEventsService.jobApprovalCount),
        t
      }).catch (function () {
        return t
      })
    }), a.registerGuard(function (t, i, r) {
      var u = angular.element('meta[name="FDP"]'),
      f;
      return u && !n.utils.isUndefinedOrNullorWhiteSpace(u.attr('content')) && (f = new n.model.FDPActionInfo, f.Action = JSON.parse(u.attr('content')), f.Action != n.model.FDPActionDescriptor.Allow) ? y.when(r.name == 'root.transError' ? {
        action: 'block'
      }
       : {
        action: 'redirect',
        state: {
          to: 'root.transError',
          params: {
            id: 4
          }
        }
      })  : y.when({
        action: 'continue'
      })
    }), a.registerGuard(function (t, i, r) {
      var f = angular.element('meta[name="PaymentData"]'),
      u;
      return f && f.attr('content') ? (u = JSON.parse(f.attr('content')), !p.IsRetail() && u.PaymentId == '10226') ? y.when(r.name == 'root.transError' ? {
        action: 'block'
      }
       : {
        action: 'redirect',
        state: {
          to: 'root.transError',
          params: {
            id: 2
          }
        }
      })  : p.IsAdminUser() && !p.isAccessAllowed('ExecuteAllPayments ExecutePayments PrepareAllPayments PreparePayments') ? y.when(r.name == 'root.transError' ? {
        action: 'block'
      }
       : {
        action: 'redirect',
        state: {
          to: 'root.transError',
          params: {
            id: 3
          }
        }
      })  : p.IsApprovalUser() ? y.when(r.name == 'root.transError' ? {
        action: 'block'
      }
       : {
        action: 'redirect',
        state: {
          to: 'root.transError',
          params: {
            id: 1
          }
        }
      })  : u.PaymentId != '10353' ? p.isEndUser() || p.IsAdminUser() && p.isAccessAllowed('PrepareAllPayments PreparePayments') && !p.isAccessAllowed('ExecuteAllPayments ExecutePayments') ? y.when(r.name == 'root.jobs.new.payment.new' ? {
        action: 'block'
      }
       : {
        action: 'redirect',
        state: {
          to: 'root.jobs.new.payment.new',
          params: {
            id: u.PaymentId
          }
        }
      })  : y.when(r.name == n.constants.stateNames.newDynamicPaymentState ? {
        action: 'block'
      }
       : {
        action: 'redirect',
        state: {
          to: n.constants.stateNames.newDynamicPaymentState,
          params: {
            id: u.PaymentId
          }
        }
      })  : p.isEndUser() || p.IsAdminUser() && p.isAccessAllowed('PrepareAllPayments PreparePayments') && !p.isAccessAllowed('ExecuteAllPayments ExecutePayments') ? y.when(r.name == 'root.jobs.new.payment.new.custom' ? {
        action: 'block'
      }
       : {
        action: 'redirect',
        state: {
          to: 'root.jobs.new.payment.new.custom',
          params: {
            id: u.PaymentId
          }
        }
      })  : y.when(r.name == n.constants.stateNames.newCustomPaymentState ? {
        action: 'block'
      }
       : {
        action: 'redirect',
        state: {
          to: n.constants.stateNames.newCustomPaymentState,
          params: {
            id: u.PaymentId
          }
        }
      })  : y.when({
        action: 'continue'
      })
    }), a.registerGuard(function (t, i, r) {
      return c.getUserSessionInfo().then(function (t) {
        return t.PasswordValidityStatus != 0 ? r.name != n.constants.stateNames.forceChangePasswordState ? {
          action: 'redirect',
          state: {
            to: n.constants.stateNames.forceChangePasswordState,
            params: null
          }
        }
         : {
          action: 'block'
        }
         : (h.valid = !0, l.publish(n.common.services.AppEventsService.PasswordValidationSuccess_Event), {
          action: 'continue'
        })
      })
    }), a.registerGuard(function (t, i, r, u, f) {
      return c.getUserSessionInfo().then(function (t) {
        return t.Channel == 15 ? y.when({
          action: 'continue'
        })  : p.IsIndividualUser() && !f.alreadyRedirected ? c.getGDPRData({
        }).then(function (t) {
          return t.ResultCode == 0 && t.Consent.ConsentStatus == n.model.ConsentStatus.NotDeclared ? {
            action: 'redirect',
            state: {
              to: n.constants.stateNames.GDPRConsentState,
              params: null
            },
            newGuardState: {
              alreadyRedirected: !0
            }
          }
           : {
            action: 'continue'
          }
        }, function () {
          return {
            action: 'continue'
          }
        })  : y.when({
          action: 'continue'
        })
      })
    }, {
      alreadyRedirected: !1
    }), a.registerGuard(function (t, i, r, u, f) {
      var o = angular.element('meta[name="StateName"]'),
      e;
      return o && !n.utils.isUndefinedOrNullorWhiteSpace(o.attr('content')) ? (e = v.get(o.attr('content')), f.alreadyRedirected || null == e ? y.when({
        action: 'continue'
      })  : y.when(r.name == e.path ? {
        action: 'block'
      }
       : {
        state: {
          to: e.path,
          params: e.params
        },
        action: 'redirect',
        newGuardState: {
          alreadyRedirected: !0
        }
      }))  : y.when({
        action: 'continue'
      })
    }, {
      alreadyRedirected: !1
    }), a.registerFinishObserver(function () {
      l.publish(n.common.services.AppEventsService.AllStateGuardsCompleted_Event)
    }), a.registerGuard(function (t) {
      return c.getUserSessionInfo().then(function (i) {
        var r = i.UserInfo.Role,
        u,
        f,
        e;
        return r !== 1 && r !== 2 && r !== 16 && (t.name == n.constants.stateNames.profileDocumentUploadBegin || t.name == n.constants.stateNames.profileDocumentUploadConfirmDetails) ? {
          action: 'redirect',
          state: {
            to: n.constants.stateNames.profilePersonalState
          }
        }
         : (u = !1, i.Channel == 15 && (u = !0), u ? (f = k.GetControllerData(n.server.Controllers.ConfirmContactDetailsController, 'HasVisitedConfirmContactDetailsState'), e = null, e = f != null && f ? n.constants.stateNames.profileDocumentUploadBegin : n.constants.stateNames.profileDocumentUploadConfirmDetails, t.name != n.constants.stateNames.profileDocumentUploadBegin && t.name != n.constants.stateNames.profileDocumentUploadConfirmDetails ? {
          action: 'block'
        }
         : {
          action: 'redirect',
          state: {
            to: e
          }
        })  : {
          action: 'continue'
        })
      })
    }), i.$on('$stateChangeStart', function (n, t, i, r, u) {
      a.execute(n, t, i, r, u, [
        'root.error'
      ])
    }), i.$on('$stateChangeSuccess', function (n, t, r, f) {
      var e = $('meta[name=EnablePsd2OtherBankProductsFeatureFlag]').attr('content') == 'True' || $('meta[name=EnablePsd2OtherBankProductsFeatureFlag]').attr('content') == 'true';
      if (!e && t.name !== 'root.overview') switch (t.name) {
        case 'root.accounts.otherbanks':
        case 'root.accounts.otherBankAccountDetails':
        case 'root.cards.otherbanks':
        case 'root.cards.otherBankCardDetails':
          u.go('root.overview')
      }
      i.PreviousState = f
    }), rt = s.localStorage.getItem('OAuthRedirectInfoObject'), rt) if (g = JSON.parse(rt), ut = Math.floor(Date.now()), console.log('retrievedObject: ', g), console.log('Time Difference (in minutes): ', (ut - g.TimeStamp) / 60000), Math.floor((ut - g.TimeStamp) / 60000) <= 10) {
      console.log('Auto Trigger the service call.');
      switch (g.RequestedServiceType) {
        case 1:
          tt = n.common.services.AppEventsService.PSD2ProductBalanceServiceTrigger;
          g.CallingJsController == n.server.Controllers.OtherBankAccountsOverviewController ? nt = n.server.Controllers.OtherBankAccountsOverviewController : g.CallingJsController == n.server.Controllers.AccountsController ? nt = n.server.Controllers.AccountsController : g.CallingJsController == n.server.Controllers.CardsController ? nt = n.server.Controllers.CardsController : g.CallingJsController == n.server.Controllers.OtherBankCardsOverviewController && (nt = n.server.Controllers.OtherBankCardsOverviewController);
          break;
        case 3:
        case 4:
        case 5:
          tt = n.common.services.AppEventsService.PSD2ProductDetailsServiceTrigger;
          g.CallingJsController == n.server.Controllers.ProductOtherBankAddController ? nt = n.server.Controllers.ProductOtherBankAddController : g.CallingJsController == n.server.Controllers.OtherBankProductDetailsController ? nt = n.server.Controllers.OtherBankProductDetailsController : g.CallingJsController == n.server.Controllers.OtherBankAccountsOverviewController ? nt = n.server.Controllers.OtherBankAccountsOverviewController : g.CallingJsController == n.server.Controllers.AccountsController ? nt = n.server.Controllers.AccountsController : g.CallingJsController == n.server.Controllers.CardsController ? nt = n.server.Controllers.CardsController : g.CallingJsController == n.server.Controllers.OtherBankCardsOverviewController && (nt = n.server.Controllers.OtherBankCardsOverviewController);
          break;
        case 2:
          tt = n.common.services.AppEventsService.PSD2ProductTransactionsServiceTrigger;
          g.CallingJsController == n.server.Controllers.OtherBankAccountTransactionsController ? nt = n.server.Controllers.OtherBankAccountTransactionsController : g.CallingJsController == n.server.Controllers.OtherBankCardTransactionsController && (nt = n.server.Controllers.OtherBankCardTransactionsController)
      }
      k.SetGlobalControllerData(nt, tt, g);
      l.subscribe(n.common.services.AppEventsService.PSD2ClearLocalStorageTrigger, function () {
        s.localStorage.removeItem('OAuthRedirectInfoObject')
      })
    } else s.localStorage.removeItem('OAuthRedirectInfoObject')
  }
  ])
}) (alpha || (alpha = {
})),
function (n) {
  var t;
  (function (n) {
    var a = function () {
      function n() {
      }
      return n.defaultProductId = - 1,
      n
    }(),
    t,
    i,
    r,
    u,
    f,
    e,
    o,
    s,
    h,
    c,
    l;
    n.pci = a;
    t = function () {
      function n() {
      }
      return n.OVERVIEW_MODAL = 'overview_pop-up',
      n
    }();
    n.actionSerializerGroupName = t;
    i = function () {
      function n() {
      }
      return n.DONATION = 'donation',
      n.DONATION_WITH_CODE = 'donation-with-code',
      n
    }();
    n.dynamicPaymentTags = i;
    r = function () {
      function n() {
      }
      return n.fireDonationAccount = 'GR5401401060106002002007006',
      n
    }();
    n.constantAccounts = r;
    u = function () {
      function n() {
      }
      return n.PRE_PAID_CARDS = 'prepaidCards',
      n.CITIBANK_TRANSFERS = 'citibankTransfers',
      n.CITIBANK_PAYMENTS = 'citibankPayments',
      n.CSR = 'csr',
      n.BONUS = 'bonus',
      n.ONLINE_DEPOSIT = 'onlineDeposit',
      n.CITI_ONLINE = 'citiOnline',
      n.MORTGAGE_LOAN_PAYMENT = 'mortgageLoanPayment',
      n.PSD = 'psd',
      n.CHECK_FOR_FAILED_TRANSACTIONS = 'checkForFailedTrans',
      n.UPDATE_CONTACT_INFO = 'updateContactInfo',
      n.DELETE_PRODUCT_CHECK_TEMPLATE = 'checkTemplateInProductDeletion',
      n.MY_BANK = 'myBank',
      n.DEBIT_CARD_APPLICATION = 'debitCardApplication',
      n.PREPAID_CARD_APPLICATION = 'prepaidCardApplication',
      n.SAVE_SMART_REQUEST = 'savesmartRequest',
      n.CAPITAL_CONTROLS = 'capitalControls',
      n.TAX_FREE = 'taxfree',
      n.SECURITY_TIPS = 'securityTips',
      n.PIN_BY_SMS = 'pinBySMS',
      n.FIRE_DONATION = 'fireDonation',
      n.SMS_OTP_PROMPT = 'smsOtpPrompt',
      n.GET_CONSENT_PREVIOUS_VERSION = 'getConsentPreviousVersion',
      n.ASA_REDIRECTION = 'redirectToASA',
      n
    }();
    n.versionFilters = u;
    f = function () {
      function n() {
      }
      return n.taxCodeNumber = /^[0-9]{9}$/,
      n.socialSecurityNumber = /^[0-9]{11}$/,
      n.nameInitials = /^[A-ZΑ-Ω]{2}$/,
      n.vehicleNumber = /^([ΑΒΕΖΗΙΚΜΝΟΡΤΥΧαβεζηικμνορτυχABEZHIKMNOPTYXabezhikmnoptyx]{2,3})([0-9]{1,4})$/,
      n.email = /^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$/,
      n.emailDocUpload = /^(\s+$|([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$)/,
      n.vehicleCode_First = /^[0-9]{9}$/,
      n.vehicleCode_Second = /^[0-9]{11}$/,
      n.vehicleCode_Third = /^[0-9]{1,11}$/,
      n.diners_card = /^3(?:0[0-5]|[68][0-9])[0-9]{11}$/,
      n.remittanceInfo = /^(?=.*[0-9a-zA-ZΑ-ΩΆ-Ώα-ωά-ώϋΫϊΪΰΐ])[0-9A-Za-zΑ-ΩΆ-Ώα-ωά-ώϋΫϊΪΰΐ,/,\-,?,:,.,\',+,=,%,*,_,$,(,),{,},\[,\],\s]{3,35}$/,
      n.FTSRegex = /(?=.*[a-zA-ZΑ-ΩΆ-Ώα-ωά-ώ])([a-zA-ZΑ-ΩΆ-Ώα-ωά-ώ0-9ϋΫϊΪΰΐ\/\-?:().,'+{}% ]){3,35}$/,
      n
    }();
    n.regularPatterns = f;
    e = function () {
      function n() {
      }
      return n.internationalAccountProductId = 20999,
      n.simpleImportsAccountProductId = 20900,
      n.consumerLoanProductTypeId = 10046,
      n.dinersCardsTypeIdList = [
        1066,
        1071,
        1069,
        1070,
        1067,
        1068
      ],
      n
    }();
    n.general = e;
    o = function () {
      function n() {
      }
      return n.maxOverviewProducts = 10,
      n
    }();
    n.limits = o;
    s = function () {
      function n() {
      }
      return n.citibankVisa_productTypeId = 10282,
      n.citibankDiners_productTypeId = 1013,
      n.myBank_productTypeId = 19999,
      n.axa_special_productTypeId = 10226,
      n.vehicle_tax_productTypeId = 10228,
      n.iris_productTypeId = 19998,
      n
    }();
    n.payments = s;
    h = function () {
      function n() {
      }
      return n.incomeCat1 = 10000,
      n.incomeCat2 = 30000,
      n.incomeCat3 = 30000.01,
      n.cat1Percentage = 0.1,
      n.cat2Percentage = 0.15,
      n.cat3Percentage = 0.2,
      n.cat3MaxTaxFreeAmount = 30000,
      n
    }();
    n.taxFree = h;
    c = function () {
      function n() {
      }
      return n.rootState = 'root.overview',
      n.myBankState = 'root.myBank',
      n.irisState = 'root.iris',
      n.accountListState = 'root.accounts.list',
      n.accountListStateChild = 'root.accounts.list.child',
      n.accountsSettingsInAccountsState = 'root.accounts.settings',
      n.accountDetailsState = 'root.accounts.details',
      n.otherBankAccountDetailsState = 'root.accounts.otherBankAccountDetails',
      n.otherBankAccountTransactionsState = 'root.accounts.otherBankAccountDetails.transactions',
      n.accountCMDetailsState = 'root.cash.accounts.transactions',
      n.accountSettingsInAccountsState = 'root.accounts.details.edit',
      n.accountFileTransferState = 'root.accounts.fileTransfer',
      n.accountFileTransferRequestState = 'root.accounts.fileTransfer.request',
      n.accountFileTransferDownloadState = 'root.accounts.fileTransfer.download',
      n.settingsAddAccountInAccountsState = 'root.accounts.add',
      n.settingsAddAccountOtherBankInOtherBankAccountsState = 'root.accounts.otherbanks',
      n.accountSaveSmartState = 'root.accounts.save-smart',
      n.accountSaveSmartNewState = 'root.accounts.save-smart.newrequest',
      n.accountSaveSmartManagementState = 'root.accounts.save-smart.reqManage',
      n.accountSaveSmartViewState = 'root.accounts.save-smart.details',
      n.settingsAddCardInCardsState = 'root.cards.add',
      n.settingsAddCardOtherBankInOtherBankCardsState = 'root.cards.otherbanks',
      n.settingsAddLoanInLoansState = 'root.loans.add',
      n.settingsAddInvestmentInInvestmentsState = 'root.investments.add',
      n.cardListState = 'root.cards.list',
      n.cardDetailsState = 'root.cards.details',
      n.otherBankCardDetailsState = 'root.cards.otherBankCardDetails',
      n.otherBankCardTransactionsState = 'root.cards.otherBankCardDetails.transactions',
      n.debitCard = 'root.cards.debit',
      n.debitCardNew = 'root.cards.debit.newrequest',
      n.debitCardManagement = 'root.cards.debit.reqManage',
      n.debitCardView = 'root.cards.debit.details',
      n.prepaidCard = 'root.cards.prepaid',
      n.prepaidCardNew = 'root.cards.prepaid.newrequest',
      n.prepaidCardManagement = 'root.cards.prepaid.reqManage',
      n.prepaidCardView = 'root.cards.prepaid.details',
      n.loanListState = 'root.loans.list',
      n.loanDetailsState = 'root.loans.details',
      n.loanFileTransferState = 'root.loans.fileTransfer',
      n.loanFileTransferRequestState = 'root.loans.fileTransfer.request',
      n.loanFileTransferDownloadState = 'root.loans.fileTransfer.download',
      n.timedepositDetailsState = 'root.investments.termDepositsdetails',
      n.alphaMutualDetailsState = 'root.investments.alphamutualsdetails',
      n.alphaFinanceDetailsState = 'root.investments.alphaFinancedetails',
      n.alphaPrimeDetailsState = 'root.investments.alphaprime',
      n.alphaPrivateDetailsState = 'root.investments.alphaprivate',
      n.profileBaseState = 'root.profile',
      n.profilePersonalState = 'root.profile.personal',
      n.profileSecuritySettings = 'root.profile.security',
      n.changePasswordState = 'root.profile.security.changepassword',
      n.forceChangePasswordState = 'root.profile.security.forcechangepassword',
      n.profileTransferLimit = 'root.profile.security.transferlimit',
      n.GDPRConsentState = 'root.profile.consent',
      n.profileDocumentUpload = 'root.profile.documentUpload',
      n.profileDocumentUploadBegin = 'root.profile.documentUpload.beginFileUpload',
      n.profileDocumentUploadConfirmDetails = 'root.profile.documentUpload.confirmContactDetails',
      n.profileTransferLimitExchange = 'root.profile.transferlimitexchange',
      n.profileUserManagement = 'root.profile.usermanagement',
      n.profileEditPrivilegesUser = 'root.profile.usermanagement.editPrivilegesUser',
      n.profileEditChannelsUser = 'root.profile.usermanagement.editChannelsUser',
      n.profileUsers = 'root.profile.usermanagement.userManagementLandingPage',
      n.profileApprovalTables = 'root.profile.usermanagement.approvalTables',
      n.profileUserDeletionResult = 'root.profile.usermanagement.userManagementLandingPage.userDeletionResult',
      n.profileNewUser = 'root.profile.usermanagement.new',
      n.profileDeactivation = 'root.profile.security.deactivate',
      n.profileUserChangePassword = 'root.profile.usermanagement.userManagementLandingPage.changePass',
      n.profileAdminUserDeactivate = 'root.profile.usermanagement.deactivateAdmin',
      n.profileProductAbstract = 'root.profile.products',
      n.settingsAlphaAccounts = 'root.profile.products.accounts-list-alpha',
      n.settingsGreekAccounts = 'root.profile.products.accounts-list-greek',
      n.settingsOtherAccounts = 'root.profile.products.accounts-list-other',
      n.settingsAlphaCards = 'root.profile.products.cards-list-alpha',
      n.settingsOtherCards = 'root.profile.products.cards-list-other',
      n.settingsLoans = 'root.profile.products.loans-list',
      n.settingsInvestments = 'root.profile.products.investments-list',
      n.settingsCitiMapping = 'root.profile.products.citibank-list',
      n.settingsEmporikiMapping = 'root.profile.products.emporiki-list',
      n.settingsAccount = 'root.profile.products.account',
      n.settingsCard = 'root.profile.products.card',
      n.settingsLoan = 'root.profile.products.loan',
      n.settingsInvestment = 'root.profile.products.investment',
      n.settingsAddAccount = 'root.profile.products.add-account',
      n.settingsAddCard = 'root.profile.products.add-card',
      n.settingsAddLoan = 'root.profile.products.add-loan',
      n.newTransferState = 'root.transfers.new.intrabank',
      n.newIntraBankTransferState = 'root.transfers.new.intrabank',
      n.newInterBankTransferState = 'root.transfers.new.interbank',
      n.newInternationalTransferState = 'root.transfers.new.international',
      n.newCitiRetailTransferState = 'root.transfers.new.citibank',
      n.newEUTransferState = 'root.transfers.new.eeimports',
      n.newEUTransferStateTerms = 'root.transfers.new.eeimports.terms',
      n.newTransferMulti = 'root.transfers.new.multi',
      n.cashManagementOverview = 'root.cash.overview',
      n.cashManagementAccoundDetails = 'root.cash.accounts',
      n.newDiasBoGTransferState = 'root.cash.transfer.ToBankOfGreece',
      n.newBoGTransferState = 'root.cash.transfer.AccountAtBoG',
      n.newBoGTransferState_Transfer = 'root.cash.bog.transfer',
      n.newBoGTransferState_Job = 'root.cash.pending.AccountAtBoG',
      n.transfersHistoryAsIntrabankTemplate = 'root.transfers.myTransfers.addintrabank',
      n.transfersHistoryAsInterbankTemplate = 'root.transfers.myTransfers.addinterbank',
      n.transfersHistoryAsInternationalTemplate = 'root.transfers.myTransfers.addinternational',
      n.transfersHistoryAsEUImportsTemplate = 'root.transfers.myTransfers.addEUImports',
      n.transfersDeleteTemplate = 'root.transfers.myTransfers.list.delete',
      n.newPaymentsStatePrefix = 'root.payments.',
      n.paymentsSearch = 'root.payments.search',
      n.paymentsSearchSecondLevel = 'root.payments.search.child',
      n.newDynamicPaymentState = 'root.payments.new',
      n.newDonationPaymentState = 'root.payments.donation',
      n.newDonationWithCodePaymentState = 'root.payments.donation-with-code',
      n.newCustomPaymentState = 'root.payments.custom',
      n.newDynamicGroupPaymentState = 'root.payments.new-group',
      n.newAlphaLoanPaymentState = 'root.payments.alpha-loans',
      n.newLoanPaymentState = 'root.payments.loans',
      n.newHousingLoanPaymentState = 'root.payments.housing-loans',
      n.newCardPaymentState = 'root.payments.cards',
      n.newInterbankCardPaymentState = 'root.payments.interbank-cards',
      n.myPayments = 'root.payments.mypayments',
      n.paymentsLaborTicketState = 'root.payments.labor-ticket',
      n.paymentsVehicleTaxState = 'root.payments.vehicle-tax',
      n.eVoucherIssue = 'root.payments.e-voucher-issue',
      n.westernUnionPayment = 'root.payments.western-union',
      n.eydapProfiledPayment = 'root.payments.eydap-prof',
      n.hellenicAmericanFoundationPayment = 'root.payments.hellenic-american',
      n.transfersHistory = 'root.transfers.history',
      n.transfersPending = 'root.transfers.pending',
      n.transfersHistoryReexecute = 'root.transfers.history.reexecute',
      n.transfersHistoryCancel = 'root.transfers.history.cancel',
      n.paymentsHistory = 'root.payments.history',
      n.paymentsPending = 'root.payments.pending',
      n.paymentsHistoryCancel = 'root.payments.history.cancel',
      n.transactionCancel = '.cancel',
      n.intrabankDetails = '.intrabank-details',
      n.interbankDetails = '.interbank-details',
      n.citibankDetails = '.citibank-details',
      n.internationalDetails = '.international-details',
      n.euimportsDetails = '.euimports-details',
      n.internationalSwift = '.international-swift',
      n.internationalSwiftMT103 = '.international-swiftMT2013',
      n.transactionDetails = '.details',
      n.instantPaymentDetails = '.instantpayment-details',
      n.investmentsSettings = 'root.profile.products.investment',
      n.eStatementAccount = 'root.services.estatements.update.account',
      n.eStatementCard = 'root.services.estatements.update.card',
      n.eStatementLoan = 'root.services.estatements.update.loan',
      n.alertsAccounts = 'root.services.alerts.accounts.list',
      n.eTimeDeposit = 'root.investments.e-timedeposit',
      n.eTimeDepositNew = 'root.investments.e-timedeposit.newrequest',
      n.eTimeDepositManagement = 'root.investments.e-timedeposit.reqManage',
      n.eTimeDepositModification = 'root.investments.e-timedeposit.reqModify',
      n.eTimeDepositView = 'root.investments.e-timedeposit.details',
      n.eTimeDepositEdit = 'root.investments.e-timedeposit.edit',
      n.eTimeDepositWithdraw = 'root.investments.e-timedeposit.withdraw',
      n.eTimeDepositBonus = 'root.investments.e-timedeposit-bonus',
      n.eTimeDepositBonusNew = 'root.investments.e-timedeposit-bonus.newrequest',
      n.eTimeDepositBonusManagement = 'root.investments.e-timedeposit-bonus.reqManage',
      n.eTimeDepositBonusModification = 'root.investments.e-timedeposit-bonus.reqModify',
      n.eTimeDepositBonusView = 'root.investments.e-timedeposit-bonus.details',
      n.eTimeDepositBonusEdit = 'root.investments.e-timedeposit-bonus.edit',
      n.eTimeDepositBonusWithdraw = 'root.investments.e-timedeposit-bonus.withdraw',
      n.messagesState = 'root.messages',
      n.messageDetailsState = 'root.messages.detail',
      n.oAuthDanceBeginState = 'root.oauth.begin',
      n.newJobState = 'root.jobs',
      n.pendingJobs = 'root.jobs.pending',
      n.newPaymentJobState = 'root.jobs.new.payment',
      n.transfersJobIntrabank = 'root.jobs.new.transfer.intrabank',
      n.transfersJobInterbank = 'root.jobs.new.transfer.interbank',
      n.transfersJobInternational = 'root.jobs.new.transfer.international',
      n.transfersJobEEImports = 'root.jobs.new.transfer.eeimports',
      n.transfersJobMulti = 'root.jobs.new.transfer.multi',
      n
    }();
    n.stateNames = c;
    l = function () {
      function n() {
      }
      return n.debitNewRequest = 'debit-application-wizard',
      n.prepaidNewRequest = 'prepaid-application-wizard',
      n.savesmartNewRequest = 'savesmart-new-request-wizard',
      n
    }();
    n.eventNames = l
  }) (t = n.constants || (n.constants = {
  }))
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
  var n = Object.setPrototypeOf || {
    __proto__: [
    ]
  }
  instanceof Array && function (n, t) {
    n.__proto__ = t
  }
  || function (n, t) {
    for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
  };
  return function (t, i) {
    function r() {
      this.constructor = t
    }
    n(t, i);
    t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
  }
}(),
function (n) {
  var t;
  (function (i) {
    'use strict';
    var ut = function () {
      function n() {
        this.Message = null
      }
      return n
    }(),
    s,
    ft,
    et,
    y,
    p,
    ot,
    st,
    ht,
    ct,
    lt,
    c,
    du,
    gu,
    nf,
    at,
    tf,
    l,
    vt,
    w,
    r,
    yt,
    b,
    e,
    k,
    pt,
    wt,
    bt,
    kt,
    dt,
    o,
    u,
    gt,
    ni,
    ti,
    ii,
    ri,
    ui,
    fi,
    ei,
    oi,
    d,
    si,
    f,
    hi,
    ci,
    a,
    li,
    h,
    ai,
    vi,
    g,
    yi,
    pi,
    wi,
    bi,
    ki,
    di,
    gi,
    nr,
    tr,
    ir,
    rr,
    ur,
    fr,
    er,
    or,
    sr,
    hr,
    cr,
    lr,
    ar,
    vr,
    yr,
    pr,
    wr,
    br,
    kr,
    dr,
    gr,
    nu,
    tu,
    iu,
    ru,
    uu,
    fu,
    eu,
    ou,
    v,
    su,
    hu,
    nt,
    tt,
    cu,
    lu,
    au,
    it,
    rt,
    vu,
    yu,
    pu,
    wu,
    bu,
    rf,
    uf,
    ff,
    ku;
    i.Error = ut;
    s = function () {
      function n() {
        this.HasFatalErrors = !1;
        this.HasErrors = !1;
        this.ErrorMessage = null
      }
      return n
    }();
    i.ETimeDepositDetailsViewModel = s;
    ft = function (n) {
      function t() {
        return n !== null && n.apply(this, arguments) || this
      }
      return __extends(t, n),
      t
    }(s);
    i.EditETimeDepositViewModel = ft;
    et = function (n) {
      function t() {
        return n !== null && n.apply(this, arguments) || this
      }
      return __extends(t, n),
      t
    }(s);
    i.DiscountingETimeDepositViewModel = et;
    y = function () {
      function n() {
        this.HasFatalErrors = !1;
        this.HasErrors = !1;
        this.ErrorMessage = null;
        this.Duration = null;
        this.IsAmountBlocked = !0;
        this.StartDate = null;
        this.EndDate = null;
        this.Beneficiaries = [
        ];
        this.IsMobileInProfile = !1;
        this.IsEmailInProfile = !1
      }
      return Object.defineProperty(n.prototype, 'HasValidBeneficiaries', {
        get: function () {
          return null != this.Beneficiaries && this.Beneficiaries.length > 0
        },
        enumerable: !0,
        configurable: !0
      }),
      n
    }();
    i.NewETimeDepositViewModel = y;
    p = function (n) {
      function t() {
        return n !== null && n.apply(this, arguments) || this
      }
      return __extends(t, n),
      t
    }(s);
    i.ETimeDepositBonusDetailsViewModel = p;
    ot = function (n) {
      function t() {
        var t = n !== null && n.apply(this, arguments) || this;
        return t.UseProfileProduct = !1,
        t
      }
      return __extends(t, n),
      t
    }(p);
    i.EditETimeDepositBonusViewModel = ot;
    st = function (n) {
      function t() {
        return n !== null && n.apply(this, arguments) || this
      }
      return __extends(t, n),
      t
    }(y);
    i.NewETimeDepositBonusViewModel = st;
    ht = function () {
      function n() {
        this.otp = '';
        this.product = {
          BankProduct: {
          }
        };
        this.productValidationResult = {
        };
        this.ibanValidationResult = {
          RelatedBIC: ''
        };
        this.beneficiary = '';
        this.beneficiaryAddress = '';
        this.selectedBank = {
        };
        this.selectedCountry = {
        };
        this.selectedLoanType = {
        };
        this.selectedInvestmentType = {
        };
        this.investorAccount = '';
        this.securitiesAccount = '';
        this.successMessage = '';
        this.comesFromSuccessfullTransactionScreen = !1
      }
      return n
    }();
    i.AddProductViewModel = ht;
    ct = function () {
      function t(t, i, r, u, f, e, o) {
        this.Channel = 3;
        this.IsTransfer = !1;
        this.EntryDate = t.ProcessDate;
        this.DebitProduct = e ? t.DebitProduct.Code : '';
        this.CreditProduct = e ? f : '';
        this.CreditProductTypeID = parseInt(r) ? parseInt(r)  : 0;
        this.CreditProductType = r;
        this.Amount = e ? t.Amount : 0;
        this.AmountCurrency = e ? t.DebitProduct.Currency : '';
        this.TransferDate = e ? n.utils.toShortDateString(t.TransactionDate)  : '';
        this.TransactionUN = t.TransactionUN;
        this.TransactionAUN = t.TransactionAUN;
        this.Status = 0;
        this.StatusDescription = '';
        this.Details = [
        ];
        this.Type = i;
        this.IsProfileProduct = u;
        this.HasFixedCode = e;
        o && (this.BankName = o);
        this.comesFromSuccessfullTransactionScreen = !1
      }
      return t
    }();
    i.NewPaymentTransaction = ct;
    lt = function () {
      function t(t, i, r, u) {
        this.Channel = 3;
        this.IsTransfer = !0;
        this.EntryDate = t.ProcessDate;
        this.DebitProduct = t.DebitProduct.Code;
        this.CreditProduct = t.UseProfileProduct ? t.CreditAccount.Code : t.CreditAccountCode;
        this.CreditProductType = t.UseProfileProduct ? t.CreditAccount.TypeName : '';
        this.CreditProductTypeID = t.UseProfileProduct ? t.CreditAccount.TypeID : 0;
        this.Amount = t.Amount;
        var f = t;
        this.AmountCurrency = t.hasOwnProperty('Currency') ? n.server.Currency[parseInt(f.Currency.Currency)] : t.DebitProduct.Currency;
        this.TransferDate = n.utils.toShortDateString(t.TransactionDate);
        this.TransactionUN = t.TransactionUN;
        this.TransactionAUN = t.TransactionAUN;
        this.Status = 0;
        this.StatusDescription = '';
        this.Details = t.Details;
        this.Type = i;
        this.IsProfileProduct = r;
        u && (this.BankName = u);
        this.comesFromSuccessfullTransactionScreen = !1
      }
      return t
    }();
    i.NewTransaction = lt;
    c = function () {
      function t(t, i, r) {
        n.utils.isUndefinedOrNull(t) || n.utils.isUndefinedOrNull(i) ? (this.Name = 0, this.DataType = 0, this.Value = '')  : (this.Name = t, this.DataType = i, this.Value = r)
      }
      return t
    }();
    i.Detail = c,
    function (n) {
      n[n.VAT = 0] = 'VAT';
      n[n.PAYROLL_PERIOD = 1] = 'PAYROLL_PERIOD';
      n[n.PAYROLL_YEAR = 2] = 'PAYROLL_YEAR';
      n[n.CHARGE_AMOUNT = 3] = 'CHARGE_AMOUNT';
      n[n.BIC_CODE = 4] = 'BIC_CODE';
      n[n.COMPANY = 5] = 'COMPANY';
      n[n.LASTNAME = 6] = 'LASTNAME';
      n[n.FIRSTNAME = 7] = 'FIRSTNAME';
      n[n.ADDRESS = 8] = 'ADDRESS';
      n[n.REGION = 9] = 'REGION';
      n[n.PHONE = 10] = 'PHONE';
      n[n.FLOOR = 11] = 'FLOOR';
      n[n.DELIVERY = 12] = 'DELIVERY';
      n[n.POSTCODE = 13] = 'POSTCODE';
      n[n.BENEFICIARY_NAME = 14] = 'BENEFICIARY_NAME';
      n[n.SUBSCRIPTION_TYPE = 15] = 'SUBSCRIPTION_TYPE';
      n[n.EYDAP_Code1 = 16] = 'EYDAP_Code1';
      n[n.EYDAP_Code2 = 17] = 'EYDAP_Code2';
      n[n.EYDAP_Code3 = 18] = 'EYDAP_Code3';
      n[n.EYDAP_Code4 = 19] = 'EYDAP_Code4';
      n[n.EYDAP_CustomerName = 20] = 'EYDAP_CustomerName';
      n[n.EYDAP_Route = 21] = 'EYDAP_Route';
      n[n.EYDAP_ExpirationDate = 22] = 'EYDAP_ExpirationDate';
      n[n.BANK_NAME = 23] = 'BANK_NAME';
      n[n.INTERBANK_STATUS = 24] = 'INTERBANK_STATUS';
      n[n.INTERBANK_REJ_CODE = 25] = 'INTERBANK_REJ_CODE';
      n[n.INTERBANK_DKK_REJ_CODE = 26] = 'INTERBANK_DKK_REJ_CODE';
      n[n.SPECIAL_EX_CODE = 27] = 'SPECIAL_EX_CODE';
      n[n.IBAN = 28] = 'IBAN';
      n[n.VAT_AMOUNT = 29] = 'VAT_AMOUNT';
      n[n.STREET = 30] = 'STREET';
      n[n.STREET_NUMBER = 31] = 'STREET_NUMBER';
      n[n.IDENTITY = 32] = 'IDENTITY';
      n[n.PASSPORT = 33] = 'PASSPORT';
      n[n.COMMENTS = 34] = 'COMMENTS';
      n[n.EYDAPWEB = 35] = 'EYDAPWEB';
      n[n.ANONYMOUS = 36] = 'ANONYMOUS';
      n[n.DebitCurrencyAmount = 37] = 'DebitCurrencyAmount';
      n[n.DebitCurrencyExpenses = 38] = 'DebitCurrencyExpenses';
      n[n.AmountInEUR = 39] = 'AmountInEUR';
      n[n.AmountInUSD = 40] = 'AmountInUSD';
      n[n.ConvertionFlag = 41] = 'ConvertionFlag';
      n[n.BuyRate_IN = 42] = 'BuyRate_IN';
      n[n.MTFRate_IN = 43] = 'MTFRate_IN';
      n[n.SellRate_OUT = 44] = 'SellRate_OUT';
      n[n.BOP_CODE = 45] = 'BOP_CODE';
      n[n.ContactNumber = 46] = 'ContactNumber';
      n[n.TransferIdNumber = 47] = 'TransferIdNumber';
      n[n.ClearingSystem = 48] = 'ClearingSystem';
      n[n.ReversalNbr = 49] = 'ReversalNbr';
      n[n.RelaitedMsgDetails_MsgType = 50] = 'RelaitedMsgDetails_MsgType';
      n[n.RelaitedMsgDetails_IdNbr = 51] = 'RelaitedMsgDetails_IdNbr';
      n[n.RelaitedMsgDetails_EntryDate = 52] = 'RelaitedMsgDetails_EntryDate';
      n[n.CurrencyName = 53] = 'CurrencyName';
      n[n.CountryISOCode = 54] = 'CountryISOCode';
      n[n.CountryDescrEn = 55] = 'CountryDescrEn';
      n[n.CountryDescrEl = 56] = 'CountryDescrEl';
      n[n.ORDERER_NAME = 57] = 'ORDERER_NAME';
      n[n.ORDERER_ADDRESS = 58] = 'ORDERER_ADDRESS';
      n[n.BOP_ID_INTERNAL = 59] = 'BOP_ID_INTERNAL';
      n[n.FULLNAME = 60] = 'FULLNAME';
      n[n.BRIEF_DESCRIPTION = 61] = 'BRIEF_DESCRIPTION';
      n[n.ALPHANET_ID = 62] = 'ALPHANET_ID';
      n[n.GROUPED_ACCOUNTS_MODE = 63] = 'GROUPED_ACCOUNTS_MODE';
      n[n.ALTER_APPLICATION_TYPE = 64] = 'ALTER_APPLICATION_TYPE';
      n[n.ALTER_APPLICATION_ACTION_TYPE = 65] = 'ALTER_APPLICATION_ACTION_TYPE';
      n[n.CM_ENTRY_DATE = 66] = 'CM_ENTRY_DATE';
      n[n.MultiBalanceMode = 67] = 'MultiBalanceMode';
      n[n.MultiCashManagementMode = 68] = 'MultiCashManagementMode';
      n[n.X_AUTHENTICATION_LAST_ACCESS = 69] = 'X_AUTHENTICATION_LAST_ACCESS';
      n[n.CREATED_DATE = 70] = 'CREATED_DATE';
      n[n.DELETED_DATE = 71] = 'DELETED_DATE';
      n[n.SUBSCRIBER_ID = 72] = 'SUBSCRIBER_ID';
      n[n.SWIFT_CODE = 73] = 'SWIFT_CODE';
      n[n.SWIFT_OPTION_DAILY = 74] = 'SWIFT_OPTION_DAILY';
      n[n.SWIFT_OPTION_MT941 = 75] = 'SWIFT_OPTION_MT941';
      n[n.SWIFT_OPTION_MT942 = 76] = 'SWIFT_OPTION_MT942';
      n[n.SWIFT_OPTION_MT101 = 77] = 'SWIFT_OPTION_MT101';
      n[n.SICOM_URGENT_FLAG = 78] = 'SICOM_URGENT_FLAG';
      n[n.SICOM_MERCH_DESCR = 79] = 'SICOM_MERCH_DESCR';
      n[n.SICOM_INVOICE_NO = 80] = 'SICOM_INVOICE_NO';
      n[n.SICOM_INVOICE_DATE = 81] = 'SICOM_INVOICE_DATE';
      n[n.SICOM_MERCH_COUNTRY = 82] = 'SICOM_MERCH_COUNTRY';
      n[n.SICOM_APPLIC_CUSTOMER_NAME = 83] = 'SICOM_APPLIC_CUSTOMER_NAME';
      n[n.VALUE_DATE = 84] = 'VALUE_DATE';
      n[n.SICOM_TRANSFER_TYPE = 85] = 'SICOM_TRANSFER_TYPE';
      n[n.PartialChargeRequestedAmount = 86] = 'PartialChargeRequestedAmount';
      n[n.DiasDebitOnline_OrganizationCode = 87] = 'DiasDebitOnline_OrganizationCode';
      n[n.DiasDebitOnline_ProductCode = 88] = 'DiasDebitOnline_ProductCode';
      n[n.LMS_LiteralInternal = 89] = 'LMS_LiteralInternal';
      n[n.LMS_LiteralStatement = 90] = 'LMS_LiteralStatement';
      n[n.SWIFT_OPTION_MT202 = 91] = 'SWIFT_OPTION_MT202';
      n[n.Number_Of_Instalments = 92] = 'Number_Of_Instalments';
      n[n.RegistrationNumber = 93] = 'RegistrationNumber';
      n[n.InsurancePackageType = 94] = 'InsurancePackageType';
      n[n.Token = 95] = 'Token';
      n[n.SessionId = 96] = 'SessionId';
      n[n.CreditedBeneficiaries = 97] = 'CreditedBeneficiaries';
      n[n.ReceiptNumber = 98] = 'ReceiptNumber';
      n[n.CVV = 99] = 'CVV';
      n[n.ExpirationDate = 100] = 'ExpirationDate';
      n[n.IPAddress = 101] = 'IPAddress';
      n[n.PAYMENTWEB = 102] = 'PAYMENTWEB';
      n[n.NumberPaymentStatus = 103] = 'NumberPaymentStatus';
      n[n.eParavolo_foreasId = 104] = 'eParavolo_foreasId';
      n[n.eParavolo_foreasName = 105] = 'eParavolo_foreasName';
      n[n.eParavolo_categoryId = 106] = 'eParavolo_categoryId';
      n[n.eParavolo_categoryName = 107] = 'eParavolo_categoryName';
      n[n.eParavolo_typeID = 108] = 'eParavolo_typeID';
      n[n.eParavolo_typeName = 109] = 'eParavolo_typeName';
      n[n.eParavolo_code = 110] = 'eParavolo_code';
      n[n.eParavolo_Name = 111] = 'eParavolo_Name';
      n[n.eParavolo_LastCompanyName = 112] = 'eParavolo_LastCompanyName';
      n[n.eParavolo_FatherName = 113] = 'eParavolo_FatherName';
      n[n.eParavolo_AFM = 114] = 'eParavolo_AFM';
      n[n.eParavolo_motherName = 115] = 'eParavolo_motherName';
      n[n.eParavolo_additionalInfo = 116] = 'eParavolo_additionalInfo';
      n[n.eParavolo_eMail = 117] = 'eParavolo_eMail';
      n[n.eParavolo_dob = 118] = 'eParavolo_dob';
      n[n.eParavolo_mobilePhone = 119] = 'eParavolo_mobilePhone';
      n[n.eParavolo_iban = 120] = 'eParavolo_iban';
      n[n.RemmitanceInfo = 121] = 'RemmitanceInfo';
      n[n.PreferenceColor = 122] = 'PreferenceColor';
      n[n.PreferenceOrder = 123] = 'PreferenceOrder';
      n[n.PreferenceIsPrefered = 124] = 'PreferenceIsPrefered';
      n[n.DebitReason = 125] = 'DebitReason';
      n[n.CreditReason = 126] = 'CreditReason';
      n[n.FeeType = 127] = 'FeeType';
      n[n.DebitFees = 128] = 'DebitFees';
      n[n.TotalFees = 129] = 'TotalFees';
      n[n.Payment_Code1 = 130] = 'Payment_Code1';
      n[n.Payment_Code2 = 131] = 'Payment_Code2';
      n[n.Payment_Code3 = 132] = 'Payment_Code3';
      n[n.STOCK_MSAT = 133] = 'STOCK_MSAT';
      n[n.STOCK_ASAT = 134] = 'STOCK_ASAT';
      n[n.LaborTicket_Employer_AMKA = 135] = 'LaborTicket_Employer_AMKA';
      n[n.LaborTicket_Employer_Father = 136] = 'LaborTicket_Employer_Father';
      n[n.LaborTicket_Employer_Name = 137] = 'LaborTicket_Employer_Name';
      n[n.LaborTicket_Employer_SurName = 138] = 'LaborTicket_Employer_SurName';
      n[n.LaborTicket_Employer_TaxCode = 139] = 'LaborTicket_Employer_TaxCode';
      n[n.LaborTicket_Employee_AMKA = 140] = 'LaborTicket_Employee_AMKA';
      n[n.LaborTicket_Employee_Name = 141] = 'LaborTicket_Employee_Name';
      n[n.LaborTicket_Employee_SurName = 142] = 'LaborTicket_Employee_SurName';
      n[n.LaborTicket_Employee_FatherName = 143] = 'LaborTicket_Employee_FatherName';
      n[n.LaborTicket_Employee_Amount = 144] = 'LaborTicket_Employee_Amount';
      n[n.LaborTicket_SocialSecurity = 145] = 'LaborTicket_SocialSecurity';
      n[n.LaborTicket_SocialSecurity_Service = 146] = 'LaborTicket_SocialSecurity_Service';
      n[n.LaborTicket_Tax = 147] = 'LaborTicket_Tax';
      n[n.VehicleTax_OwnerAFM = 148] = 'VehicleTax_OwnerAFM';
      n[n.VehicleTax_VehicleNumber = 149] = 'VehicleTax_VehicleNumber';
      n[n.VehicleTax_Year = 150] = 'VehicleTax_Year';
      n[n.VehicleTax_VehicleType = 151] = 'VehicleTax_VehicleType';
      n[n.VehicleTax_Number = 152] = 'VehicleTax_Number';
      n[n.VehicleTax_OwnerName = 153] = 'VehicleTax_OwnerName';
      n[n.VehicleTax_PaymentCode_1 = 154] = 'VehicleTax_PaymentCode_1';
      n[n.VehicleTax_PaymentCode_2 = 155] = 'VehicleTax_PaymentCode_2';
      n[n.VehicleTax_PaymentCode_3 = 156] = 'VehicleTax_PaymentCode_3';
      n[n.Authorize_RequestCode = 157] = 'Authorize_RequestCode';
      n[n.Authorize_RequestVAT = 158] = 'Authorize_RequestVAT';
      n[n.Authorize_RequestAmount = 159] = 'Authorize_RequestAmount';
      n[n.Authorize_ResponseCode = 160] = 'Authorize_ResponseCode';
      n[n.Authorize_ResponseAmount = 161] = 'Authorize_ResponseAmount';
      n[n.Authorize_RequestCode1 = 162] = 'Authorize_RequestCode1';
      n[n.Authorize_RequestCode2 = 163] = 'Authorize_RequestCode2';
      n[n.LaborTicket_Key = 164] = 'LaborTicket_Key';
      n[n.LaborTicket_Status = 165] = 'LaborTicket_Status'
    }(du = i.DetailName || (i.DetailName = {
    })),
    function (n) {
      n[n.ManualEntry = 0] = 'ManualEntry';
      n[n.FromList = 1] = 'FromList'
    }(gu = i.OtherBankAccountSelectionMode || (i.OtherBankAccountSelectionMode = {
    })),
    function (n) {
      n[n.String = 0] = 'String';
      n[n.Integer = 1] = 'Integer';
      n[n.Decimal = 2] = 'Decimal';
      n[n.DateTime = 3] = 'DateTime'
    }(nf = i.DetailDataType || (i.DetailDataType = {
    }));
    at = function () {
      function n() {
      }
      return n
    }();
    i.BankAccountSummary = at,
    function (n) {
      n[n.Alert = 0] = 'Alert';
      n[n.Allow = 1] = 'Allow';
      n[n.Block = 2] = 'Block';
      n[n.Decline = 3] = 'Decline'
    }(tf = i.FDPActionDescriptor || (i.FDPActionDescriptor = {
    }));
    l = function () {
      function n() {
      }
      return n
    }();
    i.MenuItem = l,
    function (n) {
      n[n.None = 0] = 'None';
      n[n.Cancel = 1] = 'Cancel';
      n[n.Execute = 2] = 'Execute';
      n[n.Details = 3] = 'Details';
      n[n.SaveAsTemplate = 4] = 'SaveAsTemplate'
    }(vt = i.MenuActionDescriptor || (i.MenuActionDescriptor = {
    }));
    w = function () {
      function n(n, t, i, r, u, f) {
        f === void 0 && (f = vt.None);
        this.stateName = n;
        this.stateParams = t;
        this.data = i;
        this.titleResourceKey = r;
        this.stateOptions = u;
        this.actionDescriptor = f
      }
      return Object.defineProperty(n.prototype, 'stateParamsString', {
        get: function () {
          return this._stateParamsString == null && (this._stateParamsString = JSON.stringify(this.stateParams)),
          this._stateParamsString
        },
        enumerable: !0,
        configurable: !0
      }),
      n
    }();
    i.MenuAction = w;
    r = function (n) {
      function t(t, i, r, u) {
        r === void 0 && (r = !0);
        var f = n.call(this, t, i) || this;
        return f.stateName = t,
        f.stateParams = i,
        f.forDetailsPage = r,
        f.titleResourceKey = u,
        f
      }
      return __extends(t, n),
      t
    }(w);
    i.ProductMenuAction = r;
    yt = function () {
      function n(n, t) {
        this.title = n;
        this.callback = t
      }
      return n
    }();
    i.simpleProductMenuAction = yt,
    function (n) {
      n[n.NA = 0] = 'NA';
      n[n.EUR = 1] = 'EUR';
      n[n.USD = 2] = 'USD';
      n[n.GBP = 3] = 'GBP';
      n[n.CHF = 4] = 'CHF';
      n[n.AUD = 5] = 'AUD';
      n[n.CAD = 6] = 'CAD';
      n[n.SEK = 7] = 'SEK';
      n[n.DKK = 8] = 'DKK';
      n[n.NOK = 9] = 'NOK';
      n[n.CYP = 10] = 'CYP';
      n[n.JPY = 11] = 'JPY';
      n[n.ZAR = 12] = 'ZAR';
      n[n.HUF = 13] = 'HUF';
      n[n.HKD = 14] = 'HKD';
      n[n.ALL = 15] = 'ALL';
      n[n.SGD = 16] = 'SGD';
      n[n.PLN = 17] = 'PLN';
      n[n.CZK = 18] = 'CZK';
      n[n.BGN = 19] = 'BGN';
      n[n.DEM = 20] = 'DEM';
      n[n.FRF = 21] = 'FRF';
      n[n.BEF = 22] = 'BEF';
      n[n.ITL = 23] = 'ITL';
      n[n.NLG = 24] = 'NLG';
      n[n.TRY = 25] = 'TRY';
      n[n.ATS = 26] = 'ATS';
      n[n.FIM = 27] = 'FIM';
      n[n.IEP = 28] = 'IEP';
      n[n.ESP = 29] = 'ESP';
      n[n.PTE = 30] = 'PTE';
      n[n.SCP = 31] = 'SCP';
      n[n.NIP = 32] = 'NIP';
      n[n.MTL = 33] = 'MTL';
      n[n.KWD = 34] = 'KWD';
      n[n.SAR = 35] = 'SAR';
      n[n.JOD = 36] = 'JOD';
      n[n.IQD = 37] = 'IQD';
      n[n.NZD = 38] = 'NZD';
      n[n.ILS = 39] = 'ILS';
      n[n.ISK = 40] = 'ISK';
      n[n.GIP = 41] = 'GIP';
      n[n.SYP = 42] = 'SYP';
      n[n.AED = 43] = 'AED';
      n[n.OMR = 44] = 'OMR';
      n[n.CAF = 45] = 'CAF';
      n[n.WAF = 46] = 'WAF';
      n[n.GRD = 47] = 'GRD';
      n[n.MKD = 48] = 'MKD';
      n[n.RON = 49] = 'RON';
      n[n.PEN = 50] = 'PEN';
      n[n.RUB = 51] = 'RUB';
      n[n.CNY = 52] = 'CNY';
      n[n.SKK = 53] = 'SKK';
      n[n.HRK = 54] = 'HRK';
      n[n.RSD = 55] = 'RSD';
      n[n.THB = 56] = 'THB';
      n[n.KRW = 57] = 'KRW';
      n[n.LTT = 58] = 'LTT';
      n[n.UAH = 59] = 'UAH';
      n[n.TWD = 60] = 'TWD';
      n[n.MYR = 61] = 'MYR';
      n[n.INR = 62] = 'INR'
    }(b = i.Currency || (i.Currency = {
    }));
    e = function () {
      function t(t) {
        var s,
        h,
        i,
        c,
        r,
        u,
        f,
        e,
        o;
        this._country = '';
        this._bic = '';
        this._bank = '';
        this._beneficiary = '';
        this.Actions = [
        ];
        this.getProductActions = function () {
          return []
        };
        this.id = t && t.ProductID ? window.btoa(t.ProductID.toString())  : uuid.v4();
        this.BankProduct = t;
        n.utils.isUndefinedOrNull(t) || (this._hasError = !n.utils.isUndefinedOrNullorWhiteSpace(t.Description), n.utils.isUndefinedOrNull(this.Uses) || (this._hasEnquiry = this.Uses.indexOf(3) != - 1), s = b, h = t.Currency, this.Currency = s[parseInt(h)], this.CurrencyEnum = t.Currency, this.AmountInEUR = 0, this.IsCorporate = t.IsCorporate, (t.Details != null || t.Details != undefined) && (i = t.Details.filter(function (t) {
          return t.Name === n.server.DetailName.AmountInEUR
        }), i && i.length > 0 && (c = i[0].Value, this.AmountInEUR = parseFloat(c.replace(',', '.')))), t.CDINumber && (this.CDINumber = t.CDINumber), !n.utils.isUndefinedOrNull(this.BankProduct.Details) && this.BankProduct.Details.length > 0 && (r = this.BankProduct.Details.filter(function (n) {
          return n.Name == 55
        }), r.length > 0 && (this._country = r[0].Value), u = this.BankProduct.Details.filter(function (t) {
          return t.Name == n.server.DetailName.BIC_CODE
        }), u.length > 0 && (this._bic = u[0].Value), f = this.BankProduct.Details.filter(function (t) {
          return t.Name == n.server.DetailName.BANK_NAME
        }), f.length > 0 && (this._bank = f[0].Value), e = this.BankProduct.Details.filter(function (t) {
          return t.Name == n.server.DetailName.BENEFICIARY_NAME
        }), e.length > 0 && (this._beneficiary = e[0].Value), o = this.BankProduct.Details.filter(function (t) {
          return t.Name == n.server.DetailName.ADDRESS
        }), o.length > 0 && (this._beneficiaryAddress = o[0].Value)))
      }
      return Object.defineProperty(t.prototype, 'InvalidateMessage', {
        get: function () {
          return this.CategoryGroupType == n.server.CategoryGroupType.ACCOUNT ? 'InvalidateAccounts' : this.CategoryGroupType == n.server.CategoryGroupType.CARD ? 'InvalidateCards' : this.CategoryGroupType == n.server.CategoryGroupType.LOAN ? 'InvalidateLoans' : void 0
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'hasEstatementsActivated', {
        get: function () {
          return this.BankProduct.HasEStatementsActivated
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'listLine1', {
        get: function () {
          return n.utils.isUndefinedOrNullorWhiteSpace(this.BankProduct.Title) ? this.BankProduct.Code : this.BankProduct.Title
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'listLine2', {
        get: function () {
          return n.utils.isUndefinedOrNullorWhiteSpace(this.BankProduct.Title) ? '' : this.BankProduct.Code
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'listLine3', {
        get: function () {
          return n.utils.isUndefinedOrNullorWhiteSpace(this.BankProduct.Title) || this.BankProduct.Title === this.BankProduct.Code ? '' : this.BankProduct.Code
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'isEnquiry', {
        get: function () {
          return this.Uses.indexOf(3) != - 1
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'AvailableBalance', {
        get: function () {
          return !this.hasError && n.utils.isUndefinedOrNull(this.BankProduct.AvailableBalance) && this.isEnquiry ? 0 : this.BankProduct.AvailableBalance
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'AvailableBalanceSign', {
        get: function () {
          return this.AvailableBalance == 0 ? undefined : this.BankProduct.AvailableBalanceSign
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'hasAvailableBalance', {
        get: function () {
          return !n.utils.isUndefinedOrNull(this.AvailableBalance)
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'hasError', {
        get: function () {
          return this._hasError
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'NetBalance', {
        get: function () {
          return !this.hasError && n.utils.isUndefinedOrNull(this.BankProduct.NetBalance) ? 0 : this.BankProduct.NetBalance
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'NetBalanceSign', {
        get: function () {
          return this.NetBalance == 0 ? undefined : this.BankProduct.NetBalanceSign
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'TotalBloks', {
        get: function () {
          return !this.hasError && n.utils.isUndefinedOrNull(this.BankProduct.TotalBloks) && this.isEnquiry ? 0 : this.BankProduct.TotalBloks
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'CreditsCurDay', {
        get: function () {
          return !this.hasError && n.utils.isUndefinedOrNull(this.BankProduct.CreditsCurDay) && this.isEnquiry ? 0 : this.BankProduct.CreditsCurDay
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'DebitsCurDay', {
        get: function () {
          return !this.hasError && n.utils.isUndefinedOrNull(this.BankProduct.DebitsCurDay) && this.isEnquiry ? 0 : this.BankProduct.DebitsCurDay
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'Overdraft', {
        get: function () {
          return !this.hasError && n.utils.isUndefinedOrNull(this.BankProduct.Overdraft) && this.isEnquiry ? 0 : this.BankProduct.Overdraft
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'hasNetBalance', {
        get: function () {
          return !n.utils.isUndefinedOrNull(this.NetBalance)
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'Beneficiary', {
        get: function () {
          return this._beneficiary
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'BeneficiaryAddress', {
        get: function () {
          return this._beneficiaryAddress
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'Bank', {
        get: function () {
          return this._bank
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'Country', {
        get: function () {
          return this._country
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'Bic', {
        get: function () {
          return this._bic
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'HasAlerts', {
        get: function () {
          return this.BankProduct.AlertsCrossBorderCashActivated || this.BankProduct.AlertsCrossBorderSalesActivated || this.BankProduct.AlertsDomesticCashActivated || this.BankProduct.AlertsDomesticSalesActivated
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'Code', {
        get: function () {
          return this.BankProduct.Code
        },
        set: function () {
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'Description', {
        get: function () {
          return this.BankProduct.Description
        },
        set: function (n) {
          this.BankProduct.Description = n
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'TypeID', {
        get: function () {
          return this.BankProduct.TypeID
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'CategoryType', {
        get: function () {
          return this.BankProduct.CategoryType
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'TypeName', {
        get: function () {
          return this.BankProduct.TypeName
        },
        set: function () {
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'Title', {
        get: function () {
          return this.BankProduct.Title || this.BankProduct.Code
        },
        set: function (n) {
          this.BankProduct.Title = n
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'FriendlyName', {
        get: function () {
          return this.BankProduct.Title || 'ωωω'
        },
        enumerable: !0,
        configurable: !0
      }),
      t.prototype.GetFullyFriendlyCode = function (t) {
        return this.BankProduct.Title ? n.utils.formatString(t || '{0} ({1})', [
          this.BankProduct.Code,
          this.BankProduct.Title
        ])  : this.BankProduct.Code
      },
      Object.defineProperty(t.prototype, 'IsAlphaBankProduct', {
        get: function () {
          return this.BankProduct.IsAlphaBankProduct
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'Order', {
        get: function () {
          return this.BankProduct.Order
        },
        set: function (n) {
          this.BankProduct.Order = n
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'IsPreferred', {
        get: function () {
          return this.BankProduct.IsPreferred || !1
        },
        set: function (n) {
          this.BankProduct.IsPreferred = n
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'Uses', {
        get: function () {
          return this.BankProduct.Uses ? this.BankProduct.Uses.sort()  : [
          ]
        },
        set: function (n) {
          this.BankProduct.Uses = n
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'Color', {
        get: function () {
          return this.BankProduct.Color
        },
        set: function (n) {
          this.BankProduct.Color = n
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'ColorClass', {
        get: function () {
          return n.utils.isUndefinedOrNull(this.Color) ? 'color' : 'color color-' + this.Color
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'HasEnquiry', {
        get: function () {
          return this._hasEnquiry
        },
        enumerable: !0,
        configurable: !0
      }),
      t.prototype.getListState = function () {
        return ''
      },
      t.prototype.getDetailsState = function () {
        return ''
      },
      t.prototype.getTransactionsState = function () {
        return ''
      },
      t.prototype.getUpdateEstatementsState = function () {
        return ''
      },
      t.listComparer = function (t, i) {
        if (n.utils.isUndefinedOrNull(t) && !n.utils.isUndefinedOrNull(i)) return 1;
        if (!n.utils.isUndefinedOrNull(t) && n.utils.isUndefinedOrNull(i)) return - 1;
        if (t.IsPreferred && i.IsPreferred) return t.Order - i.Order;
        if (t.IsPreferred && !i.IsPreferred) return - 1;
        if (!t.IsPreferred && i.IsPreferred) return 1;
        if (!n.utils.isUndefinedOrNullorWhiteSpace(t.BankProduct.Title) && n.utils.isUndefinedOrNullorWhiteSpace(i.BankProduct.Title)) return - 1;
        if (n.utils.isUndefinedOrNullorWhiteSpace(t.BankProduct.Title) && !n.utils.isUndefinedOrNullorWhiteSpace(i.BankProduct.Title)) return 1;
        if (n.utils.isUndefinedOrNullorWhiteSpace(t.BankProduct.Title) || n.utils.isUndefinedOrNullorWhiteSpace(i.BankProduct.Title)) {
          var r = t.BankProduct.Code,
          u = i.BankProduct.Code;
          return t.CategoryGroupType == n.server.CategoryGroupType.ACCOUNT && (r = r.substr( - 15), u = u.substr( - 15)),
          parseInt(r) - parseInt(u)
        }
        return t.BankProduct.Title.toLocaleLowerCase().localeCompare(i.BankProduct.Title.toLocaleLowerCase())
      },
      t.overviewComparer = function (n, t) {
        return n.Order - t.Order
      },
      t.ProductBaseArrayToIproductArray = function (t) {
        if (n.utils.isUndefinedOrNull(t) || t.length <= 0) return [];
        return t.map(function (n) {
          return n.BankProduct.Currency = n.CurrencyEnum,
          n.BankProduct
        })
      },
      t.IProductArrayToProductBaseArray = function (t, i) {
        if (n.utils.isUndefinedOrNull(t) || t.length <= 0) return [];
        return t.map(function (t) {
          return n.model.ProductBase.IProductToProductBase(t, i)
        }).sort(n.model.ProductBase.listComparer)
      },
      t.IProductToProductBase = function (t, i) {
        var r,
        u,
        f,
        e,
        o;
        switch (i.toString()) {
          case n.server.CategoryGroupType.ACCOUNT.toString() :
            return r = new n.model.AccountProduct(t),
            r.CategoryGroupType = i,
            r;
          case n.server.CategoryGroupType.CARD.toString() :
            return u = new n.model.CardProduct(t),
            u.CategoryGroupType = i,
            u;
          case n.server.CategoryGroupType.LOAN.toString() :
            return f = new n.model.LoanProduct(t),
            f.CategoryGroupType = i,
            f;
          case n.server.CategoryGroupType.INVESTMENT.toString() :
          case n.server.CategoryGroupType.MUTUAL.toString() :
          case n.server.CategoryGroupType.PRIME_PRIVATE.toString() :
          case n.server.CategoryGroupType.STOCK.toString() :
          case n.server.CategoryGroupType.TIME_DEPOSITE.toString() :
            return e = new n.model.InvestmentProduct(t),
            e.CategoryGroupType = i,
            e
        }
        return o = new n.model.ProductBase(t),
        o.CategoryGroupType = i,
        o
      },
      t
    }();
    i.ProductBase = e;
    k = function (t) {
      function i(i) {
        var u = t.call(this, i) || this;
        return u.SelectedBank = {
        },
        u.m_IsoCountryCode = null,
        u.isPsd2OtherBankProduct = !1,
        u.getProductActions = function () {
          return u.Actions
        },
        i.Details && i.Details.some(function (t) {
          return t.Name === n.server.DetailName.IS_OTHER_BANK_PRODUCT && t.Value === 'true'
        }) && (u.isPsd2OtherBankProduct = !0),
        !n.utils.isUndefinedOrNull(i) && i.Uses && (u.BankProduct.Uses.indexOf(2) != - 1 && u.Actions.push(new r(n.constants.stateNames.newTransferState, {
          id: u.id,
          type: '0'
        })), u.Actions.push(new r(u.getDetailsState(), {
          id: u.id
        }, !1)), !u.BankProduct.HasEStatementsActivated && u.BankProduct.RequestTypes && u.BankProduct.RequestTypes.some(function (t) {
          return t == n.server.ProductRequestType.AccountsForEstatements
        }) && u.Actions.push(new r(n.constants.stateNames.eStatementAccount, {
          type: 38,
          id: u.id
        })), u.Actions.push(new r(n.constants.stateNames.settingsAccount, {
          id: u.id
        }))),
        i.Details && i.Details.some(function (t) {
          return t.Name === n.server.DetailName.CountryISOCode
        }) && (u.m_IsoCountryCode = i.Details.filter(function (t) {
          return t.Name === n.server.DetailName.CountryISOCode
        }) [0].Value),
        u.isPsd2OtherBankProduct && (u.Actions = [
        ], u.Actions.push(new r(u.getTransactionsState(), {
          id: u.id
        }, !1)), u.Actions.push(new r(n.constants.stateNames.settingsAccount, {
          id: u.id
        }))),
        u
      }
      return __extends(i, t),
      Object.defineProperty(i.prototype, 'OtherBankAvailableBalanceLastValidityDate', {
        get: function () {
          return this.BankProduct.OtherBankProductDetails != null ? this.BankProduct.OtherBankProductDetails.AvailableBalanceLastValidityDate : undefined
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'OtherBankGrossBalanceLastValidityDate', {
        get: function () {
          return this.BankProduct.OtherBankProductDetails != null ? this.BankProduct.OtherBankProductDetails.GrossBalanceLastValidityDate : undefined
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'OtherBankProductCurrency', {
        get: function () {
          return this.BankProduct.OtherBankProductDetails != null ? this.BankProduct.OtherBankProductDetails.Currency : undefined
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'OtherBankProductOwnerName', {
        get: function () {
          return this.BankProduct.OtherBankProductDetails != null ? this.BankProduct.OtherBankProductDetails.OwnerName : undefined
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'OtherBankProductScheme', {
        get: function () {
          return this.BankProduct.OtherBankProductDetails != null ? this.BankProduct.OtherBankProductDetails.ProductScheme : undefined
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'OtherBankProductCommitments', {
        get: function () {
          return this.BankProduct.OtherBankProductDetails != null ? this.BankProduct.OtherBankProductDetails.Commitments : undefined
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'OtherBankProductAccessRights', {
        get: function () {
          return this.BankProduct.OtherBankProductDetails != null ? this.BankProduct.OtherBankProductDetails.AccessRights : undefined
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'OtherBankProductFriendlyName', {
        get: function () {
          return this.BankProduct.OtherBankProductDetails != null ? this.BankProduct.OtherBankProductDetails.FriendlyName : undefined
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'OtherBankProductType', {
        get: function () {
          return this.BankProduct.OtherBankProductDetails != null ? this.BankProduct.OtherBankProductDetails.ProductType : undefined
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'OtherBankProductId', {
        get: function () {
          return this.BankProduct.OtherBankProductId != null ? this.BankProduct.OtherBankProductId : undefined
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'OtherBankTypeId', {
        get: function () {
          return this.BankProduct.OtherBankInfo != null ? this.BankProduct.OtherBankInfo.Type : undefined
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'OtherBankInfoLastUpdateOn', {
        get: function () {
          return this.BankProduct.OtherBankProdLastUpdateOn != null ? this.BankProduct.OtherBankProdLastUpdateOn : undefined
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'OtherBankName', {
        get: function () {
          return this.BankProduct.OtherBankInfo != null ? this.BankProduct.OtherBankInfo.Name : undefined
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'OtherBankProductIdentifier', {
        get: function () {
          return this.BankProduct.OtherBankInfo != null ? this.BankProduct.OBProductIdentifier : undefined
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'countryISOCode', {
        get: function () {
          return this.m_IsoCountryCode
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'hasEStatements', {
        get: function () {
          return this.BankProduct.RequestTypes.indexOf(n.server.ProductRequestType.AccountsForEstatements) != - 1
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'IsPassbookAccount', {
        get: function () {
          return n.utils.isUndefinedOrNull(this.BankProduct.IsPassbookAccount) ? !1 : this.BankProduct.IsPassbookAccount
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'DropdownBalance', {
        get: function () {
          return this.AvailableBalance
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'HasCheques', {
        get: function () {
          return this.BankProduct.HasCheques
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'HasBlocks', {
        get: function () {
          return n.utils.isUndefinedOrNull(this.Balance) ? !1 : this.Balance.Blocks > 0
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'HasHolds', {
        get: function () {
          return n.utils.isUndefinedOrNull(this.Balance) ? !1 : this.Balance.Holds > 0
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'HasUnclear', {
        get: function () {
          return n.utils.isUndefinedOrNull(this.Balance) ? !1 : this.Balance.UnclearAmount > 0
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'FiveOrMoreTabs', {
        get: function () {
          var n = 0;
          return this.HasCheques && (n += 1),
          this.HasBlocks && (n += 1),
          this.HasHolds && (n += 1),
          this.HasUnclear && (n += 1),
          n > 1 ? !0 : !1
        },
        enumerable: !0,
        configurable: !0
      }),
      i.prototype.getListState = function () {
        return n.constants.stateNames.accountListState
      },
      i.prototype.getTransactionsState = function () {
        return this.isPsd2OtherBankProduct ? n.constants.stateNames.otherBankAccountTransactionsState : 'root.accounts.details.transactions'
      },
      i.prototype.getDetailsState = function () {
        return this.isPsd2OtherBankProduct ? n.constants.stateNames.otherBankAccountDetailsState : n.constants.stateNames.accountDetailsState
      },
      i.prototype.getUpdateEstatementsState = function () {
        return 'root.services.estatements.update.account'
      },
      i
    }(e);
    i.AccountProduct = k;
    pt = function (t) {
      function i(i) {
        var r = t.call(this, i) || this;
        return r.m_hasError = !1,
        r.m_ErrorMessage = null,
        r.m_lastUpdateDate = null,
        r.m_IsCMOtherBank = !1,
        i.Details && i.Details.some(function (t) {
          return t.Name === n.server.DetailName.CMError
        }) && (r.m_hasError = !0, r.m_ErrorMessage = i.Details.filter(function (t) {
          return t.Name === n.server.DetailName.CMError
        }) [0].Value),
        i.Details && i.Details.some(function (t) {
          return t.Name === n.server.DetailName.CMLastUpdateDate
        }) && (r.m_lastUpdateDate = i.Details.filter(function (t) {
          return t.Name === n.server.DetailName.CMLastUpdateDate
        }) [0].Value),
        i.Details && i.Details.some(function (t) {
          return t.Name === n.server.DetailName.IsCMOtherBank
        }) && (r.m_IsCMOtherBank = i.Details.filter(function (t) {
          return t.Name === n.server.DetailName.IsCMOtherBank
        }) [0].Value.toLowerCase() === 'true'),
        r
      }
      return __extends(i, t),
      Object.defineProperty(i.prototype, 'HasCMError', {
        get: function () {
          return this.m_hasError
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'CMError', {
        get: function () {
          return this.m_ErrorMessage
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'IsCMOtherBank', {
        get: function () {
          return this.m_IsCMOtherBank
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'LastUpdateDate', {
        get: function () {
          return this.m_lastUpdateDate
        },
        enumerable: !0,
        configurable: !0
      }),
      i.prototype.getDetailsState = function () {
        return n.constants.stateNames.accountCMDetailsState
      },
      i
    }(k);
    i.CMAccountProduct = pt;
    wt = function (t) {
      function i(i, u) {
        var f = t.call(this, i) || this;
        return f.SelectedBank = {
        },
        f.isPsd2OtherBankProduct = !1,
        f.getProductActions = function () {
          return f.Actions
        },
        i.Details && i.Details.some(function (t) {
          return t.Name === n.server.DetailName.IS_OTHER_BANK_PRODUCT && t.Value === 'true'
        }) && (f.isPsd2OtherBankProduct = !0),
        !n.utils.isUndefinedOrNull(i) && i.Uses && (n.utils.isUndefinedOrNull(i.RequestTypes) || i.RequestTypes.indexOf(n.server.ProductRequestType.CardsForPayment) == - 1 || f.IsPrepaid || f.Actions.push(new r(n.constants.stateNames.newCardPaymentState, {
          id: f.id
        })), n.utils.isUndefinedOrNull(i.RequestTypes) || i.RequestTypes.indexOf(n.server.ProductRequestType.INTERBANK_CARDS) == - 1 || f.Actions.push(new r(n.constants.stateNames.newInterbankCardPaymentState, {
          id: f.id
        })), n.utils.isUndefinedOrNull(i.RequestTypes) || i.RequestTypes.indexOf(n.server.ProductRequestType.CardsForCashAdvance) == - 1 || i.CategoryType == 104 || f.Actions.push(new r(n.constants.stateNames.newTransferState, {
          id: f.id,
          type: '1'
        })), f.Actions.push(new r(f.getDetailsState(), {
          id: f.id
        }, !1)), !f.BankProduct.HasEStatementsActivated && f.BankProduct.IsMainCard && f.Actions.push(new r(n.constants.stateNames.eStatementCard, {
          type: 41,
          id: f.id
        })), f.IsPrepaid && (i.Uses.indexOf(1) != - 1 && f.Actions.push(new r('root.cards.prepaid.load', {
          id: f.id
        })), i.RequestTypes.indexOf(n.server.ProductRequestType.CardsForCashAdvance) != - 1 && f.Actions.push(new r('root.cards.prepaid.unload', {
          id: f.id
        }))), f.HasLoyalty && u && (f.LoyaltyScheme == 1 && f.Actions.push(new r('root.cards.bonus.transfer', {
          id: f.id
        })), f.HasEnquiry && f.LoyaltyScheme == 1 && f.Actions.push(new r('root.cards.bonus.inquiries', {
          id: f.id
        }))), f.Actions.push(new r(n.constants.stateNames.settingsCard, {
          id: f.id
        }))),
        f.isPsd2OtherBankProduct && (f.Actions = [
        ], f.Actions.push(new r(f.getTransactionsState(), {
          id: f.id
        }, !1)), f.Actions.push(new r(n.constants.stateNames.settingsCard, {
          id: f.id
        }))),
        f
      }
      return __extends(i, t),
      Object.defineProperty(i.prototype, 'OtherBankAvailableBalanceLastValidityDate', {
        get: function () {
          return this.BankProduct.OtherBankProductDetails != null ? this.BankProduct.OtherBankProductDetails.AvailableBalanceLastValidityDate : undefined
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'OtherBankGrossBalanceLastValidityDate', {
        get: function () {
          return this.BankProduct.OtherBankProductDetails != null ? this.BankProduct.OtherBankProductDetails.GrossBalanceLastValidityDate : undefined
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'OtherBankProductCurrency', {
        get: function () {
          return this.BankProduct.OtherBankProductDetails != null ? this.BankProduct.OtherBankProductDetails.Currency : undefined
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'OtherBankProductOwnerName', {
        get: function () {
          return this.BankProduct.OtherBankProductDetails != null ? this.BankProduct.OtherBankProductDetails.OwnerName : undefined
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'OtherBankProductScheme', {
        get: function () {
          return this.BankProduct.OtherBankProductDetails != null ? this.BankProduct.OtherBankProductDetails.ProductScheme : undefined
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'OtherBankProductCommitments', {
        get: function () {
          return this.BankProduct.OtherBankProductDetails != null ? this.BankProduct.OtherBankProductDetails.Commitments : undefined
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'OtherBankProductAccessRights', {
        get: function () {
          return this.BankProduct.OtherBankProductDetails != null ? this.BankProduct.OtherBankProductDetails.AccessRights : undefined
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'OtherBankCardCreditLimit', {
        get: function () {
          return this.BankProduct.OtherBankProductDetails != null ? this.BankProduct.OtherBankProductDetails.CardCreditLimit : undefined
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'OtherBankCardValidFromDate', {
        get: function () {
          return this.BankProduct.OtherBankProductDetails != null ? this.BankProduct.OtherBankProductDetails.CardValidFromDate : undefined
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'OtherBankCardValidToDate', {
        get: function () {
          return this.BankProduct.OtherBankProductDetails != null ? this.BankProduct.OtherBankProductDetails.CardValidToDate : undefined
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'OtherBankProductFriendlyName', {
        get: function () {
          return this.BankProduct.OtherBankProductDetails != null ? this.BankProduct.OtherBankProductDetails.FriendlyName : undefined
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'OtherBankProductType', {
        get: function () {
          return this.BankProduct.OtherBankProductDetails != null ? this.BankProduct.OtherBankProductDetails.ProductType : undefined
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'OtherBankProductId', {
        get: function () {
          return this.BankProduct.OtherBankProductId != null ? this.BankProduct.OtherBankProductId : undefined
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'OtherBankTypeId', {
        get: function () {
          return this.BankProduct.OtherBankInfo != null ? this.BankProduct.OtherBankInfo.Type : undefined
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'OtherBankInfoLastUpdateOn', {
        get: function () {
          return this.BankProduct.OtherBankProdLastUpdateOn != null ? this.BankProduct.OtherBankProdLastUpdateOn : undefined
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'OtherBankProductIdentifier', {
        get: function () {
          return this.BankProduct.OtherBankInfo != null ? this.BankProduct.OBProductIdentifier : undefined
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'OtherBankName', {
        get: function () {
          return this.BankProduct.OtherBankInfo != null ? this.BankProduct.OtherBankInfo.Name : undefined
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'HasFDHError', {
        get: function () {
          return this.BankProduct.DescriptionCode == - 1
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'IsMainCard', {
        get: function () {
          return this.BankProduct.IsMainCard
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'NoBalance', {
        get: function () {
          return !this.BankProduct.IsMainCard
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'DropdownBalance', {
        get: function () {
          return this.IsDebit ? this.CurrentBalance : this.AvailableBalance
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'HasLoyalty', {
        get: function () {
          return this.BankProduct.HasLoyalty
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'LoyaltyScheme', {
        get: function () {
          return this.BankProduct.LoyaltyScheme
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'LoyaltyPoints', {
        get: function () {
          return n.utils.isUndefinedOrNull(this._LoyaltyPoints) ? this.BankProduct.LoyaltyPoints : this._LoyaltyPoints
        },
        set: function (n) {
          this._LoyaltyPoints = n
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'LoyaltyPointsString', {
        get: function () {
          return this.BankProduct.LoyaltyPointsString
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'CreditLimit', {
        get: function () {
          return !this.hasError && n.utils.isUndefinedOrNull(this.BankProduct.CreditLimit) ? 0 : this.BankProduct.CreditLimit
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'hasCreditLimit', {
        get: function () {
          return !n.utils.isUndefinedOrNull(this.CreditLimit)
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'hasCurrentBalance', {
        get: function () {
          return !n.utils.isUndefinedOrNull(this.CurrentBalance)
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'CurrentBalance', {
        get: function () {
          return !this.hasError && n.utils.isUndefinedOrNull(this.BankProduct.CurrentBalance) ? 0 : this.BankProduct.CurrentBalance
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'CurrentBalanceSign', {
        get: function () {
          return this.CurrentBalance == 0 ? undefined : this.BankProduct.CurrentBalanceSign
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'IsPrepaid', {
        get: function () {
          return this.CategoryType == 104
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'IsDebit', {
        get: function () {
          return this.IsCorporateDebit || this.CategoryType == 102 || this.CategoryType == 103
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'IsCorporateDebit', {
        get: function () {
          return (this.CategoryType == 102 || this.CategoryType == 103) && !this.IsMainCard && this.BankProduct.IsCorporateCard
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'IsCorporateCredit', {
        get: function () {
          return this.CategoryType == 101 && !this.IsMainCard && this.BankProduct.IsCorporateCard
        },
        enumerable: !0,
        configurable: !0
      }),
      i.prototype.getListState = function () {
        return n.constants.stateNames.cardListState
      },
      i.prototype.getTransactionsState = function () {
        return this.isPsd2OtherBankProduct ? n.constants.stateNames.otherBankCardTransactionsState : 'root.cards.details.transactions'
      },
      i.prototype.getDetailsState = function () {
        return this.isPsd2OtherBankProduct ? n.constants.stateNames.otherBankCardDetailsState : n.constants.stateNames.cardDetailsState
      },
      i.prototype.getUpdateEstatementsState = function () {
        return 'root.services.estatements.update.card'
      },
      i
    }(e);
    i.CardProduct = wt;
    bt = function (t) {
      function i(i) {
        var u = t.call(this, i) || this;
        return u.getProductActions = function () {
          return u.Actions
        },
        !n.utils.isUndefinedOrNull(i) && i.Uses && (n.utils.isUndefinedOrNull(i.RequestTypes) || i.RequestTypes.indexOf(n.server.ProductRequestType.LoansForPayment) == - 1 || (i.TypeID != 10046 ? u.Actions.push(new r(n.constants.stateNames.newAlphaLoanPaymentState, {
          id: u.id
        }))  : u.Actions.push(new r(n.constants.stateNames.newLoanPaymentState, {
          id: u.id
        }))), u.BankProduct.Uses.indexOf(2) != - 1 && u.Actions.push(new r(n.constants.stateNames.newTransferState, {
          id: u.id,
          type: '2'
        })), u.Actions.push(new r(u.getDetailsState(), {
          id: u.id
        }, !1)), u.IsMortgageLoan && !u.BankProduct.HasEStatementsActivated && u.Actions.push(new r(n.constants.stateNames.eStatementLoan, {
          type: 39,
          id: u.id
        })), u.Actions.push(new r(n.constants.stateNames.settingsLoan, {
          id: u.id
        }))),
        u
      }
      return __extends(i, t),
      Object.defineProperty(i.prototype, 'HasFDHError', {
        get: function () {
          return this.BankProduct.DescriptionCode == - 1
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'hasEStatements', {
        get: function () {
          return this.TypeID == 2001 || this.TypeID == 2002 || this.TypeID == 2003 ? !0 : !1
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'DropdownBalance', {
        get: function () {
          return this.IsBusinessLoan || this.IsSigloConsumerLoan ? this.NetBalance : this.IsConsumerLoan || this.IsFdhLoan ? this.CurrentBalance : this.AvailableBalance
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'HasCheques', {
        get: function () {
          return this.BankProduct.HasCheques
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'IsBusinessLoan', {
        get: function () {
          return this.IsMortgageLoan && this.BankProduct.Code.substring(0, 3) == '989'
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'IsCardLoan', {
        get: function () {
          return this.IsFdhLoan && this.BankProduct.Code.substring(0, 3) == '999'
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'IsAlphaBankProduct', {
        get: function () {
          return !0
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'HasFDHBalance', {
        get: function () {
          return this.LoanType == 1
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'HasLMSBalance', {
        get: function () {
          return this.LoanType == 2
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'HasHostBalance', {
        get: function () {
          return this.LoanType == 3
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'IsConsumerLoan', {
        get: function () {
          return this.CategoryType == 201
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'IsSigloConsumerLoan', {
        get: function () {
          return this.CategoryType == 201 && this.TypeID == 10046
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'IsFdhLoan', {
        get: function () {
          return this.CategoryType == 201001
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'IsMortgageLoan', {
        get: function () {
          return this.CategoryType == 202 || this.IsFdhLoan && this.TypeID == 2002
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'hasCurrentBalance', {
        get: function () {
          return !n.utils.isUndefinedOrNull(this.CurrentBalance)
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'CurrentBalance', {
        get: function () {
          return !this.hasError && n.utils.isUndefinedOrNull(this.BankProduct.CurrentBalance) ? 0 : this.BankProduct.CurrentBalance
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'CurrentBalanceSign', {
        get: function () {
          return this.CurrentBalance == 0 ? undefined : this.BankProduct.CurrentBalanceSign
        },
        enumerable: !0,
        configurable: !0
      }),
      i.prototype.getListState = function () {
        return n.constants.stateNames.loanListState
      },
      i.prototype.getDetailsState = function () {
        return n.constants.stateNames.loanDetailsState
      },
      i.prototype.getUpdateEstatementsState = function () {
        return 'root.services.estatements.update.loan'
      },
      Object.defineProperty(i.prototype, 'setProductActions', {
        set: function (n) {
          this.Actions = n
        },
        enumerable: !0,
        configurable: !0
      }),
      i
    }(e);
    i.LoanProduct = bt;
    kt = function (t) {
      function i(i) {
        var u = t.call(this, i) || this;
        return u.isETimeDeposit = !1,
        u.getProductActions = function () {
          return u.Actions
        },
        u.IsTimeDeposit ? (u.Actions.push(new r(n.constants.stateNames.settingsAddInvestmentInInvestmentsState, {
          productTypeScope: 'local',
          productTypeFamily: 'investment'
        }, !0, 'burger.root.investments')), u.Actions.push(new r(n.constants.stateNames.investmentsSettings, {
          id: u.id
        })))  : u.IsMutual ? (u.Actions.push(new r(n.constants.stateNames.settingsAddInvestmentInInvestmentsState, {
          productTypeScope: 'local',
          productTypeFamily: 'investment'
        }, !0, 'burger.root.investments2')), u.Actions.push(new r(n.constants.stateNames.investmentsSettings, {
          id: u.id
        })))  : u.IsAlphaFinance && u.Actions.push(new r(n.constants.stateNames.settingsAddInvestmentInInvestmentsState, {
          productTypeScope: 'local',
          productTypeFamily: 'investment'
        }, !0, 'burger.root.investments3')),
        u
      }
      return __extends(i, t),
      Object.defineProperty(i.prototype, 'DropdownBalance', {
        get: function () {
          return this.AvailableBalance
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'IsAlphaBankProduct', {
        get: function () {
          return !0
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'Stock', {
        get: function () {
          return this.BankProduct.Stock
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'StockCurrency', {
        get: function () {
          var n = b;
          return n[this.BankProduct.Stock.Currency]
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'hasCurrentBalance', {
        get: function () {
          return !n.utils.isUndefinedOrNull(this.CurrentBalance)
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'CurrentBalance', {
        get: function () {
          return !this.hasError && n.utils.isUndefinedOrNull(this.BankProduct.CurrentBalance) ? 0 : this.BankProduct.CurrentBalance
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'IsMutual', {
        get: function () {
          return this.CategoryType == 1006
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'IsTimeDeposit', {
        get: function () {
          return this.CategoryType == 4
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'IsAlphaFinance', {
        get: function () {
          return this.CategoryType == 10005
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'IsAlphaPrime', {
        get: function () {
          return this.CategoryType == 3001 ? this.BankProduct.TypeID == 3002 : !1
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'IsAlphaPrivate', {
        get: function () {
          return this.CategoryType == 3001 ? this.BankProduct.TypeID == 3001 : !1
        },
        enumerable: !0,
        configurable: !0
      }),
      i.prototype.getDetailsState = function () {
        return this.IsTimeDeposit ? n.constants.stateNames.timedepositDetailsState : this.IsMutual ? n.constants.stateNames.alphaMutualDetailsState : this.IsAlphaFinance ? n.constants.stateNames.alphaFinanceDetailsState : this.IsAlphaPrime ? n.constants.stateNames.alphaPrimeDetailsState : this.IsAlphaPrivate ? n.constants.stateNames.alphaPrivateDetailsState : n.constants.stateNames.timedepositDetailsState
      },
      i
    }(e);
    i.InvestmentProduct = kt;
    dt = function (n) {
      function t(t) {
        return n.call(this, t) || this
      }
      return __extends(t, n),
      t
    }(e);
    i.IkaProduct = dt;
    o = function () {
      function t() {
        this.IsJobSubmission = !1;
        this.JobName = null;
        this.HasErrors = !1;
        this.ErrorMessage = '';
        this.HasExceededLimit = !1;
        this.ExpensesServiceType = 100;
        this.PaymentType = 0;
        this.Fees = {
        };
        this.UseProfileProduct = !0;
        this.TransferMethodImmediate = !0;
        this.IsTransactionSuccessful = function (t) {
          return t == n.server.TransactionStatus.Succeded
        };
        this.IsTransactionFailed = function (t) {
          return this.HasError = !0,
          t == n.server.TransactionStatus.Failed || t == n.server.TransactionStatus.Invalid
        };
        this.CanSelectImmediate = !0;
        this.CanSelectBlock = !0
      }
      return Object.defineProperty(t.prototype, 'CurrentWorkingDate', {
        get: function () {
          return this._CurrentWorkingDate
        },
        set: function (t) {
          this._CurrentWorkingDate = t;
          this.CurrentWorkingDateValue = n.utils.parseDateString(t)
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'NextWorkingDate', {
        get: function () {
          return this._NextWorkingDate
        },
        set: function (t) {
          this._NextWorkingDate = t;
          this.NextWorkingDateValue = n.utils.parseDateString(t);
          this.TransactionDate = this.CurrentWorkingDateValue
        },
        enumerable: !0,
        configurable: !0
      }),
      t.prototype.setDatesAndOnlineStatus = function (n) {
        n.ResultCode == 0 ? (this.CurrentWorkingDate = n.CurrentWorkingDate, this.NextWorkingDate = n.NextWorkingDate, this.DIASPromptDate = n.DIASPromptDate, this.PaymentPromptDate = n.PaymentPromptDate, this.Online = n.OnLine, this.Online ? (this.CanSelectImmediate = !0, this.CanSelectBlock = !0, this.IsJobSubmission || (this.IsAmountBlocked = !0))  : (this.IsJobSubmission || (this.IsAmountBlocked = !1), this.TransferMethodImmediate = !1, this.CanSelectImmediate = !1, this.CanSelectBlock = !1))  : (this.HasErrors = !0, this.ErrorMessage = n.Error ? n.Error.Message : 'Πρόβλημα κατα την εκτέλεση της συναλλαγής (GetDatesAndOnlineStatus)')
      },
      t
    }();
    i.PaymentInfo = o;
    u = function (t) {
      function i() {
        var n = t !== null && t.apply(this, arguments) || this;
        return n.HasErrors = !1,
        n.ErrorMessage = '',
        n.ExpensesServiceType = 100,
        n.PaymentType = 0,
        n.ExecutionMethod = 0,
        n.DontPrefixDisplayName = !1,
        n.OrderDescription = '',
        n._UseProfilePaymentCode = !1,
        n.WantsInstallments = !1,
        n.Installments = 0,
        n.TotalAmountLiteral = '',
        n.TransferSource = 0,
        n.PaymentCode = '',
        n.PurePaymentCode = '',
        n.ExpirationYear = {
        },
        n.ExpirationMonth = {
        },
        n.Details = [
        ],
        n.DynamicValues = {
        },
        n.OptionsFor = {
        },
        n
      }
      return __extends(i, t),
      i.prototype.SupportsExecution = function (n) {
        return (this.ExecutionMethod & n) == n
      },
      Object.defineProperty(i.prototype, 'SupportsImmediateMethod', {
        get: function () {
          return this.SupportsExecution(2) || this.SupportsExecution(8)
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'SupportsOnlyImmediateMethod', {
        get: function () {
          return this.ExecutionMethod == 2 || this.ExecutionMethod == 8
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'SupportsScheduledMethod', {
        get: function () {
          return this.SupportsExecution(4)
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'SupportsAllMethods', {
        get: function () {
          return this.SupportsImmediateMethod && this.SupportsScheduledMethod
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'SupportsDct', {
        get: function () {
          return this.ExecutionMethod == 2 || this.SupportsScheduledMethod && this.SupportsExecution(2)
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'PredefinedPaymentCode', {
        get: function () {
          return this._PredefinedPaymentCode
        },
        set: function (t) {
          this._PredefinedPaymentCode = t;
          var i = this;
          t && t.BankProduct.Details.forEach(function (t) {
            var r = n.server.DetailName[t.Name];
            i.DynamicValues[r] = t.Value
          })
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'UseProfilePaymentCode', {
        get: function () {
          return this._UseProfilePaymentCode
        },
        set: function (t) {
          this._UseProfilePaymentCode = t;
          var i = this;
          t == !1 ? this.PredefinedPaymentCode && this.PredefinedPaymentCode.BankProduct.Details.forEach(function (t) {
            var r = n.server.DetailName[t.Name];
            i.DynamicValues[r] = ''
          })  : t == !0 && this.PredefinedPaymentCode && this.PredefinedPaymentCode.BankProduct.Details.forEach(function (t) {
            var r = n.server.DetailName[t.Name];
            i.DynamicValues[r] = t.Value
          })
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'SelectedInstallmentsOption', {
        get: function () {
          return this._SelectedInstallmentsOption
        },
        set: function (n) {
          this._SelectedInstallmentsOption = n;
          this.Installments = n ? parseInt(this._SelectedInstallmentsOption)  : 0
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'PayloadYear', {
        get: function () {
          return this.ExpirationYear.year ? this.ExpirationYear.year : 0
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'PayloadMonth', {
        get: function () {
          return this.ExpirationMonth.month ? this.ExpirationMonth.month : 0
        },
        enumerable: !0,
        configurable: !0
      }),
      i.prototype.PopulateDetails = function (t) {
        var i = this;
        i.Details = [
        ];
        t.Fields.map(function (t) {
          if (t.DetailName != undefined && t.DetailName != '') {
            var r = new n.model.Detail;
            r.Name = parseInt(t.DetailName);
            r.DataType = parseInt(t.DetailType);
            r.Value = t.IsVisible ? t.FieldType == 3 || t.FieldType == 5 ? n.utils.toShortDateString(i.DynamicValues[t.FieldName])  : t.FieldType == 4 ? i.DynamicValues[t.FieldName].Val : i.DynamicValues[t.FieldName] : t.DefaultValue;
            n.utils.isUndefinedOrNull(r.Value) && (r.Value = '');
            i.Details.push(r)
          }
        })
      },
      i.prototype.CreatePaymentMask = function (n) {
        var t = this,
        f,
        r,
        i,
        e;
        if (t.PaymentCode = '', t.PurePaymentCode = '', n.PaymentCodeMask != null && n.PaymentCodeMask != '' && n.PaymentCodeMask != undefined) {
          for (f = n.PaymentCodeMask, f = f.replace(/{/g, ''), r = f.split('}'), i = 0; i < r.length; i++) if (r[i].length > 0) if (r[i].indexOf(':') != - 1) {
            var u = r[i].split(':'),
            s = t.DynamicValues[u[0]].toString().length,
            h = u[1].length + 1 - s,
            o = t.DynamicValues[u[0]].hasOwnProperty('Val') ? t.DynamicValues[u[0]].Val : t.DynamicValues[u[0]];
            this.PaymentCode += Array(h).join('0') + o;
            t.PurePaymentCode += o
          } else e = r[i],
          t.PaymentCode += t.DynamicValues[e],
          t.PurePaymentCode += t.DynamicValues[e]
        } else t.PaymentCode += t.DynamicValues[Object.keys(t.DynamicValues) [0]]
      },
      i
    }(o);
    i.DynamicPaymentInfo = u;
    gt = function (n) {
      function t() {
        var t = n.call(this) || this;
        return t.PaymentType = 12,
        t
      }
      return __extends(t, n),
      t
    }(u);
    i.AxaPaymentInfo = gt;
    ni = function (i) {
      function r() {
        var n = i !== null && i.apply(this, arguments) || this;
        return n.AuthorizeInfo = {
          TaxCode: null,
          VehicleNumber: null,
          FinancialYear: null,
          VehicleType: null,
          OwnerName: null
        },
        n.PaymentCodeParts = {
          First: null,
          Second: null,
          Third: null,
          toString: function () {
            return this.First + this.Second + this.Third
          },
          toPaymentString: function () {
            var n = 12 - this.Third.length;
            return this.First + this.Second + new Array(n).join('0') + this.Third
          }
        },
        n.ExistingPaymentCode = !0,
        n.TaxCode = null,
        n.VehicleNumber = null,
        n
      }
      return __extends(r, i),
      Object.defineProperty(r.prototype, 'InRequestCodeMode', {
        get: function () {
          return !this.ExistingPaymentCode
        },
        enumerable: !0,
        configurable: !0
      }),
      r.prototype.PopulateDetails = function () {
        this.Details = [
        ];
        this.Details.push(new t.Detail(n.server.DetailName.VehicleTax_OwnerAFM, 0, this.AuthorizeInfo.TaxCode));
        this.Details.push(new t.Detail(n.server.DetailName.VehicleTax_VehicleNumber, 0, this.AuthorizeInfo.VehicleNumber));
        this.Details.push(new t.Detail(n.server.DetailName.VehicleTax_Year, 0, this.AuthorizeInfo.FinancialYear));
        this.Details.push(new t.Detail(n.server.DetailName.VehicleTax_VehicleType, 0, this.AuthorizeInfo.VehicleType.key))
      },
      r.prototype.PostAuthorizationUpdate = function (t) {
        this.Details = t;
        this.TaxCode = this.getDetailValue(n.server.DetailName.VehicleTax_OwnerAFM);
        this.VehicleNumber = this.getDetailValue(n.server.DetailName.VehicleTax_VehicleNumber);
        this.AuthorizeInfo.OwnerName = this.getDetailValue(n.server.DetailName.VehicleTax_OwnerName);
        this.PaymentCodeParts.First = this.getDetailValue(n.server.DetailName.VehicleTax_PaymentCode_1);
        this.PaymentCodeParts.Second = this.getDetailValue(n.server.DetailName.VehicleTax_PaymentCode_2);
        this.PaymentCodeParts.Third = this.getDetailValue(n.server.DetailName.VehicleTax_PaymentCode_3);
        this.Amount = parseFloat(this.getDetailValue(n.server.DetailName.AmountInEUR).replace(',', '.'))
      },
      r.prototype.getDetailValue = function (n) {
        var t = this.getDetail(n);
        return t ? t.Value : null
      },
      r.prototype.getDetail = function (n) {
        for (var i = this.Details.length, t = 0; t < i; t++) if (this.Details[t].Name == n) return this.Details[t];
        return null
      },
      r.prototype.getPaymentDetails = function () {
        var t = [
        ];
        return t.push(new c(n.server.DetailName.RegistrationNumber, 0, this.VehicleNumber)),
        t.push(new c(n.server.DetailName.VAT, 0, this.TaxCode)),
        t
      },
      r
    }(u);
    i.VehicleTaxPaymentInfo = ni;
    ti = function (t) {
      function i() {
        var n = t.call(this) || this;
        return n.m_PublicSector = null,
        n.m_VoucherCategory = null,
        n.m_VoucherType = null,
        n.CompanyName = null,
        n.TaxCode = null,
        n.Name = null,
        n.LastName = null,
        n.FatherName = null,
        n.SendEmail = !0,
        n.MotherName = null,
        n.DateOfBirth = null,
        n.Misc = null,
        n.MobilePhone = null,
        n.IBan = null,
        n.Email = null,
        n.EmailSecondTry = null,
        n.eVoucherCode = null,
        n
      }
      return __extends(i, t),
      Object.defineProperty(i.prototype, 'PublicSector', {
        get: function () {
          return this.m_PublicSector
        },
        set: function (n) {
          this.m_PublicSector = n;
          this.VoucherCategory = null
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'VoucherCategory', {
        get: function () {
          return this.m_VoucherCategory
        },
        set: function (n) {
          this.m_VoucherCategory = n;
          this.VoucherType = null
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'VoucherType', {
        get: function () {
          return this.m_VoucherType
        },
        set: function (n) {
          this.m_VoucherType = n;
          this.Amount = null != n && 0 != n.Amount ? n.Amount : null
        },
        enumerable: !0,
        configurable: !0
      }),
      i.prototype.PopulateDetails = function () {
        this.Details = [
        ];
        this.Details.push(new n.model.Detail(n.server.DetailName.eParavolo_code, 0, this.eVoucherExpirationDate));
        this.Details.push(new n.model.Detail(n.server.DetailName.eParavolo_foreasId, 0, this.PublicSector.ID));
        this.Details.push(new n.model.Detail(n.server.DetailName.eParavolo_foreasName, 0, this.PublicSector.Description));
        this.Details.push(new n.model.Detail(n.server.DetailName.eParavolo_categoryId, 0, this.VoucherCategory.ID));
        this.Details.push(new n.model.Detail(n.server.DetailName.eParavolo_categoryName, 0, this.VoucherCategory.Description));
        this.Details.push(new n.model.Detail(n.server.DetailName.eParavolo_typeID, 0, this.VoucherType.ID));
        this.Details.push(new n.model.Detail(n.server.DetailName.eParavolo_typeName, 0, this.VoucherType.Description));
        this.Name && this.Details.push(new n.model.Detail(n.server.DetailName.eParavolo_Name, 0, this.Name));
        this.LastName && this.Details.push(new n.model.Detail(n.server.DetailName.eParavolo_LastCompanyName, 0, this.LastName));
        this.FatherName && this.Details.push(new n.model.Detail(n.server.DetailName.eParavolo_FatherName, 0, this.FatherName));
        this.TaxCode && this.Details.push(new n.model.Detail(n.server.DetailName.eParavolo_AFM, 0, this.TaxCode));
        this.MotherName && this.Details.push(new n.model.Detail(n.server.DetailName.eParavolo_motherName, 0, this.MotherName));
        this.Misc && this.Details.push(new n.model.Detail(n.server.DetailName.eParavolo_additionalInfo, 0, this.Misc));
        this.SendEmail && this.Details.push(new n.model.Detail(n.server.DetailName.eParavolo_eMail, 0, this.Email));
        this.MobilePhone && this.Details.push(new n.model.Detail(n.server.DetailName.eParavolo_mobilePhone, 0, this.MobilePhone));
        this.DateOfBirth && this.Details.push(new n.model.Detail(n.server.DetailName.eParavolo_dob, 0, n.utils.toShortDateString(this.DateOfBirth)));
        this.IBan && this.Details.push(new n.model.Detail(n.server.DetailName.eParavolo_iban, 0, this.IBan))
      },
      i
    }(u);
    i.eVoucherIssueInfo = ti;
    ii = function (t) {
      function i() {
        var n = t.call(this) || this;
        return n.AuthorizationDetails = [
        ],
        n.PaymentDetails = [
        ],
        n.m_SocialSecurity = null,
        n.SocialSecurityService = null,
        n.EmployerData = {
          lastName: '',
          socialSecurityNumber: '',
          taxNumber: ''
        },
        n.EmployeeData = {
          lastName: '',
          socialSecurityNumber: ''
        },
        n
      }
      return __extends(i, t),
      Object.defineProperty(i.prototype, 'SocialSecurity', {
        get: function () {
          return this.m_SocialSecurity
        },
        set: function (n) {
          this.SocialSecurityService = null;
          this.m_SocialSecurity = n
        },
        enumerable: !0,
        configurable: !0
      }),
      i.prototype.getAuthorizationDetail = function (n) {
        for (var i = this.AuthorizationDetails.length, t = 0; t < i; t++) if (this.AuthorizationDetails[t].Name == n) return this.AuthorizationDetails[t].Value;
        return null
      },
      i.prototype.getDetail = function (n, t) {
        var i = n.filter(function (n) {
          return n.Name == t
        });
        return i.length ? i[0] : null
      },
      i.prototype.getEmployerFullName = function () {
        return this.getAuthorizationDetail(n.server.DetailName.LaborTicket_Employer_Name) + ' ' + this.getAuthorizationDetail(n.server.DetailName.LaborTicket_Employer_SurName)
      },
      i.prototype.getEmployerFatherInitial = function () {
        var t = this.getAuthorizationDetail(n.server.DetailName.LaborTicket_Employer_Father);
        return t && t.length ? t.slice(0, 1)  : null
      },
      i.prototype.getEmployeeFullName = function () {
        return this.getAuthorizationDetail(n.server.DetailName.LaborTicket_Employee_Name) + ' ' + this.getAuthorizationDetail(n.server.DetailName.LaborTicket_Employee_SurName)
      },
      i.prototype.getEmployeeFatherInitial = function () {
        var t = this.getAuthorizationDetail(n.server.DetailName.LaborTicket_Employee_FatherName);
        return t && t.length ? t.slice(0, 1)  : null
      },
      i.prototype.getEmployeeAmount = function () {
        return parseFloat(this.getAuthorizationDetail(n.server.DetailName.LaborTicket_Employee_Amount))
      },
      i.prototype.getEmployeeTax = function () {
        return parseFloat(this.getAuthorizationDetail(n.server.DetailName.LaborTicket_Tax))
      },
      i.prototype.getKey = function () {
        var t = this.getDetail(this.PaymentDetails, n.server.DetailName.LaborTicket_Key);
        return null != t ? t.Value : null
      },
      i.prototype.getStatus = function () {
        var t = this.getDetail(this.PaymentDetails, n.server.DetailName.LaborTicket_Status);
        return null != t ? t.Value : null
      },
      i.prototype.PopulateDetails = function () {
        this.Details = [
        ];
        this.Details.push(new n.model.Detail(n.server.DetailName.LaborTicket_Employer_Name, 0, this.EmployerData.lastName));
        this.Details.push(new n.model.Detail(n.server.DetailName.LaborTicket_Employer_AMKA, 0, this.EmployerData.socialSecurityNumber));
        this.Details.push(new n.model.Detail(n.server.DetailName.LaborTicket_Employer_TaxCode, 0, this.EmployerData.taxNumber));
        this.Details.push(new n.model.Detail(n.server.DetailName.LaborTicket_Employee_Name, 0, this.EmployeeData.lastName));
        this.Details.push(new n.model.Detail(n.server.DetailName.LaborTicket_Employee_AMKA, 0, this.EmployeeData.socialSecurityNumber));
        this.Details.push(new n.model.Detail(n.server.DetailName.LaborTicket_SocialSecurity, 0, this.SocialSecurity.key));
        this.Details.push(new n.model.Detail(n.server.DetailName.LaborTicket_SocialSecurity_Service, 0, this.SocialSecurityService.key));
        this.Details.push(new n.model.Detail(n.server.DetailName.AmountInEUR, 2, this.Amount))
      },
      i
    }(u);
    i.LaborTicketPaymentInfo = ii;
    ri = function (t) {
      function i() {
        var n = t.call(this) || this;
        return n.IsPassport = !1,
        n.IsDonation = !0,
        n.DontPrefixDisplayName = !0,
        n.ExpensesServiceType = 100,
        n.PaymentType = 0,
        n.TransferMethodImmediate = !1,
        n.IsAnonymous = !1,
        n
      }
      return __extends(i, t),
      Object.defineProperty(i.prototype, 'IsAnonymous', {
        get: function () {
          return this._IsAnonymous
        },
        set: function (n) {
          this._IsAnonymous = n;
          n && this.resetDonationDetails()
        },
        enumerable: !0,
        configurable: !0
      }),
      i.prototype.resetDonationDetails = function () {
        this.Details && this.removeDetails([n.server.DetailName.ANONYMOUS,
        n.server.DetailName.FIRSTNAME,
        n.server.DetailName.LASTNAME,
        n.server.DetailName.STREET,
        n.server.DetailName.STREET_NUMBER,
        n.server.DetailName.POSTCODE,
        n.server.DetailName.REGION,
        n.server.DetailName.PHONE,
        n.server.DetailName.VAT,
        n.server.DetailName.PASSPORT,
        n.server.DetailName.IDENTITY,
        n.server.DetailName.COMMENTS])
      },
      i.prototype.removeDetails = function (n) {
        if (!this.Details) return null;
        var t = this;
        n.forEach(function (n) {
          t.removeDetail(n)
        })
      },
      i.prototype.removeDetail = function (n) {
        var t,
        r,
        i;
        this.Details && (t = this, r = this.getDetail(n), r && (i = t.Details.indexOf(i), t.Details.splice(i, 1)))
      },
      i.prototype.getDetail = function (n) {
        if (!this.Details) return null;
        var t = this.Details.filter(function (t) {
          return t.Name == n
        });
        return t && t.length > 0 ? t[0] : null
      },
      i.prototype.setDetail = function (t, i, r) {
        this.Details || (this.Details = [
        ]);
        this.removeDetail(t);
        r || (r = '');
        this.Details.push(new n.model.Detail(t, i, r))
      },
      i.prototype.PopulateDetails = function (i) {
        t.prototype.PopulateDetails.call(this, i);
        this.resetDonationDetails();
        this.IsAnonymous ? this.setDetail(n.server.DetailName.ANONYMOUS, 0, '1')  : (this.setDetail(n.server.DetailName.ANONYMOUS, 0, '0'), this.setDetail(n.server.DetailName.FIRSTNAME, 0, this.FirstName), this.setDetail(n.server.DetailName.LASTNAME, 0, this.LastName), this.setDetail(n.server.DetailName.STREET, 0, this.Street), this.setDetail(n.server.DetailName.STREET_NUMBER, 0, this.StreetNumber), this.setDetail(n.server.DetailName.POSTCODE, 0, this.PostCode), this.setDetail(n.server.DetailName.REGION, 0, this.Region), this.setDetail(n.server.DetailName.PHONE, 0, this.Phone), this.setDetail(n.server.DetailName.VAT, 0, this.VAT), this.IsPassport ? this.setDetail(n.server.DetailName.PASSPORT, 0, this.Passport)  : this.setDetail(n.server.DetailName.IDENTITY, 0, this.Identity), this.setDetail(n.server.DetailName.COMMENTS, 0, this.Comments ? this.Comments : ''))
      },
      i
    }(u);
    i.DonationPaymentInfo = ri;
    ui = function (n) {
      function t() {
        return n !== null && n.apply(this, arguments) || this
      }
      return __extends(t, n),
      t
    }(u);
    i.CustomPaymentInfo = ui;
    fi = function (n) {
      function t() {
        return n !== null && n.apply(this, arguments) || this
      }
      return __extends(t, n),
      t
    }(o);
    i.CardPaymentInfo = fi;
    ei = function (n) {
      function t() {
        var t = n !== null && n.apply(this, arguments) || this;
        return t.CreditAccountBeneficiaries = [
        ],
        t.showVenusMessage = !1,
        t
      }
      return __extends(t, n),
      t
    }(o);
    i.AlphaCardPaymentInfo = ei;
    oi = function (n) {
      function t() {
        var t = n.call(this) || this;
        return t.SelectedBank = {
        },
        t.ExpensesServiceType = 5,
        t.PaymentType = 1,
        t.UseProfileProduct = !0,
        t.TransferMethodImmediate = !1,
        t
      }
      return __extends(t, n),
      Object.defineProperty(t.prototype, 'CreditAccount', {
        get: function () {
          return this._CreditAccount
        },
        set: function (n) {
          this._CreditAccount = n;
          this.SetCreditAccountAdditionalInfo(n)
        },
        enumerable: !0,
        configurable: !0
      }),
      t.prototype.SetCreditAccountAdditionalInfo = function (n) {
        this.UseProfileProduct && n ? n.TypeID && (this.CreditAccountBank = this.getAccountBank(n.TypeID))  : this.CreditAccountBank = null
      },
      t.prototype.getAccountBank = function (n) {
        if (this.Banks && this.Banks.length > 0) {
          var i = n,
          t = this.Banks.filter(function (n) {
            return n.TypeID == i
          });
          if (t && t.length > 0) return t[0]
        }
        return null
      },
      t.prototype.getAccountDetailValue = function (n, t) {
        if (n && n.Details) {
          var i = n.Details.filter(function (n) {
            return n.Name == t
          });
          if (i && i.length > 0) return i[0].Value
        }
        return null
      },
      t
    }(o);
    i.InterbankCardPaymentInfo = oi;
    d = function (n) {
      function t() {
        var t = n.call(this) || this;
        return t.HasErrors = !1,
        t.ErrorMessage = '',
        t.ExpensesServiceType = 11,
        t.PaymentType = 2,
        t.TransferMethodImmediate = !0,
        t
      }
      return __extends(t, n),
      t
    }(o);
    i.LoanPaymentInfo = d;
    si = function (n) {
      function t() {
        var t = n.call(this) || this;
        return t.UseProfileProduct = !0,
        t.PaymentType = 9,
        t
      }
      return __extends(t, n),
      t
    }(d);
    i.HousingLoanPaymentInfo = si;
    f = function () {
      function t() {
        this.IsJobSubmission = !1;
        this.JobName = null;
        this.HasExceededLimit = !1;
        this.HasExceededLimitOtherThanAdmin = !1;
        this.HasErrors = !1;
        this.ErrorMessage = '';
        this.IsTransactionSuccessful = function (t) {
          return t == n.server.TransactionStatus.Succeded
        };
        this.IsTransactionFailed = function (t) {
          return t == n.server.TransactionStatus.Failed || t == n.server.TransactionStatus.Invalid
        };
        this.CanSelectImmediate = !0;
        this.CanSelectBlock = !0
      }
      return t.prototype.getTransactionType = function () {
        return 1
      },
      Object.defineProperty(t.prototype, 'TransferMethodImmediate', {
        get: function () {
          return this._TransferMethodImmediate
        },
        set: function (n) {
          this._TransferMethodImmediate = n;
          this.TransferMethodChangeHandler && this.TransferMethodChangeHandler()
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'CurrentWorkingDate', {
        get: function () {
          return this._CurrentWorkingDate
        },
        set: function (t) {
          this._CurrentWorkingDate = t;
          this.CurrentWorkingDateValue = n.utils.parseDateString(t)
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'CurrentWorkingDateValue', {
        get: function () {
          return this._CurrentWorkingDateValue || (this._CurrentWorkingDateValue = new Date),
          this._CurrentWorkingDateValue
        },
        set: function (n) {
          this._CurrentWorkingDateValue = n
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'NextWorkingDate', {
        get: function () {
          return this._NextWorkingDate
        },
        set: function (t) {
          this._NextWorkingDate = t;
          this.NextWorkingDateValue = n.utils.parseDateString(t);
          this.TransactionDate = this.NextWorkingDateValue
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'NextWorkingDateValue', {
        get: function () {
          return this._NextWorkingDateValue || (this._NextWorkingDateValue = new Date),
          this._NextWorkingDateValue
        },
        set: function (n) {
          this._NextWorkingDateValue = n
        },
        enumerable: !0,
        configurable: !0
      }),
      t.prototype.setDatesAndOnlineStatus = function (n) {
        n.ResultCode == 0 ? (this.CurrentWorkingDate = n.CurrentWorkingDate, this.TransferPromptDate = n.TransferPromptDate, this.NextWorkingDate = n.NextWorkingDate, this.DIASPromptDate = n.DIASPromptDate, this.PaymentPromptDate = n.PaymentPromptDate, this.Online = n.OnLine, this.Online ? (this.CanSelectImmediate = !0, this.CanSelectBlock = !0)  : (this.TransferMethodImmediate = !1, this.CanSelectImmediate = !1, this.CanSelectBlock = !1, this.IsAmountBlocked = !1))  : (this.HasErrors = !0, this.ErrorMessage = n.Error ? n.Error.Message : 'Πρόβλημα κατα την εκτέλεση της συναλλαγής (GetDatesAndOnlineStatus)')
      },
      t
    }();
    i.TransferInfo = f;
    hi = function (n) {
      function t() {
        return n !== null && n.apply(this, arguments) || this
      }
      return __extends(t, n),
      t
    }(f);
    i.TransferInGroup = hi;
    ci = function () {
      function t(n) {
        this.Name = n.Name;
        this.Surname = n.Surname;
        this.CompanyName = n.CompanyName;
        this.CompanyTitle = n.CompanyTitle;
        this.VAT = n.VAT
      }
      return Object.defineProperty(t.prototype, 'DisplayName', {
        get: function () {
          return n.utils.isUndefinedOrNullorWhiteSpace(this.CompanyName) ? this.Surname + ' ' + this.Name : this.CompanyName
        },
        enumerable: !0,
        configurable: !0
      }),
      t
    }();
    i.AccountBeneficiary = ci;
    a = function () {
      function n() {
      }
      return n
    }();
    i.DifferentCurrencyTransferInfo = a;
    li = function (n) {
      function t() {
        var t = n.call(this) || this;
        return t.CreditAccountBeneficiaries = [
        ],
        t.TransferType = 0,
        t.TransferSourse = 0,
        t.DifferentCurrencyInfo = new a,
        t.UseProfileProduct = !0,
        t.TransferMethodImmediate = !0,
        t.ExpensesServiceType = 0,
        t.Details = [
        ],
        t
      }
      return __extends(t, n),
      t.prototype.getTransactionType = function () {
        return this.TransferSourse == 1 ? 11 : this.TransferSourse == 2 ? 14 : this.TransferSourse == 0 && this.TransferMethodImmediate ? 1 : this.TransferSourse == 0 && !this.TransferMethodImmediate ? 2 : void 0
      },
      Object.defineProperty(t.prototype, 'HasDifferentCurrencies', {
        get: function () {
          return null != this.DebitProduct && null != this.CreditAccount && this.DebitProduct.CurrencyEnum != this.CreditAccount.CurrencyEnum
        },
        enumerable: !0,
        configurable: !0
      }),
      t
    }(f);
    i.IntraBankTransferInfo = li;
    h = function (t) {
      function i() {
        var n = t.call(this) || this;
        return n.SelectedBank = {
        },
        n._useProfileProduct = !0,
        n.TransferType = 1,
        n.ExpensesServiceType = 2,
        n.UseProfileProduct = !0,
        n.TransferMethodImmediate = !1,
        n.ExpensesServiceType = 2,
        n.TransferType = 1,
        n
      }
      return __extends(i, t),
      Object.defineProperty(i.prototype, 'UseProfileProduct', {
        get: function () {
          return this._useProfileProduct
        },
        set: function (n) {
          n || (this.CreditAccount = null, this.CreditAccountBeneficiary = null);
          this._useProfileProduct != n && (this._useProfileProduct = n)
        },
        enumerable: !0,
        configurable: !0
      }),
      i.prototype.getTransactionType = function () {
        return 4
      },
      Object.defineProperty(i.prototype, 'CreditAccount', {
        get: function () {
          return this._CreditAccount
        },
        set: function (n) {
          this._CreditAccount = n;
          this.SetCreditAccountAdditionalInfo(n)
        },
        enumerable: !0,
        configurable: !0
      }),
      i.prototype.SetCreditAccountAdditionalInfo = function (t) {
        this.UseProfileProduct && t ? (t.TypeID && (this.CreditAccountBank = this.getAccountBank(t.TypeID)), t.BankProduct && (this.CreditAccountBeneficiary = this.getAccountDetailValue(t.BankProduct, n.server.DetailName.BENEFICIARY_NAME)))  : this.CreditAccountBank = null
      },
      i.prototype.getAccountBank = function (n) {
        if (this.Banks && this.Banks.length > 0) {
          var i = n,
          t = this.Banks.filter(function (n) {
            return n.TypeID == i
          });
          if (t && t.length > 0) return t[0]
        }
        return null
      },
      i.prototype.getAccountDetailValue = function (n, t) {
        if (n && n.Details) {
          var i = n.Details.filter(function (n) {
            return n.Name == t
          });
          if (i && i.length > 0) return i[0].Value
        }
        return null
      },
      i
    }(f);
    i.InterBankTransferInfo = h;
    ai = function (n) {
      function t(t) {
        var i = n.call(this) || this;
        return i._CreditAccountBank = null,
        i._CreditAccountBank = i.SelectedBank = t,
        i
      }
      return __extends(t, n),
      Object.defineProperty(t.prototype, 'CreditAccountBank', {
        get: function () {
          return this._CreditAccountBank
        },
        set: function () {
        },
        enumerable: !0,
        configurable: !0
      }),
      t
    }(h);
    i.CitiRetailTransferInfo = ai;
    vi = function (n) {
      function t(t) {
        var i = n.call(this) || this;
        return i._CreditAccountBank = null,
        i._CreditAccountBank = i.SelectedBank = t,
        i
      }
      return __extends(t, n),
      Object.defineProperty(t.prototype, 'CreditAccountBank', {
        get: function () {
          return this._CreditAccountBank
        },
        set: function () {
        },
        enumerable: !0,
        configurable: !0
      }),
      t
    }(h);
    i.BoGTransferInfo = vi;
    g = function (t) {
      function i() {
        var n = t.call(this) || this;
        return n.CreditAccountBankCountry = {
        },
        n.AmountAnalysis = {
        },
        n.UseProfileProduct = !0,
        n.TransferMethodImmediate = !1,
        n.ExpensesServiceType = 8,
        n.TransferType = 2,
        n.FeeType = 0,
        n
      }
      return __extends(i, t),
      Object.defineProperty(i.prototype, 'UseProfileProduct', {
        get: function () {
          return this._useProfileProduct
        },
        set: function (n) {
          n || (this.CreditAccount = null, this.CreditAccountBeneficiary = null);
          this._useProfileProduct != n && (this._useProfileProduct = n, this.SetUseProfileProduct(n))
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(i.prototype, 'CreditAccountTypeID', {
        get: function () {
          return n.constants.general.internationalAccountProductId
        },
        enumerable: !0,
        configurable: !0
      }),
      i.prototype.getTransactionType = function () {
        return 10
      },
      i.prototype.SetUseProfileProduct = function (n) {
        n || (this.CreditAccount = null, this.CreditAccountBank = null, this.CreditAccountBeneficiary = '', this.CreditAccountBeneficiaryAddress = '', this.BicCode = '', this.CreditAccountCountry = null)
      },
      i.prototype.SetCreditAccountAdditionalInfo = function (t) {
        if (this.UseProfileProduct && t && (t.TypeID && (this.CreditAccountBank = this.getAccountBank(t.TypeID)), t.BankProduct)) {
          this.CreditAccountBeneficiary = this.getAccountDetailValue(t.BankProduct, n.server.DetailName.BENEFICIARY_NAME);
          this.CreditAccountBeneficiaryAddress = this.getAccountDetailValue(t.BankProduct, n.server.DetailName.ADDRESS);
          this.BicCode = this.getAccountDetailValue(t.BankProduct, n.server.DetailName.BIC_CODE);
          var i = this.getAccountDetailValue(t.BankProduct, n.server.DetailName.CountryISOCode);
          this.CreditAccountCountry = i ? this.getCountry(i)  : undefined
        }
      },
      i.prototype.getCountry = function (n) {
        if (this.Countries && this.Countries.length > 0) {
          var t = this.Countries.filter(function (t) {
            return t.CountryIso == n
          });
          if (t && t.length > 0) return t[0]
        }
        return null
      },
      i
    }(h);
    i.InternationalTransferInfo = g;
    yi = function (n) {
      function t() {
        var t = n.call(this) || this;
        return t.IsUrgent = !1,
        t.IbanPattern = 27,
        t.ApprovalCode = '',
        t._importToEUAccount = !0,
        t.IsUrgentSelect = !1,
        t.ImportedGood = {
          ReceiptDate: new Date
        },
        t
      }
      return __extends(t, n),
      Object.defineProperty(t.prototype, 'IsImportUrgent', {
        get: function () {
          return this._isImportUrgent
        },
        set: function (n) {
          this._isImportUrgent = n
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'ImportToEUAccount', {
        get: function () {
          return this._importToEUAccount
        },
        set: function (n) {
          this._importToEUAccount = n
        },
        enumerable: !0,
        configurable: !0
      }),
      t.prototype.getTransactionType = function () {
        return 12
      },
      t
    }(g);
    i.SimpleImportsTransferInfo = yi;
    pi = function (n) {
      function t() {
        var t = n.call(this) || this;
        return t.TransferMethodImmediate = !1,
        t.ExpensesServiceType = 8,
        t.getTransactionType(),
        t.FeeType = 0,
        t
      }
      return __extends(t, n),
      t
    }(f);
    i.FromOtherBankTransferInfo = pi;
    wi = function (t) {
      function i() {
        var n = t !== null && t.apply(this, arguments) || this;
        return n.stateParams = {
        },
        n.IsGroup = !1,
        n.GroupId = - 1,
        n
      }
      return __extends(i, t),
      Object.defineProperty(i.prototype, 'IsVisible', {
        get: function () {
          return this.Item && this.Item.IsActive
        },
        enumerable: !0,
        configurable: !0
      }),
      i.prototype.IsValidForMenu = function (n) {
        return this.Item.CategoryId == n && null == this.Item.GroupName && this.IsVisible
      },
      i.PaymentTypeSearchResultMap = function (t) {
        var r = new i,
        u;
        return r.active = !0,
        r.id = t.Id.toString(),
        r.title = t.Name,
        r.Item = t,
        r.searchTerms = t.SearchTerms,
        u = t.ParentProductTypeId ? t.ParentProductTypeId : t.ProductTypeId,
        t.IsGroup ? (r.IsGroup = !0, r.GroupId = t.Id, r.state = n.constants.stateNames.newDynamicGroupPaymentState, r.stateParams = {
          id: t.Id
        })  : t.Tags ? (r.state = n.constants.stateNames.newPaymentsStatePrefix + t.Tags, r.stateParams = {
          id: u
        })  : (r.state = n.constants.stateNames.newDynamicPaymentState, r.stateParams = {
          id: u,
          key: ''
        }),
        r
      },
      i.TransactionTemplateMap = function (n) {
        var t = new i;
        return t.active = !1,
        t.title = n.Description + ' ' + n.TransactionType,
        t
      },
      i
    }(l);
    i.PaymentMenuItem = wi;
    bi = function (n) {
      function t() {
        var t = n !== null && n.apply(this, arguments) || this;
        return t.index = 0,
        t.stateParams = {
        },
        t
      }
      return __extends(t, n),
      t
    }(l);
    i.PaymentCategoryMenuItem = bi;
    ki = function () {
      function t(n) {
        this.CardNumber = n.CardNumber;
        this.Statements = n.Statements;
        this.PendingStatements = n.PendingStatements;
        this.OldStatements = n.OldStatements
      }
      return Object.defineProperty(t.prototype, 'AllStatements', {
        get: function () {
          var t = [
          ];
          return n.utils.isUndefinedOrNull(this.Statements) ? n.utils.isUndefinedOrNull(this.PendingStatements) || (t = this.PendingStatements)  : t = this.Statements.concat(this.PendingStatements),
          t
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'CreditSum', {
        get: function () {
          var t = 0,
          i = this;
          return n.utils.isUndefinedOrNull(this.Statements) || (i = this, this.Statements.forEach(function (i) {
            n.utils.isUndefinedOrNull(i) || (i.AmountSign == 'C' || i.AmountSign == 'Π') && (t += i.Amount)
          })),
          t
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'DebitSum', {
        get: function () {
          var t = 0,
          i = this;
          return n.utils.isUndefinedOrNull(this.Statements) || (i = this, this.Statements.forEach(function (i) {
            n.utils.isUndefinedOrNull(i) || (i.AmountSign == 'D' || i.AmountSign == 'Χ') && (t += i.Amount)
          })),
          t
        },
        enumerable: !0,
        configurable: !0
      }),
      t
    }();
    i.CardStatement = ki;
    di = function () {
      function t(n) {
        this.Amount = n.Amount;
        this.Connected_Account = n.Connected_Account;
        this.Currency = n.Currency;
        this.DateEnd = n.DateEnd;
        this.DateStart = n.DateStart;
        this.DurationType = n.DurationType;
        this.DurationValue = n.DurationValue;
        this.Header_Currency = n.Header_Currency;
        this.Header_Tax = n.Header_Tax;
        this.Header_TimeDepositNumber = n.Header_TimeDepositNumber;
        this.Header_TimeDepositProductCode = n.Header_TimeDepositProductCode;
        this.Interest_Amount = n.Interest_Amount;
        this.Interest_Currency = n.Interest_Currency;
        this.Interest_Rate = n.Interest_Rate;
        this.Interest_Type = n.Interest_Type;
        this.Owners = n.Owners;
        this.ProductCode = n.ProductCode;
        this.Settle_Action = n.Settle_Action;
        this.Settled_Date = n.Settled_Date;
        this.Settled_Status = n.Settled_Status;
        this.Withdrawals_Count = n.Withdrawals_Count;
        this.Withdrawals = n.Withdrawals;
        this.Settle_Action_Description = n.Settle_Action_Description
      }
      return Object.defineProperty(t.prototype, 'InterestRate', {
        get: function () {
          return n.utils.isUndefinedOrNull(this.Interest_Rate) ? this.Interest_Rate : this.Interest_Rate.replace('.', ',').substr(1).replace(/^0+/, '')
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'HasConnectedAcc', {
        get: function () {
          return !n.utils.isUndefinedOrNullorWhiteSpace(this.Connected_Account)
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'IsEnded', {
        get: function () {
          return !n.utils.isUndefinedOrNull(this.Settled_Status) && this.Settled_Status == 1 ? !0 : !1
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'IsActive', {
        get: function () {
          return !n.utils.isUndefinedOrNull(this.Settled_Status) && this.Settled_Status == 0 ? !0 : !1
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'InterestPaidAtMaturity', {
        get: function () {
          return !n.utils.isUndefinedOrNull(this.Interest_Type) && this.Interest_Type == 1 ? !0 : !1
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'InterestPaidPerSemester', {
        get: function () {
          return !n.utils.isUndefinedOrNull(this.Interest_Type) && this.Interest_Type == 2 ? !0 : !1
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'InterestPaidMonthly', {
        get: function () {
          return !n.utils.isUndefinedOrNull(this.Interest_Type) && this.Interest_Type == 0 ? !0 : !1
        },
        enumerable: !0,
        configurable: !0
      }),
      t
    }();
    i.TimeDepositInfo = di;
    gi = function () {
      function n(n) {
        this.Actions = [
        ];
        this.Item = n
      }
      return n
    }();
    i.ETimeDepositInfoActionDecorator = gi;
    nr = function () {
      function n() {
        this.Error = null;
        this.HasError = !1
      }
      return n
    }();
    i.ETimeDepositInfoListViewModel = nr;
    tr = function () {
      function t(t) {
        var e,
        o,
        s,
        h,
        r,
        u,
        i,
        f;
        this.Actions = [
        ];
        this.CanCancel = !1;
        this.StatusClass = '';
        this.CancellationUN = '';
        this.CancellationRequestDate = '';
        this.IsPhoneBanking = !1;
        this.DetailsTitle = '';
        this.DetailsTransferType = '';
        this.DebitProductLabel = '';
        this.Details = {
        };
        this.Item = t;
        this.Item && (!this.Item.CreditProduct || this.Item.CreditProduct == 'undefined') && (this.Item.CreditProduct = '');
        this.CanCancel = this.Item && (this.Item.Status == 1 || this.Item.Status == 7 || this.Item.Status == 2 && this.Item.Type == 23) && this.Item.CreditProductType.toUpperCase() != 'NOT AVAILABLE';
        e = n.utils.createObjectFromEnum(n.server.DetailName);
        for (o in e) s = parseInt(o),
        h = e[o],
        this.Details[h] = n.transactions.TransactionUtils.getDetailValue(this.Item, s);
        this.TransactionEntryDateTime = n.utils.parseDateString(this.Item.EntryDate);
        n.utils.isUndefinedOrNull(this.Item.Details) || (r = this.Item.Details.filter(function (t) {
          return t.Name === n.server.DetailName.DebitFees
        }), r && r.length > 0 && (this.Fees = r[0].Value), u = this.Item.Details.filter(function (t) {
          return t.Name === n.server.DetailName.TotalFees
        }), u && u.length > 0 && (this.TotalFees = u[0].Value), i = this.Item.Details.filter(function (t) {
          return t.Name === n.server.DetailName.Number_Of_Instalments
        }), i && i.length > 0 && (this.Instalments = i[0].Value ? parseInt(i[0].Value)  : 1), (n.utils.isUndefinedOrNull(this.Item.BankName) || this.Item.Type == 23) && (f = this.Item.Details.filter(function (t) {
          return t.Name === n.server.DetailName.BANK_NAME
        }), f && f.length > 0 && (this.Item.BankName = f[0].Value)))
      }
      return Object.defineProperty(t.prototype, 'Channel', {
        get: function () {
          return this.Item ? this.Item.Channel.toString()  : '-'
        },
        enumerable: !0,
        configurable: !0
      }),
      t.prototype.getAction = function (n) {
        var t = this.Actions.filter(function (t) {
          return t.actionDescriptor == n
        });
        return null != t && t.length ? t[0] : null
      },
      t.prototype.getCancelAction = function () {
        return this.getAction(n.model.MenuActionDescriptor.Cancel)
      },
      t
    }();
    i.TransactionViewModel = tr;
    ir = function () {
      function n() {
        this.Title = '';
        this.DocumentRequestType = 3;
        this.KeyValueDictionary = [
        ]
      }
      return n
    }();
    i.DocumentUpdateRequest = ir;
    rr = function () {
      function n() {
      }
      return n
    }();
    i.KeyValue = rr;
    ur = function () {
      function n(n, t) {
        this.FromDate = n;
        this.ToDate = t
      }
      return n
    }();
    i.OtherBankCardStatementsSummaryFilter = ur;
    fr = function () {
      function n(n, t, i, r, u) {
        this.FromDate = n;
        this.ToDate = t;
        this.FromAmount = i;
        this.ToAmount = r;
        this.Option = u
      }
      return n
    }();
    i.AccountStatementsSummaryFilter = fr;
    er = function () {
      function n(n) {
        this.UN = n
      }
      return n
    }();
    i.AccountStatementDetailsFilter = er;
    or = function () {
      function n(n, t) {
        this.MonthIndicator = n;
        this.YearIndicator = t
      }
      return n
    }();
    i.MonthlyData = or;
    sr = function () {
      function n(n) {
        this.HTMLData = n
      }
      return n
    }();
    i.AlphaPrimePrivate = sr;
    hr = function (n) {
      function t(t) {
        var i = n.call(this) || this;
        return i.info = t,
        i.HasExpenses = !0,
        null != t && (i.Amount = t.Amount, i.CreditAccountCode = t.CreditAccount, i.RedirectUrl = t.RedirectUrl),
        i
      }
      return __extends(t, n),
      t
    }(f);
    i.MyBankTransferInfo = hr;
    cr = function (n) {
      function t(t) {
        var i = n.call(this) || this;
        return i.info = t,
        i.HasExpenses = !0,
        null != t && (i.Amount = t.Amount, i.CreditAccountCode = t.CreditorIBAN, i.RedirectUrl = t.RedirectUrl),
        i
      }
      return __extends(t, n),
      t
    }(f);
    i.IRISTransferInfo = cr;
    lr = function () {
      function n() {
      }
      return n
    }();
    i.InvestmentTypeInfo = lr;
    ar = function () {
      function n() {
      }
      return n
    }();
    i.DirectPaymentData = ar;
    vr = function () {
      function n() {
      }
      return n
    }();
    i.FDPActionInfo = vr;
    yr = function () {
      function n(n) {
        this.Actions = [
        ];
        this.Item = n
      }
      return n
    }();
    i.DebitCardApplicationInfoActionDecorator = yr;
    pr = function () {
      function n() {
        this.Error = null;
        this.HasError = !1
      }
      return n
    }();
    i.DebitCardApplicationInfoListViewModel = pr;
    wr = function () {
      function n() {
        this.HasFatalErrors = !1;
        this.HasErrors = !1;
        this.ErrorMessage = null;
        this.IsBusy = !1;
        this.IsMobileInProfile = !1;
        this.IsEmailInProfile = !1
      }
      return n
    }();
    i.DebitCardApplicationNewReqViewModel = wr;
    br = function () {
      function n(n) {
        this.Actions = [
        ];
        this.Item = n
      }
      return n
    }();
    i.SaveSmartInfoActionDecorator = br;
    kr = function () {
      function n() {
        this.Error = null;
        this.HasError = !1
      }
      return n
    }();
    i.SaveSmartInfoListViewModel = kr;
    dr = function () {
      function n() {
        this.HasFatalErrors = !1;
        this.HasErrors = !1;
        this.ErrorMessage = null;
        this.IsBusy = !1;
        this.IsMobileInProfile = !1;
        this.IsEmailInProfile = !1
      }
      return n
    }();
    i.SaveSmartNewReqViewModel = dr;
    gr = function () {
      function n(n) {
        this.CanParticipateInMultiple = !1;
        this.HasError = !1;
        this.IsSelected = !1;
        this.UI = {
          showDetails: undefined
        };
        this.Job = n;
        this.CanParticipateInMultiple = n.ApprovalDetails.SelectInMultiple && n.CanBeApproved;
        this.HasInlineMetadata = n.ApprovalDetails.ApprovalBehavior.BlockAmount || n.ApprovalDetails.ApprovalBehavior.SelectExpenses
      }
      return n.prototype.resetUI = function () {
        this.UI.showDetails = undefined
      },
      n
    }();
    i.JobApprovalViewModel = gr;
    nu = function () {
      function n() {
        this.HasFatalErrors = !1;
        this.HasErrors = !1;
        this.ErrorMessage = null
      }
      return n
    }();
    i.JobInquiryViewModel = nu;
    tu = function (n) {
      function t() {
        var t = n !== null && n.apply(this, arguments) || this;
        return t.JobApprovalViewModels = [
        ],
        t
      }
      return __extends(t, n),
      Object.defineProperty(t.prototype, 'HasSelection', {
        get: function () {
          return this.JobApprovalViewModels.some(function (n) {
            return n.IsSelected
          })
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'HasMultipleSelections', {
        get: function () {
          return this.JobApprovalViewModels.filter(function (n) {
            return n.IsSelected
          }).length > 1
        },
        enumerable: !0,
        configurable: !0
      }),
      Object.defineProperty(t.prototype, 'HasMultiplePotentialSelections', {
        get: function () {
          return this.JobApprovalViewModels.filter(function (n) {
            return n.CanParticipateInMultiple
          }).length > 1
        },
        enumerable: !0,
        configurable: !0
      }),
      t
    }(n.model.JobInquiryViewModel);
    i.PendingJobInquiryViewModel = tu;
    iu = function () {
      function n() {
        this.HasErrors = !1
      }
      return n
    }();
    i.TranferFileInfo = iu;
    ru = function () {
      function n() {
        this.HasErrors = !1;
        this.ErrorMessage = null
      }
      return n
    }();
    i.NewUserModel = ru;
    uu = function () {
      function n() {
        this.HasErrors = !1;
        this.ErrorMessage = null
      }
      return n
    }();
    i.modifyPrivilege = uu;
    fu = function () {
      function n() {
        this.AWEBEnabled = !1;
        this.AWITEnabled = !1;
        this.HasErrors = !1;
        this.ErrorMessage = null
      }
      return n
    }();
    i.modifyChannel = fu;
    eu = function () {
      function n() {
        this.HasErrors = !1;
        this.ErrorMessage = null
      }
      return n
    }();
    i.PermanentlyDisableUser = eu;
    ou = function () {
      function n() {
        this.request = {
        };
        this.HasErrors = !1;
        this.ErrorMessage = null
      }
      return n
    }();
    i.limitTransfer = ou;
    v = function () {
      function n() {
        this.Error = new ut
      }
      return n
    }();
    i.MassJobInfo = v;
    su = function (n) {
      function t() {
        return n !== null && n.apply(this, arguments) || this
      }
      return __extends(t, n),
      t
    }(v);
    i.MassTransferJobInfo = su;
    hu = function (n) {
      function t() {
        return n !== null && n.apply(this, arguments) || this
      }
      return __extends(t, n),
      t
    }(v);
    i.MassPaymentJobInfo = hu;
    nt = function () {
      function n() {
        this.HasErrors = !1;
        this.InitializationErrors = !1;
        this.ErrorMessage = null;
        this.HasExceededLimit = !1;
        this.HasExceededLimitOtherThanAdmin = !1;
        this.JobAlreadyProcessed = !1;
        this.Otp = null
      }
      return n
    }();
    i.BaseJobExecutionInfo = nt;
    tt = function (n) {
      function t() {
        var t = n !== null && n.apply(this, arguments) || this;
        return t.CanBlockAmount = !0,
        t.BlockAmount = null,
        t.InitialFees = null,
        t.FinalFees = null,
        t.Details = [
        ],
        t
      }
      return __extends(t, n),
      t.prototype.PopulateDetails = function () {
      },
      t
    }(nt);
    i.JobExecutionInfo = tt;
    cu = function (n) {
      function t() {
        var t = n !== null && n.apply(this, arguments) || this;
        return t.DifferentCurrencyInfo = new a,
        t
      }
      return __extends(t, n),
      t
    }(tt);
    i.CrossCurrencyJobExecutionInfo = cu;
    lu = function (n) {
      function t(t) {
        var i = n.call(this) || this;
        return i.InAlpha = !1,
        i.FeeType = 0,
        i.InAlpha = t.ApprovalDetails.TransferInfo.Type === 10,
        i
      }
      return __extends(t, n),
      t.prototype.PopulateDetails = function (n) {
        this.Details = n.Transactions[0].Details
      },
      t
    }(n.model.JobExecutionInfo);
    i.SimpleImportsExecutionInfo = lu;
    au = function (t) {
      function i() {
        var n = t !== null && t.apply(this, arguments) || this;
        return n.DebitProduct = null,
        n.ContactNumber = null,
        n.AreTermsAccepted = undefined,
        n
      }
      return __extends(i, t),
      i.prototype.PopulateDetails = function (t) {
        var i = [
          n.server.DetailName.DebitCurrencyAmount,
          n.server.DetailName.AmountInEUR,
          n.server.DetailName.AmountInUSD,
          n.server.DetailName.BuyRate_IN,
          n.server.DetailName.SellRate_OUT,
          n.server.DetailName.MTFRate_IN,
          n.server.DetailName.DebitCurrencyExpenses,
          n.server.DetailName.ContactNumber,
          n.server.DetailName.BOP_ID_INTERNAL
        ];
        this.Details = t.Transactions[0].Details.filter(function (n) {
          return i.indexOf(n.Name) < 0
        });
        this.Details.push({
          Name: n.server.DetailName.DebitCurrencyAmount,
          DataType: 2,
          Value: n.utils.toGreekLocale(this.Rates.AmountInCurrency)
        });
        this.Details.push({
          Name: n.server.DetailName.AmountInEUR,
          DataType: 2,
          Value: n.utils.toGreekLocale(this.Rates.AmountInEUR)
        });
        this.Details.push({
          Name: n.server.DetailName.AmountInUSD,
          DataType: 2,
          Value: n.utils.toGreekLocale(this.Rates.AmountInUSD || 0)
        });
        this.Details.push({
          Name: n.server.DetailName.BuyRate_IN,
          DataType: 2,
          Value: n.utils.toGreekLocale(this.Rates.BuyRate)
        });
        this.Details.push({
          Name: n.server.DetailName.SellRate_OUT,
          DataType: 2,
          Value: n.utils.toGreekLocale(this.Rates.SellRate)
        });
        this.Details.push({
          Name: n.server.DetailName.MTFRate_IN,
          DataType: 2,
          Value: n.utils.toGreekLocale(this.Rates.BaseRate)
        });
        this.Details.push({
          Name: n.server.DetailName.DebitCurrencyExpenses,
          DataType: 2,
          Value: n.utils.toGreekLocale(this.FinalFees.DebitProviderFeesAmount)
        });
        this.Details.push({
          Name: n.server.DetailName.BOP_CODE,
          DataType: 0,
          Value: this.TransferReason.Code
        });
        this.Details.push({
          Name: n.server.DetailName.BOP_ID_INTERNAL,
          DataType: 0,
          Value: this.TransferReason.Id
        });
        this.Details.push({
          Name: n.server.DetailName.ContactNumber,
          DataType: 0,
          Value: this.ContactNumber
        })
      },
      i
    }(n.model.JobExecutionInfo);
    i.InternationalJobExecutionInfo = au;
    it = function () {
      function n() {
        this.HasErrors = !1;
        this.ErrorMessage = ''
      }
      return n
    }();
    i.RequestBaseModel = it;
    rt = function (n) {
      function t() {
        return n !== null && n.apply(this, arguments) || this
      }
      return __extends(t, n),
      t
    }(it);
    i.BlockAccountModel = rt;
    vu = function (n) {
      function t() {
        return n !== null && n.apply(this, arguments) || this
      }
      return __extends(t, n),
      t
    }(rt);
    i.UnblockAccountModel = vu;
    yu = function () {
      function n() {
      }
      return n
    }();
    i.TaxFreeYearTotal = yu;
    pu = function () {
      function n() {
      }
      return n
    }();
    i.OAuthData = pu;
    wu = function () {
      function n() {
      }
      return n
    }();
    i.CardInsuranceQuestions = wu;
    bu = function () {
      function n() {
      }
      return n
    }();
    i.GDPRChannelConsentQuestions = bu,
    function (n) {
      n[n.AlphaCreditProtection = 0] = 'AlphaCreditProtection';
      n[n.AlphaCreditProtectionPlus = 1] = 'AlphaCreditProtectionPlus'
    }(rf = i.CardInsuranceProgram || (i.CardInsuranceProgram = {
    })),
    function (n) {
      n[n.isNotKYCAuthed = 0] = 'isNotKYCAuthed';
      n[n.NoEmailOrPhone = 1] = 'NoEmailOrPhone';
      n[n.Atm24Mode = 2] = 'Atm24Mode';
      n[n.AllowAccess = 3] = 'AllowAccess'
    }(uf = i.CardInsuranceAllowAccess || (i.CardInsuranceAllowAccess = {
    })),
    function (n) {
      n[n.Yes = 0] = 'Yes';
      n[n.No = 1] = 'No';
      n[n.CallFailed = 2] = 'CallFailed'
    }(ff = i.ShouldUpdateInform || (i.ShouldUpdateInform = {
    }));
    ku = function () {
      function n() {
      }
      return n.Consent = '01',
      n.NotConsent = '02',
      n.NotDeclared = '03',
      n
    }();
    i.ConsentStatus = ku
  }) (t = n.model || (n.model = {
  }))
}(alpha || (alpha = {
})),
function () {
  if (!window.console) {
    var n = function () {
    };
    window.console = {
      info: n,
      warn: n,
      error: n,
      log: n,
      profile: n,
      assert: n,
      msIsIndependentlyComposed: function () {
        return !1
      },
      clear: n,
      dir: n,
      profileEnd: n,
      count: n,
      groupEnd: n,
      time: n,
      timeEnd: n,
      trace: n,
      group: n,
      dirxml: n,
      debug: n,
      groupCollapsed: n,
      select: n
    }
  }
}();
arrayPrototype = Array.prototype;
arrayPrototype.find || Object.defineProperty(Array.prototype, 'find', {
  value: function (n) {
    var i,
    u,
    f,
    t,
    r;
    if (this == null) throw new TypeError('"this" is null or not defined');
    if (i = Object(this), u = i.length >>> 0, typeof n != 'function') throw new TypeError('predicate must be a function');
    for (f = arguments[1], t = 0; t < u; ) {
      if (r = i[t], n.call(f, r, t, i)) return r;
      t++
    }
    return undefined
  }
}),
function (n) {
  var t;
  (function (n) {
    var i,
    t,
    r,
    u,
    f,
    e,
    o,
    s,
    h,
    c,
    l;
    (function (n) {
      n[n.None = 0] = 'None';
      n[n.HashChanged = 1] = 'HashChanged';
      n[n.ClientIpChanged = 2] = 'ClientIpChanged'
    }) (i = n.CookieInvalidReason || (n.CookieInvalidReason = {
    })),
    function (n) {
      n[n.Loan = 3] = 'Loan';
      n[n.Investment = 4] = 'Investment';
      n[n.AlphaMutual = 5] = 'AlphaMutual';
      n[n.TimeDeposit = 6] = 'TimeDeposit';
      n[n.AlphaPrime = 7] = 'AlphaPrime';
      n[n.AlphaPrivate = 8] = 'AlphaPrivate';
      n[n.AlphaFinance = 9] = 'AlphaFinance'
    }(t = n.ProductTypeFamily || (n.ProductTypeFamily = {
    })),
    function (n) {
      n[n.CollectData = 0] = 'CollectData';
      n[n.ConfirmData = 1] = 'ConfirmData';
      n[n.Executing = 2] = 'Executing';
      n[n.Succeded = 3] = 'Succeded';
      n[n.Failed = 4] = 'Failed';
      n[n.Invalid = 5] = 'Invalid'
    }(r = n.TransactionStatus || (n.TransactionStatus = {
    })),
    function (n) {
      n[n.NotValid = 0] = 'NotValid';
      n[n.Valid = 1] = 'Valid';
      n[n.Locked = 2] = 'Locked'
    }(u = n.TokenAuthResult || (n.TokenAuthResult = {
    })),
    function (n) {
      n[n.NONE = - 1] = 'NONE';
      n[n.ACCOUNT = 0] = 'ACCOUNT';
      n[n.CARD = 1] = 'CARD';
      n[n.LOAN = 2] = 'LOAN';
      n[n.MUTUAL = 3] = 'MUTUAL';
      n[n.TIME_DEPOSITE = 4] = 'TIME_DEPOSITE';
      n[n.STOCK = 5] = 'STOCK';
      n[n.PRIME_PRIVATE = 6] = 'PRIME_PRIVATE';
      n[n.OTHERBANKACCOUNT = 7] = 'OTHERBANKACCOUNT';
      n[n.OTHERBANKCARD = 8] = 'OTHERBANKCARD';
      n[n.INVESTMENT = 99] = 'INVESTMENT'
    }(f = n.CategoryGroupType || (n.CategoryGroupType = {
    })),
    function (n) {
      n[n.PaymentIka = 13] = 'PaymentIka';
      n[n.PaymentTeve = 14] = 'PaymentTeve'
    }(e = n.SubCategoryType || (n.SubCategoryType = {
    })),
    function (n) {
      n[n.None = 0] = 'None';
      n[n.Corporate = 1] = 'Corporate';
      n[n.Retail = 2] = 'Retail'
    }(o = n.RoleType || (n.RoleType = {
    })),
    function (n) {
      n[n.Account = 0] = 'Account';
      n[n.Card = 1] = 'Card';
      n[n.Payment = 2] = 'Payment'
    }(t = n.ProductTypeFamily || (n.ProductTypeFamily = {
    })),
    function (n) {
      n[n.International = 2] = 'International';
      n[n.Local = 0] = 'Local';
      n[n.National = 1] = 'National'
    }(s = n.ProductTypeScope || (n.ProductTypeScope = {
    })),
    function (n) {
      n[n.NA = 0] = 'NA';
      n[n.EUR = 1] = 'EUR';
      n[n.USD = 2] = 'USD';
      n[n.GBP = 3] = 'GBP';
      n[n.CHF = 4] = 'CHF';
      n[n.AUD = 5] = 'AUD';
      n[n.CAD = 6] = 'CAD';
      n[n.SEK = 7] = 'SEK';
      n[n.DKK = 8] = 'DKK';
      n[n.NOK = 9] = 'NOK';
      n[n.CYP = 10] = 'CYP';
      n[n.JPY = 11] = 'JPY';
      n[n.ZAR = 12] = 'ZAR';
      n[n.HUF = 13] = 'HUF';
      n[n.HKD = 14] = 'HKD';
      n[n.ALL = 15] = 'ALL';
      n[n.SGD = 16] = 'SGD';
      n[n.PLN = 17] = 'PLN';
      n[n.CZK = 18] = 'CZK';
      n[n.BGN = 19] = 'BGN';
      n[n.DEM = 20] = 'DEM';
      n[n.FRF = 21] = 'FRF';
      n[n.BEF = 22] = 'BEF';
      n[n.ITL = 23] = 'ITL';
      n[n.NLG = 24] = 'NLG';
      n[n.TRY = 25] = 'TRY';
      n[n.ATS = 26] = 'ATS';
      n[n.FIM = 27] = 'FIM';
      n[n.IEP = 28] = 'IEP';
      n[n.ESP = 29] = 'ESP';
      n[n.PTE = 30] = 'PTE';
      n[n.SCP = 31] = 'SCP';
      n[n.NIP = 32] = 'NIP';
      n[n.MTL = 33] = 'MTL';
      n[n.KWD = 34] = 'KWD';
      n[n.SAR = 35] = 'SAR';
      n[n.JOD = 36] = 'JOD';
      n[n.IQD = 37] = 'IQD';
      n[n.NZD = 38] = 'NZD';
      n[n.ILS = 39] = 'ILS';
      n[n.ISK = 40] = 'ISK';
      n[n.GIP = 41] = 'GIP';
      n[n.SYP = 42] = 'SYP';
      n[n.AED = 43] = 'AED';
      n[n.OMR = 44] = 'OMR';
      n[n.CAF = 45] = 'CAF';
      n[n.WAF = 46] = 'WAF';
      n[n.GRD = 47] = 'GRD';
      n[n.MKD = 48] = 'MKD';
      n[n.RON = 49] = 'RON';
      n[n.PEN = 50] = 'PEN';
      n[n.RUB = 51] = 'RUB';
      n[n.CNY = 52] = 'CNY';
      n[n.SKK = 53] = 'SKK';
      n[n.HRK = 54] = 'HRK';
      n[n.RSD = 55] = 'RSD';
      n[n.THB = 56] = 'THB';
      n[n.KRW = 57] = 'KRW';
      n[n.LTT = 58] = 'LTT';
      n[n.UAH = 59] = 'UAH';
      n[n.TWD = 60] = 'TWD';
      n[n.MYR = 61] = 'MYR';
      n[n.INR = 62] = 'INR';
      n[n._BP = 63] = '_BP'
    }(h = n.Currency || (n.Currency = {
    })),
    function (n) {
      n[n.VAT = 0] = 'VAT';
      n[n.PAYROLL_PERIOD = 1] = 'PAYROLL_PERIOD';
      n[n.PAYROLL_YEAR = 2] = 'PAYROLL_YEAR';
      n[n.CHARGE_AMOUNT = 3] = 'CHARGE_AMOUNT';
      n[n.BIC_CODE = 4] = 'BIC_CODE';
      n[n.COMPANY = 5] = 'COMPANY';
      n[n.LASTNAME = 6] = 'LASTNAME';
      n[n.FIRSTNAME = 7] = 'FIRSTNAME';
      n[n.ADDRESS = 8] = 'ADDRESS';
      n[n.REGION = 9] = 'REGION';
      n[n.PHONE = 10] = 'PHONE';
      n[n.FLOOR = 11] = 'FLOOR';
      n[n.DELIVERY = 12] = 'DELIVERY';
      n[n.POSTCODE = 13] = 'POSTCODE';
      n[n.BENEFICIARY_NAME = 14] = 'BENEFICIARY_NAME';
      n[n.SUBSCRIPTION_TYPE = 15] = 'SUBSCRIPTION_TYPE';
      n[n.EYDAP_Code1 = 16] = 'EYDAP_Code1';
      n[n.EYDAP_Code2 = 17] = 'EYDAP_Code2';
      n[n.EYDAP_Code3 = 18] = 'EYDAP_Code3';
      n[n.EYDAP_Code4 = 19] = 'EYDAP_Code4';
      n[n.EYDAP_CustomerName = 20] = 'EYDAP_CustomerName';
      n[n.EYDAP_Route = 21] = 'EYDAP_Route';
      n[n.EYDAP_ExpirationDate = 22] = 'EYDAP_ExpirationDate';
      n[n.BANK_NAME = 23] = 'BANK_NAME';
      n[n.INTERBANK_STATUS = 24] = 'INTERBANK_STATUS';
      n[n.INTERBANK_REJ_CODE = 25] = 'INTERBANK_REJ_CODE';
      n[n.INTERBANK_DKK_REJ_CODE = 26] = 'INTERBANK_DKK_REJ_CODE';
      n[n.SPECIAL_EX_CODE = 27] = 'SPECIAL_EX_CODE';
      n[n.IBAN = 28] = 'IBAN';
      n[n.VAT_AMOUNT = 29] = 'VAT_AMOUNT';
      n[n.STREET = 30] = 'STREET';
      n[n.STREET_NUMBER = 31] = 'STREET_NUMBER';
      n[n.IDENTITY = 32] = 'IDENTITY';
      n[n.PASSPORT = 33] = 'PASSPORT';
      n[n.COMMENTS = 34] = 'COMMENTS';
      n[n.EYDAPWEB = 35] = 'EYDAPWEB';
      n[n.ANONYMOUS = 36] = 'ANONYMOUS';
      n[n.DebitCurrencyAmount = 37] = 'DebitCurrencyAmount';
      n[n.DebitCurrencyExpenses = 38] = 'DebitCurrencyExpenses';
      n[n.AmountInEUR = 39] = 'AmountInEUR';
      n[n.AmountInUSD = 40] = 'AmountInUSD';
      n[n.ConvertionFlag = 41] = 'ConvertionFlag';
      n[n.BuyRate_IN = 42] = 'BuyRate_IN';
      n[n.MTFRate_IN = 43] = 'MTFRate_IN';
      n[n.SellRate_OUT = 44] = 'SellRate_OUT';
      n[n.BOP_CODE = 45] = 'BOP_CODE';
      n[n.ContactNumber = 46] = 'ContactNumber';
      n[n.TransferIdNumber = 47] = 'TransferIdNumber';
      n[n.ClearingSystem = 48] = 'ClearingSystem';
      n[n.ReversalNbr = 49] = 'ReversalNbr';
      n[n.RelaitedMsgDetails_MsgType = 50] = 'RelaitedMsgDetails_MsgType';
      n[n.RelaitedMsgDetails_IdNbr = 51] = 'RelaitedMsgDetails_IdNbr';
      n[n.RelaitedMsgDetails_EntryDate = 52] = 'RelaitedMsgDetails_EntryDate';
      n[n.CurrencyName = 53] = 'CurrencyName';
      n[n.CountryISOCode = 54] = 'CountryISOCode';
      n[n.CountryDescrEn = 55] = 'CountryDescrEn';
      n[n.CountryDescrEl = 56] = 'CountryDescrEl';
      n[n.ORDERER_NAME = 57] = 'ORDERER_NAME';
      n[n.ORDERER_ADDRESS = 58] = 'ORDERER_ADDRESS';
      n[n.BOP_ID_INTERNAL = 59] = 'BOP_ID_INTERNAL';
      n[n.FULLNAME = 60] = 'FULLNAME';
      n[n.BRIEF_DESCRIPTION = 61] = 'BRIEF_DESCRIPTION';
      n[n.ALPHANET_ID = 62] = 'ALPHANET_ID';
      n[n.GROUPED_ACCOUNTS_MODE = 63] = 'GROUPED_ACCOUNTS_MODE';
      n[n.ALTER_APPLICATION_TYPE = 64] = 'ALTER_APPLICATION_TYPE';
      n[n.ALTER_APPLICATION_ACTION_TYPE = 65] = 'ALTER_APPLICATION_ACTION_TYPE';
      n[n.CM_ENTRY_DATE = 66] = 'CM_ENTRY_DATE';
      n[n.MultiBalanceMode = 67] = 'MultiBalanceMode';
      n[n.MultiCashManagementMode = 68] = 'MultiCashManagementMode';
      n[n.X_AUTHENTICATION_LAST_ACCESS = 69] = 'X_AUTHENTICATION_LAST_ACCESS';
      n[n.CREATED_DATE = 70] = 'CREATED_DATE';
      n[n.DELETED_DATE = 71] = 'DELETED_DATE';
      n[n.SUBSCRIBER_ID = 72] = 'SUBSCRIBER_ID';
      n[n.SWIFT_CODE = 73] = 'SWIFT_CODE';
      n[n.SWIFT_OPTION_DAILY = 74] = 'SWIFT_OPTION_DAILY';
      n[n.SWIFT_OPTION_MT941 = 75] = 'SWIFT_OPTION_MT941';
      n[n.SWIFT_OPTION_MT942 = 76] = 'SWIFT_OPTION_MT942';
      n[n.SWIFT_OPTION_MT101 = 77] = 'SWIFT_OPTION_MT101';
      n[n.SICOM_URGENT_FLAG = 78] = 'SICOM_URGENT_FLAG';
      n[n.SICOM_MERCH_DESCR = 79] = 'SICOM_MERCH_DESCR';
      n[n.SICOM_INVOICE_NO = 80] = 'SICOM_INVOICE_NO';
      n[n.SICOM_INVOICE_DATE = 81] = 'SICOM_INVOICE_DATE';
      n[n.SICOM_MERCH_COUNTRY = 82] = 'SICOM_MERCH_COUNTRY';
      n[n.SICOM_APPLIC_CUSTOMER_NAME = 83] = 'SICOM_APPLIC_CUSTOMER_NAME';
      n[n.VALUE_DATE = 84] = 'VALUE_DATE';
      n[n.SICOM_TRANSFER_TYPE = 85] = 'SICOM_TRANSFER_TYPE';
      n[n.PartialChargeRequestedAmount = 86] = 'PartialChargeRequestedAmount';
      n[n.DiasDebitOnline_OrganizationCode = 87] = 'DiasDebitOnline_OrganizationCode';
      n[n.DiasDebitOnline_ProductCode = 88] = 'DiasDebitOnline_ProductCode';
      n[n.LMS_LiteralInternal = 89] = 'LMS_LiteralInternal';
      n[n.LMS_LiteralStatement = 90] = 'LMS_LiteralStatement';
      n[n.SWIFT_OPTION_MT202 = 91] = 'SWIFT_OPTION_MT202';
      n[n.Number_Of_Instalments = 92] = 'Number_Of_Instalments';
      n[n.RegistrationNumber = 93] = 'RegistrationNumber';
      n[n.InsurancePackageType = 94] = 'InsurancePackageType';
      n[n.Token = 95] = 'Token';
      n[n.SessionId = 96] = 'SessionId';
      n[n.CreditedBeneficiaries = 97] = 'CreditedBeneficiaries';
      n[n.ReceiptNumber = 98] = 'ReceiptNumber';
      n[n.CVV = 99] = 'CVV';
      n[n.ExpirationDate = 100] = 'ExpirationDate';
      n[n.IPAddress = 101] = 'IPAddress';
      n[n.PAYMENTWEB = 102] = 'PAYMENTWEB';
      n[n.NumberPaymentStatus = 103] = 'NumberPaymentStatus';
      n[n.eParavolo_foreasId = 104] = 'eParavolo_foreasId';
      n[n.eParavolo_foreasName = 105] = 'eParavolo_foreasName';
      n[n.eParavolo_categoryId = 106] = 'eParavolo_categoryId';
      n[n.eParavolo_categoryName = 107] = 'eParavolo_categoryName';
      n[n.eParavolo_typeID = 108] = 'eParavolo_typeID';
      n[n.eParavolo_typeName = 109] = 'eParavolo_typeName';
      n[n.eParavolo_code = 110] = 'eParavolo_code';
      n[n.eParavolo_Name = 111] = 'eParavolo_Name';
      n[n.eParavolo_LastCompanyName = 112] = 'eParavolo_LastCompanyName';
      n[n.eParavolo_FatherName = 113] = 'eParavolo_FatherName';
      n[n.eParavolo_AFM = 114] = 'eParavolo_AFM';
      n[n.eParavolo_motherName = 115] = 'eParavolo_motherName';
      n[n.eParavolo_additionalInfo = 116] = 'eParavolo_additionalInfo';
      n[n.eParavolo_eMail = 117] = 'eParavolo_eMail';
      n[n.eParavolo_dob = 118] = 'eParavolo_dob';
      n[n.eParavolo_mobilePhone = 119] = 'eParavolo_mobilePhone';
      n[n.eParavolo_iban = 120] = 'eParavolo_iban';
      n[n.RemmitanceInfo = 121] = 'RemmitanceInfo';
      n[n.PreferenceColor = 122] = 'PreferenceColor';
      n[n.PreferenceOrder = 123] = 'PreferenceOrder';
      n[n.PreferenceIsPrefered = 124] = 'PreferenceIsPrefered';
      n[n.DebitReason = 125] = 'DebitReason';
      n[n.CreditReason = 126] = 'CreditReason';
      n[n.FeeType = 127] = 'FeeType';
      n[n.DebitFees = 128] = 'DebitFees';
      n[n.TotalFees = 129] = 'TotalFees';
      n[n.Payment_Code1 = 130] = 'Payment_Code1';
      n[n.Payment_Code2 = 131] = 'Payment_Code2';
      n[n.Payment_Code3 = 132] = 'Payment_Code3';
      n[n.STOCK_MSAT = 133] = 'STOCK_MSAT';
      n[n.STOCK_ASAT = 134] = 'STOCK_ASAT';
      n[n.LaborTicket_Employer_AMKA = 135] = 'LaborTicket_Employer_AMKA';
      n[n.LaborTicket_Employer_Father = 136] = 'LaborTicket_Employer_Father';
      n[n.LaborTicket_Employer_Name = 137] = 'LaborTicket_Employer_Name';
      n[n.LaborTicket_Employer_SurName = 138] = 'LaborTicket_Employer_SurName';
      n[n.LaborTicket_Employer_TaxCode = 139] = 'LaborTicket_Employer_TaxCode';
      n[n.LaborTicket_Employee_AMKA = 140] = 'LaborTicket_Employee_AMKA';
      n[n.LaborTicket_Employee_Name = 141] = 'LaborTicket_Employee_Name';
      n[n.LaborTicket_Employee_SurName = 142] = 'LaborTicket_Employee_SurName';
      n[n.LaborTicket_Employee_FatherName = 143] = 'LaborTicket_Employee_FatherName';
      n[n.LaborTicket_Employee_Amount = 144] = 'LaborTicket_Employee_Amount';
      n[n.LaborTicket_SocialSecurity = 145] = 'LaborTicket_SocialSecurity';
      n[n.LaborTicket_SocialSecurity_Service = 146] = 'LaborTicket_SocialSecurity_Service';
      n[n.LaborTicket_Tax = 147] = 'LaborTicket_Tax';
      n[n.VehicleTax_OwnerAFM = 148] = 'VehicleTax_OwnerAFM';
      n[n.VehicleTax_VehicleNumber = 149] = 'VehicleTax_VehicleNumber';
      n[n.VehicleTax_Year = 150] = 'VehicleTax_Year';
      n[n.VehicleTax_VehicleType = 151] = 'VehicleTax_VehicleType';
      n[n.VehicleTax_Number = 152] = 'VehicleTax_Number';
      n[n.VehicleTax_OwnerName = 153] = 'VehicleTax_OwnerName';
      n[n.VehicleTax_PaymentCode_1 = 154] = 'VehicleTax_PaymentCode_1';
      n[n.VehicleTax_PaymentCode_2 = 155] = 'VehicleTax_PaymentCode_2';
      n[n.VehicleTax_PaymentCode_3 = 156] = 'VehicleTax_PaymentCode_3';
      n[n.Authorize_RequestCode = 157] = 'Authorize_RequestCode';
      n[n.Authorize_RequestVAT = 158] = 'Authorize_RequestVAT';
      n[n.Authorize_RequestAmount = 159] = 'Authorize_RequestAmount';
      n[n.Authorize_ResponseCode = 160] = 'Authorize_ResponseCode';
      n[n.Authorize_ResponseAmount = 161] = 'Authorize_ResponseAmount';
      n[n.Authorize_RequestCode1 = 162] = 'Authorize_RequestCode1';
      n[n.Authorize_RequestCode2 = 163] = 'Authorize_RequestCode2';
      n[n.LaborTicket_Key = 164] = 'LaborTicket_Key';
      n[n.LaborTicket_Status = 165] = 'LaborTicket_Status';
      n[n.Authorize_ResponseCode1 = 166] = 'Authorize_ResponseCode1';
      n[n.ProductCode = 167] = 'ProductCode';
      n[n.ProductType = 168] = 'ProductType';
      n[n.SubsID = 169] = 'SubsID';
      n[n.UserID = 170] = 'UserID';
      n[n.DateFrom = 171] = 'DateFrom';
      n[n.DateTo = 172] = 'DateTo';
      n[n.Lang = 173] = 'Lang';
      n[n.MyBankOrderNumber = 174] = 'MyBankOrderNumber';
      n[n.CMError = 175] = 'CMError';
      n[n.CMLastUpdateDate = 176] = 'CMLastUpdateDate';
      n[n.IsCMOtherBank = 177] = 'IsCMOtherBank';
      n[n.SICOM_APPROVAL_CODE = 210] = 'SICOM_APPROVAL_CODE';
      n[n.SICOM_AFM = 211] = 'SICOM_AFM';
      n[n.IS_OTHER_BANK_PRODUCT = 226] = 'IS_OTHER_BANK_PRODUCT';
      n[n.PRODUCT_BANK_NAME = 227] = 'PRODUCT_BANK_NAME';
      n[n.IrisOrderNumber = 235] = 'IrisOrderNumber';
      n[n.Iris_CreditorName = 237] = 'Iris_CreditorName';
      n[n.Iris_CreditorTradeName = 238] = 'Iris_CreditorTradeName';
      n[n.Iris_BeneficiaryId = 239] = 'Iris_BeneficiaryId';
      n[n.Iris_CreditorBIC = 240] = 'Iris_CreditorBIC';
      n[n.Iris_OrderDescr = 241] = 'Iris_OrderDescr';
      n[n.Iris_RemittanceInfo = 242] = 'Iris_RemittanceInfo';
      n[n.Iris_EndToEndId = 243] = 'Iris_EndToEndId'
    }(c = n.DetailName || (n.DetailName = {
    })),
    function (n) {
      n[n.Favorites = - 2] = 'Favorites';
      n[n.New = - 1] = 'New';
      n[n.Card = - 3] = 'Card';
      n[n.Loans = - 4] = 'Loans';
      n[n.GreekPublicSector = 114] = 'GreekPublicSector';
      n[n.TelephonyInternet = 116] = 'TelephonyInternet';
      n[n.InsuranceCompanies = 118] = 'InsuranceCompanies';
      n[n.OtherPayments = 120] = 'OtherPayments';
      n[n.DonationsForSocialPurposes = 122] = 'DonationsForSocialPurposes'
    }(l = n.PaymentCategoryType || (n.PaymentCategoryType = {
    }))
  }) (t = n.server || (n.server = {
  }))
}(alpha || (alpha = {
})),
function (n) {
  var t;
  (function (n) {
    var t;
    (function (n) {
      n[n.All = 0] = 'All';
      n[n.EnquiryAccounts = 1] = 'EnquiryAccounts';
      n[n.DebitAccounts = 2] = 'DebitAccounts';
      n[n.DebitAccountsForOrderedTransfer = 3] = 'DebitAccountsForOrderedTransfer';
      n[n.CreditAccounts = 4] = 'CreditAccounts';
      n[n.CreditAccountsForOrderedTransfer = 5] = 'CreditAccountsForOrderedTransfer';
      n[n.EnquiryCards = 6] = 'EnquiryCards';
      n[n.DebitCards = 7] = 'DebitCards';
      n[n.CreditCards = 8] = 'CreditCards';
      n[n.EnquiryLoans = 9] = 'EnquiryLoans';
      n[n.DebitLoans = 10] = 'DebitLoans';
      n[n.CreditLoans = 11] = 'CreditLoans';
      n[n.Banks = 12] = 'Banks';
      n[n.CardsForPayment = 13] = 'CardsForPayment';
      n[n.LoansForPayment = 14] = 'LoansForPayment';
      n[n.Banks_For_Cards = 15] = 'Banks_For_Cards';
      n[n.Specific_ProductTypeIDs = 16] = 'Specific_ProductTypeIDs';
      n[n.INTERBANK_CARDS = 17] = 'INTERBANK_CARDS';
      n[n.DebitAccountsForPayment = 18] = 'DebitAccountsForPayment';
      n[n.CardsForCashAdvance = 19] = 'CardsForCashAdvance';
      n[n.LoansForCashAdvance = 20] = 'LoansForCashAdvance';
      n[n.AllAccounts = 21] = 'AllAccounts';
      n[n.AllCards = 22] = 'AllCards';
      n[n.AllLoans = 23] = 'AllLoans';
      n[n.AllInvestments = 24] = 'AllInvestments';
      n[n.AllEnquiryCreditCards = 25] = 'AllEnquiryCreditCards';
      n[n.AllEnquiryDebitCards = 26] = 'AllEnquiryDebitCards';
      n[n.AllEnquiryCashCards = 27] = 'AllEnquiryCashCards';
      n[n.AllEnquiryPrepaidCards = 28] = 'AllEnquiryPrepaidCards';
      n[n.INTERBANK_ACCOUNTS = 29] = 'INTERBANK_ACCOUNTS';
      n[n.INTERNATIONAL_CREDIT_ACCOUNTS = 30] = 'INTERNATIONAL_CREDIT_ACCOUNTS';
      n[n.AllAlphaBankAccounts = 31] = 'AllAlphaBankAccounts';
      n[n.AllInterbankAccounts = 32] = 'AllInterbankAccounts';
      n[n.AllInternationalAccounts = 33] = 'AllInternationalAccounts';
      n[n.DebitAccountsForStandingOrders = 34] = 'DebitAccountsForStandingOrders';
      n[n.LaborTicketDebitAccounts = 35] = 'LaborTicketDebitAccounts';
      n[n.LaborTicketCreditAccounts = 36] = 'LaborTicketCreditAccounts';
      n[n.AccountsForTokenCharges = 37] = 'AccountsForTokenCharges';
      n[n.AccountsForEstatements = 38] = 'AccountsForEstatements';
      n[n.MortgageLoansForEstatements = 39] = 'MortgageLoansForEstatements';
      n[n.StandingPayments = 40] = 'StandingPayments';
      n[n.CardsForEStatements = 41] = 'CardsForEStatements';
      n[n.CardsForSecureWeb = 42] = 'CardsForSecureWeb';
      n[n.AccountsForChequeBooks = 43] = 'AccountsForChequeBooks';
      n[n.CardsForPayment_NoPrepaid = 44] = 'CardsForPayment_NoPrepaid';
      n[n.AccountsForETimeDeposits = 45] = 'AccountsForETimeDeposits';
      n[n.MortgageEnterpriseLoansForPayment = 46] = 'MortgageEnterpriseLoansForPayment';
      n[n.CorporateDebit = 47] = 'CorporateDebit';
      n[n.CorporateCredit = 48] = 'CorporateCredit';
      n[n.CreditAccountsPayroll = 49] = 'CreditAccountsPayroll';
      n[n.DebitAccountsForPayroll = 50] = 'DebitAccountsForPayroll';
      n[n.AllEnquiryAccounts = 51] = 'AllEnquiryAccounts';
      n[n.AllAlphaBankProfileAccounts = 52] = 'AllAlphaBankProfileAccounts';
      n[n.LoansForFile = 53] = 'LoansForFile';
      n[n.IkaProduct = 10010] = 'IkaProduct'
    }) (t = n.ProductRequestType || (n.ProductRequestType = {
    }))
  }) (t = n.server || (n.server = {
  }))
}(alpha || (alpha = {
})),
function (n) {
  var t = function () {
    function t() {
    }
    return t.flatten = function (t) {
      return n.utils.advancedFlatten({
      }, t, null)
    },
    t.mergeByPropertie = function (n, t, i) {
      _.map(n, function (n) {
        return _.extend(n, _.find(t, function () {
          return t[i]
        }))
      })
    },
    t.advancedFlatten = function (t, i, r) {
      var u,
      f;
      for (u in i) i.hasOwnProperty(u) && (f = n.utils.isUndefinedOrNullorWhiteSpace(r) ? u : n.utils.formatString('{0}_{1}', [
        r,
        u
      ]), typeof i[u] == 'object' && null !== i[u] ? n.utils.advancedFlatten(t, i[u], f)  : t[f] = i[u]);
      return t
    },
    t.getUsersOfRole = function (n, t) {
      for (var r, u, e = [
        'NoRole',
        'IndividualUser',
        'AdvancedIndividual',
        'PersonalCompany',
        'BMaster',
        'CompanyAdminUser',
        'CompanyAdminUser_DualAction',
        'SimpleCompany',
        'CompanyEndUser',
        'CallCenterUser',
        'Alphaphone',
        'CompanyEndUser_DualAction',
        'Mobile',
        'CompanyApproverUser',
        'PaymentHub',
        'PaymentHub_Mobile'
      ], f = [
      ], i = 0; i < n.length; i++) for (r = 0; r < n[i].Services.Service.length; r++) if (u = !1, t.forEach(function (t) {
        n[i].Services.Service[r] == e[t] && (f.push(n[i]), u = !0)
      }), u) break;
      return f
    },
    t.isFutureDate = function (n) {
      if (n) {
        var t = new Date;
        return t < n
      }
      return null
    },
    t.getAccountCurrency = function (t, i) {
      t.length > 15 && (t = t.substring(12));
      var u = n.server.Currency.NA,
      f = parseInt(t.substring(3, 5)),
      r = i.filter(function (n) {
        return n.HostCode === f
      });
      return r && r.length && (u = r[0].Currency),
      u
    },
    t.merge = function (n) {
      for (var i = [
      ], t = 1; t < arguments.length; t++) i[t - 1] = arguments[t];
      return i.forEach(function (t) {
        for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
      }),
      n
    },
    t.MaskAccount = function (n) {
      var i,
      t;
      if (n && n.length > 4) {
        for (i = n.split(''), t = 0; t < i.length; t++) t > 4 && t < i.length - 3 && (i[t] = '*');
        return i.join('')
      }
      return n
    },
    t.IGetProfileProductsResponseToIPagedResponseBase = function (n) {
      var i = {
      };
      return i.CurrentPageIndex = t.isUndefinedOrNull(n.CurrentPageIndex) ? '' : n.CurrentPageIndex,
      i.Error = t.isUndefinedOrNull(n.Error) ? null : n.Error,
      i.HasMore = t.isUndefinedOrNull(n.HasMore) ? null : n.HasMore,
      i.ReplyRecords = t.isUndefinedOrNull(n.ReplyRecords) ? 0 : n.ReplyRecords,
      i.ResultCode = t.isUndefinedOrNull(n.ResultCode) ? 1 : n.ResultCode,
      i.TotalRecords = t.isUndefinedOrNull(n.TotalRecords) ? 0 : n.TotalRecords,
      i.IsLastPage = t.isUndefinedOrNull(n.IsLastPage) ? !1 : n.IsLastPage,
      i.LastRowNumber = t.isUndefinedOrNull(n.LastRowNumber) ? 0 : n.LastRowNumber,
      i
    },
    t.MaskCard = function (n) {
      var i,
      t;
      if (n && n.length > 6) {
        for (i = n.split(''), t = 6; t < i.length; t++) t < Math.min(12, n.length) && (i[t] = (t == 6 ? ' ' : '') + '*' + (t == 11 ? ' ' : ''));
        return i.join('')
      }
      return n
    },
    t.IsAnyPropertyInGraphNull = function (t, i) {
      if (n.utils.isUndefinedOrNull(t)) return !0;
      for (var e = i.split('.'), o = e.length, r = !1, u = t, f = 0; !r && f < o; ) u = u[e[f]],
      r = n.utils.isUndefinedOrNull(u),
      f++;
      return r
    },
    t.getPropertyValueFromObject = function (t, i) {
      var r,
      u;
      if (!t) return null;
      for (r in t) {
        if (r === i) return t[r];
        if (typeof t[r] == 'object' && (u = n.utils.getPropertyValueFromObject(t[r], i), u)) return u
      }
    },
    t.ContainsKey = function (n, t) {
      return t in n
    },
    t.ContainsValue = function (n, t) {
      var i = !1;
      for (var r in n) if (n[r] === t) {
        i = !0;
        break
      }
      return i
    },
    t.ToSpecificLocale = function (t) {
      var i = {
        el: 'el-GR',
        en: 'en-US'
      };
      return n.utils.ContainsKey(i, t.toLowerCase()) ? i[t.toLowerCase()] : n.utils.ContainsValue(i, t) ? t : null
    },
    t.Union = function (n) {
      var t = [
      ];
      return n.forEach(function (n) {
        n.forEach(function (n) {
          return t.push(n)
        })
      }),
      t
    },
    t.Intersect = function (t) {
      var o = [
      ],
      r = n.utils.copy(t),
      u,
      e,
      f,
      i;
      r.sort(function (n, t) {
        return n.length - t.length
      });
      u = r.shift();
      for (e in u) {
        for (f = !0, i = 0, i = 0; i < r.length && f; i++) f = r[i].indexOf(u[e]) > - 1;
        f && o.push(u[e])
      }
      return o
    },
    t.Except = function (n, t) {
      return n.filter(function (n) {
        return t.indexOf(n) < 0
      })
    },
    t.GroupBy = function (n, t) {
      var i = {
      };
      return n.forEach(function (n) {
        var r = t(n).toString(),
        u = i[r] || [
        ];
        i[r] = u.concat(n)
      }),
      i
    },
    t.SelectMany = function (n, t) {
      var i = [
      ];
      return n.forEach(function (n) {
        var r = t(n);
        r.forEach(function (n) {
          return i.push(n)
        })
      }),
      i
    },
    t.Distinct = function (n) {
      function t(n, t, i) {
        return i.indexOf(n) === t
      }
      return n.filter(t)
    },
    t.toGreekLocale = function (n) {
      return n.toString().replace('.', ',')
    },
    t.FixLocaleDateString = function (n) {
      for (var i, r = '', t = 0; t < n.length; t++) i = n.charCodeAt(t),
      i >= 47 && i <= 57 && (r += n.charAt(t));
      return r
    },
    t.safeSingleQuoteEscape = function (n) {
      return null == n || !angular.isString(n) ? n : n.replace(/\'/g, '&apos;')
    },
    t.formatString = function (n, t) {
      return n.replace(/{(\d+)}/g, function (n, i) {
        return typeof t[i] != 'undefined' ? t[i] : n
      })
    },
    t.toShortDateString = function (n) {
      var t = '';
      return n && (t = n.getDate() + '/' + (n.getMonth() + 1) + '/' + n.getFullYear()),
      t
    },
    t.arraySetEquals = function (n, t, i) {
      if (i === void 0 && (i = function (n, t) {
        return n === t
      }), !n || !t) return n == t;
      for (var r = n.length === t.length, u = 0; r && u < n.length; ) r = t.some(function (t) {
        return i(n[u], t)
      }),
      u++;
      return r
    },
    t.getUniquePropertyValues = function (n, t) {
      for (var i, u = {
      }, f = [
      ], r = 0; r < n.length; r++) (i = n[r][t], u.hasOwnProperty(i)) || (f.push(i), u[i] = 1);
      return f
    },
    t.isUndefinedOrNull = function (n) {
      return angular.isUndefined(n) || n === null
    },
    t.isUndefinedOrNullorWhiteSpace = function (n) {
      return angular.isUndefined(n) || n === null || n == ''
    },
    t.isUndefinedOrNullorEmpty = function (n) {
      return angular.isUndefined(n) || n === null || this.isEmpty(n)
    },
    t.isEmptyArray = function (n) {
      return t.isUndefinedOrNull(n) || n.length == 0
    },
    t.isEmpty = function (n) {
      for (var t in n) if (n.hasOwnProperty(t)) return !1;
      return JSON.stringify(n) === JSON.stringify({
      })
    },
    t.numberToLiteral = function (n) {
      if (n != null) {
        if (n == 1) return 'one';
        if (n == 2) return 'two';
        if (n == 3) return 'three';
        if (n == 4) return 'four';
        if (n == 5) return 'five';
        if (n == 6) return 'six';
        if (n == 7) return 'seven';
        if (n == 8) return 'eight';
        if (n == 9) return 'nine';
        if (n == 10) return 'ten'
      }
    },
    t.parseDateString = function (n, i, r) {
      var u,
      f,
      o,
      v;
      r === void 0 && (r = !1);
      var s = 0,
      h = 0,
      c = 0,
      e = 0,
      l = 0,
      a = 0;
      return t.isUndefinedOrNullorWhiteSpace(n) ? null : (u = n.split(' '), u[0] && (f = u[0].split('/'), f.length === 3 && (s = parseInt(f[2].toString()), h = i && i === 'en' ? parseInt(f[0].toString())  : parseInt(f[1].toString()), c = i && i === 'en' ? parseInt(f[1].toString())  : parseInt(f[0].toString()))), u[1] && (o = u[1].split(':'), o.length === 3 && (e = parseInt(o[0].toString()), l = parseInt(o[1].toString()), a = parseInt(o[2].toString()))), r && i && u[2] && (v = {
        en: 'PM',
        el: 'μμ'
      }, e = u[2] === v[i] && e <= 11 ? e + 12 : e), new Date(s, h - 1, c, e, l, a, 0))
    },
    t.copy = function (n) {
      var t = JSON.stringify(n);
      return JSON.parse(t)
    },
    t.SubtractMonths = function (n, t) {
      var i = n.getMonth(),
      r,
      u = n.getFullYear();
      return i >= t ? r = i - t : (r = 11 - (t - i), u = n.getFullYear() - 1),
      n.setMonth(r),
      n.setFullYear(u),
      n
    },
    t.SubtractYears = function (n, t) {
      var i = n.getFullYear(),
      r = i - t;
      return n.setFullYear(r),
      n
    },
    t.forceValidation = function (n) {
      if (n) {
        n.$setDirty();
        for (var t in n) n[t] != undefined && n[t].$pristine != undefined && (n[t].$dirty = !0, n[t].$pristine = !1)
      }
    },
    t.CheckAlphaIban = function (n) {
      var i = {
        valid: !1,
        isLocal: !1
      };
      if (n.substr(0, 2) != 'GR' || isNaN(parseInt(n.substr(2, 2))) || n.length != 27 || '014' != n.substr(4, 3)) return i;
      i.isLocal = !0;
      var f = n.substr(4) + '1627' + n.substr(2, 2),
      r = '',
      t = f,
      u = '';
      do r = (parseInt(t.substr(0, 9)) % 97).toString(),
      u = t.substr(9),
      t = r + u.toString();
      while (t.length > 9);
      return i.valid = parseInt(t) % 97 == 1,
      i
    },
    t.convertCatGroupTypeToProdtReqType = function (t) {
      switch (t) {
        case n.server.CategoryGroupType.ACCOUNT:
          return n.server.ProductRequestType.AccountsForEstatements;
        case n.server.CategoryGroupType.CARD:
          return n.server.ProductRequestType.CardsForEStatements;
        case n.server.CategoryGroupType.LOAN:
          return n.server.ProductRequestType.MortgageLoansForEstatements
      }
    },
    t.createObjectFromEnum = function (n) {
      var t = {
      };
      return angular.forEach(n, function (n, i) {
        isNaN(i) || (t[i] = n)
      }),
      t
    },
    t.dynamicSort = function (n) {
      var t = 1;
      return n[0] === '-' && (t = - 1, n = n.substr(1)),
      function (i, r) {
        var u = i[n] < r[n] ? - 1 : i[n] > r[n] ? 1 : 0;
        return u * t
      }
    },
    t.closePaymentsHubPopUp = function () {
      $('*[data-popover-title]').each(function () {
        $(this).siblings('.popover').hide();
        var n = angular.element(this).scope();
        n.tt_isOpen = !1
      })
    },
    t.getErrorMsg = function (n, t) {
      return n && n.Error && n.Error.Message ? n.Error.Message : n && angular.isString(n.Error) ? n.Error : n && n.Message ? n.Message : n && n.message ? n.message : n && n.statusText ? n.statusText : n && angular.isString(n) ? n : t || 'Λάθος συστήματος'
    },
    t.buildError = function (t, i) {
      var u,
      r;
      return i === void 0 && (i = null),
      u = n.utils.getErrorMsg(t, i),
      t = t || {
      },
      r = t.Error || t,
      {
        Code: r.Code || 0,
        ErrorCode: r.ErrorCode || 0,
        Message: u
      }
    },
    t.getMaskedPaymentCode = function (n, t) {
      for (var e = /{.*}/, r, u, i, o, f; e.test(n); ) r = e.exec(n) [0],
      u = '',
      r.indexOf(':') > - 1 ? (i = r.replace('}', '').replace('{', '').split(':'), (i[0] in t || i[1] in t) && (o = i[0] in t, u = o ? t[i[0]] + i[1].substring(t[i[0]].length)  : i[0].substring(0, i[0].length - t[i[1]].length) + t[i[1]]))  : (f = r.replace('{', '').replace('}', ''), f in t && (u = t[f])),
      n = n.replace(r, u);
      return n
    },
    t.escapeEntityReferences = function (n) {
      return n && t.reHasUnescapedHtml.test(n) ? n.replace(t.reUnescapedHtml, function (n) {
        return t.htmlEscapes[n]
      })  : n
    },
    t.CreatePaymentMask = function (n, t) {
      var i;
      if (t.PaymentCodeMask != null && t.PaymentCodeMask != '' && t.PaymentCodeMask != undefined && (i = t.PaymentCodeMask, i = i.replace('{', '').replace('}', ''), i.length > 0 && i.indexOf(':') != - 1)) {
        var r = i.split(':'),
        u = n.length,
        f = r[1].length + 1 - u;
        return Array(f).join('0') + n
      }
      return n
    },
    t.padLeft = function (n, t, i) {
      for (var r = '', u = 0; u < i; u++) r += '0';
      return r.substring(0, i - n.length) + n
    },
    t.getEmptyApprovalTable = function (n, t, i) {
      return {
        Active: !0,
        RightId: n,
        SubsId: t,
        ApprovalTableRows: [
          {
            Active: !0,
            Amount: i,
            ApprovalTableCells: [
              {
                Level: 1,
                TokenRequired: 0
              }
            ]
          }
        ]
      }
    },
    t.getChildController = function (n, i) {
      var r = n.current.controller,
      u = t.identifierForController(r),
      f = n;
      return f.$current.locals['@' + i].$scope[u]
    },
    t.identifierForController = function (n) {
      if (angular.isString(n)) {
        var t = this.CNTRL_REG.exec(n);
        if (t[3]) return t[3];
        n
      }
    },
    t.getTransferTypeQueryString = function (n) {
      var t = '';
      switch (n) {
        case 2:
          t = 'International';
          break;
        case 23:
        case 10:
        case 11:
          t = 'SimpleImports';
          break;
        default:
          t = 'Domestic'
      }
      return t
    },
    t.getValueFromDetails = function (n, t) {
      if (!n) return '';
      for (var i = 0; i < n.Details.length; ++i) if (n.Details[i].Name === t) return n.Details[i];
      return undefined
    },
    t.uniqueValues = function (n) {
      for (var i, r = {
      }, t = n.length - 1; t >= 0; t--) i = JSON.stringify(n[t]),
      r[i] ? n.splice(t, 1)  : r[i] = !0;
      return n
    },
    t.filterArrayObjectByProperty = function (n, t, i) {
      return n.filter(function (n) {
        return n.hasOwnProperty(t) && n[t] == i
      })
    },
    t.getUniqueValues = function (n, i) {
      for (var u = {
      }, f = [
      ], e = 0, r = 0, o = n.length; r < o; ++r) t.isUndefinedOrNullorWhiteSpace(n[r][i]) || u.hasOwnProperty(n[r][i]) || (f[e++] = n[r][i], u[n[r][i]] = '');
      return f
    },
    t.htmlEscapes = {
      '&': '&amp',
      '<': '&lt',
      '>': '&gt',
      '"': '&#39',
      '\'': '&#39'
    },
    t.reUnescapedHtml = /[&<>"']/g,
    t.reHasUnescapedHtml = RegExp(t.reUnescapedHtml.source),
    t.CNTRL_REG = /^(\S+)(\s+as\s+([\w$]+))?$/,
    t
  }();
  n.utils = t;
  window.__gCrWeb || (window.__gCrWeb = {
  })
}(alpha || (alpha = {
})),
function (n) {
  var t = function () {
    function n() {
    }
    return n.getDebitAccountCode = function (n, t) {
      var f = n.key,
      i = t.getStateData(f),
      r = undefined,
      u;
      return i && (u = i.Transaction ? i.Transaction : i, r = u.DebitProduct),
      r
    },
    n.getProductWithCode = function (n, t) {
      if (n && n.length) for (var i in n) if (n[i].Code == t) return n[i];
      return null
    },
    n.removeProductWithCode = function (n, t) {
      if (n && n.length) for (var i = 0; i < n.length; i++) n[i].Code == t && n.splice(i, 1)
    },
    n.cloneProductWithEditedFields = function (t, i) {
      return !i || !t ? t : {
        AlertsCrossBorderCashActivated: n.getFieldData(t, i, 'AlertsCrossBorderCashActivated'),
        AlertsCrossBorderSalesActivated: n.getFieldData(t, i, 'AlertsCrossBorderSalesActivated'),
        AlertsDomesticCashActivated: n.getFieldData(t, i, 'AlertsDomesticCashActivated'),
        AlertsDomesticSalesActivated: n.getFieldData(t, i, 'AlertsDomesticSalesActivated'),
        AvailableBalance: n.getFieldData(t, i, 'AvailableBalance'),
        AvailableBalanceSign: n.getFieldData(t, i, 'AvailableBalanceSign'),
        BonusPoints: n.getFieldData(t, i, 'BonusPoints'),
        CardType: n.getFieldData(t, i, 'CardType'),
        CategoryGroup: n.getFieldData(t, i, 'CategoryGroup'),
        CategoryID: n.getFieldData(t, i, 'CategoryID'),
        CategoryType: n.getFieldData(t, i, 'CategoryType'),
        CDINumber: n.getFieldData(t, i, 'CDINumber'),
        Code: n.getFieldData(t, i, 'Code'),
        Color: n.getFieldData(t, i, 'Color'),
        CreditLimit: n.getFieldData(t, i, 'CreditLimit'),
        CreditLimitSign: n.getFieldData(t, i, 'CreditLimitSign'),
        CreditsCurDay: n.getFieldData(t, i, 'CreditsCurDay'),
        Currency: n.getFieldData(t, i, 'Currency'),
        CurrentBalance: n.getFieldData(t, i, 'CurrentBalance'),
        CurrentBalanceSign: n.getFieldData(t, i, 'CurrentBalanceSign'),
        DebitsCurDay: n.getFieldData(t, i, 'DebitsCurDay'),
        Description: n.getFieldData(t, i, 'Description'),
        DescriptionCode: n.getFieldData(t, i, 'DescriptionCode'),
        Details: n.getFieldData(t, i, 'Details'),
        HasBonus: n.getFieldData(t, i, 'HasBonus'),
        HasCheques: n.getFieldData(t, i, 'HasCheques'),
        HasEStatementsActivated: n.getFieldData(t, i, 'HasEStatementsActivated'),
        HasLoyalty: n.getFieldData(t, i, 'HasLoyalty'),
        IsAlphaBankProduct: n.getFieldData(t, i, 'IsAlphaBankProduct'),
        IsCorporate: n.getFieldData(t, i, 'IsCorporate'),
        IsCorporateCard: n.getFieldData(t, i, 'IsCorporateCard'),
        IsMainCard: n.getFieldData(t, i, 'IsMainCard'),
        IsPassbookAccount: n.getFieldData(t, i, 'IsPassbookAccount'),
        IsPreferred: n.getFieldData(t, i, 'IsPreferred'),
        LoyaltyPoints: n.getFieldData(t, i, 'LoyaltyPoints'),
        LoyaltyPointsString: n.getFieldData(t, i, 'LoyaltyPointsString'),
        LoyaltyScheme: n.getFieldData(t, i, 'LoyaltyScheme'),
        NetBalance: n.getFieldData(t, i, 'NetBalance'),
        NetBalanceSign: n.getFieldData(t, i, 'NetBalanceSign'),
        Order: n.getFieldData(t, i, 'Order'),
        Overdraft: n.getFieldData(t, i, 'Overdraft'),
        Owners: n.getFieldData(t, i, 'Owners'),
        ProductID: n.getFieldData(t, i, 'ProductID'),
        ProviderID: n.getFieldData(t, i, 'ProviderID'),
        RequestTypes: n.getFieldData(t, i, 'RequestTypes'),
        Stock: n.getFieldData(t, i, 'Stock'),
        Title: n.getFieldData(t, i, 'Title'),
        TotalBloks: n.getFieldData(t, i, 'TotalBloks'),
        TypeID: n.getFieldData(t, i, 'TypeID'),
        TypeName: n.getFieldData(t, i, 'TypeName'),
        Uses: n.getFieldData(t, i, 'Uses'),
        HasDetailedInfo: n.getFieldData(t, i, 'HasDetailedInfo')
      }
    },
    n.getFieldData = function (n, t, i) {
      var r = t[i],
      u = n[i],
      s,
      h,
      f,
      o,
      e;
      if (Array.isArray(u) && Array.isArray(r)) {
        for (s = r.length, h = u.length, f = 0; f < s; f++) {
          for (o = !1, e = 0; e < h; e++) u[e].Name == r[f].Name && (u[f] = r[f], o = !0);
          o || u.push(r[f])
        }
        return u
      }
      return r ? r : u
    },
    n
  }();
  n.utilities = t
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
  var n = Object.setPrototypeOf || {
    __proto__: [
    ]
  }
  instanceof Array && function (n, t) {
    n.__proto__ = t
  }
  || function (n, t) {
    for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
  };
  return function (t, i) {
    function r() {
      this.constructor = t
    }
    n(t, i);
    t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
  }
}();
__assign = this && this.__assign || Object.assign || function (n) {
  for (var t, r, i = 1, u = arguments.length; i < u; i++) {
    t = arguments[i];
    for (r in t) Object.prototype.hasOwnProperty.call(t, r) && (n[r] = t[r])
  }
  return n
},
function (n) {
  var t;
  (function (t) {
    var f = function () {
      function n() {
        this.ErrorMessage = '';
        this.HasErrors = !1
      }
      return n
    }(),
    i,
    r,
    u;
    t.WizardModelBase = f,
    function (n) {
      n[n.None = 0] = 'None';
      n[n.Forward = 1] = 'Forward';
      n[n.Backward = 2] = 'Backward'
    }(i = t.StepDirection || (t.StepDirection = {
    }));
    r = function () {
      function t(n, t) {
        var i = this;
        this.scope = n;
        this.$injector = t;
        this.disableScrollTop = !1;
        this.Model = {
          HasErrors: !1,
          ErrorMessage: ''
        };
        this.CurrentStepIndex = 0;
        this.CurrentGroupIndex = 0;
        this.IsBusy = !1;
        this.showValidationErrors = !1;
        this.Title = '';
        this.qService = t.get('$q');
        this.STRINGS = t.get('STRINGS');
        this.AppEventsService = t.get('AppEventsService');
        this.WizardStepIndexService = t.get('WizardStepIndexService');
        this.scope.$on('$destroy', function () {
          i.WizardStepIndexService.resetCurrentStepIndex();
          i.WizardStepIndexService.resetCurrentStepHelpKey()
        })
      }
      return t.prototype.makeWizardStep = function (n, t) {
        return n.processStep = t,
        n
      },
      Object.defineProperty(t.prototype, 'Steps', {
        get: function () {
          return this.steps || (this.steps = this.initialiseSteps(), this.scope.BIStepsLength = this.steps.length, this.scope.BICurrentStepIndex = this.CurrentStepIndex),
          this.steps
        },
        set: function (n) {
          this.steps = n
        },
        enumerable: !0,
        configurable: !0
      }),
      t.prototype.CanGotoPrevious = function () {
        return this.getCurrentStep().canBack === !1 ? !1 : this.CurrentStepIndex > this.Steps[0].index
      },
      t.prototype.CanSkipWizard = function () {
        return this.getCurrentStep().canSkip === !1 ? !1 : this.CurrentStepIndex == this.Steps[0].index
      },
      t.prototype.reloadSteps = function () {
        this.steps = this.initialiseSteps()
      },
      t.prototype.initialiseSteps = function () {
        return []
      },
      t.prototype.getCurrentStep = function () {
        return this.WizardStepIndexService.setCurrentStepIndex(this.CurrentStepIndex),
        this.Steps[this.CurrentStepIndex].helpKey && this.WizardStepIndexService.setCurrentStepHelpKey(this.Steps[this.CurrentStepIndex].helpKey),
        this.Steps[this.CurrentStepIndex]
      },
      t.prototype.getStepByIndex = function (n) {
        return this.WizardStepIndexService.setCurrentStepIndex(n),
        this.Steps[n].helpKey && this.WizardStepIndexService.setCurrentStepHelpKey(this.Steps[n].helpKey),
        this.Steps[n]
      },
      t.prototype.getCurrentStepTitleFromResource = function (t) {
        if (t) {
          if (!n.utils.isUndefinedOrNullorWhiteSpace(t.title)) return this.STRINGS[t.title]
        } else if (!n.utils.isUndefinedOrNullorWhiteSpace(this.Steps[this.CurrentStepIndex].title)) return this.STRINGS[this.Steps[this.CurrentStepIndex].title]
      },
      t.prototype.nextStep = function () {
        var t = this,
        i,
        r;
        this.forceValidation();
        this.scope.form.$valid && (i = this.getCurrentStep(), this.showValidationErrors = !1, this.IsBusy = !0, this.Model.HasErrors = !1, this.Model.ErrorMessage = '', i.processStep ? (r = this.$injector.invoke(i.processStep, this, this), this.qService.when(r).then(function (n) {
          n && t.gotoNextStep()
        }, function (i) {
          i = i || {
          };
          AppInsights.tryPublishServerErrorOnNextStepForBITelemetry(t.AppEventsService, t.scope, i, t.CurrentStepIndex, t.Steps.length);
          i.userCancel || i.customErrorHandling || (t.Model.HasErrors = !0, t.Model.ErrorMessage = n.utils.getErrorMsg(i))
        }).finally (function () {
          t.IsBusy = !1
        }))  : (this.IsBusy = !1, this.gotoNextStep()))
      },
      t.prototype.disableSave = function () {
        return this.scope.form.$pristine || this.IsBusy
      },
      t.prototype.gotoNextStep = function () {
        this.disableScrollTop || $(document).scrollTop(0);
        AppInsights.tryPublishWizardSuccessfulStepForwardChangeForBITelemetry(this.AppEventsService, this.scope, this.CurrentStepIndex, this.Steps.length);
        this.CurrentStepIndex < this.Steps.length - 1 && (this.CurrentStepIndex++, this.CurrentGroupIndex = this.Steps[this.CurrentStepIndex].groupIndex, this.OnStepChanged(this.CurrentStepIndex, i.Forward))
      },
      t.prototype.OnStepChanged = function (t, r) {
        r === void 0 && (r = i.None);
        this.scope.BICurrentStepIndex = this.CurrentStepIndex;
        var u = AppInsights.enrichTransactionTelemetry(this.Model, this.Title);
        this.AppEventsService.tryPublish(n.common.services.AppEventsService.WizardStepChanged, __assign({
          currentStepIndex: t,
          move: r,
          totalWizardSteps: this.Steps.length
        }, u))
      },
      t.prototype.goToStep = function (n, t) {
        if (t || (this.Model.HasErrors = !1, this.Model.ErrorMessage = ''), this.showValidationErrors = t || !1, this.IsBusy = !1, this.Steps.length > 0 && n >= 0 && n < this.Steps.length) {
          var r = this.CurrentStepIndex == n ? i.None : this.CurrentStepIndex < n ? i.Forward : i.Backward;
          this.CurrentStepIndex = n;
          this.CurrentGroupIndex = this.Steps[this.CurrentStepIndex].groupIndex;
          this.OnStepChanged(this.CurrentStepIndex, r)
        }
      },
      t.prototype.previousStep = function () {
        this.Model.HasErrors = !1;
        this.Model.ErrorMessage = '';
        this.gotoPreviousStep()
      },
      t.prototype.gotoPreviousStep = function () {
        this.IsBusy = !1;
        this.CurrentStepIndex > 0 && (this.CurrentStepIndex--, this.OnStepChanged(this.CurrentStepIndex, i.Backward))
      },
      t.prototype.forceValidation = function () {
        this.showValidationErrors = !0;
        this.scope && this.scope.form && n.utils.forceValidation(this.scope.form)
      },
      Object.defineProperty(t.prototype, 'GroupedSteps', {
        get: function () {
          var t,
          n;
          if (!this.groupedSteps) for (this.groupedSteps = [
          ], t = - 1, n = 0; n < this.Steps.length; n++) this.Steps[n].groupIndex != null && n == 0 ? this.groupedSteps.push(this.Steps[n])  : this.Steps[n].groupIndex != null && this.Steps[n].groupIndex > t && this.groupedSteps.push(this.Steps[n]),
          t = this.Steps[n].groupIndex;
          return this.groupedSteps
        },
        enumerable: !0,
        configurable: !0
      }),
      t.prototype.getCurrentGroup = function () {
        return this.Steps[this.CurrentStepIndex].groupIndex
      },
      t.prototype.print = function () {
        window.print()
      },
      t.prototype.tryPublishTransactionEventForBITelemetry = function (t, i) {
        try {
          var u = AppInsights.enrichTransactionTelemetry(this.Model, this.Title),
          r = __assign({
            isTransactionSuccessful: t
          }, u);
          i && (r.transactionErrorMessage = i);
          this.AppEventsService.tryPublish(n.common.services.AppEventsService.TransactionEndResultTriggered, r)
        } catch (f) {
        }
      },
      t
    }();
    t.WizardController = r;
    u = function (n) {
      function t(t, i, r) {
        var u = n.call(this, t, i) || this;
        return u.scope = t,
        u.$injector = i,
        u.IsInVersion = r,
        u
      }
      return __extends(t, n),
      t
    }(r);
    t.VersionFilterWizardController = u
  }) (t = n.wizards || (n.wizards = {
  }))
}(alpha || (alpha = {
})),
function (n) {
  var t;
  (function (t) {
    var i;
    (function (t) {
      var i = function (t) {
        function i(n, i, r, u, f, e) {
          var o = t.call(this, i, r) || this,
          s;
          return o.Model = n,
          o.scope = i,
          o.injector = r,
          o.StateHelperService = u,
          o.roleService = f,
          o.otpHandler = e,
          o.dateFormat = 'dd/MM/yyyy',
          o.dateOptions = {
            formatYear: 'yyyy',
            startingDay: 1,
            showWeeks: 'false',
            maxMode: 'day'
          },
          o.CanShowWizard = !0,
          o.CanShowWizardError = '',
          o.showNoDebitAccountsError = !1,
          o.today = new Date,
          o.keepOtpHandlerAlive = Boolean(o.otpHandler),
          o.otpHandler || (s = r.get('OtpHandlerService'), o.otpHandler = s.retrieveHandler(2)),
          o.stateData = o.StateHelperService.getStateData(),
          o.documentData = o.Model,
          o.documentData.DocumentRequestType = 1,
          i.$on('$destroy', function () {
            o.keepOtpHandlerAlive && o.otpHandler.unregister()
          }),
          o
        }
        return __extends(i, t),
        Object.defineProperty(i.prototype, 'otpKey', {
          get: function () {
            return this.otpHandler.caller
          },
          enumerable: !0,
          configurable: !0
        }),
        i.prototype.addEventsPublishingForCorporate = function (t) {
          this.roleService.IsRetail() || (t.publish(n.common.services.AppEventsService.InvalidateCustomUiSelectProduct, this.Model.DebitProduct.Code), n.utils.isUndefinedOrNull(this.Model.CreditAccount) || t.publish(n.common.services.AppEventsService.InvalidateCustomUiSelectProduct, this.Model.CreditAccount.Code))
        },
        i.prototype.getRealTransactionData = function (n) {
          var t = this.stateData,
          i;
          return this.stateData.Transaction && (t = this.stateData.Transaction, n && n(this.stateData, t), i = !0),
          {
            data: t,
            isTemplate: i
          }
        },
        i.prototype.canSubmit = function () {
          return !this.IsBusy
        },
        i.prototype.setTransactionStatus = function (t) {
          var r = !1,
          i = this;
          return t.ResultCode == 0 ? (i.Model.TransactionUN = t.TransactionUN, i.Model.ProcessDate = t.ProcessDate, i.Model.ProcessDateLiteral = t.ProcessDateLiteral, i.Model.TransactionStatus = n.server.TransactionStatus.Succeded, i.Model.TransactionAUN = t.TransactionAUN, i.Model.SubmittedTimeStamp = t.SubmittedTimeStamp, i.documentData = {
            DocumentRequestType: i.documentData.DocumentRequestType,
            TransactionAUN: i.Model.TransactionAUN
          }, r = !0)  : (t.Error && t.Error.Code == 9 && this.roleService.isAccessAllowed('EditLimits') && (this.Model.HasExceededLimit = !0), i.Model.TransactionStatus = n.server.TransactionStatus.Failed, i.Model.HasErrors = !0, i.Model.ErrorMessage = t.Error ? t.Error.Message : i.STRINGS.failedTransactionSystemError),
          i.tryPublishTransactionEventForBITelemetry(r, r ? null : i.Model.ErrorMessage),
          r
        },
        i.prototype.previousStep = function () {
          this.Model.OTP = '';
          this.Model.TransactionStatus = n.server.TransactionStatus.CollectData;
          t.prototype.previousStep.call(this)
        },
        i.prototype.resetDebitProduct = function () {
          this.Model.DebitProduct = null
        },
        i.$inject = [
          'Model',
          '$scope',
          '$injector',
          'StateHelperService',
          'RoleService'
        ],
        i
      }(n.wizards.WizardController),
      r,
      u;
      t.PaymentWizardController = i;
      r = function (t) {
        function i(n, i, r, u, f, e, o, s, h, c, l) {
          var a = t.call(this, n, i, r, s, h, l) || this;
          return a.Model = n,
          a.scope = i,
          a.injector = r,
          a.paymentType = u,
          a.STRINGS = f,
          a.modalService = e,
          a.PaymentTypeService = o,
          a.StateHelperService = s,
          a.StepsProvider = c,
          a.InstallmentsOptions = [
          ],
          a.HasVisibleDetails = !1,
          a.filterService = a.injector.get('$filter'),
          a.initializePaymentType(),
          a
        }
        return __extends(i, t),
        i.prototype.HasInLineElements = function () {
          var n = [
          ],
          t = this;
          if (this.paymentType) this.paymentType.Fields.map(function (i, r) {
            i.IsRenderInline && i.IsVisible && t.paymentType.PaymentCodeMask != undefined && t.paymentType.PaymentCodeMask != null && n.push(r)
          });
           else return !1;
          return n.length > 0 ? !0 : !1
        },
        i.prototype.HasRowElements = function () {
          var n = [
          ],
          t = this;
          if (this.paymentType) this.paymentType.Fields.map(function (i, r) {
            !i.IsRenderInline && i.IsVisible && t.paymentType.PaymentCodeMask != undefined && t.paymentType.PaymentCodeMask != null && n.push(r)
          });
           else return !1;
          return n.length > 0 ? !0 : !1
        },
        i.prototype.setCanShowWizard = function () {
        },
        i.prototype.initializePaymentType = function () {
          var n = this;
          n.Title = n.ViewInfo.Title;
          n.paymentType && (n.Model.ExecutionMethod = n.paymentType.ExecutionMethod, n.Model.OnlyBlockedAllowed = n.paymentType.OnlyBlockedAllowed, n.paymentType.OnlyBlockedAllowed && (n.Model.IsAmountBlocked = !0));
          n.Model.SupportsAllMethods || (n.Model.TransferMethodImmediate = n.Model.SupportsImmediateMethod);
          n.paymentType && n.paymentType && n.paymentType.Fields && n.paymentType.Fields.length > 0 && (n.populateVisibleDetails(), n.initializeDynamicValues());
          n.paymentType && n.paymentType && n.paymentType.MinInstallmentsAmount && n.paymentType.MinInstallmentsAmount > 0 && (n.MinInstallmentsAmountInfo = n.STRINGS['MinInstallmentsAmountInfo.Prefix'] + ' ' + n.paymentType.MinInstallmentsAmount + '€');
          n.populateInstallmentsLookup()
        },
        i.prototype.getFieldTemplate = function (n, t) {
          return this.PaymentTypeService.getFieldTypeTemplate(n, this.paymentType, t)
        },
        i.prototype.initializeDynamicValues = function () {
          var n = this;
          n.paymentType.Fields.map(function (t) {
            var i,
            r;
            t.FieldType == 0 && (n.Model.DynamicValues[t.FieldName] = t.DefaultValue);
            t.FieldType == 2 && (n.Model.DynamicValues[t.FieldName] = parseInt(t.DefaultValue));
            t.FieldType == 4 && (n.Model.DynamicValues[t.FieldName] = undefined, t.ListValues && t.ListValues.length > 0 && (i = t.ListValues.replace(/\\/g, ''), i = JSON.parse(i), r = i.Items, n.Model.OptionsFor[t.FieldName] = [
            ], n.Model.OptionsFor[t.FieldName].push(r)));
            t.IsRenderInline = n.paymentType.PaymentCodeMask ? n.paymentType.PaymentCodeMask.indexOf(t.FieldName) != - 1 ? !0 : !1 : !1
          })
        },
        i.prototype.populateVisibleDetails = function () {
          var n = this;
          n.VisibleDetails = [
          ];
          n.paymentType.Fields.forEach(function (t) {
            t.DetailVisibility && (n.HasVisibleDetails = !0, n.VisibleDetails.push({
              DisplayName: t.DisplayName,
              FieldName: t.FieldName,
              getValue: function (t) {
                if (this.IsDate) return n.filterService('date') (t[this.FieldName], 'dd/MM/yyyy');
                if (this.IsDropDown) return t[this.FieldName] && t[this.FieldName].hasOwnProperty('Txt') ? t[this.FieldName].Txt : '';
                if (this.IsAmount) {
                  var i = t[this.FieldName];
                  return i && i.length > 0 ? parseFloat(i.slice(0, - 2) + '.' + i.slice( - 2))  : 0
                }
                return t[this.FieldName]
              },
              IsDate: t.FieldType == 3 || t.FieldType == 5,
              IsAmount: t.FieldName == 'Amount',
              IsDropDown: t.FieldType == 4,
              DisplayInDataEntry: t.DetailVisibility && (t.DetailVisibility == 2 || t.DetailVisibility == 6),
              DisplayInConfirmation: t.DetailVisibility && (t.DetailVisibility == 4 || t.DetailVisibility == 6),
              Info: t.Info
            }))
          })
        },
        i.prototype.populateInstallmentsLookup = function () {
          var n = this;
          n.InstallmentsOptions = [
          ];
          n.paymentType && n.paymentType.Installments && n.paymentType.Installments.length && (n.InstallmentsOptions = n.paymentType.Installments.split(',').map(function (n) {
            return parseInt(n)
          }))
        },
        i.prototype.openImgModal = function () {
          var n = this;
          this.modalService.open({
            templateUrl: 'Templates/Features/Payments/modal-image',
            controller: 'ImageModalControler as vm',
            windowClass: 'imageModal',
            resolve: {
              imgUrl: function () {
                return 'Content/Images/Payments/' + n.paymentType.HelpImageUrl
              }
            }
          })
        },
        i.prototype.initialiseSteps = function () {
          return this.StepsProvider ? this.StepsProvider.Steps : (new n.wizards.payments.DefaultParallosWizardSteps).Steps
        },
        Object.defineProperty(i.prototype, 'ViewInfo', {
          get: function () {
            return this.paymentType ? this.paymentType.Info : {
            }
          },
          enumerable: !0,
          configurable: !0
        }),
        i.$inject = [
          'Model',
          '$scope',
          '$injector',
          'paymentType',
          'STRINGS',
          '$modal',
          'PaymentTypeService',
          'RoleService',
          'StateHelperService'
        ],
        i
      }(i);
      t.DynamicPaymentWizardBase = r;
      u = function () {
        function t() {
          var t,
          i,
          r;
          this.Steps = [
          ];
          this.Steps = [
          ];
          t = {
            templateUrl: 'Templates/Features/Payments/dynamic/step1',
            title: 'Στοιχεία Πληρωμής'
          };
          t.processStep = [
            '$q',
            'TransfersService',
            function (n, t) {
              var r = this,
              o = r.paymentType,
              i = r.Model,
              f = n.defer(),
              s,
              h,
              c,
              e,
              u,
              l;
              return r.Model.TransferSource == 1 && r.Model.WantsInstallments && (s = r.paymentType.MinInstallmentsAmount == 0 || r.Model.Amount > r.paymentType.MinInstallmentsAmount, !s) ? (h = r.STRINGS['MinInstallmentsAmountInfo.Prefix'] + ' ' + r.paymentType.MinInstallmentsAmount + ' ' + r.Model.DebitProduct.Currency, f.reject(h), f.promise)  : r.Model.DynamicValues && r.Model.DynamicValues.ExpirationDates && r.Model.TransactionDate > r.Model.DynamicValues.ExpirationDates ? (c = r.STRINGS.ExpirationDateErrorMessage, f.reject(c), f.promise)  : (i.UseProfilePaymentCode ? (i.PurePaymentCode = '', i.PaymentCode = i.PredefinedPaymentCode.Code)  : i.CreatePaymentMask(o), i.DynamicValues.hasOwnProperty('Amount') && (e = i.DynamicValues.Amount, e && e.length > 0 && (i.Amount = parseFloat(e.slice(0, - 2) + '.' + e.slice( - 2)))), i.PopulateDetails(o), u = {
              }, u.Amount = i.Amount, u.Currency = i.DebitProduct.CurrencyEnum, u.DebitAccountNumber = i.DebitProduct.Code, u.DebitAccountType = i.DebitProduct.TypeID, u.CreditAccountNumber = i.PaymentCode, u.CreditAccountType = o.ProductTypeId, u.ExpensesServiceType = i.ExpensesServiceType, u.FeeType = 1, l = t.GetTransferExpenses(u), l.then(function (n) {
                var t = n;
                t.Fees != undefined ? (i.Fees = t.Fees, i.AmountLiteral = t.Fees.DebitAmountLiteral, f.resolve(!0))  : f.reject(t.Error.Message)
              }, function (n) {
                i.HasErrors = !0;
                i.ErrorMessage = n.Error.Message;
                f.reject(n.Error.Message)
              }), f.promise)
            }
          ];
          this.Steps.push(t);
          i = {
            templateUrl: 'Templates/Features/Payments/dynamic/step2',
            title: 'Επιβεβαίωση Στοιχείων'
          };
          i.processStep = [
            '$q',
            'PaymentsService',
            function (t, i) {
              var f = this,
              s = f.paymentType,
              r = f.Model,
              e = t.defer(),
              u = {
              },
              o;
              return u.Amount = r.Amount,
              u.Block = r.IsAmountBlocked,
              u.DebitProductCode = r.DebitProduct.Code,
              u.DebitProductType = r.DebitProduct.TypeID,
              u.Currency = r.DebitProduct.CurrencyEnum,
              u.PaymentDetails = r.Details,
              u.CreditProductCode = r.PaymentCode,
              u.CreditProductType = s.ProductTypeId,
              r.TransferSource == 0 && r.SupportsScheduledMethod && !r.TransferMethodImmediate && (u.PaymentDate = n.utils.toShortDateString(r.TransactionDate)),
              u.Fees = r.Fees,
              u.PaymentType = r.PaymentType,
              u.FeeType = 1,
              u.NumberOfInstalments = f.Model.WantsInstallments ? f.Model.Installments : 1,
              u.OTP = f.Model.OTP,
              u.IsParentPayment = f.paymentType.IsParent || !1,
              o = i.ExecutePayment(u, r.Online),
              o.then(function (n) {
                var t = n;
                f.setTransactionStatus(t);
                t.TransactionUN != undefined ? (r.TransactionUN = t.TransactionUN, r.ProcessDate = t.ProcessDate, r.ProcessDateLiteral = t.ProcessDateLiteral, e.resolve(!0))  : e.reject(t.Error.Message)
              }, function (n) {
                r.HasErrors = !0;
                r.ErrorMessage = n.Error.Message;
                e.reject(n.Error.Message)
              }),
              e.promise
            }
          ];
          this.Steps.push(i);
          r = {
            templateUrl: 'Templates/Features/Payments/dynamic/step3',
            title: 'Αποτελέσμα συναλλαγής'
          };
          this.Steps.push(r)
        }
        return t
      }();
      t.DefaultParallosWizardSteps = u
    }) (i = t.payments || (t.payments = {
    }))
  }) (t = n.wizards || (n.wizards = {
  }))
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
  var n = Object.setPrototypeOf || {
    __proto__: [
    ]
  }
  instanceof Array && function (n, t) {
    n.__proto__ = t
  }
  || function (n, t) {
    for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
  };
  return function (t, i) {
    function r() {
      this.constructor = t
    }
    n(t, i);
    t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
  }
}(),
function (n) {
  var t = function () {
    function t(t, i, r) {
      this.stringService = t;
      this.products = r;
      this.dateFormat = 'dd/MM/yyyy';
      this.dateFromPopupOpened = !1;
      this.dateToPopupOpened = !1;
      this.dateOptions = {
        formatYear: 'yyyy',
        startingDay: 1,
        showWeeks: 'false',
        maxMode: 'day'
      };
      switch (i) {
        case 1:
          this.TypeString = 'accounts';
          this.requestTypeId = n.server.ProductRequestType.EnquiryAccounts;
          break;
        case 2:
          this.TypeString = 'loans';
          this.requestTypeId = n.server.ProductRequestType.LoansForFile
      }
    }
    return t.prototype.getRightFormatDate = function (n) {
      return n.getDate() + '/' + (n.getMonth() + 1) + '/' + n.getFullYear()
    },
    t.prototype.setParentModel = function (n) {
      this.parentModel = n;
      this.today = new Date;
      this.firstDayOfMonth = new Date(this.today.getFullYear(), this.today.getMonth(), 1);
      this.parentModel.StartDate = this.firstDayOfMonth;
      this.parentModel.EndDate = new Date;
      this.previousMonthFirstDay = new Date;
      this.previousMonthFirstDay.setMonth(this.previousMonthFirstDay.getMonth() - 1);
      this.previousMonthFirstDay.setDate(1);
      this.previousMonthLastDay = new Date;
      this.previousMonthLastDay.setDate(0);
      this.previousThreeMonth = new Date;
      this.previousThreeMonth.setMonth(this.previousThreeMonth.getMonth() - 3);
      this.previousThreeMonth.setDate(1);
      this.dateFilterValues = [
        {
          id: 1,
          name: this.stringService.dfvThisMonth + ' (' + this.getRightFormatDate(this.firstDayOfMonth) + '-' + this.stringService.today + ')'
        },
        {
          id: 2,
          name: this.stringService.dfvPreviousMonths + ' (' + this.getRightFormatDate(this.previousMonthFirstDay) + '-' + this.getRightFormatDate(this.previousMonthLastDay) + ')'
        },
        {
          id: 3,
          name: this.stringService.dfvLastThreeMonths + ' (' + this.getRightFormatDate(this.previousThreeMonth) + '-' + this.getRightFormatDate(this.previousMonthLastDay) + ')'
        },
        {
          id: 4,
          name: this.stringService.dfvCustomPeriod
        }
      ];
      this.selectedDateFilter = this.dateFilterValues[4]
    },
    t.prototype.dateFromPopupToggleVisibility = function (n) {
      n.preventDefault();
      n.stopPropagation();
      this.dateToPopupOpened = !1;
      this.dateFromPopupOpened = !0;
      this.selectedDateFilter = this.dateFilterValues[4]
    },
    t.prototype.dateToPopupToggleVisibility = function (n) {
      n.preventDefault();
      n.stopPropagation();
      this.dateFromPopupOpened = !1;
      this.dateToPopupOpened = !0;
      this.selectedDateFilter = this.dateFilterValues[4]
    },
    t.prototype.selectTimePeriod = function () {
      this.selectedDateFilter = this.dateFilterValues[4]
    },
    t.prototype.selectDateFilter = function (n) {
      switch (n.id) {
        case 1:
          this.selectedDateFilter = this.dateFilterValues[0];
          this.parentModel.StartDate = this.firstDayOfMonth;
          this.parentModel.EndDate = this.today;
          break;
        case 2:
          this.selectedDateFilter = this.dateFilterValues[1];
          this.parentModel.StartDate = this.previousMonthFirstDay;
          this.parentModel.EndDate = this.previousMonthLastDay;
          break;
        case 3:
          this.selectedDateFilter = this.dateFilterValues[2];
          this.parentModel.StartDate = this.previousThreeMonth;
          this.parentModel.EndDate = this.previousMonthLastDay;
          break;
        case 4:
          this.selectedDateFilter = this.dateFilterValues[3]
      }
    },
    t.$inject = [
      'STRINGS',
      'fileType',
      'products'
    ],
    t
  }(),
  i,
  r,
  u;
  n.app.controller('FileTransferController', t);
  i = function (t) {
    function i(n, i, r, u, f, e, o) {
      var s = t.call(this, o, n.FileType) || this;
      return s.model = n,
      s.productsService = i,
      s.fileProxyService = r,
      s.$filter = u,
      s.securityService = f,
      s.modal = e,
      s.strService = o,
      s.setParentModel(n),
      s.onProductChange(),
      s
    }
    return __extends(i, t),
    i.prototype.submitRequest = function () {
      var i = this,
      t = this,
      r = {
        FileType: this.model.FileType,
        Details: [
        ]
      };
      this.securityService.getUserSessionInfo().then(function (u) {
        var f = i.model.SelectedProduct.Code.substring(i.model.SelectedProduct.Code.length - 15);
        r.Details.push(new n.model.Detail(n.server.DetailName.ProductCode, 0, f));
        r.Details.push(new n.model.Detail(n.server.DetailName.ProductType, 1, i.model.SelectedProduct.TypeID));
        r.Details.push(new n.model.Detail(n.server.DetailName.SubsID, 1, u.Profile.SubscriptionID));
        r.Details.push(new n.model.Detail(n.server.DetailName.UserID, 1, u.Profile.UserID));
        r.Details.push(new n.model.Detail(n.server.DetailName.DateFrom, 0, i.$filter('date') (i.model.StartDate, 'yyyyMMdd')));
        r.Details.push(new n.model.Detail(n.server.DetailName.DateTo, 0, i.$filter('date') (i.model.EndDate, 'yyyyMMdd')));
        r.Details.push(new n.model.Detail(n.server.DetailName.Lang, 0, u.SessionLanguage));
        i.fileProxyService.fileSet(r).then(function (n) {
          n && 0 == n.ResultCode ? t.model.HasErrors = !1 : (t.model.HasErrors = !0, n.Error && (t.model.ErrorMessage = t.stringService[n.Error.Message]))
        }, function (n) {
          t.model.HasErrors = !0;
          n.Error && n.Error.Message ? t.model.ErrorMessage = n.Error.Message : n.Error && (t.model.ErrorMessage = n.Error)
        })
      }, function () {
        t.model.HasErrors = !0;
        n.utils.getErrorMsg(t.model.ErrorMessage)
      }).finally (function () {
        t.modal.open({
          templateUrl: 'Templates/common/modals/fileTransferModal',
          controller: 'FileTransferRequestModalController as vm',
          modalClass: 'custom',
          size: 'lg',
          backdrop: 'static',
          resolve: {
            model: function () {
              return t.model
            }
          }
        })
      })
    },
    i.prototype.onProductChange = function () {
      var t = this.model.SelectedProduct;
      t && n.utils.isUndefinedOrNull(t.Balance) && this.productsService.getAccountBalance({
        ProductCode: t.Code,
        ProductTypeID: t.TypeID
      }).then(function (n) {
        var i = n.Balance;
        t.Balance = i
      })
    },
    i.prototype.canSubmit = function () {
      return this.hasSelectedProduct() && this.model.StartDate && this.model.EndDate
    },
    i.prototype.hasSelectedProduct = function () {
      var t = this.model.SelectedProduct;
      return t && this.model.FileType == 1 ? !n.utils.isUndefinedOrNull(t.Balance)  : !n.utils.isUndefinedOrNull(t)
    },
    i.$inject = [
      'model',
      'ProductsService',
      'FilesServiceProxy',
      '$filter',
      'SecurityService',
      '$modal',
      'STRINGS'
    ],
    i
  }(t);
  n.app.controller('FileTransferRequestController', i);
  r = function () {
    function t(n, t, i, r) {
      this.model = n;
      this.$modalInstance = t;
      this.$filter = i;
      this.$state = r;
      this.startDate = this.$filter('date') (this.model.StartDate, 'dd/MM/yyyy');
      this.endDate = this.$filter('date') (this.model.EndDate, 'dd/MM/yyyy')
    }
    return t.prototype.finish = function () {
      var n = this;
      this.$modalInstance.close(!n.model.HasErrors)
    },
    t.prototype.GoFileList = function () {
      var t = this.model.FileType == 1 ? n.constants.stateNames.accountFileTransferDownloadState : n.constants.stateNames.loanFileTransferDownloadState;
      this.$state.go(t);
      this.finish()
    },
    t.$inject = [
      'model',
      '$modalInstance',
      '$filter',
      '$state'
    ],
    t
  }();
  n.app.controller('FileTransferRequestModalController', r);
  u = function (t) {
    function i(n, i, r, u, f, e, o, s) {
      var h = t.call(this, o, n.FileType) || this;
      return h.model = n,
      h.productsService = i,
      h.fileProxyService = r,
      h.$filter = u,
      h.securityService = f,
      h.modal = e,
      h.strService = o,
      h.postNewWindowService = s,
      h.hasMore = !0,
      h.allAccounts = !1,
      h.numShow = 0,
      h.setParentModel(n),
      h.statusFilterValues = [
        {
          id: 1,
          name: h.stringService['TransationQueryType.All_Payments']
        },
        {
          id: 2,
          name: h.stringService['chequebook.status.pending']
        },
        {
          id: 3,
          name: h.stringService.executedOrder
        }
      ],
      h.selectedstatusValue = h.statusFilterValues[0],
      h
    }
    return __extends(i, t),
    i.prototype.getNameByStatus = function (n) {
      switch (n) {
        case 0:
          return this.stringService.filePending;
        case 1:
          return this.stringService.fileUnderAssignment;
        case 2:
          return this.stringService.fileUnderProcess;
        case 3:
          return this.stringService.fileSuccess;
        case 4:
          return this.stringService.fileFailed
      }
    },
    i.prototype.hasSelectedProduct = function () {
      var t = this.model.SelectedProduct;
      return !n.utils.isUndefinedOrNull(t)
    },
    i.prototype.loadMore = function () {
      this.search(this.numShow + 30)
    },
    i.prototype.canSearch = function () {
      return this.allAccounts || this.hasSelectedProduct()
    },
    i.prototype.search = function (t) {
      var r = this,
      u = {
        FileType: this.model.FileType,
        Details: [
        ],
        DateFrom: this.$filter('date') (this.model.StartDate, 'yyyyMMdd'),
        DateTo: this.$filter('date') (this.model.EndDate, 'yyyyMMdd'),
        BeginRow: 1,
        NumRows: t,
        Statuses: [
        ]
      },
      i;
      this.numShow = 0;
      this.hasMore = !1;
      switch (this.selectedstatusValue.id) {
        case 1:
          u.Statuses = [
            0,
            1,
            2,
            3,
            4
          ];
          break;
        case 2:
          u.Statuses = [
            0,
            1,
            2
          ];
          break;
        case 3:
          u.Statuses = [
            3
          ]
      }
      i = this;
      this.securityService.getUserSessionInfo().then(function (t) {
        if (!r.allAccounts) {
          var f = r.model.SelectedProduct.Code.substring(r.model.SelectedProduct.Code.length - 15);
          u.Details.push(new n.model.Detail(n.server.DetailName.ProductCode, 0, f))
        }
        u.Details.push(new n.model.Detail(n.server.DetailName.SubsID, 1, t.Profile.SubscriptionID));
        r.fileProxyService.fileList(u).then(function (n) {
          n && 0 == n.ResultCode ? (r.model.FileList = n.FileListItems, r.numShow = n.FileListItems.length, r.numShow % 10 == 0 && (r.hasMore = !0))  : (i.model.HasErrors = !0, n.Error && (i.model.ErrorMessage = i.stringService[n.Error.Message]))
        }, function (n) {
          i.model.ErrorMessage = n.Error && n.Error.Message ? i.stringService[n.Error.Message] : n
        })
      }, function (t) {
        i.model.HasErrors = !0;
        i.model.ErrorMessage = n.utils.getErrorMsg(t)
      })
    },
    i.$inject = [
      'model',
      'ProductsService',
      'FilesServiceProxy',
      '$filter',
      'SecurityService',
      '$modal',
      'STRINGS',
      'postNewWindowService'
    ],
    i
  }(t);
  n.app.controller('FileTransferDownloadController', u)
}(alpha || (alpha = {
})),
function (n) {
  var i = function () {
    function t(t, i, r, u, f, e, o, s) {
      var h = this;
      this.resultsPerPageArray = [
        {
          value: 10,
          text: '10'
        },
        {
          value: 20,
          text: '20'
        },
        {
          value: 50,
          text: '50'
        },
        {
          value: 100,
          text: '100'
        }
      ];
      this.selectedItem = {
      };
      this.messagesService = u;
      r && (t.ResultsPerPageArray = this.resultsPerPageArray, t.TotalRecordsCount = r.TotalRows, t.ResultsPerPage = r.PageSize, t.CurrentPage = r.PageIndex, t.TotalPages = r.TotalPage, t.Messages = r.Items);
      t.setResultsPerPage = function (n) {
        i.go('root.messages', {
          pageIndex: 0,
          resultsPerPage: n.value
        })
      };
      t.hasTemplate = function (n) {
        return e.hasTemplate(n)
      };
      t.trustSrc = function (n) {
        return this.$sce.trustAsResourceUrl(n)
      };
      t.toggleMessage = function (i, r) {
        var e = t.Messages[r],
        o;
        e.IsOpen = !e.IsOpen;
        t.Messages[r].Status == 0 && (o = {
        }, o.Channel = 3, o.MessageID = e.ID, o.NewStatus = 1, h.messagesService.updateMessages(o).then(function () {
          t.Messages[r].Status = 1;
          f.publish(n.common.services.AppEventsService.MessageRead_Event, e.ID)
        }));
        t.hasTemplate(e) && null == e.src && u.getMessageTemplate(e, s).then(function (n) {
          e.src = n.Template
        })
      };
      f.subscribe(n.common.services.AppEventsService.MessageDeleted_Event, function (n, i) {
        t.Messages && (t.Messages = t.Messages.filter(function (n) {
          return n.ID != i
        }))
      });
      t.deleteClicked = function (i, r) {
        var e = t.Messages[r],
        u = {
        };
        u.Channel = 3;
        u.MessageID = e.ID;
        u.NewStatus = - 1;
        h.messagesService.updateMessages(u).then(function () {
          f.publish(n.common.services.AppEventsService.MessageDeleted_Event, e.ID)
        })
      };
      t.$watch('CurrentPage', function (n, t) {
        n >= 0 && n != t && i.go('root.messages', {
          pageIndex: n - 1
        })
      })
    }
    return t.$inject = [
      '$scope',
      '$state',
      'pagedResponse',
      'MessagesService',
      'AppEventsService',
      'MessageHelperService',
      'userInfo',
      'customerDetails'
    ],
    t
  }(),
  t;
  n.app.controller('MessagesController', i);
  t = function () {
    function n(n, t) {
      n.Messages = t;
      n.toggleMessage = function (t, i) {
        n.Messages[i].IsOpen = !n.Messages[i].IsOpen
      }
    }
    return n.$inject = [
      '$scope',
      'fixedServiceMessages'
    ],
    n
  }();
  n.app.controller('MessagesDetailsController', t)
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
  var n = Object.setPrototypeOf || {
    __proto__: [
    ]
  }
  instanceof Array && function (n, t) {
    n.__proto__ = t
  }
  || function (n, t) {
    for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
  };
  return function (t, i) {
    function r() {
      this.constructor = t
    }
    n(t, i);
    t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
  }
}(),
function (n) {
  var ri = function () {
    function n(n, t, i, r, u) {
      var s = angular.isFunction(n.current.dialogTemplateUrl) ? n.current.dialogTemplateUrl(t)  : n.current.dialogTemplateUrl;
      var h = n.current.dialogController,
      e = n.current.returnState,
      f = n.current.successState,
      c = n.current.modalSize,
      l = n.current.modalClass,
      o = t.id,
      a = n.current.changeLang,
      v = n.current.resolve || {
      },
      y = n.current.dialogControllerProvider,
      p = r.open({
        templateUrl: s,
        controller: h || u.invoke(y),
        size: c || 'sm',
        windowClass: l || undefined,
        resolve: v
      });
      p.result.then(function (t) {
        t && t.ReloadForLang && f && a ? n.transitionTo(f, {
          id: t.id,
          language: t.language
        }, {
          reload: t.forceToReload != undefined ? t.forceToReload : !1
        })  : t && f ? n.transitionTo(f, {
        }, {
          reload: !0
        })  : n.transitionTo(e, {
          id: o
        })
      }, function () {
        n.transitionTo(e, {
          id: o
        })
      }).catch (function () {
        n.transitionTo(e, {
          id: o
        })
      }).finally (function () {
      })
    }
    return n.$inject = [
      '$state',
      '$stateParams',
      '$scope',
      '$modal',
      '$injector'
    ],
    n
  }(),
  i,
  r,
  u,
  f,
  e,
  o,
  t,
  s,
  h,
  c,
  l,
  a,
  v,
  y,
  p,
  w,
  b,
  k,
  d,
  g,
  nt,
  tt,
  it,
  rt,
  ut,
  ft,
  et,
  ot,
  st,
  ht,
  ct,
  lt,
  at,
  vt,
  ui,
  fi,
  ei,
  oi,
  si,
  hi,
  yt,
  pt,
  wt,
  bt,
  kt,
  dt,
  gt,
  ni,
  ti,
  ii;
  n.ModalStateController = ri;
  n.app.controller('ModalStateController', ri);
  i = function () {
    function n(n) {
      this.modalInstance = n
    }
    return n.prototype.dismiss = function () {
      this.modalInstance.dismiss()
    },
    n.prototype.closeModal = function (n) {
      this.modalInstance.close(n)
    },
    n.$inject = [
      '$modalInstance'
    ],
    n
  }();
  n.BaseModalController = i;
  n.app.controller('BaseModalController', i);
  r = function () {
    function n(n, t, i, r) {
      this.modalInstance = n;
      this.accounts = t;
      this.cards = i;
      this.loans = r
    }
    return n.prototype.closeModal = function (n) {
      this.modalInstance.close(n)
    },
    n.$inject = [
      '$modalInstance',
      'accounts',
      'cards',
      'loans'
    ],
    n
  }();
  n.EstatementsWarningModalInstanceCtrl = r;
  n.app.controller('EstatementsWarningModalInstanceCtrl', r);
  u = function () {
    function t(n, t, i, r, u) {
      this.modalInstance = n;
      this.userInfo = t;
      this.isRetail = i;
      this.otpHandler = r;
      this.payloadBuilder = u;
      this.showValidationErrors = !1
    }
    return Object.defineProperty(t.prototype, 'otpKey', {
      get: function () {
        return this.otpHandler.caller
      },
      enumerable: !0,
      configurable: !0
    }),
    t.prototype.dismissModal = function () {
      this.modalInstance.close(0)
    },
    t.prototype.closeModal = function (t) {
      var i = this;
      this.finalReturn = {
        returnValue: t
      };
      var r = String(t == 1 ? 2 : 1),
      u = this.payloadBuilder(t),
      f = {
        hints: {
          Requirement: r,
          Method: String(1)
        },
        payload: u,
        uiContext: {
          skipNoOtpValidation: !0
        }
      };
      this.otpHandler.reset(f).enquire().then(function (n) {
        n.required || i.modalInstance.close(i.finalReturn)
      }).catch (function (t) {
        i.otpErrorMessage = n.utils.getErrorMsg(t)
      })
    },
    t.prototype.submitOtpForm = function () {
      var n = this;
      this.showValidationErrors = !0;
      this.form && this.form.$valid && this.otpHandler.result().then(function (t) {
        n.finalReturn.otp = t;
        n.modalInstance.close(n.finalReturn)
      })
    },
    t.$inject = [
      '$modalInstance',
      'userInfo',
      'isRetail',
      'otpHandler',
      'payloadBuilder'
    ],
    t
  }();
  n.ContactInfoUpdateModalController = u;
  n.app.controller('ContactInfoUpdateModalController', u);
  f = function () {
    function n(n, t, i, r, u) {
      this.modalInstance = n;
      this.queriesService = t;
      this.paymentTypes = i;
      this.stringService = r;
      this.roleService = u;
      this.PaymentCode = 'RF';
      this.showValidationErrors = !1;
      this.showAmount = !1;
      this.roleService.isDemo() && (this.PaymentCode = 'RF31906058000000000543278')
    }
    return n.prototype.validatePaymentCode = function () {
      var n = this,
      t;
      if (!this.form.$valid) {
        this.showValidationErrors = !0;
        return
      }
      t = {
      };
      t.PaymentCode = this.PaymentCode;
      t.Amount = this.Amount;
      this.queriesService.validateDiasPaymentInfo(t).then(function (t) {
        if (t.ResultCode == 0) {
          n.productId = t.ProductTypeId;
          var i = n.paymentTypes.filter(function (n) {
            return n.Item.ProductTypeId == t.ProductTypeId
          });
          i && i.length ? n.close(i[0])  : n.errorMessage = n.stringService.NoExePrepareRights
        } else n.errorMessage = t.Error.Message
      }, function () {
        n.errorMessage = n.stringService.systemError
      })
    },
    n.prototype.determineShowAmount = function () {
      return this.PaymentCode && this.PaymentCode.length > 2 ? Number(this.PaymentCode.substring(9, 10)) <= 7 ? !0 : !1 : !1
    },
    n.prototype.close = function (n) {
      var t = {
      },
      i;
      this.Amount && (t.Amount = this.Amount);
      t.AmountCurrency = 'EUR';
      t.CreditProduct = this.PaymentCode;
      i = {
        paymentType: n,
        transaction: t
      };
      this.modalInstance.close(i)
    },
    n.prototype.dismiss = function () {
      this.modalInstance.dismiss()
    },
    n.$inject = [
      '$modalInstance',
      'QueriesService',
      'paymentTypes',
      'STRINGS',
      'RoleService'
    ],
    n
  }();
  n.CodeSearchPaymentController = f;
  n.app.controller('CodeSearchPaymentController', f);
  e = function () {
    function n(n, t) {
      this.modalInstance = n;
      this.userInfo = t
    }
    return n.prototype.closeModal = function (n) {
      this.modalInstance.close(n)
    },
    n.$inject = [
      '$modalInstance',
      'userInfo'
    ],
    n
  }();
  n.SecurityTipsModalController = e;
  n.app.controller('SecurityTipsModalController', e);
  o = function () {
    function n(n, t, i) {
      this.modalInstance = n;
      this.success = t;
      this.userInfo = i
    }
    return n.prototype.close = function () {
      this.modalInstance.close()
    },
    n.$inject = [
      '$modalInstance',
      'success',
      'userInfo'
    ],
    n
  }();
  n.EmailModalController = o;
  n.app.controller('EmailModalController', o);
  t = function () {
    function n(n) {
      this.$modalInstance = n
    }
    return n.prototype.dismiss = function () {
      this.$modalInstance.dismiss()
    },
    n.$inject = [
      '$modalInstance'
    ],
    n
  }();
  n.DismissableModalInstanceCtrl = t;
  s = function (n) {
    function t(t, i) {
      var r = n.call(this, t) || this;
      return r.$modalInstance = t,
      r.message = i,
      r
    }
    return __extends(t, n),
    t.$inject = [
      '$modalInstance',
      'message'
    ],
    t
  }(t);
  n.SystemMessageModalInstanceCtrl = s;
  n.app.controller('SystemMessageModalInstanceCtrl', s);
  h = function (n) {
    function t(t, i) {
      var r = n.call(this, t) || this;
      return r.$modalInstance = t,
      r.state = i,
      r
    }
    return __extends(t, n),
    t.$inject = [
      '$modalInstance',
      'state'
    ],
    t
  }(t);
  n.SystemMessagesModalInstanceCtrl = h;
  n.app.controller('SystemMessagesModalInstanceCtrl', h);
  c = function () {
    function n(n, t) {
      this.$modalInstance = n;
      this.scope = t;
      this.scope.closeModal = function () {
        n.dismiss()
      }
    }
    return n.$inject = [
      '$modalInstance',
      '$scope'
    ],
    n
  }();
  n.TermsAndConditionsModal = c;
  n.app.controller('TermsAndConditionsModal', c);
  l = function (n) {
    function t(t, i) {
      var r = n.call(this, t) || this;
      return r.$modalInstance = t,
      r.response = i,
      r
    }
    return __extends(t, n),
    t.prototype.ok = function () {
      this.$modalInstance.close(this.response)
    },
    t.prototype.closeModal = function () {
      this.$modalInstance.dismiss()
    },
    t.$inject = [
      '$modalInstance',
      'response'
    ],
    t
  }(t);
  n.SearchBicModalInstanceCtrl = l;
  n.app.controller('SearchBicModalInstanceCtrl', l);
  a = function () {
    function n(n, t, i, r, u, f) {
      this.$modalInstance = n;
      this.shareDate = i;
      this.balanceDate = r;
      this.documentData = u;
      this.portfolioAcc = f;
      this.funds = t.Funds;
      this.description = this.funds[0].Description
    }
    return n.prototype.closeModal = function () {
      this.$modalInstance.dismiss()
    },
    n.prototype.print = function () {
      window.print()
    },
    n.$inject = [
      '$modalInstance',
      'fundDetails',
      'shareDate',
      'balanceDate',
      'documentData',
      'portfolioAcc'
    ],
    n
  }();
  n.FundsModalInstanceCtrl = a;
  n.app.controller('FundsModalInstanceCtrl', a);
  v = function () {
    function t(n, t, i, r) {
      this.payload = n;
      this.requestType = t;
      this.$modalInstance = i;
      this.$http = r;
      this.showValidationErrors = !1;
      this.isBusy = !1;
      this.displayResult = !1;
      this.serviceMethod = t == 1 ? 'SendFax' : 'SendDocumentViaFax'
    }
    return t.prototype.submit = function (t) {
      var i = this;
      t.preventDefault();
      i.errorMessage = '';
      i.showValidationErrors = !0;
      i.form && n.utils.forceValidation(i.form);
      i.form.$valid && (i.isBusy = !0, i.addFaxNumberInPayload(), this.$http.post('api/Documents.svc/' + this.serviceMethod, this.payload).then(function (n) {
        i.processCompleted(n.ResultCode == 0)
      }, function () {
        i.processCompleted(!1)
      }))
    },
    t.prototype.processCompleted = function (n) {
      this.isBusy = !1;
      this.displayResult = !0;
      this.success = n
    },
    t.prototype.close = function () {
      this.$modalInstance.dismiss('Cancel')
    },
    t.prototype.addFaxNumberInPayload = function () {
      this.payload.FaxNumber = this.FaxNumber
    },
    t.$inject = [
      'payload',
      'requestType',
      '$modalInstance',
      '$http'
    ],
    t
  }();
  n.FaxModalInstanceController = v;
  n.app.controller('FaxModalInstanceController', v);
  y = function () {
    function t(n, t, i) {
      this.$modalInstance = n;
      this.SecurityService = t;
      this.stringService = i;
      this.hasError = !1;
      this.saving = !1;
      this.showValidationErrors = !1;
      this.showZeroOtpLengthMsg = !1;
      this.hasError = !1
    }
    return t.prototype.clearForm = function () {
      var n = this,
      t = n.form;
      t.otp.$setViewValue(undefined);
      t.otp.$setPristine();
      t.otp.$render();
      n.form.$pristine = !0;
      n.form.$setPristine();
      n.showValidationErrors = !1;
      n.showZeroOtpLengthMsg = !1
    },
    t.prototype.submit = function () {
      var t = this;
      t.showZeroOtpLengthMsg = !1;
      t.showValidationErrors = !1;
      t.errorMessage = '';
      t.form.otp && t.form.otp.$viewValue == undefined || t.form.otp && t.form.otp.$viewValue.length == 0 ? t.showZeroOtpLengthMsg = !0 : (t.showValidationErrors = !0, t.form.otp.$dirty = !0, t.form.otp.$pristine = !1, this.form.$dirty && this.form.$valid && (t.saving = !0, this.SecurityService.ValidateOTP(this.otp).then(function (i) {
        n.utils.isUndefinedOrNull(i) ? (t.hasError = !0, t.clearForm())  : n.utils.isUndefinedOrNull(i.Error) ? i.Validated ? t.$modalInstance.close('OK')  : (t.hasError = !0, t.errorMessage = t.stringService.generalError, t.clearForm())  : (t.hasError = !0, t.errorMessage = i.Error.Message, t.clearForm())
      }, function () {
        t.clearForm()
      }).finally (function () {
        t.saving = !1
      })))
    },
    t.prototype.cancel = function () {
      this.$modalInstance.dismiss('Cancel')
    },
    t.$inject = [
      '$modalInstance',
      'SecurityService',
      'STRINGS'
    ],
    t
  }();
  n.OtpModalInstanceController = y;
  n.app.controller('OtpModalInstanceController', y);
  p = function () {
    function n(n, t, i) {
      this.modalInstance = n;
      this.stateService = t;
      this.redirectUrl = i
    }
    return n.prototype.goToEnableOtp = function () {
      this.stateService.go('root.services.otp');
      this.modalInstance.close()
    },
    n.$inject = [
      '$modalInstance',
      '$state',
      'redirectUrl'
    ],
    n
  }();
  n.NoOtpModalInstanceController = p;
  n.app.controller('NoOtpModalInstanceController', p);
  w = function () {
    function n(n) {
      this.$modalInstance = n
    }
    return n.prototype.closeModal = function () {
      this.$modalInstance.close('OK')
    },
    n.$inject = [
      '$modalInstance'
    ],
    n
  }();
  n.OptAlphaPhoneModalController = w;
  n.app.controller('OptAlphaPhoneModalController', w);
  b = function () {
    function n(n) {
      this.$modalInstance = n
    }
    return n.prototype.dismiss = function () {
      this.$modalInstance.dismiss()
    },
    n.$inject = [
      '$modalInstance'
    ],
    n
  }();
  n.onlyCancelModalcontroller = b;
  n.app.controller('onlyCancelModalcontroller', b);
  k = function () {
    function n(n, t) {
      this.$modalInstance = n;
      this.model = t;
      this.scope = this.model
    }
    return n.prototype.closeModal = function () {
      this.$modalInstance.close('OK')
    },
    n.$inject = [
      '$modalInstance',
      'model'
    ],
    n
  }();
  n.TotalBlockUnblockModalController = k;
  n.app.controller('TotalBlockUnblockModalController', k);
  d = function () {
    function n(n, t, i, r) {
      this.$modalInstance = n;
      this.disableReason = t;
      this.securityService = i;
      this.name = r;
      this.IsFinal = !1;
      this.HasError = !1;
      this.ErrorMessage = ''
    }
    return n.prototype.save = function () {
      var n = this;
      n.IsFinal = !1;
      n.HasError = !1;
      n.ErrorMessage = '';
      this.securityService.disableSubscription(this.disableReason).then(function (t) {
        t.ResultCode == 0 ? (n.IsFinal = !0, n.HasError = !1)  : (n.IsFinal = !0, n.HasError = !0, n.ErrorMessage = t.Error.Message)
      }, function (t) {
        n.IsFinal = !0;
        n.HasError = !0;
        n.ErrorMessage = t.Error.Message
      })
    },
    n.prototype.closeModal = function () {
      var n = this.HasError || !this.IsFinal ? {
        Error: {
          Message: this.ErrorMessage
        }
      }
       : {
      };
      this.$modalInstance.dismiss(n)
    },
    n.$inject = [
      '$modalInstance',
      'disableReason',
      'securityService',
      'name'
    ],
    n
  }();
  n.DisableSubscriptionModalInstanceCtrl = d;
  n.app.controller('DisableSubscriptionModalInstanceCtrl', d);
  g = function () {
    function n(n, t, i, r, u) {
      this.$modalInstance = n;
      this.model = t;
      this.type = i;
      this.national = r;
      this.international = u
    }
    return n.prototype.ok = function () {
      this.$modalInstance.close('OK')
    },
    n.prototype.cancel = function () {
      this.$modalInstance.dismiss('Cancel')
    },
    n.$inject = [
      '$modalInstance',
      'model',
      'type',
      'national',
      'international'
    ],
    n
  }();
  n.DeleteProductModalInstanceController = g;
  n.app.controller('DeleteProductModalInstanceController', g);
  nt = function () {
    function n(n, t) {
      this.$modalInstance = n;
      this.model = t
    }
    return n.prototype.ok = function () {
      this.$modalInstance.close('OK')
    },
    n.prototype.cancel = function () {
      this.$modalInstance.dismiss('Cancel')
    },
    n.$inject = [
      '$modalInstance',
      'model'
    ],
    n
  }();
  n.DeleteAccountAlertsModalInstanceController = nt;
  n.app.controller('DeleteAccountAlertsModalInstanceController', nt);
  tt = function () {
    function t(t, i) {
      this.$modalInstance = t;
      this.productInfo = i;
      this.beneficiaries = n.utils.isUndefinedOrNull(this.productInfo) ? [
      ] : this.productInfo.Owners
    }
    return t.$inject = [
      '$modalInstance',
      'productInfo'
    ],
    t
  }();
  n.BeneficiariesModalInstanceCtrl = tt;
  n.app.controller('BeneficiariesModalInstanceCtrl', tt);
  it = function () {
    function n(n, t, i, r, u, f) {
      this.$modalInstance = n;
      this.feeAmounts = t;
      this.feeType = i;
      this.rates = r;
      this.amount = u;
      this.currency = f
    }
    return n.prototype.closeModal = function () {
      this.$modalInstance.dismiss()
    },
    n.$inject = [
      '$modalInstance',
      'feeAmounts',
      'feeType',
      'rates',
      'amount',
      'currency'
    ],
    n
  }();
  n.ExpensesModalInstanceCtrl = it;
  n.app.controller('ExpensesModalInstanceCtrl', it);
  rt = function () {
    function n(n, t) {
      this.$modalInstance = n;
      this.Model = t
    }
    return n.prototype.closeModal = function () {
      this.$modalInstance.dismiss()
    },
    n.$inject = [
      '$modalInstance',
      'Model'
    ],
    n
  }();
  n.BleepExpensesModalInstanceCtrl = rt;
  n.app.controller('BleepExpensesModalInstanceCtrl', rt);
  ut = function () {
    function n(n, t, i) {
      this.imgUrl = n;
      this.$modalInstance = t;
      this.scope = i;
      this.scope.closeModal = function () {
        t.dismiss()
      }
    }
    return n.$inject = [
      'imgUrl',
      '$modalInstance',
      '$scope'
    ],
    n
  }();
  n.ImageModalControler = ut;
  n.app.controller('ImageModalControler', ut);
  ft = function () {
    function n(n, t, i) {
      this.$modalInstance = n;
      this.details = t;
      this.isCreditTransaction = i
    }
    return n.prototype.closeModal = function () {
      this.$modalInstance.dismiss()
    },
    n.prototype.print = function () {
      window.print()
    },
    n.$inject = [
      '$modalInstance',
      'details',
      'isCreditTransaction'
    ],
    n
  }();
  n.TransactionDetailsModalInstanceCtrl = ft;
  n.app.controller('TransactionDetailsModalInstanceCtrl', ft);
  et = function () {
    function n(n, t) {
      this.$modalInstance = n;
      this.stateService = t
    }
    return n.prototype.confirm = function () {
      this.stateService.go('root.services.otp.acquire', {
        rejectExisting: !0
      }, {
        reload: !0
      });
      this.$modalInstance.dismiss()
    },
    n.prototype.closeModal = function () {
      this.$modalInstance.dismiss()
    },
    n.$inject = [
      '$modalInstance',
      '$state'
    ],
    n
  }();
  n.NewOTPApplicationModalInstanceCtrl = et;
  n.app.controller('NewOTPApplicationModalInstanceCtrl', et);
  ot = function () {
    function n(n) {
      this.$modalInstance = n
    }
    return n.prototype.closeModal = function () {
      this.$modalInstance.dismiss()
    },
    n.$inject = [
      '$modalInstance'
    ],
    n
  }();
  n.ForgotCodeModalInstanceCtrl = ot;
  n.app.controller('ForgotCodeModalInstanceCtrl', ot);
  st = function () {
    function t(t, i, r, u, f, e) {
      this.$modalInstance = t;
      this.details = i;
      this.locale = r;
      this.stringService = u;
      this.filterService = f;
      this.outstatus = e;
      this.locales = null;
      this.chargesAmountSpecified = !1;
      this.instructedAmountSpecified = !1;
      i.ResultCode == 0 ? (this.error = '', n.utils.isUndefinedOrNull(this.details) ? this.noRecords = !0 : (this.amountStr = this.details.Amount.toLocaleString(this.locale, {
        minimumFractionDigits: 2
      }), this.transfersPayer = n.utils.isUndefinedOrNullorWhiteSpace(this.details.DeptorSurname) ? this.details.DeptorName : this.details.DeptorSurname + ' ' + this.details.DeptorName, this.chargesAmount = this.details.ChargesAmount.Value.toLocaleString(this.locale, {
        minimumFractionDigits: 2
      }) + ' ' + this.reformCurrencyDetail(this.details.ChargesAmount.Currency), this.instructedAmount = this.details.InstructedAmount.Value.toLocaleString(this.locale, {
        minimumFractionDigits: 2
      }) + ' ' + this.reformCurrencyDetail(this.details.InstructedAmount.Currency)), this.locales = [
        {
          text: u['Languages.Greek'],
          key: 'el'
        },
        {
          text: u['Languages.English'],
          key: 'en'
        }
      ], this.details.Mode == 1 && (this.isOnlineMode = !0))  : n.utils.isUndefinedOrNull(this.details.Error) || (this.error = this.details.Error.Message)
    }
    return t.prototype.reformCurrencyDetail = function (t) {
      return t != n.server.Currency.NA ? this.filterService('EnumToCurrencyFilter') (t)  : ''
    },
    t.prototype.print = function () {
      window.print()
    },
    t.prototype.closeModal = function () {
      this.$modalInstance.dismiss()
    },
    t.prototype.changeLang = function () {
      this.$modalInstance.close(this.locale)
    },
    t.prototype.createDocumentData = function () {
      var n = {
      };
      return n.PDFRequestType = 27,
      n.Parameters = JSON.stringify({
        ClearingSystem: this.details.Clearing,
        RefDebtorBank: this.details.DeptorReferenceNumber,
        RefAlphaBank: this.details.AlphaReferenceNumber,
        TransactionNumber: this.details.UN,
        DebtorBank: this.details.DeptorBankName,
        BankCodeBic: this.details.DeptorBankBICCode,
        DebtorBranchCode: this.details.DeptorBankBranch,
        DebtorBankCountry: this.details.DeptorCountryName + ' (' + this.details.DeptorCountryCode + ')',
        OrderAmount: this.amountStr,
        Currency: this.filterService('EnumToCurrencyFilter') (this.details.Currency),
        ChargesDetails: this.details.ChargesBearer,
        TransfersPayer: this.transfersPayer,
        DebtorCountry: this.details.DeptorCountryName + ' (' + this.details.DeptorCountryCode + ')',
        DebtorAccount: this.details.DeptorAccount,
        TransfersDetailsForBeneficiary: this.details.RemittanceInfo,
        BeneficiaryFullName: this.details.BeneficiaryFullName,
        BeneficiaryAccount: this.details.BeneficiaryAccount,
        SelectedLanguage: this.locale,
        DeptorAddress: this.details.DeptorAddress,
        SettleDate: this.details.SettleDate,
        ChargesAmount: this.chargesAmount,
        InstructedAmount: this.instructedAmount,
        ChargesIncured: this.details.ChargesIncured
      }),
      n
    },
    t.$inject = [
      '$modalInstance',
      'details',
      'locale',
      'STRINGS',
      '$filter',
      'outstatus'
    ],
    t
  }();
  n.IncomingOrderDetailsModalInstanceCtrl = st;
  n.app.controller('IncomingOrderDetailsModalInstanceCtrl', st);
  ht = function () {
    function n(n) {
      this.$modalInstance = n
    }
    return n.prototype.closeModal = function () {
      this.accepted === !0 ? this.$modalInstance.close(0)  : this.$modalInstance.close(1)
    },
    n.$inject = [
      '$modalInstance'
    ],
    n
  }();
  n.PsdPromptCtrl = ht;
  n.app.controller('PsdPromptCtrl', ht);
  ct = function () {
    function n(n, t, i) {
      this.$modalInstance = n;
      this.chequeBook = t;
      this.ProductsService = i
    }
    return n.prototype.cancelApplication = function () {
      var n = this;
      this.ProductsService.cancelChequebook({
        ProductCode: this.chequeBook.AccountNumber
      }).then(function (t) {
        n.$modalInstance.close(t)
      })
    },
    n.prototype.closeModal = function () {
      this.$modalInstance.dismiss()
    },
    n.$inject = [
      '$modalInstance',
      'chequeBook',
      'ProductsService'
    ],
    n
  }();
  n.CancelChequebookModalInstanceCtrl = ct;
  n.app.controller('CancelChequebookModalInstanceCtrl', ct);
  lt = function () {
    function n(n, t) {
      this.$modalInstance = n;
      this.session = t
    }
    return n.$inject = [
      '$modalInstance',
      'session'
    ],
    n
  }();
  n.SessionMessageModalInstanceCtrl = lt;
  n.app.controller('SessionMessageModalInstanceCtrl', lt);
  at = function () {
    function t(t, i, r, u) {
      var f,
      e;
      if (this.$modalInstance = t, this.eStatementsResponse = i, this.documentData = r, this.cardCode = u, this.cards = [
      ], this.error = '', f = this, this.eStatementsResponse.ResultCode == 0) if (f.eStatementsResponse.Statements && f.eStatementsResponse.Statements.length > 0) {
        for (e = 0; e < f.eStatementsResponse.Statements.length; e++) f.eStatementsResponse.Statements[e].CardNumber == f.cardCode ? f.mainCardStatements = f.eStatementsResponse.Statements[e] : f.cards.push(f.eStatementsResponse.Statements[e]);
        f.cards.unshift(f.mainCardStatements)
      } else f.eStatementsResponse.Statements && f.eStatementsResponse.Statements.length != 0 || (f.noRecords = !0);
       else n.utils.isUndefinedOrNull(f.eStatementsResponse.Error) || (f.error = f.eStatementsResponse.Error.Message)
    }
    return t.prototype.closeModal = function () {
      this.$modalInstance.dismiss()
    },
    t.prototype.print = function () {
      window.print()
    },
    t.$inject = [
      '$modalInstance',
      'eStatementsResponse',
      'documentData',
      'cardCode'
    ],
    t
  }();
  n.OldStatementsModalInstanceCtrl = at;
  n.app.controller('OldStatementsModalInstanceCtrl', at);
  vt = function () {
    function t(t, i, r, u, f) {
      this.$modalInstance = t;
      this.transaction = i;
      this.channels = r;
      this.postNewWindowService = u;
      this.stringService = f;
      this.beneficiary = n.utils.isUndefinedOrNull(i.CreditProductOwners) ? '' : i.CreditProductOwners[0].Name + ' ' + i.CreditProductOwners[0].Surname;
      this.channels[1] = 'myAlpha Phone IVR';
      this.channels[3] = 'myAlpha Web';
      this.channels[4] = 'myAlpha Mobile';
      this.channels[5] = 'myAlpha Phone CallCenter'
    }
    return t.prototype.closeModal = function () {
      this.$modalInstance.dismiss()
    },
    t.prototype.print = function () {
      window.print()
    },
    t.prototype.createDocumentRequest = function () {
      var n = {
      },
      t;
      return n.PDFRequestType = 19,
      t = {
        EntryDate: this.transaction.EntryDate,
        DebitProduct: this.transaction.DebitProduct,
        CreditProduct: this.transaction.CreditProduct,
        Amount: this.transaction.Amount,
        TransferDate: this.transaction.TransferDate,
        ExecutionType: this.stringService.transfersExecutionMethodImmediate,
        Status: this.transaction.StatusDescription,
        Via: this.channels[this.transaction.Channel],
        UN: this.transaction.TransactionUN,
        Beneficiaries: this.transaction.CreditProductOwners[0].Name + ' ' + this.transaction.CreditProductOwners[0].Surname
      },
      n.Parameters = JSON.stringify(t),
      n
    },
    t.$inject = [
      '$modalInstance',
      'transaction',
      'channels',
      'postNewWindowService',
      'STRINGS'
    ],
    t
  }();
  n.TransactionCopyModalInstanceCtrl = vt;
  n.app.controller('TransactionCopyModalInstanceCtrl', vt);
  ui = function () {
    function t(n, t, i, r) {
      this.state = n;
      this.$modalInstance = t;
      this.model = i;
      this.referer = r
    }
    return t.prototype.finish = function () {
      var t = this;
      this.$modalInstance.close(t.model.Success);
      n.utils.isUndefinedOrNull(t.referer) || (t.referer.indexOf('debitCardApplication') == 0 ? this.state.go(n.constants.stateNames.debitCardNew)  : t.referer.indexOf('prepaidCardApplication') == 0 && this.state.go(n.constants.stateNames.prepaidCardNew))
    },
    t.$inject = [
      '$state',
      '$modalInstance',
      'model',
      'referer'
    ],
    t
  }();
  n.app.controller('OperationStatusModalController', ui);
  fi = function () {
    function n(n) {
      this.$modalInstance = n
    }
    return n.prototype.closeModal = function () {
      this.$modalInstance.close(!0)
    },
    n.$inject = [
      '$modalInstance'
    ],
    n
  }();
  n.app.controller('DeactivatedOtpModalInstanceCtrl', fi);
  ei = function () {
    function n(n, t, i, r, u, f, e, o, s, h, c) {
      this.$modalInstance = n;
      this.changeMedium = t;
      this.currentIsAsa = i;
      this.to = r;
      this.currentIsDevice = u;
      this.currentIsSms = f;
      this.oldSN = e;
      this.model = o;
      this.session = s;
      this.logoffService = h;
      this.stateService = c
    }
    return n.prototype.goToOverView = function () {
      this.stateService.go('root.overview');
      this.$modalInstance.close(!0)
    },
    n.prototype.logout = function () {
      this.logoffService.logoutAndRedirect('#logoutForm')
    },
    n.$inject = [
      '$modalInstance',
      'changeMedium',
      'currentIsAsa',
      'to',
      'currentIsDevice',
      'currentIsSms',
      'oldSN',
      'model',
      'session',
      'logoffService',
      '$state'
    ],
    n
  }();
  n.app.controller('ReplacedOtpModalInstanceCtrl', ei);
  oi = function () {
    function n(n, t) {
      this.$modalInstance = n;
      this.digit7 = t
    }
    return n.prototype.closeModal = function () {
      this.$modalInstance.close(!0)
    },
    n.$inject = [
      '$modalInstance',
      'digit7'
    ],
    n
  }();
  n.app.controller('ActivatedAlphaPhoneModalInstanceCtrl', oi);
  si = function () {
    function n(n) {
      this.$modalInstance = n
    }
    return n.prototype.closeModal = function () {
      this.$modalInstance.close(!0)
    },
    n.$inject = [
      '$modalInstance'
    ],
    n
  }();
  n.app.controller('AlphaphoneActivationModalInstanceCtrl', si);
  hi = function () {
    function n(n) {
      this.$modalInstance = n
    }
    return n.prototype.doAction = function () {
      this.$modalInstance.close(!0)
    },
    n.$inject = [
      '$modalInstance'
    ],
    n
  }();
  n.app.controller('BoolResultModalInstanceCtrl', hi);
  yt = function () {
    function n(n, t, i) {
      this.$modalInstance = n;
      this.scope = t;
      this.stateService = i
    }
    return n.prototype.accept = function () {
      this.$modalInstance.dismiss()
    },
    n.prototype.decline = function () {
      this.stateService.go('root.overview', {
        rejectExisting: !0
      }, {
        reload: !0
      });
      this.$modalInstance.dismiss()
    },
    n.$inject = [
      '$modalInstance',
      '$scope',
      '$state'
    ],
    n
  }();
  n.AcceptDeclineConditionsModal = yt;
  n.app.controller('AcceptDeclineConditionsModal', yt);
  pt = function () {
    function t(n, t, i, r) {
      this.modalInstance = n;
      this.stateService = t;
      this.appEventService = i;
      this.menuItemService = r
    }
    return t.prototype.dismiss = function () {
      this.modalInstance.dismiss()
    },
    t.prototype.closeModal = function (t) {
      this.modalInstance.close(t);
      this.appEventService.publish(n.common.services.AppEventsService.LazyPermissionChanged_Event, {
        permission: 'P2PActive'
      });
      this.stateService.go('root.overview', {
        rejectExisting: !0
      }, {
        reload: !0
      })
    },
    t.$inject = [
      '$modalInstance',
      '$state',
      'AppEventsService',
      'MenuItemsService'
    ],
    t
  }();
  n.DisablePayNowModalController = pt;
  n.app.controller('DisablePayNowModalController', pt);
  wt = function () {
    function t(n, t, i, r) {
      this.modalInstance = n;
      this.stateService = t;
      this.appEventService = i;
      this.menuItemService = r
    }
    return t.prototype.dismiss = function () {
      this.modalInstance.dismiss()
    },
    t.prototype.closeModal = function (t) {
      this.modalInstance.close(t);
      this.appEventService.publish(n.common.services.AppEventsService.InvalidateUserSessionInfo_Event);
      this.menuItemService.DisablePermissionItems('FingerPrintAndPinActive');
      this.stateService.go('root.overview', {
        rejectExisting: !0
      }, {
        reload: !0
      })
    },
    t.$inject = [
      '$modalInstance',
      '$state',
      'AppEventsService',
      'MenuItemsService'
    ],
    t
  }();
  n.ProfileDisableFPModalController = wt;
  n.app.controller('ProfileDisableFPModalController', wt);
  bt = function () {
    function n(n, t, i) {
      this.modalInstance = n;
      this.mobileChanged = t;
      this.emailChanged = i
    }
    return n.prototype.back = function () {
      this.modalInstance.dismiss({
        userCancel: !0,
        reason: 'psd-user-cancel',
        message: 'User cancelled the otp process'
      })
    },
    n.prototype.continue = function () {
      this.modalInstance.close(!0)
    },
    n.$inject = [
      '$modalInstance',
      'mobileChanged',
      'emailChanged'
    ],
    n
  }();
  n.ProfilePromptCtrl = bt;
  n.app.controller('ProfilePromptCtrl', bt);
  kt = function () {
    function t(n, t, i, r) {
      this.modalInstance = n;
      this.stateService = t;
      this.appEventService = i;
      this.menuItemService = r
    }
    return t.prototype.dismiss = function () {
      this.modalInstance.dismiss()
    },
    t.prototype.closeModal = function (t) {
      this.modalInstance.close(t);
      this.appEventService.publish(n.common.services.AppEventsService.LazyPermissionChanged_Event, {
        permission: 'P2PActive'
      });
      this.stateService.go('root.overview', {
        rejectExisting: !0
      }, {
        reload: !0
      })
    },
    t.$inject = [
      '$modalInstance',
      '$state',
      'AppEventsService',
      'MenuItemsService'
    ],
    t
  }();
  n.EnablePayNowModalController = kt;
  n.app.controller('EnablePayNowModalController', kt);
  dt = function () {
    function t(n, t, i, r, u, f, e, o, s, h, c) {
      var l = this;
      this.modalInstance = n;
      this.$q = t;
      this.$scope = i;
      this.email = r;
      this.mobile = u;
      this.securityService = f;
      this.stringService = e;
      this.intervalService = o;
      this.btnDisabled = s;
      this.smsInProgress = h;
      this.rootScopeService = c;
      this.errorMessage = '';
      this.channel = this.rootScopeService.OTPChannel ? this.rootScopeService.OTPChannel : 0;
      this.intervalService(function () {
        l.smsInProgress = !1
      }, 30000, 1, !0).then(function () {
        l.btnDisabled = !1
      })
    }
    return t.prototype.validate = function () {
      var t = this,
      i;
      this.errorMessage = '';
      this.showValidationErrors = !0;
      this.$scope.form && this.$scope.form.$valid && (this.isBusy = !0, i = [
      ], n.utils.isUndefinedOrNullorWhiteSpace(this.email) || i.push(this.securityService.validateBankTokenOTP({
        OTP: this.emailToken,
        ValidationType: 1,
        ValidationValue: this.email
      })), n.utils.isUndefinedOrNullorWhiteSpace(this.mobile) || i.push(this.securityService.validateBankTokenOTP({
        OTP: this.mobileToken,
        ValidationType: 0,
        ValidationValue: this.mobile
      })), this.$q.all(i).then(function (i) {
        var r = i.filter(function (n) {
          return !n || n.ResultCode !== 0
        });
        return r.length > 0 ? t.$q.reject(r[0])  : {
          mobileToken: n.utils.isUndefinedOrNull(t.mobileToken) ? null : t.mobileToken,
          emailToken: n.utils.isUndefinedOrNull(t.emailToken) ? null : t.emailToken
        }
      }).then(function (n) {
        t.modalInstance.close(n)
      }).catch (function (i) {
        return t.errorMessage = n.utils.getErrorMsg(i, t.stringService.tokensNotValid)
      }).finally (function () {
        t.isBusy = !1
      }))
    },
    t.prototype.resendSmsToken = function () {
      return this.resendToken(0)
    },
    t.prototype.resendEmailToken = function () {
      return this.resendToken(1)
    },
    t.prototype.resendToken = function (t) {
      var i = this,
      r;
      return this.errorMessage = '',
      this.isBusy = !0,
      r = {
      },
      t == 1 ? r.Email = this.email : t == 2 ? (r.Mobile = this.mobile, r.OtpChannel = this.channel)  : t == 0 && (this.btnDisabled = !0, r.Mobile = this.mobile, r.OtpChannel = this.channel),
      this.smsInProgress = !0,
      this.securityService.getSMSBankToken(r).then(function (n) {
        if (t == 0) {
          var r = i;
          return i.intervalService(function () {
            i.smsInProgress = !1
          }, 30000, 1, !0).then(function () {
            i.btnDisabled = !1
          })
        }
        return n
      }).catch (function (t) {
        return i.errorMessage = n.utils.getErrorMsg(t),
        i.$q.reject(t)
      }).finally (function () {
        i.isBusy = !1
      })
    },
    t.prototype.viberOnClick = function () {
      var i = angular.element('#viberotp'),
      n,
      t;
      i.addClass('viberotpbtn');
      n = angular.element('#viberotplabel');
      n.addClass('viberotplabel');
      t = angular.element('#smsotp');
      t.removeClass('smsotpbtn')
    },
    t.prototype.smsOnClick = function () {
      var t = angular.element('#smsotp'),
      n;
      t.addClass('smsotpbtn');
      n = angular.element('#viberotp');
      n.removeClass('viberotpbtn')
    },
    t.prototype.closeModal = function () {
      this.modalInstance.dismiss({
        userCancel: !0,
        message: 'confirm-info-with-tokens.user-cancel'
      })
    },
    t.$inject = [
      '$modalInstance',
      '$q',
      '$scope',
      'email',
      'mobile',
      'SecurityService',
      'STRINGS',
      '$interval',
      'btnDisabled',
      'smsInProgress',
      '$rootScope'
    ],
    t
  }();
  n.ConfirmInfoWithTokensCtrl = dt;
  n.app.controller('ConfirmInfoWithTokensCtrl', dt);
  gt = function () {
    function t(n, t, i, r, u, f) {
      this.modalInstance = n;
      this.scope = t;
      this.mobile = i;
      this.securityService = r;
      this.$q = u;
      this.stringService = f;
      this.errorMessage = ''
    }
    return t.prototype.validate = function () {
      var t = this,
      i;
      this.errorMessage = '';
      t.showValidationErrors = !0;
      t.scope.form && t.scope.form.$valid && (t.isBusy = !0, i = t.securityService.validateBankTokenOTP({
        OTP: t.mobileToken,
        ValidationType: 0,
        ValidationValue: this.mobile
      }), i.then(function (i) {
        i.ResultCode == 1 ? t.errorMessage = n.utils.getErrorMsg(t.stringService.tokensNotValid)  : t.modalInstance.close(t.mobileToken)
      }));
      t.isBusy = !1
    },
    t.prototype.resendTokens = function () {
      var t = this,
      r,
      i;
      this.isBusy = !0;
      this.errorMessage = '';
      r = this;
      i = {
        Mobile: this.mobile
      };
      this.securityService.getSMSBankToken(i).catch (function (i) {
        return t.errorMessage = n.utils.getErrorMsg(i),
        t.$q.reject(i)
      }).finally (function () {
        t.isBusy = !1
      })
    },
    t.prototype.closeModal = function () {
      this.modalInstance.dismiss()
    },
    t.$inject = [
      '$modalInstance',
      '$scope',
      'mobile',
      'SecurityService',
      '$q',
      'STRINGS'
    ],
    t
  }();
  n.ConfirmMobileCtrl = gt;
  n.app.controller('ConfirmMobileCtrl', gt);
  ni = function () {
    function t(n, t, i) {
      this.modalInstance = n;
      this.$q = t;
      this.otpHandler = i;
      this.showValidationErrors = !1;
      this.saving = !1
    }
    return Object.defineProperty(t.prototype, 'otpModel', {
      get: function () {
        return this.otpHandler.model
      },
      enumerable: !0,
      configurable: !0
    }),
    t.prototype.onSubmit = function () {
      var n = this;
      this.form && (this.showValidationErrors = !0, this.process().then(function () {
        n.modalInstance.close(n.otpModel)
      }))
    },
    t.prototype.onBackClicked = function () {
      this.modalInstance.dismiss({
        userCancel: !0
      })
    },
    Object.defineProperty(t.prototype, 'isCardBasedOtp', {
      get: function () {
        return this.otpHandler.isCardBasedOtp
      },
      enumerable: !0,
      configurable: !0
    }),
    t.prototype.process = function () {
      var t = this,
      i;
      return this.saving = !0,
      this.errorMessage = '',
      i = this.form.$valid ? this.otpHandler.validate()  : this.$q.when(!1),
      i.then(function (n) {
        return n ? n : t.$q.reject(!1)
      }).catch (function (i) {
        return t.form && t.form.$valid && (t.clearForm(), t.errorMessage = n.utils.getErrorMsg(i)),
        t.$q.reject(i)
      }).finally (function () {
        t.saving = !1
      })
    },
    t.prototype.clearForm = function () {
      this.otpHandler.resetModel();
      var n = this.form;
      n.$setPristine();
      n.$setUntouched();
      this.showValidationErrors = !1
    },
    t.$inject = [
      '$modalInstance',
      '$q',
      'otpHandler'
    ],
    t
  }();
  n.OtpModalCtrl = ni;
  n.app.controller('OtpModalCtrl', ni);
  ti = function () {
    function n(n, t) {
      this.$modalInstance = n;
      this.StateHelperService = t;
      this.DonationAccount = 'GR0501401250125002102000441'
    }
    return n.prototype.navigateToFireDonation = function () {
      var n = {
      };
      n.CreditProduct = this.DonationAccount;
      this.$modalInstance.close(n)
    },
    n.prototype.dismiss = function () {
      this.$modalInstance.dismiss()
    },
    n.$inject = [
      '$modalInstance',
      'StateHelperService'
    ],
    n
  }();
  n.FireDonationModalController = ti;
  n.app.controller('FireDonationModalController', ti);
  ii = function () {
    function n(n, t, i) {
      var r = this;
      this.modalInstance = n;
      this.$q = t;
      this.otpPromptOptions = i;
      this.busy = !1;
      this._onCompleteHandler = function (n) {
        return r.onComplete(n)
      };
      this._onCancelHandler = function (n) {
        return r.onCancel(n)
      }
    }
    return n.prototype.onComplete = function (n) {
      console.log('SMS upgrade completed: ' + n);
      this.modalInstance.close(n)
    },
    n.prototype.onCancel = function (n) {
      console.log('SMS upgrade canceled: ' + n);
      this.modalInstance.dismiss(n)
    },
    Object.defineProperty(n.prototype, 'onCompleteHandler', {
      get: function () {
        return this._onCompleteHandler
      },
      enumerable: !0,
      configurable: !0
    }),
    Object.defineProperty(n.prototype, 'onCancelHandler', {
      get: function () {
        return this._onCancelHandler
      },
      enumerable: !0,
      configurable: !0
    }),
    n.$inject = [
      '$modalInstance',
      '$q',
      'otpPromptOptions'
    ],
    n
  }();
  n.SmsOtpPromptModalController = ii;
  n.app.controller('SmsOtpPromptModalController', ii)
}(alpha || (alpha = {
})),
function (n) {
  var i = function () {
    function t(t, i, r, u, f, e, o, s, h, c, l, a, v, y, p) {
      var k,
      nt,
      w,
      b,
      g;
      if (this.statementsResponse = t, this.product = i, this.STRINGS = r, this.ProductsService = u, this.modal = f, this.scope = e, this.filterService = o, this.postNewWindowService = s, this.roleService = h, this.modalService = c, this.StateHelperService = l, this.AppEventsService = a, this.$state = v, this.SharedDataService = y, this.otherBankProductsService = p, this.dateFromPopupOpened = !1, this.dateToPopupOpened = !1, this.dateFormat = 'dd/MM/yyyy', this.showValidationErrors = !1, this.currentIndexNum = 0, this.dateOptions = {
        formatYear: 'yyyy',
        startingDay: 1,
        showWeeks: 'false',
        maxMode: 'day'
      }, this.MAX_NUMBER_OF_TRANSACTION_IN_PDF = 330, k = this, this.statementsResponse.ResultCode == 0) {
        if (this.statementsResponse.NeedsNewAccessToken) nt = {
          requestIntentId: this.statementsResponse.RequestIntentId,
          bank: i.OtherBankTypeId,
          productType: i.OtherBankProductScheme,
          scope: this.statementsResponse.ScopeNeeded,
          productCode: i.Code,
          otherBankProductId: i.OtherBankProductId,
          serviceRequested: 2,
          callingJsController: n.server.Controllers.OtherBankAccountTransactionsController,
          productIdentifier: i.OtherBankProductIdentifier
        },
        k.StateHelperService.go(n.constants.stateNames.oAuthDanceBeginState, null, nt);
         else {
          if (this.statementsResponse.OtherBankProductTransactions && this.statementsResponse.OtherBankProductTransactions.length != 0) {
            var tt = this.statementsResponse,
            it = tt.OtherBankProductTransactions,
            d = tt.PagingInfo;
            this.errorMessage = '';
            this.lastExtraitKey = d && d.NextPagePositioningKey;
            this.currentIndex = d && d.RowIndex.toString();
            this.statements = it
          } else this.hasMore = !1,
          this.currentIndex = '',
          this.statements = [
          ],
          this.errorMessage = '';
          k.AppEventsService.publish(n.common.services.AppEventsService.PSD2ClearLocalStorageTrigger)
        }
        this.fromDateMinValidityDate = n.utils.SubtractMonths(new Date, 3)
      } else n.utils.isUndefinedOrNull(t.Error) || (this.hasMore = !1, this.currentIndex = '', this.statements = [
      ], this.errorMessage = t.Error.Message);
      this.today = new Date;
      this.firstDayOfMonth = new Date(this.today.getFullYear(), this.today.getMonth(), 1);
      this.from = this.firstDayOfMonth;
      this.to = this.today;
      w = this.today.getDate().toString();
      b = (this.today.getMonth() + 1).toString();
      w.length < 2 && (w = '0' + w);
      b.length < 2 && (b = '0' + b);
      this.currentDate = w + '/' + b + '/' + this.today.getFullYear();
      this.dateFilterValues = [
        {
          id: 1,
          name: this.STRINGS.dfvLastTransactions
        },
        {
          id: 2,
          name: this.STRINGS.dfvLastMonth
        },
        {
          id: 3,
          name: this.STRINGS.dfvLast3Months
        },
        {
          id: 4,
          name: this.STRINGS.dfvCustomPeriod
        }
      ];
      this.selectedDateFilter = {
        id: 1,
        name: this.STRINGS.dfvLastTransactions
      };
      this.lastIndicesAndExtraitArr = [
      ];
      this.documentData = this.ProductsService.getAccountStatementsRequest(i.Code, i.TypeID, 10, !0);
      this.documentData.DocumentRequestType = 32;
      this.documentData.OtherBank = this.product.OtherBankTypeId;
      this.documentData.OtherBankProductScheme = this.product.OtherBankProductScheme;
      this.documentData.OtherBankProductIdentifier = this.product.OtherBankProductIdentifier;
      this.pdfRequest = this.ProductsService.getAccountStatementsRequest(i.Code, i.TypeID, 10, !0);
      v.params && v.params.isOauthCallbackRedirect && (g = y.GetControllerData(n.server.Controllers.OtherBankAccountTransactionsController, n.common.services.AppEventsService.PSD2ProductTransactionsServiceTrigger), g && (console.log('data fetched: ', g), k.AppEventsService.publish(n.common.services.AppEventsService.PSD2ClearLocalStorageTrigger)))
    }
    return t.prototype.isStatementsExceedLimit = function () {
      return this.statements && this.statements.length > this.MAX_NUMBER_OF_TRANSACTION_IN_PDF
    },
    t.prototype.showModalCorporate = function () {
      this.roleService.IsRetail() || this.isStatementsExceedLimit() && this.showExceedMaxTransactionModal()
    },
    t.prototype.showExceedMaxTransactionModal = function () {
      this.modalService.open({
        templateUrl: 'Templates/common/directives/infoLimitTransactionsInPdf',
        size: 'lg',
        backdrop: 'static',
        controller: 'onlyCancelModalcontroller as vm'
      })
    },
    t.prototype.getStatementsWithFilter = function () {
      var t = this;
      if (t.showValidationErrors = !0, t.scope && t.scope.form && n.utils.forceValidation(t.scope.form), t.scope.form.$valid) {
        if (t.currentIndexNum = 0, this.selectedDateFilter.id == 1) {
          t.documentData = t.ProductsService.getAccountStatementsRequest(t.product.Code, t.product.TypeID, 10, !0);
          t.documentData.documentRequestType = 32;
          t.documentData.OtherBank = t.product.OtherBankTypeId;
          t.documentData.OtherBankProductScheme = t.product.OtherBankProductScheme;
          t.documentData.OtherBankProductIdentifier = t.product.OtherBankProductIdentifier;
          t.pdfRequest = t.ProductsService.getAccountStatementsRequest(t.product.Code, t.product.TypeID, 10, !0);
          var e = t.firstDayOfMonth,
          i = t.today.toISOString().split('T') [0],
          r = e.toISOString().split('T') [0],
          u = {
            FromDate: r,
            ToDate: i,
            PageSize: 10
          };
          return this.otherBankProductsService.getProductTransactions(t.product.OtherBankTypeId, 1, t.product.Code, t.product.OtherBankProductId, t.product.OtherBankProductIdentifier, u).then(function (i) {
            if (i.ResultCode == 0) {
              t.lastIndicesAndExtraitArr = [
              ];
              t.errorMessage = '';
              var r = i.PagingInfo;
              t.lastExtraitKey = r && r.NextPagePositioningKey;
              t.currentIndex = t.currentIndexNum.toString();
              t.statements = i.OtherBankProductTransactions
            } else n.utils.isUndefinedOrNull(i.Error) || (t.hasMore = !1, t.currentIndex = '', t.statements = [
            ], t.errorMessage = i.Error.Message)
          })
        }
        var r = t.from.toISOString().split('T') [0],
        i = t.to.toISOString().split('T') [0],
        u = {
          FromDate: r,
          ToDate: i,
          PageSize: 10
        },
        f = new n.model.AccountStatementsSummaryFilter(n.utils.toShortDateString(t.from), n.utils.toShortDateString(t.to));
        return this.otherBankProductsService.getProductTransactions(t.product.OtherBankTypeId, 1, t.product.Code, t.product.OtherBankProductId, t.product.OtherBankProductIdentifier, u).then(function (i) {
          if (i.ResultCode == 0) {
            t.lastIndicesAndExtraitArr = [
            ];
            t.errorMessage = '';
            t.hasMore = i.HasMore;
            var r = i.PagingInfo;
            t.lastExtraitKey = r && r.NextPagePositioningKey;
            t.currentIndex = t.currentIndexNum.toString();
            t.statements = i.OtherBankProductTransactions;
            t.documentData = t.ProductsService.getAggregatedAccountStatementsRequest(t.product.Code, t.product.TypeID, undefined, f);
            t.documentData.DocumentRequestType = 33;
            t.documentData.OtherBank = t.product.OtherBankTypeId;
            t.documentData.OtherBankProductScheme = t.product.OtherBankProductScheme;
            t.documentData.OtherBankProductIdentifier = t.product.OtherBankProductIdentifier;
            t.pdfRequest = t.ProductsService.getAggregatedAccountStatementsRequest(t.product.Code, t.product.TypeID, undefined, f)
          } else n.utils.isUndefinedOrNull(i.Error) || (t.hasMore = !1, t.currentIndex = '', t.statements = [
          ], t.errorMessage = i.Error.Message)
        })
      }
    },
    t.prototype.loadMore = function () {
      var t = this,
      i = new n.model.AccountStatementsSummaryFilter(n.utils.toShortDateString(this.from), n.utils.toShortDateString(this.to)),
      e = i.ToDate == n.utils.toShortDateString(t.today) ? !0 : !1,
      r = this.from.toISOString().split('T') [0],
      u = this.to.toISOString().split('T') [0],
      f = {
        FromDate: r,
        ToDate: u,
        PageSize: 10,
        FromRow: t.lastExtraitKey
      };
      return this.otherBankProductsService.getProductTransactions(this.product.OtherBankTypeId, 1, this.product.Code, this.product.OtherBankProductId, this.product.OtherBankProductIdentifier, f).then(function (r) {
        if (r.ResultCode == 0) {
          t.errorMessage = '';
          t.hasMore = r.HasMore;
          var u = t.currentIndex,
          e = {
            LastPageIndex: t.currentIndex,
            LastExtraitKey: t.lastExtraitKey
          },
          f = r.PagingInfo;
          t.lastExtraitKey = f && f.NextPagePositioningKey;
          t.currentIndexNum++;
          t.currentIndex = t.currentIndexNum.toString();
          t.lastIndicesAndExtraitArr.push(e);
          t.statements = t.statements.concat(r.OtherBankProductTransactions);
          t.documentData = t.ProductsService.getAggregatedAccountStatementsRequest(t.product.Code, t.product.TypeID, null, i, u);
          t.documentData.DocumentRequestType = 33;
          t.documentData.OtherBank = t.product.OtherBankTypeId;
          t.documentData.OtherBankProductScheme = t.product.OtherBankProductScheme;
          t.documentData.OtherBankProductIdentifier = t.product.OtherBankProductIdentifier;
          t.pdfRequest = t.ProductsService.getAggregatedAccountStatementsRequest(t.product.Code, t.product.TypeID, null, i, u);
          t.documentData.IndicesAndExtraits = t.lastIndicesAndExtraitArr
        } else n.utils.isUndefinedOrNull(r.Error) || (t.hasMore = !1, t.currentIndex = '', t.statements = [
        ], t.errorMessage = r.Error.Message)
      })
    },
    t.prototype.dateFromPopupToggleVisibility = function (n) {
      n.preventDefault();
      n.stopPropagation();
      this.dateToPopupOpened = !1;
      this.dateFromPopupOpened = !0;
      this.selectedDateFilter = {
        id: 4,
        name: this.STRINGS.dfvCustomPeriod
      }
    },
    t.prototype.selectTimePeriod = function () {
      this.selectedDateFilter = {
        id: 4,
        name: this.STRINGS.dfvCustomPeriod
      }
    },
    t.prototype.dateToPopupToggleVisibility = function (n) {
      n.preventDefault();
      n.stopPropagation();
      this.dateFromPopupOpened = !1;
      this.dateToPopupOpened = !0;
      this.selectedDateFilter = {
        id: 4,
        name: this.STRINGS.dfvCustomPeriod
      }
    },
    t.prototype.selectDateFilter = function (t) {
      switch (t.id) {
        case 1:
          this.selectedDateFilter = {
            id: 1,
            name: this.STRINGS.dfvLastTransactions
          };
          this.to = this.today;
          this.from = this.firstDayOfMonth;
          this.getStatementsWithFilter();
          break;
        case 2:
          this.selectedDateFilter = {
            id: 2,
            name: this.STRINGS.dfvLastMonth
          };
          this.from = n.utils.SubtractMonths(new Date, 1).addDays(1);
          this.to = this.today;
          this.getStatementsWithFilter();
          break;
        case 3:
          this.selectedDateFilter = {
            id: 3,
            name: this.STRINGS.dfvLast3Months
          };
          this.from = n.utils.SubtractMonths(new Date, 3).addDays(1);
          this.to = this.today;
          this.getStatementsWithFilter();
          break;
        case 4:
          this.selectedDateFilter = {
            id: 4,
            name: this.STRINGS.dfvCustomPeriod
          };
          break;
        default:
          this.to = this.today;
          this.from = this.firstDayOfMonth
      }
    },
    t.prototype.exportPDF = function () {
      var n = {
      },
      t = {
        Request: this.pdfRequest,
        ProductCurrency: this.product.Currency,
        IndicesAndExtraits: this.lastIndicesAndExtraitArr,
        ShowGrossBalancePanel: !1,
        NewGrossBalanceStr: null,
        PreviousGrossBalanceStr: null
      };
      return n.Parameters = JSON.stringify(t),
      n.PDFRequestType = this.selectedDateFilter.id == 1 ? 60 : 61,
      n.OtherBank = this.product.OtherBankTypeId,
      n.OtherBankProductScheme = this.product.OtherBankProductScheme,
      n.OtherBankProductIdentifier = this.product.OtherBankProductIdentifier,
      n
    },
    t.$inject = [
      'statementsResponse',
      'product',
      'STRINGS',
      'ProductsService',
      '$modal',
      '$scope',
      '$filter',
      'postNewWindowService',
      'RoleService',
      '$modal',
      'StateHelperService',
      'AppEventsService',
      '$state',
      'SharedDataService',
      'OtherBankProductsService'
    ],
    t
  }(),
  t;
  n.app.controller('OtherBankAccountTransactionsController', i);
  t = function () {
    function t(t, i, r, u, f, e, o, s, h, c, l, a, v, y, p) {
      var k,
      tt,
      w,
      b,
      ut,
      g,
      nt;
      if (this.statementsResponse = t, this.product = i, this.STRINGS = r, this.ProductsService = u, this.modal = f, this.scope = e, this.filterService = o, this.postNewWindowService = s, this.roleService = h, this.modalService = c, this.StateHelperService = l, this.AppEventsService = a, this.$state = v, this.SharedDataService = y, this.otherBankProductsService = p, this.dateFromPopupOpened = !1, this.dateToPopupOpened = !1, this.dateFormat = 'dd/MM/yyyy', this.showValidationErrors = !1, this.currentIndexNum = 0, this.dateOptions = {
        formatYear: 'yyyy',
        startingDay: 1,
        showWeeks: 'false',
        maxMode: 'day'
      }, this.MAX_NUMBER_OF_TRANSACTION_IN_PDF = 330, k = this, this.statementsResponse.ResultCode == 0) {
        if (this.statementsResponse.NeedsNewAccessToken) tt = {
          requestIntentId: this.statementsResponse.RequestIntentId,
          bank: i.OtherBankTypeId,
          productType: i.OtherBankProductScheme,
          scope: this.statementsResponse.ScopeNeeded,
          productCode: i.Code,
          otherBankProductId: i.OtherBankProductId,
          serviceRequested: 2,
          callingJsController: n.server.Controllers.OtherBankCardTransactionsController,
          productIdentifier: i.OtherBankProductIdentifier
        },
        k.StateHelperService.go(n.constants.stateNames.oAuthDanceBeginState, null, tt);
         else {
          if (this.statementsResponse.OtherBankProductTransactions && this.statementsResponse.OtherBankProductTransactions.length != 0) {
            var it = this.statementsResponse,
            rt = it.OtherBankProductTransactions,
            d = it.PagingInfo;
            this.errorMessage = '';
            this.lastExtraitKey = d && d.NextPagePositioningKey;
            this.currentIndex = d && d.RowIndex.toString();
            this.statements = rt
          } else this.hasMore = !1,
          this.currentIndex = '',
          this.statements = [
          ],
          this.errorMessage = '';
          k.AppEventsService.publish(n.common.services.AppEventsService.PSD2ClearLocalStorageTrigger)
        }
        this.fromDateMinValidityDate = n.utils.SubtractMonths(new Date, 3)
      } else n.utils.isUndefinedOrNull(t.Error) || (this.hasMore = !1, this.currentIndex = '', this.statements = [
      ], this.errorMessage = t.Error.Message);
      this.today = new Date;
      this.firstDayOfMonth = new Date(this.today.getFullYear(), this.today.getMonth(), 1);
      this.from = this.firstDayOfMonth;
      this.to = this.today;
      w = this.today.getDate().toString();
      b = (this.today.getMonth() + 1).toString();
      w.length < 2 && (w = '0' + w);
      b.length < 2 && (b = '0' + b);
      this.currentDate = w + '/' + b + '/' + this.today.getFullYear();
      this.dateFilterValues = [
        {
          id: 1,
          name: this.STRINGS.dfvLastTransactions
        },
        {
          id: 2,
          name: this.STRINGS.dfvLastMonth
        },
        {
          id: 3,
          name: this.STRINGS.dfvLast3Months
        },
        {
          id: 4,
          name: this.STRINGS.dfvCustomPeriod
        }
      ];
      this.selectedDateFilter = {
        id: 1,
        name: this.STRINGS.dfvLastTransactions
      };
      ut = new n.model.OtherBankCardStatementsSummaryFilter(new Date(this.today.getFullYear(), this.today.getMonth(), 1).toDateString(), this.today.toDateString());
      this.lastIndicesAndExtraitArr = [
      ];
      g = {
        ProductCode: i.Code,
        ProductTypeID: i.TypeID,
        MaxRecords: 10
      };
      this.documentData = g;
      this.documentData.DocumentRequestType = 34;
      this.documentData.OtherBank = this.product.OtherBankTypeId;
      this.documentData.OtherBankProductScheme = this.product.OtherBankProductScheme;
      this.documentData.OtherBankProductIdentifier = this.product.OtherBankProductIdentifier;
      this.pdfRequest = g;
      v.params && v.params.isOauthCallbackRedirect && (nt = y.GetControllerData(n.server.Controllers.OtherBankCardTransactionsController, n.common.services.AppEventsService.PSD2ProductTransactionsServiceTrigger), nt && (console.log('data fetched: ', nt), k.AppEventsService.publish(n.common.services.AppEventsService.PSD2ClearLocalStorageTrigger)))
    }
    return t.prototype.isStatementsExceedLimit = function () {
      return this.statements && this.statements.length > this.MAX_NUMBER_OF_TRANSACTION_IN_PDF
    },
    t.prototype.showModalCorporate = function () {
      this.roleService.IsRetail() || this.isStatementsExceedLimit() && this.showExceedMaxTransactionModal()
    },
    t.prototype.showExceedMaxTransactionModal = function () {
      this.modalService.open({
        templateUrl: 'Templates/common/directives/infoLimitTransactionsInPdf',
        size: 'lg',
        backdrop: 'static',
        controller: 'onlyCancelModalcontroller as vm'
      })
    },
    t.prototype.getStatementsWithFilter = function () {
      var t = this,
      i;
      if (t.showValidationErrors = !0, t.scope && t.scope.form && n.utils.forceValidation(t.scope.form), t.scope.form.$valid) {
        if (t.currentIndexNum = 0, this.selectedDateFilter.id == 1) {
          i = {
            ProductCode: t.product.Code,
            ProductTypeID: t.product.TypeID,
            MaxRecords: 10
          };
          t.documentData = i;
          t.documentData.documentRequestType = 34;
          t.documentData.OtherBank = t.product.OtherBankTypeId;
          t.documentData.OtherBankProductScheme = t.product.OtherBankProductScheme;
          t.documentData.OtherBankProductIdentifier = t.product.OtherBankProductIdentifier;
          t.pdfRequest = i;
          var e = t.firstDayOfMonth,
          r = t.today.toISOString().split('T') [0],
          u = e.toISOString().split('T') [0],
          f = {
            FromDate: u,
            ToDate: r,
            PageSize: 10
          };
          return this.otherBankProductsService.getProductTransactions(t.product.OtherBankTypeId, 2, t.product.Code, t.product.OtherBankProductId, t.product.OtherBankProductIdentifier, f).then(function (i) {
            if (i.ResultCode == 0) {
              t.lastIndicesAndExtraitArr = [
              ];
              t.errorMessage = '';
              var r = i.PagingInfo;
              t.lastExtraitKey = r && r.NextPagePositioningKey;
              t.currentIndex = t.currentIndexNum.toString();
              t.statements = i.OtherBankProductTransactions
            } else n.utils.isUndefinedOrNull(i.Error) || (t.hasMore = !1, t.currentIndex = '', t.statements = [
            ], t.errorMessage = i.Error.Message)
          })
        }
        var u = t.from.toISOString().split('T') [0],
        r = t.to.toISOString().split('T') [0],
        f = {
          FromDate: u,
          ToDate: r,
          PageSize: 10
        },
        o = new n.model.OtherBankCardStatementsSummaryFilter(n.utils.toShortDateString(t.from), n.utils.toShortDateString(t.to));
        return this.otherBankProductsService.getProductTransactions(t.product.OtherBankTypeId, 2, t.product.Code, t.product.OtherBankProductId, t.product.OtherBankProductIdentifier, f).then(function (i) {
          var r,
          u;
          i.ResultCode == 0 ? (t.lastIndicesAndExtraitArr = [
          ], t.errorMessage = '', t.hasMore = i.HasMore, r = i.PagingInfo, t.lastExtraitKey = r && r.NextPagePositioningKey, t.currentIndex = t.currentIndexNum.toString(), t.statements = i.OtherBankProductTransactions, u = {
            ProductCode: t.product.Code,
            ProductTypeID: t.product.TypeID,
            GetDetails: undefined,
            GetSummary: o
          }, t.documentData = u, t.documentData.DocumentRequestType = 35, t.documentData.OtherBank = t.product.OtherBankTypeId, t.documentData.OtherBankProductScheme = t.product.OtherBankProductScheme, t.documentData.OtherBankProductIdentifier = t.product.OtherBankProductIdentifier, t.pdfRequest = u)  : n.utils.isUndefinedOrNull(i.Error) || (t.hasMore = !1, t.currentIndex = '', t.statements = [
          ], t.errorMessage = i.Error.Message)
        })
      }
    },
    t.prototype.loadMore = function () {
      var t = this,
      i = new n.model.OtherBankCardStatementsSummaryFilter(n.utils.toShortDateString(this.from), n.utils.toShortDateString(this.to)),
      e = i.ToDate == n.utils.toShortDateString(t.today) ? !0 : !1,
      r = this.from.toISOString().split('T') [0],
      u = this.to.toISOString().split('T') [0],
      f = {
        FromDate: r,
        ToDate: u,
        PageSize: 10,
        FromRow: t.lastExtraitKey
      };
      return this.otherBankProductsService.getProductTransactions(this.product.OtherBankTypeId, 2, this.product.Code, this.product.OtherBankProductId, this.product.OtherBankProductIdentifier, f).then(function (r) {
        var u;
        if (r.ResultCode == 0) {
          t.errorMessage = '';
          t.hasMore = r.HasMore;
          var e = t.currentIndex,
          o = {
            LastPageIndex: t.currentIndex,
            LastExtraitKey: t.lastExtraitKey
          },
          f = r.PagingInfo;
          t.lastExtraitKey = f && f.NextPagePositioningKey;
          t.currentIndexNum++;
          t.currentIndex = t.currentIndexNum.toString();
          t.lastIndicesAndExtraitArr.push(o);
          t.statements = t.statements.concat(r.OtherBankProductTransactions);
          u = {
            ProductCode: t.product.Code,
            ProductTypeID: t.product.TypeID,
            GetDetails: null,
            GetSummary: i,
            LastPageIndex: e
          };
          t.documentData = u;
          t.documentData.DocumentRequestType = 35;
          t.documentData.OtherBank = t.product.OtherBankTypeId;
          t.documentData.OtherBankProductScheme = t.product.OtherBankProductScheme;
          t.documentData.OtherBankProductIdentifier = t.product.OtherBankProductIdentifier;
          t.pdfRequest = u;
          t.documentData.IndicesAndExtraits = t.lastIndicesAndExtraitArr
        } else n.utils.isUndefinedOrNull(r.Error) || (t.hasMore = !1, t.currentIndex = '', t.statements = [
        ], t.errorMessage = r.Error.Message)
      })
    },
    t.prototype.dateFromPopupToggleVisibility = function (n) {
      n.preventDefault();
      n.stopPropagation();
      this.dateToPopupOpened = !1;
      this.dateFromPopupOpened = !0;
      this.selectedDateFilter = {
        id: 4,
        name: this.STRINGS.dfvCustomPeriod
      }
    },
    t.prototype.selectTimePeriod = function () {
      this.selectedDateFilter = {
        id: 4,
        name: this.STRINGS.dfvCustomPeriod
      }
    },
    t.prototype.dateToPopupToggleVisibility = function (n) {
      n.preventDefault();
      n.stopPropagation();
      this.dateFromPopupOpened = !1;
      this.dateToPopupOpened = !0;
      this.selectedDateFilter = {
        id: 4,
        name: this.STRINGS.dfvCustomPeriod
      }
    },
    t.prototype.selectDateFilter = function (t) {
      switch (t.id) {
        case 1:
          this.selectedDateFilter = {
            id: 1,
            name: this.STRINGS.dfvLastTransactions
          };
          this.to = this.today;
          this.from = this.firstDayOfMonth;
          this.getStatementsWithFilter();
          break;
        case 2:
          this.selectedDateFilter = {
            id: 2,
            name: this.STRINGS.dfvLastMonth
          };
          this.from = n.utils.SubtractMonths(new Date, 1).addDays(1);
          this.to = this.today;
          this.getStatementsWithFilter();
          break;
        case 3:
          this.selectedDateFilter = {
            id: 3,
            name: this.STRINGS.dfvLast3Months
          };
          this.from = n.utils.SubtractMonths(new Date, 3).addDays(1);
          this.to = this.today;
          this.getStatementsWithFilter();
          break;
        case 4:
          this.selectedDateFilter = {
            id: 4,
            name: this.STRINGS.dfvCustomPeriod
          };
          break;
        default:
          this.to = this.today;
          this.from = this.firstDayOfMonth
      }
    },
    t.prototype.exportPDF = function () {
      var n = {
      },
      t = {
        Request: this.pdfRequest,
        ProductCurrency: this.product.Currency,
        IndicesAndExtraits: this.lastIndicesAndExtraitArr,
        ShowGrossBalancePanel: !1,
        NewGrossBalanceStr: null,
        PreviousGrossBalanceStr: null
      };
      return n.Parameters = JSON.stringify(t),
      n.PDFRequestType = this.selectedDateFilter.id == 1 ? 62 : 63,
      n.OtherBank = this.product.OtherBankTypeId,
      n.OtherBankProductScheme = this.product.OtherBankProductScheme,
      n.OtherBankProductIdentifier = this.product.OtherBankProductIdentifier,
      n
    },
    t.$inject = [
      'statementsResponse',
      'product',
      'STRINGS',
      'ProductsService',
      '$modal',
      '$scope',
      '$filter',
      'postNewWindowService',
      'RoleService',
      '$modal',
      'StateHelperService',
      'AppEventsService',
      '$state',
      'SharedDataService',
      'OtherBankProductsService'
    ],
    t
  }();
  n.app.controller('OtherBankCardTransactionsController', t)
}(alpha || (alpha = {
})),
function (n) {
  var i = function () {
    function t(t, i, r, u, f, e, o, s) {
      this.product = t;
      this.stateService = r;
      this.SecurityService = u;
      this.ProductsService = f;
      this.modal = e;
      this.postNewWindowService = o;
      this.roleService = s;
      this.today = new Date;
      var h = this;
      this.products = i.filter(function (t) {
        if (!n.utils.isUndefinedOrNull(t) && !n.utils.isUndefinedOrNull(h.product)) return t.id != h.product.id && !t.hasError
      });
      this.selectedProduct = this.product;
      this.SecurityService.getUserSessionInfo().then(function (n) {
        h.currentWorkingDate = n.CurrentWorkingDate
      });
      n.utils.isUndefinedOrNull(this.product) || (this.mutualDocumentData = this.ProductsService.getMutualInfoRequest(this.product.Code, this.product.TypeID), this.mutualDocumentData.DocumentRequestType = 11);
      this.stockDocumentData = {
        DocumentRequestType: 25
      };
      this.pdfRequest = {
        ProductCode: t.Code,
        ProductTypeID: t.TypeID,
        GetOldStatements: !1,
        StatementID: 0,
        ProductID: t.BankProduct.ProductID
      };
      this.isEndUser = this.roleService.isEndUser()
    }
    return t.prototype.selectProduct = function (n) {
      this.stateService.go(n.getDetailsState(), {
        id: n.id
      })
    },
    t.prototype.getFundDetails = function (t, i, r, u, f) {
      var e = this.modal.open({
        templateUrl: 'Templates/Features/Investments/fundsModal',
        size: 'lg',
        controller: 'FundsModalInstanceCtrl as vm',
        windowClass: 'custom',
        resolve: {
          fundDetails: [
            'ProductsService',
            function (n) {
              return n.getMutualDetailsInfo({
                ProductCode: t,
                ProductTypeID: i,
                FundCode: r
              })
            }
          ],
          shareDate: [
            function () {
              return u
            }
          ],
          balanceDate: [
            function () {
              return f
            }
          ],
          documentData: [
            'ProductsService',
            function (e) {
              var o = e.getMutualDetailsInfoRequest(t, i, r),
              s,
              h;
              return o.DocumentRequestType = 28,
              o.KeyValueDictionary = [
              ],
              s = new n.model.KeyValue,
              s.Key = 'shareDate',
              s.Value = n.utils.isUndefinedOrNullorWhiteSpace(u) ? null : u.toString(),
              o.KeyValueDictionary.push(s),
              h = new n.model.KeyValue,
              h.Key = 'balanceDate',
              h.Value = n.utils.isUndefinedOrNullorWhiteSpace(f) ? null : f.toString(),
              o.KeyValueDictionary.push(h),
              o.ProductCode = t,
              o
            }
          ],
          portfolioAcc: [
            function () {
              return t
            }
          ]
        }
      })
    },
    t.prototype.getCurrentTerms = function () {
      var t = this.product,
      n = {
      };
      n.Parameters = JSON.stringify({
        ApplicationId: t.eTimeDeposit.ApplicationId
      });
      n.PDFRequestType = 13;
      this.postNewWindowService(n, 'GetPdf', !1)
    },
    t.prototype.exportPDF = function () {
      var n = {
      },
      t = {
        Request: this.pdfRequest
      };
      return n.Parameters = JSON.stringify(t),
      n.PDFRequestType = 44,
      n
    },
    t.prototype.getPermittedActions = function (n) {
      return n.filter(function (n) {
        return n.forDetailsPage == !0
      })
    },
    t.$inject = [
      'product',
      'products',
      '$state',
      'SecurityService',
      'ProductsService',
      '$modal',
      'postNewWindowService',
      'RoleService'
    ],
    t
  }(),
  t;
  n.app.controller('ProductDetailsController', i);
  t = function () {
    function t(t, i, r, u, f, e, o, s, h, c, l, a, v) {
      var p,
      y;
      this.product = t;
      this.otherBankProducts = i;
      this.stateService = r;
      this.SecurityService = u;
      this.ProductsService = f;
      this.modal = e;
      this.postNewWindowService = o;
      this.roleService = s;
      this.$state = h;
      this.StateHelperService = c;
      this.AppEventsService = l;
      this.SharedDataService = a;
      this.otherBankProductsService = v;
      this.Model = {
        HasErrors: !1,
        ErrorMessage: '',
        HasFatalError: !1
      };
      this.isBusy = !1;
      this.ClearErrorMessages();
      this.today = new Date;
      p = this;
      this.products = i.filter(function (t) {
        if (!n.utils.isUndefinedOrNull(t) && !n.utils.isUndefinedOrNull(p.product)) return t.id != p.product.id && !t.hasError
      });
      this.selectedProduct = this.product;
      this.SecurityService.getUserSessionInfo().then(function (n) {
        p.currentWorkingDate = n.CurrentWorkingDate
      });
      this.pdfRequest = {
        ProductCode: t.Code,
        ProductTypeID: t.TypeID,
        GetOldStatements: !1,
        StatementID: 0,
        ProductID: t.BankProduct.ProductID
      };
      h.params && h.params.isOauthCallbackRedirect && (y = a.GetControllerData(n.server.Controllers.OtherBankProductDetailsController, n.common.services.AppEventsService.PSD2ProductDetailsServiceTrigger), y && (console.log('data fetched: ', y), this.reloadProductDetails(y.RequestedBank, y.RequestedProductCode, y.RequestedProductId, y.RequestedProductIdentifier, y.RequestedProductType)))
    }
    return t.prototype.reloadProductDetails = function (t, i, r, u, f) {
      var e = this;
      e.isBusy = !0;
      f || (f = e.product.BankProduct && e.product.BankProduct.OtherBankProductDetails && e.product.BankProduct.OtherBankProductDetails.ProductScheme);
      e.otherBankProductsService.getProductDetails(t, f, 5, i, r, u).then(function (o) {
        var h,
        s;
        o.ResultCode === 0 && o.Error == null ? (e.ClearErrorMessages(), o.NeedsNewAccessToken ? (h = {
          requestIntentId: o.RequestIntentId,
          bank: t,
          productType: f,
          scope: o.ScopeNeeded,
          productCode: i,
          otherBankProductId: r,
          serviceRequested: 5,
          callingJsController: n.server.Controllers.OtherBankProductDetailsController,
          productIdentifier: u
        }, e.StateHelperService.go(n.constants.stateNames.oAuthDanceBeginState, null, h))  : (o.OtherBankProductDetails && o.OtherBankProductDetails.length != 0 && (s = o.OtherBankProductDetails[0], setTimeout(function () {
          e.product && e.product.BankProduct && (e.product.BankProduct.OtherBankProdLastUpdateOn = s.LastUpdatedOn, e.product.BankProduct.AvailableBalance = s.AvailableBalance.Amount, e.product.BankProduct.AvailableBalanceSign = s.AvailableBalance.Sign, e.product.BankProduct.NetBalance = s.GrossBalance.Amount, e.product.BankProduct.NetBalanceSign = s.GrossBalance.Sign, e.product.BankProduct.OtherBankProductDetails && (e.product.BankProduct.OtherBankProductDetails.GrossBalanceLastValidityDate = s.GrossBalance.LastValidityDate, e.product.BankProduct.OtherBankProductDetails.AvailableBalanceLastValidityDate = s.AvailableBalance.LastValidityDate, e.product.BankProduct.OtherBankProductDetails.Commitments = s.Commitments, e.product.BankProduct.OtherBankProductDetails.FriendlyName = s.FriendlyName, e.product.BankProduct.OtherBankProductDetails.OwnerName = s.OwnerName, f == 2 && (e.product.BankProduct.OtherBankProductDetails.CardValidFromDate = s.CardValidFromDate, e.product.BankProduct.OtherBankProductDetails.CardValidToDate = s.CardValidToDate, e.product.BankProduct.OtherBankProductDetails.CardCreditLimit = s.CardCreditLimit)))
        }, 0)), e.AppEventsService.publish(n.common.services.AppEventsService.PSD2ClearLocalStorageTrigger)))  : (e.Model.HasErrors = !0, e.Model.ErrorMessage = n.utils.getErrorMsg(o.Error))
      }, function (t) {
        e.Model.HasFatalError = !0;
        e.Model.ErrorMessage = n.utils.getErrorMsg(t)
      }).finally (function () {
        e.isBusy = !1
      })
    },
    t.prototype.selectProduct = function (n) {
      this.stateService.go(n.getTransactionsState(), {
        id: n.id
      })
    },
    t.prototype.getCurrentTerms = function () {
      var t = this.product,
      n = {
      };
      n.Parameters = JSON.stringify({
        ApplicationId: t.eTimeDeposit.ApplicationId
      });
      n.PDFRequestType = 13;
      this.postNewWindowService(n, 'GetPdf', !1)
    },
    t.prototype.exportPDF = function () {
      var n = {
      },
      t = {
        Request: this.pdfRequest
      };
      return n.Parameters = JSON.stringify(t),
      n.PDFRequestType = 44,
      n
    },
    t.prototype.getPermittedActions = function (n) {
      return n.filter(function (n) {
        return n.forDetailsPage == !0
      })
    },
    t.prototype.ClearErrorMessages = function () {
      this.Model.HasErrors = !1;
      this.Model.HasFatalError = !1;
      this.Model.ErrorMessage = null
    },
    t.$inject = [
      'product',
      'otherBankProducts',
      '$state',
      'SecurityService',
      'ProductsService',
      '$modal',
      'postNewWindowService',
      'RoleService',
      '$state',
      'StateHelperService',
      'AppEventsService',
      'SharedDataService',
      'OtherBankProductsService'
    ],
    t
  }();
  n.app.controller('OtherBankProductDetailsController', t)
}(alpha || (alpha = {
})),
function (n) {
  var t;
  (function (n) {
    var t = function () {
      function n(n) {
        this.IsInVersion = n
      }
      return n
    }();
    n.VersionFilterController = t
  }) (t = n.controllers || (n.controllers = {
  }))
}(alpha || (alpha = {
}));
Date.prototype.addDays = function (n) {
  var t = new Date(this.valueOf());
  return t.setDate(t.getDate() + n),
  t
};
alpha.app.directive('barchartPopover', [
  '$document',
  '$modal',
  function (n, t) {
    return {
      restrict: 'EA',
      replace: !0,
      scope: {
        clickedData: '='
      },
      templateUrl: 'templates/common/directives/barchartPopover',
      link: function (n) {
        n.x = 0;
        n.$watch('clickedData.dataset', function (t, i) {
          t === i || !t || (n.clickedData.dataset = t, n.xPopup = n.clickedData.xPopup, n.y = n.clickedData.y)
        });
        n.getTransactionDetails = function (n, i) {
          var r = t.open({
            templateUrl: 'Templates/Features/Accounts/transactionDetailsModal',
            controller: 'TransactionDetailsModalInstanceCtrl as vm',
            windowClass: 'custom',
            resolve: {
              details: [
                'ProductsService',
                function (t) {
                  var r = [
                  ],
                  u;
                  return alpha.utils.isUndefinedOrNull(n.StatementDetails) || n.StatementDetails.length == 0 || alpha.utils.isUndefinedOrNull(n.StatementDetails[0]) ? (u = new alpha.model.AccountStatementDetailsFilter(n.TransactionUN), t.getAggregatedAccountStatements({
                    ProductCode: i.Code,
                    ProductTypeID: i.TypeID,
                    GetDetails: u,
                    GetSummary: null
                  }).then(function (n) {
                    return alpha.utils.isUndefinedOrNull(n) || alpha.utils.isUndefinedOrNull(n.Statements) || (r = n.Statements[0].StatementDetails),
                    r
                  }))  : r = n.StatementDetails
                }
              ]
            }
          })
        }
      }
    }
  }
]);
alpha.app.directive('checkAccount', [
  function () {
    return {
      restrict: 'A',
      require: '?ngModel',
      replace: !0,
      scope: {
        accountOne: '=',
        accountTwo: '=',
        checkAccount: '=',
        onlySameAccount: '=',
        notCheckCurrency: '='
      },
      link: function (n, t, i, r) {
        n.checkAccounts = function (t, i) {
          n.onlySameAccount ? typeof t == 'object' && typeof i == 'object' ? t.Code == i.Code ? r.$setValidity('sameacc', !1)  : r.$setValidity('sameacc', !0)  : t == i ? r.$setValidity('sameacc', !1)  : r.$setValidity('sameacc', !0)  : t != null && i != null && (t.Code == i.Code ? r.$setValidity('sameacc', !1)  : r.$setValidity('sameacc', !0), n.notCheckCurrency || t.CurrencyEnum == i.CurrencyEnum ? r.$setValidity('difcurrency', !0)  : r.$setValidity('difcurrency', !1))
        };
        n.$watch('checkAccount', function () {
          n.checkAccount ? n.checkAccounts(n.accountOne, n.accountTwo)  : (r.$setValidity('difcurrency', !0), r.$setValidity('sameacc', !0))
        });
        n.$watch('accountOne', function () {
          n.checkAccount ? n.checkAccounts(n.accountOne, n.accountTwo)  : (r.$setValidity('difcurrency', !0), r.$setValidity('sameacc', !0))
        });
        n.$watch('accountTwo', function () {
          n.checkAccount ? n.checkAccounts(n.accountOne, n.accountTwo)  : (r.$setValidity('difcurrency', !0), r.$setValidity('sameacc', !0))
        })
      }
    }
  }
]);
alpha.app.directive('checkAlphaIban', [
  function () {
    return {
      restrict: 'A',
      require: '?ngModel',
      replace: !0,
      scope: {
        ngModel: '='
      },
      link: function (n, t, i, r) {
        n.checkAlphaIban = function () {
          n.ngModel && (alpha.utils.CheckAlphaIban(n.ngModel).valid ? r.$setValidity('alphaiban', !0)  : r.$setValidity('alphaiban', !1))
        };
        n.$watch('ngModel', function () {
          n.ngModel ? n.checkAlphaIban(n.ngModel)  : r.$setValidity('alphaiban', !0)
        })
      }
    }
  }
]),
function (n) {
  var t;
  (function (t) {
    var i;
    (function () {
      n.app.directive('contactUpdate', [
        '$state',
        'SecurityService',
        'QueriesService',
        '$modal',
        'VersionFilterService',
        'AppEventsService',
        'RoleService',
        'OtpHandlerService',
        function (t, i, r, u, f, e, o, s) {
          return {
            restrict: 'A',
            link: function (h) {
              var nt,
              tt,
              it,
              rt,
              ut,
              ft,
              et,
              ot,
              st,
              c,
              l,
              a,
              v,
              p,
              w,
              b,
              k,
              y,
              d = s.retrieveHandler(21),
              g = function () {
                e.publish(n.common.services.AppEventsService.FailedTransModal_Event)
              },
              ht = e.subscribe(n.common.services.AppEventsService.ContactInfoUpdateModal_Event, function () {
                f.IsInVersions(n.constants.versionFilters.UPDATE_CONTACT_INFO).then(function (n) {
                  return n
                }).then(function (n) {
                  return n && o.getRole() != 8 && o.getRole() != 6 ? r.confirmContactQuestion(4)  : null
                }).then(function (n) {
                  return null != n && n.ResultCode == 0 && n.Show ? i.getUserSessionInfo()  : null
                }).then(function (f) {
                  if (f) {
                    var e = function (n) {
                      return {
                        ActionType: n,
                        ContactType: 4,
                        hasOTP: f.OTPStatus == 1
                      }
                    };
                    return y = u.open({
                      templateUrl: 'Templates/common/modals/contactInfoUpdate',
                      controller: 'ContactInfoUpdateModalController as vm',
                      size: 'lg',
                      windowClass: 'custom',
                      backdrop: 'static',
                      resolve: {
                        userInfo: function () {
                          return f
                        },
                        isRetail: function () {
                          return o.IsIndividualUser()
                        },
                        otpHandler: function () {
                          return d
                        },
                        payloadBuilder: function () {
                          return e
                        }
                      }
                    }).result,
                    y.then(function (u) {
                      return r.confirmContactAnswer(u.returnValue, 4, f.OTPStatus == 1).finally (function () {
                        if (u.returnValue == 2) {
                          var e = f.OTPStatus == 2;
                          t.go(n.constants.stateNames.profilePersonalState, {
                            email: e
                          })
                        } else if (u.returnValue == 1 && o.IsRetail()) return r.getInternationalDialCodes().then(function (t) {
                          function u(t, i) {
                            var u = s[0],
                            r = '',
                            f;
                            return t = !n.utils.isUndefinedOrNullorWhiteSpace(t) && t.substr(0, 2) == '00' ? '+' + t.substring(2)  : t,
                            n.utils.isUndefinedOrNullorWhiteSpace(t) || t.substring(0, 1) != '+' ? (o(u, i), t)  : (f = !1, r = t.substring(1, 2), r != '1' && r != '7' && (r = t.substring(1, 3), u = e(r), n.utils.isUndefinedOrNull(u) && (r = t.substring(1, 4), u = e(r))), n.utils.isUndefinedOrNull(u) || o(u, i), t.substring(r.length + 1, t.length))
                          }
                          function e(i) {
                            var r = t.Data.filter(function (n) {
                              return n.Code == i
                            });
                            return n.utils.isUndefinedOrNull(r) ? undefined : r[0]
                          }
                          function o(n, t) {
                            switch (t) {
                              case 'mobile':
                                k = st = n;
                                break;
                              case 'home':
                                p = ft = n;
                                break;
                              case 'work':
                                w = et = n;
                                break;
                              case 'fax':
                                b = ot = n
                            }
                          }
                          var s = t.Data.filter(function (n) {
                            return n.Code == '30'
                          }),
                          r;
                          c = tt = u(f.MobilePhone, 'mobile');
                          l = it = u(f.Telephone, 'home');
                          a = rt = u(f.PrimaryTelephone, 'work');
                          v = ut = u(f.Fax, 'fax');
                          nt = f.Email;
                          r = {
                          };
                          r.Contacts = [
                          ];
                          r.Contacts.push(new n.profile.Contact(4, f.Email, null));
                          f.Fax = n.utils.isUndefinedOrNullorWhiteSpace(v) ? '' : '00' + b.Code + v;
                          r.Contacts.push(new n.profile.Contact(2, f.Fax, null));
                          f.MobilePhone = n.utils.isUndefinedOrNullorWhiteSpace(c) ? '' : '00' + k.Code + c;
                          r.Contacts.push(new n.profile.Contact(3, f.MobilePhone, null));
                          f.Telephone = n.utils.isUndefinedOrNullorWhiteSpace(l) ? '' : '00' + p.Code + l;
                          r.Contacts.push(new n.profile.Contact(1, f.Telephone, null));
                          f.PrimaryTelephone = n.utils.isUndefinedOrNullorWhiteSpace(a) ? '' : '00' + w.Code + a;
                          r.Contacts.push(new n.profile.Contact(6, f.PrimaryTelephone, null));
                          d.appendExtraInfoToPayload(r);
                          i.changeContactsApplication(r)
                        })
                      })
                    }).finally (function () {
                      g()
                    })
                  }
                }).finally (function () {
                  n.utils.isUndefinedOrNull(y) && g()
                })
              }); h.$on('$destroy', ht)
            }
          }
        }
        ])
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  }));
  alpha.app.filter('CountryCodeToCountry', [
    function () {
      return function (n, t) {
        if (n == null && (n = ''), typeof t == 'undefined') return '';
        var i;
        return i = t.filter(function (t) {
          return t.CountryIso == n
        }),
        i.length > 0 ? i[0].Name : n
      }
    }
  ]);
  alpha.app.directive('disableOnPromise', [
    '$parse',
    function (n) {
      return {
        restrict: 'A',
        compile: function (t, i) {
          var r = n(i.disableOnPromise);
          return function (n, t, i) {
            t.on('click', function (t) {
              i.$set('disabled', !0);
              n.$apply(function () {
                r(n, {
                  $event: t
                }).finally (function () {
                  i.$set('disabled', !1)
                })
              })
            })
          }
        }
      }
    }
  ]);
  alpha.app.directive('docUploadContactDetailStatus', [
    function () {
      return {
        restrict: 'E',
        templateUrl: 'templates/common/directives/doc-upload-contact-detail-status',
        replace: !1,
        scope: {
          hasPendingApplication: '=hasPendingApplication',
          areaStatus: '=areaStatus',
          verifiedStatus: '=verifiedStatus'
        },
        link: function () {
        }
      }
    }
  ]);
  alpha.app.directive('donut', [
    '$document',
    'AppEventsService',
    function (n, t) {
      return {
        restrict: 'EA',
        replace: !0,
        templateUrl: 'templates/features/overview/donut',
        link: function (i, r, u) {
          var s = d3.select(r[0]),
          o = u.for ,
          f,
          e;
          i.hasError = !1;
          f = {
          };
          o === 'accounts' ? f = i.vm.accounts : o === 'cards' ? f = i.vm.cards : o === 'loans' ? f = i.vm.loans : o === 'investments' && (f = i.vm.investments);
          i.donutTitle = u.title;
          i.totalbalancetext = u.resource;
          i.totalBalance = getTotalBalance(f);
          i.Math = Math;
          i.vm.Description != '' && (f.length > 0 ? (i.noDataAvailable = !1, e = new Donut(180, 180, 86, f, s, i, n, t), e.draw(), i.clickedObject = {
            Title: i.totalbalancetext,
            Currency: 'EUR',
            AmountInEUR: Math.abs(i.totalBalance)
          }, f.length == 1 && (e.clearDonut(), i.clickedObject = f[0], e.drawInnerArc({
            startAngle: 0,
            endAngle: Math.PI * 2
          }, 0, !0)), i.IsNumberLarge = function () {
            var n = i.clickedObject.AmountInEUR;
            return n && Math.abs(n) > 99999
          }, i.IsClicked = function () {
            if (e) return e.selectedIndex !== - 1
          }, i.hasActions = function () {
            return o !== 'investments'
          }, i.stopBubbling = function (n) {
            n.stopPropagation()
          }, i.$on('$destroy', function () {
            e.destroy()
          }))  : i.noDataAvailable = !0)
        }
      }
    }
  ]);
  Donut = function (n, t, i, r, u, f, e, o) {
    var s;
    this.width = n;
    this.height = t;
    this.radius = i;
    this.clickedObject = {
    };
    this.dataset = r;
    this.scope = f;
    this.div = u;
    this.doc = e;
    this.selectedIndex = - 1;
    this.innerRadiusOffset = 15;
    this.svg = u.append('svg');
    this.animationConstant = 100;
    this.svg.data(this.dataset);
    this.svg.attr('width', n);
    this.svg.attr('height', t);
    this.donutData = d3.layout.pie().value(function (n) {
      return n && n.AmountInEUR && typeof n.AmountInEUR == 'number' ? Math.abs(n.AmountInEUR)  : 1
    }).sort(null);
    s = this;
    this.container = s.div[0][0];
    this.draw = function () {
      this.donutGroup = this.setDonutGroup(this.svg, this.width, this.height);
      this.contentGroup = this.setDonutContentGroup(this.svg, this.width, this.height);
      this.mainDonut = this.createArc(this.radius - this.innerRadiusOffset, this.radius);
      this.paths = this.donutGroup.selectAll('path').data(this.donutData(this.dataset)).enter().append('path').attr('class', function (n) {
        return n.data.ColorClass
      }).attr('stroke', 'white').attr('stroke-width', '2').on('click', function (n, t) {
        d3.event.stopPropagation();
        s.dataset.length != 1 && s.drawInnerArc(n, t)
      }).transition().ease('linear').delay(function (n) {
        return n.startAngle * s.animationConstant
      }).duration(function (n) {
        return (n.endAngle - n.startAngle) * s.animationConstant
      }).attrTween('d', this.tweenPie);
      this.clearDonut();
      s.setDonutTextContent(!1)
    };
    this.drawInnerArc = function (n, t, i) {
      var u,
      f,
      e,
      h,
      r;
      s.selectedIndex !== t || s.selectedIndex === - 1 ? (s.clearDonut(), u = n.startAngle, f = n.endAngle, i && (t = 0), s.selectedIndex = t, e = s.paths[0][t], h = 'm 101.3922,9.6966073 c -5.854003,-3.533 -12.086003,-6.075 -18.484003,-7.646 -2.338,-0.9330004 -5.216,-2.78700035 -6.784,-4.4230004 l -4.714,-4.924 c -1.774,-1.8539999 -4.74,-1.9189999 -6.594,-0.144 l -5.182,4.964 c -1.847,1.76600005 -5.342,3.44900005 -7.76,4.3060004 -7.182,1.651 -14.117,4.485 -20.483,8.4719997 -6.308,3.672 -12.663,9.778 -16.752999,14.943 -0.033,0.041 -0.061,0.083 -0.093,0.125 -0.032,0.04 -0.066,0.077 -0.099,0.118 -22.9310008,28.972 -18.0350006,71.046996 10.937999,93.979993 28.971,22.929 71.048,18.033 93.979003,-10.94 0.034,-0.04 0.061,-0.082 0.091,-0.122 0.033,-0.038 0.069,-0.077 0.099,-0.119 22.934,-28.969993 18.036,-71.047993 -10.935,-93.977993 -2.106,-1.669 -4.62,-3.218 -7.226,-4.6119997 z', s.contentGroup.append('path').attr('d', h).attr('stroke', 'white').attr('stroke-width', '4px').attr('class', e.attributes.class.value).attr('transform', function () {
        return 'translate(23,23)rotate(' + s.getBezierAngleInDegrees(u, f) + ' 67 67)'
      }), s.contentGroup.append('circle').attr('fill', 'white').attr('cx', 68).attr('cy', 0).attr('transform', function () {
        return 'translate(23,23)rotate(' + s.getBezierAngleInDegrees(u, f) + ' 67 67)'
      }).attr('r', '3px'), s.setDonutTextContent(!0), i == null && o != null && (r = s.dataset[s.selectedIndex], r && o.tryPublish(alpha.common.services.AppEventsService.DonutProductInfoShowEvent, {
        categoryGroupType: r.CategoryGroupType,
        categoryType: r.CategoryType,
        typeID: r.TypeID,
        typeName: r.TypeName
      })))  : (s.clearDonut(), s.setDonutTextContent(!1))
    };
    this.setDonutGroup = function (n) {
      return n.append('g').attr('transform', 'translate(' + this.width / 2 + ',' + this.height / 2 + ')')
    };
    this.clearDonut = function () {
      this.contentGroup.remove();
      this.selectedIndex = - 1;
      this.contentGroup = this.setDonutContentGroup(this.svg, this.width, this.height)
    };
    this.setDonutTextContent = function (n) {
      if (n) s.scope.clickedObject = s.dataset[s.selectedIndex];
       else {
        var t = {
          Title: f.totalbalancetext,
          Currency: 'EUR',
          AmountInEUR: f.totalBalance
        };
        s.scope.clickedObject = t
      }
      !s.scope.$$phase && s.scope.$apply && s.scope.$apply()
    };
    this.x = function (n) {
      return n.x
    };
    this.y = function (n) {
      return n.y
    };
    this.tweenPie = function (n) {
      var t = d3.interpolate(n.startAngle, n.endAngle);
      return function (i) {
        return n.endAngle = t(i),
        s.mainDonut(n)
      }
    };
    this.createArc = function (n, t, i, r) {
      if (i || r) {
        var u = Number((r - i) / 2 + i);
        return d3.svg.arc().innerRadius(n).outerRadius(t).startAngle(0).endAngle(2 * Math.PI)
      }
      return d3.svg.arc().innerRadius(n).outerRadius(t)
    };
    this.setDonutContentGroup = function (n) {
      return n.append('g').attr('id', 'contentGroup')
    };
    this.getBezierAngleInDegrees = function (n, t) {
      var i = function (n) {
        return n * 180 / Math.PI
      };
      return i(Number((t - n) / 2 + n))
    };
    this.clickHandler = function (n) {
      $.contains(s.container, n.target) || (s.clearDonut(), s.dataset.length == 1 ? s.drawInnerArc({
        startAngle: 0,
        endAngle: 2 * Math.PI
      }, 0, !0)  : s.setDonutTextContent(!1))
    };
    this.doc.bind('click', this.clickHandler);
    this.destroy = function () {
      this.doc.unbind('click', this.clickHandler)
    }
  };
  alpha.app.directive('editField', [
    function () {
      return {
        restrict: 'A',
        link: function (n, t) {
          t.bind('click', function () {
            t.parent().find('input').removeAttr('readonly').focus();
            t.css('background-position', '-136px -376px')
          });
          n.$on('$destroy', function () {
            t.unbind('click')
          })
        }
      }
    }
  ]),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        n.app.directive('failedTrans', [
          '$state',
          'SecurityService',
          '$modal',
          'QueriesService',
          'VersionFilterService',
          'AppEventsService',
          'RoleService',
          function (t, i, r, u, f, e, o) {
            return {
              restrict: 'A',
              link: function () {
                var s,
                h = function () {
                },
                c = e.subscribe(n.common.services.AppEventsService.FailedTransModal_Event, function () {
                  f.IsInVersions(n.constants.versionFilters.CHECK_FOR_FAILED_TRANSACTIONS).then(function (n) {
                    return n
                  }).then(function (n) {
                    return n && (o.IsRetail() || o.IsAdminUser()) ? i.getUserSessionInfo()  : null
                  }).then(function (n) {
                    if (null != n && n.ResultCode == 0 && n.PasswordValidityStatus == 0) {
                      var t = {
                        LastSignOnDateTime: n.LastSignOn,
                        Option: 0
                      };
                      return u.getTransactions(u.getTransactionsRequest(0, null, null, null, null, 0, !1, 0, null, null, undefined, null, t))
                    }
                    return null
                  }).then(function (i) {
                    !n.utils.IsAnyPropertyInGraphNull(i, 'ReplyRecords') && i.ReplyRecords > 0 ? (s = r.open({
                      templateUrl: 'Templates/common/modals/failedTrans',
                      controller: 'BaseModalController as vm',
                      size: 'lg',
                      windowClass: 'custom',
                      backdrop: 'static'
                    }).result, s.then(function () {
                      t.go('root.failedTrans')
                    }).finally (function () {
                      h()
                    }))  : h()
                  });
                  c()
                })
              }
            }
          }
        ])
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  }));
  alpha.app.directive('favorites', [
    'QueriesService',
    'LookupsService',
    'StateHelperService',
    'ProfileProductsService',
    '$state',
    '$document',
    '$modal',
    '$q',
    'STRINGS',
    'AppEventsService',
    'ProductMatchingService',
    'MenuItemsService',
    function (n, t, i, r, u, f, e, o, s, h, c, l) {
      return {
        restrict: 'EA',
        replace: !0,
        templateUrl: 'templates/common/directives/favorites',
        link: function (n) {
          var f = n,
          u = h.subscribe(alpha.common.services.AppEventsService.AllStateGuardsCompleted_Event, function () {
            var a,
            v,
            f;
            u();
            h.subscribe(alpha.common.services.AppEventsService.InvalidatePaymentTemplates_Event, function () {
              y()
            });
            h.subscribe(alpha.common.services.AppEventsService.InvalidateTransferTemplates_Event, function () {
              a()
            });
            h.subscribe(alpha.common.services.AppEventsService.PopupWindowOpened_Event, function (t, i) {
              i != 'Favorites' && n.hideFavoritesMenu()
            });
            a = function () {
              n.Transfers = r.getTransactionTemplates(0).then(function (i) {
                var f = new alpha.common.services.TransferTransactionActionsService(r, s, t, l),
                u;
                return i.ReplyRecords > 0 ? (i.Templates.sort(function (n, t) {
                  return n.Priority < t.Priority ? - 1 : n.Priority > t.Priority ? 1 : 0
                }), u = [
                ], i.Templates.map(function (n) {
                  var t = new alpha.model.MyTransferTemplatesBase(n);
                  f.decorateTransactionTemplateViewModel(t, n);
                  u.push(t)
                }), n.Transfers = u.splice(0, 5), n.Transfers)  : (n.Transfers = [
                ], n.Transfers)
              }, function () {
                return n.Transfers = [
                ],
                n.Transfers
              })
            };
            a();
            var p = r.getCardsByRequestType(alpha.server.ProductRequestType.CardsForPayment),
            w = r.getCardsByRequestType(alpha.server.ProductRequestType.INTERBANK_CARDS),
            b = r.getLoansByRequestType(alpha.server.ProductRequestType.LoansForPayment).then(function (n) {
              return n.filter(function (n) {
                return n.BankProduct.TypeID != alpha.constants.general.consumerLoanProductTypeId && n.BankProduct.RequestTypes.indexOf(alpha.server.ProductRequestType.MortgageEnterpriseLoansForPayment) < 0
              })
            }),
            k = t.getPersonalConsumerLoans(),
            d = r.getLoansByRequestType(alpha.server.ProductRequestType.MortgageEnterpriseLoansForPayment),
            y = function () {
              o.all({
                cards: p,
                interbankCards: w,
                alphaLoans: b,
                consumerLoans: k,
                mortgageEnterpriseLoans: d
              }).then(function (i) {
                n.Payments = t.getPaymentTypes().then(function (t) {
                  var u = new alpha.common.services.PaymentTransactionActionsService(r, s, t, i.cards, i.interbankCards, i.alphaLoans, i.consumerLoans, i.mortgageEnterpriseLoans, c, l);
                  r.getTransactionTemplates(1).then(function (r) {
                    var s,
                    f;
                    if (r.ReplyRecords > 0) {
                      r.Templates.sort(function (n, t) {
                        return n.Priority < t.Priority ? - 1 : n.Priority > t.Priority ? 1 : 0
                      });
                      s = [
                      ];
                      r.Templates.map(function (n) {
                        var r = new alpha.model.MyPaymentsTemplatesBase(n, t, i.cards, i.interbankCards, i.alphaLoans, i.consumerLoans);
                        u.decorateTransactionTemplateViewModel(r);
                        s.push(r)
                      });
                      var o = [
                      ],
                      h = [
                      ],
                      e = s;
                      for (f = 0; f < e.length; f++) {
                        if (o.length == 5) break;
                        h.indexOf(e[f].Template.Transaction.CreditProductType) == - 1 && (h.push(e[f].Template.Transaction.CreditProductType), o.push(e[f]))
                      }
                      return o.map(function (n) {
                        n.CountTemplates = 0;
                        e.map(function (i) {
                          n.Template.Transaction.Title = n.Template.Description;
                          n.Template.Transaction.CreditProductType == i.Template.Transaction.CreditProductType && n.CountTemplates++;
                          var r;
                          r = t.filter(function (t) {
                            if (t.Item.ProductTypeId) return t.Item.ProductTypeId == n.Template.Transaction.CreditProductTypeID
                          });
                          r.length > 0 ? r[0].Item.FixedCodePayment && (n.Template.Transaction.Title = n.Template.Transaction.CreditProductType)  : n.CountTemplates = 0
                        })
                      }),
                      n.Payments = o,
                      n.Payments
                    }
                    return n.Payments = [
                    ],
                    n.Payments
                  })
                })
              })
            };
            y();
            n.OpenPaymentsModal = function () {
              var n = e.open({
                templateUrl: 'Templates/Features/Overview/myPaymentsHelpModal',
                controller: 'OverviewHelpModalController as vm',
                size: 'sm',
                windowClass: 'custom'
              })
            };
            n.OpenTransfersModal = function () {
              var n = e.open({
                templateUrl: 'Templates/Features/Overview/myTransfersHelpModal',
                controller: 'OverviewHelpModalController as vm',
                size: 'sm',
                windowClass: 'custom'
              })
            };
            n.ReExecutePayment = function (n) {
              var t = n.Actions.filter(function (n) {
                return n.titleResourceKey ? n.titleResourceKey == 'burger.ReExecutePayment' : !1
              }) [0],
              r;
              t && (r = angular.copy(t.data), n.CountTemplates > 1 && (r.IsFromOverview = !0), i.go(t.stateName, t.stateParams, r, t.stateOptions))
            };
            n.ReExecuteTransfer = function (n) {
              var t = n.Actions.filter(function (n) {
                return n.titleResourceKey ? n.titleResourceKey == 'burger.ReExecuteTransfer' : !1
              }) [0],
              r;
              t && (r = angular.copy(t.data), i.go(t.stateName, t.stateParams, r, t.stateOptions))
            };
            n.toggleFavoritesMenu = function (n) {
              ($(n.target).attr.id == 'favorites-menu' || $(n.target).is('.icon.pop-this')) && ($('#favorites-div').toggle(), $('#favorites-menu').toggleClass('activeMsgFav'), $('#favorites-menu').hasClass('activeMsgFav') && h.publish(alpha.common.services.AppEventsService.PopupWindowOpened_Event, 'Favorites'))
            };
            v = function (t) {
              $(t.target).attr.id != 'favorites-menu' && $(t.target).parents('#favorites-menu').length == 0 && $('#favorites-menu.activeMsgFav').length > 0 && n.hideFavoritesMenu()
            };
            n.hideFavoritesMenu = function () {
              $('#favorites-div').hide();
              $('#favorites-menu').removeClass('activeMsgFav')
            };
            f = 'click';
            /iPad/.test(navigator.userAgent) && (f += ' touchend');
            $('body').on(f, v);
            n.$on('$destroy', function () {
              $('body').off(f, v)
            })
          })
        }
      }
    }
  ]),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        n.app.directive('fireDonation', [
          '$state',
          'SecurityService',
          'QueriesService',
          '$modal',
          'VersionFilterService',
          'AppEventsService',
          'RoleService',
          'StateHelperService',
          function (t, i, r, u, f, e, o, s) {
            return {
              restrict: 'A',
              link: function () {
                var t = e.subscribe(n.common.services.AppEventsService.FireDonationModal_Event, function () {
                  var t = i.getUserSessionInfo();
                  t.then(function (t) {
                    var r,
                    i,
                    f;
                    t && t.Channel == 3 && o.IsIndividualUser() && (r = document.cookie || '', n.utils.isUndefinedOrNull(t.Profile) || r.indexOf('awbfireDon' + t.Profile.UserID) != - 1 || (i = new Date, i.setDate(i.getDate() + 10000), document.cookie = 'awbfireDon' + t.Profile.UserID + '=1; expires=' + i.toUTCString(), f = u.open({
                      templateUrl: 'Templates/common/modals/fireDonationModal',
                      controller: 'BaseModalController as vm',
                      size: 'lg',
                      windowClass: 'custom',
                      backdrop: 'static'
                    }).result, f.then(function () {
                      var r = this,
                      i = n.constants.constantAccounts.fireDonationAccount,
                      t = {
                      };
                      t.Type = 1;
                      t.CreditProduct = i;
                      s.go('root.transfers.new.intrabank', null, t)
                    })))
                  })
                })
              }
            }
          }
        ])
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  }));
  alpha.app.directive('allowFingerprintAccess', [
    'QueriesService',
    function (n) {
      return {
        restrict: 'A',
        compile: function () {
          var t = !1;
          return {
            pre: function (i, r) {
              n.getDeviceInfo({
              }).then(function (n) {
                (n.FingerprintEnabled || n.PINEnabled) && (t = !0);
                t ? r.removeClass('notVisible')  : (r.children().remove(), r.remove())
              }).catch (function () {
                r.children().remove();
                r.remove()
              })
            }
          }
        }
      }
    }
  ]),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        n.app.directive('formSteps', function () {
          return {
            restrict: 'AC',
            scope: {
              steps: '=formSteps',
              currentStep: '=formStepsCurrent',
              success: '=formSuccess'
            },
            templateUrl: 'Templates/common/directives/form-steps'
          }
        })
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  }));
  alpha.app.directive('editPaste', [
    '$window',
    function (n) {
      return {
        restrict: 'A',
        require: '?ngModel',
        link: function (t, i, r, u) {
          i.on('paste', function (t) {
            t.preventDefault();
            var i;
            i = n.clipboardData && n.clipboardData.getData ? n.clipboardData.getData('Text')  : t.originalEvent.clipboardData.getData('text/plain');
            i = i.replace(/\s/g, '');
            this.value ? u.$setViewValue(this.value + i)  : u.$setViewValue(i);
            u.$render()
          })
        }
      }
    }
  ]);
  alpha.app.directive('hideAmounts', [
    '$rootScope',
    function (n) {
      var t = [
        '$scope',
        '$element',
        '$attrs',
        function (t) {
          t.HideAmounts = n.HideAmounts;
          t.toggleHideAmounts = function () {
            n.HideAmounts = !n.HideAmounts;
            n.$broadcast('hideAmountsChanged');
            $('body').toggleClass('hideAmounts')
          };
          n.$on('hideAmountsChanged', function () {
            t.HideAmounts = n.HideAmounts
          })
        }
      ];
      return {
        restrict: 'A',
        replace: !0,
        scope: {
        },
        templateUrl: 'Templates/common/directives/hideAmounts',
        controller: t
      }
    }
  ]);
  alpha.app.directive('amountsVisibility', [
    '$rootScope',
    function (n) {
      var t = [
        '$scope',
        '$element',
        '$attrs',
        function (t, i) {
          n.HideAmounts ? i.addClass('hidden-amount')  : i.removeClass('hidden-amount');
          n.$on('hideAmountsChanged', function () {
            n.HideAmounts ? i.addClass('hidden-amount')  : i.removeClass('hidden-amount')
          })
        }
      ];
      return {
        restrict: 'A',
        scope: {
        },
        controller: t
      }
    }
  ]);
  alpha.app.directive('iCheck', [
    '$timeout',
    '$parse',
    function () {
      return {
        restrict: 'EA',
        template: '',
        link: function (n, t) {
          t.addClass('iradio_square')
        }
      }
    }
  ]);
  alpha.app.directive('iframeDynamicSource', function () {
    return {
      scope: {
        item: '=',
        source: '@'
      },
      link: function (n, t) {
        n.$watch(function () {
          return n.item[n.source]
        }, function (n) {
          null != n && t[0].contentWindow.document.write(n)
        })
      }
    }
  });
  alpha.app.directive('infiniteScroll', function () {
    return {
      restrict: 'A',
      proriority: 0,
      link: function (n, t, i) {
        (this.onScrolled = function (n) {
          n.stopPropagation()
        }, n.infiniteScroll = i.infiniteScroll, i.infiniteScroll == 'true') && n.$on('scrolled', function (t) {
          t.stopPropagation();
          n.hasMore ? n.customUiSelectCtrl.getNextPage()  : n.$broadcast('scrollEnded')
        })
      }
    }
  });
  alpha.app.directive('isDropdown', [
    '$document',
    function (n) {
      return {
        restrict: 'A',
        priority: 0,
        link: function (t) {
          var i = function () {
            t.customUiSelectCtrl.isPanelOpen && t.customUiSelectCtrl.isDropdown && (t.customUiSelectCtrl.isPanelOpen = !1)
          };
          n.bind('click', i);
          t.$on('$destroy', function () {
            n.unbind('click', i)
          })
        }
      }
    }
  ]);
  alpha.app.directive('jobDetails', [
    'InquiryServiceProxy',
    'JobsServiceProxy',
    '$modal',
    'AppEventsService',
    '$q',
    'ProductMatchingService',
    'ProfileProductsService',
    '$q',
    function (n, t, i, r, u, f, e, o) {
      var s = this;
      return {
        restrict: 'E',
        scope: !1,
        templateUrl: 'templates/Features/jobs/jobDetails',
        link: function (f, s, h) {
          function a(n) {
            f.$emit('updateJobTotalAmount', {
              jobId: h.jobid,
              amount: n
            })
          }
          var l = {
            JobID: h.jobid,
            JobName: h.jobname,
            MaxRecords: 1000
          },
          c;
          f.getJob = function () {
            return f.job || f.approvalViewModel.Job
          };
          f.getJobDetails = function () {
            f.job ? f.job.isLoading = !0 : angular.noop;
            f.approvalViewModel ? f.approvalViewModel.Job.isLoading = !0 : angular.noop;
            var t = f.job || f.approvalViewModel.Job,
            i = t.Transactions ? u.when({
              Jobs: t,
              ResultCode: 0
            })  : n.getJobDetails(l);
            i.then(function (n) {
              f.job ? f.job.isLoading = !1 : angular.noop;
              f.approvalViewModel ? f.approvalViewModel.Job.isLoading = !1 : angular.noop;
              f.jobStatus = f.approvalViewModel && f.approvalViewModel.Job ? f.approvalViewModel.Job.Status : 0;
              f.isEditable = f.approvalViewModel && f.approvalViewModel.Job.IsEditable ? f.approvalViewModel.Job.Status : !1;
              f.jobStatus == 0 && f.job.Status && (f.jobStatus = f.job.Status);
              !f.isEditable && f.job && (f.isEditable = f.job.IsEditable);
              c(f.job || f.approvalViewModel.Job, n, o).then(function () {
                n.Jobs.Transactions && n.Jobs.Transactions.length > 0 && r.publish(alpha.common.services.AppEventsService.JobViewDetails_Event, {
                  JobName: h.jobname,
                  DebitAccount: n.Jobs.Transactions[0].DebitProduct,
                  DebitAccountTitle: n.Jobs.Transactions[0].DebitProductTitle
                })
              }).then(function () {
                f.jobDetails = n.Jobs
              })
            })
          };
          f.global = {
          };
          c = function (n, t, i) {
            var r,
            u;
            return n.HeaderNameValues = t.Jobs.HeaderNameValues,
            t.Jobs.HeaderNameValues.some(function (n) {
              return n.Variable == 'toAccountLiteral' ? (f.paymentType = n.Name, !0)  : !1
            }),
            n.Transactions = t.Jobs.Transactions,
            alpha.utils.isUndefinedOrNull(n.Transactions) ? (u = i.defer(), u.resolve(), u.promise)  : (r = [
            ], n.Transactions.forEach(function (n) {
              r.push(n.CreditProductID)
            }), r.push(n.Transactions[0].DebitProductID), e.getAccountsByIDs(r).then(function (t) {
              n.Transactions.map(function (n) {
                t.forEach(function (t) {
                  t.Code == n.CreditProduct ? n.CreditProductTitle = t.Title : t.Code == n.DebitProduct && (n.DebitProductTitle = t.Title)
                })
              });
              n.Transactions.some(function (n) {
                return n.IsSubmitedTransaction
              }) && (f.hasSubmitTransfer = !0);
              return
            }))
          };
          f.getJobDetails();
          f.getValueFromDetails = function (n, t) {
            for (var i = 0; i < n.Details.length; ++i) if (n.Details[i].Name === t) return n.Details[i];
            return undefined
          };
          f.delTransferFromJob = function (n, u) {
            var e = i.open({
              templateUrl: 'Templates/Features/Jobs/cancelModal',
              controller: [
                '$scope',
                function (i) {
                  i.transactionUN = n;
                  i.transactionCode = f.jobDetails.Transactions[u].CreditProduct;
                  i.showValue = !0;
                  i.transactionValue = f.jobDetails.Transactions[u].Amount.toFixed(2);
                  i.transactionValueCurrency = f.jobDetails.Transactions[u].AmountCurrency;
                  i.isTransfer = f.jobDetails.Transactions[u].IsTransfer;
                  i.isJobTransaction = !0;
                  i.closeModal = function () {
                    e.dismiss();
                    e = null
                  };
                  i.sentDeleteRequest = function (n) {
                    var o = this,
                    e;
                    return a(f.jobDetails.Transactions[u].Amount),
                    e = {
                      AUNsToDelete: [
                        n
                      ],
                      JobName: h.jobname
                    },
                    t.editJobTransfers(e).then(function (t) {
                      return t.ResultCode == 0 ? (i.showResults = !0, i.success = !0, alpha.utils.isUndefinedOrNull(f.job) || (f.job.TotalAmount.Value -= f.jobDetails.Transactions[u].Amount), r.publish(alpha.common.services.AppEventsService.MultiJobEdit_Event, {
                        JobName: h.jobname,
                        AUN: n,
                        Amount: f.jobDetails.Transactions[u].Amount
                      }), f.jobDetails.Transactions.splice(u, 1), !0)  : (i.showResults = !0, i.success = !1, !1)
                    }, function (n) {
                      return i.showResults = !0,
                      i.success = !1,
                      i.errorMessage = n.Error.Message,
                      !1
                    }).finally (function () {
                      o.scope.vm.applyFilters()
                    })
                  }
                }
              ],
              size: 'sm',
              windowClass: 'custom'
            })
          };
          f.job && (f.displayTransactionColumn = function () {
            return f.job.Status == 6 || f.job.Status == 8
          })
        }
      }
    }
  ]);
  alpha.app.directive('jobsFilters', [
    'SecurityServiceProxy',
    'RoleService',
    'STRINGS',
    'SecurityService',
    function (n, t, i, r) {
      return {
        restrict: 'E',
        templateUrl: 'templates/Features/jobs/jobsFilter',
        controller: [
          '$scope',
          '$element',
          '$attrs',
          function (u) {
            u.dateOptions = {
              formatYear: 'yyyy',
              startingDay: 1,
              showWeeks: 'false',
              maxMode: 'day'
            };
            u.TransferPaymentTypeEnum = [
              {
                number: 2,
                name: 'ALL'
              },
              {
                number: 7,
                name: 'TRANSFER_ALPHA'
              },
              {
                number: 8,
                name: 'TRANSFER_INTERBANK'
              },
              {
                number: 9,
                name: 'TRANSFER_INTERBANK_FTS'
              },
              {
                number: 1,
                name: 'PAYMENT'
              },
              {
                number: 10,
                name: 'SIMPLE_IMPORTS'
              }
            ];
            u.setDefaultSettings = function () {
              u.vm.fromSubscribeDate = null;
              u.vm.toSubscribeDate = new Date;
              u.vm.fromCommandDate = u.vm.minTransferDate;
              u.vm.toCommandDate = null;
              u.vm.TransferPaymentType = u.TransferPaymentTypeEnum[0] || null;
              u.vm.selectUser = u.viewUsers[0] || null
            };
            u.viewUsers = [
            ];
            n.getSubscriptionInfo({
              LanguageSpecified: !0,
              GetUsersSpecified: !0,
              GetUsers: !0
            }).then(function (n) {
              t.isEndUser() ? r.getUserSessionInfo().then(function (t) {
                u.viewUsers = n.Users.filter(function (n) {
                  return n.Id === t.Profile.UserID
                })
              })  : (u.viewUsers = n.Users, u.viewUsers = u.viewUsers.filter(function (n) {
                return n.Services.Service.indexOf('CompanyApproverUser') < 0
              }), u.viewUsers.unshift({
                Name: i.Oloi,
                Id: - 1
              }));
              u.setDefaultSettings()
            })
          }
        ]
      }
    }
  ]);
  alpha.app.directive('jobSubmissionMessage', [
    'SecurityService',
    '$state',
    function (n) {
      var t;
      return function (n) {
        n[n.None = 0] = 'None';
        n[n.PromptForMultiplePaymentApproval = 1] = 'PromptForMultiplePaymentApproval';
        n[n.PromptForMultipleTransferApproval = 2] = 'PromptForMultipleTransferApproval';
        n[n.PromptForPaymentApproval = 3] = 'PromptForPaymentApproval';
        n[n.MessageForPaymentApproval = 4] = 'MessageForPaymentApproval';
        n[n.PromptForTransferApproval = 5] = 'PromptForTransferApproval';
        n[n.MessageForTransferApproval = 6] = 'MessageForTransferApproval';
        n[n.MessageForMultiplePaymentApproval = 7] = 'MessageForMultiplePaymentApproval';
        n[n.MessageForMultipleTransferApproval = 8] = 'MessageForMultipleTransferApproval'
      }(t || (t = {
      })),
      {
        restrict: 'A',
        replace: !0,
        templateUrl: 'templates/common/directives/r_Corporate/jobSubmissionMessage',
        link: function (i, r, u) {
          n.getUserSessionInfo().then(function (n) {
            var r;
            if (i.modelPropertyName = u.jobSubmissionModelName || 'Model', r = i.vm[i.modelPropertyName], i.isJobSubmission = r.IsJobSubmission, r && r.JobSubmissionResponse && (i.canBeApprove = r.JobSubmissionResponse.CanBeApprove), i.isJobSubmission) {
              var f = u.isPayment === 'true',
              e = n.UserInfo.Role === 5,
              o = n.OTPStatus === 1,
              h = [
                function () {
                  return f && e && o && r.JobSubmissionResponse.ApprovalLevel === 2 ? t.PromptForMultiplePaymentApproval : t.None
                },
                function () {
                  return !f && e && o && r.JobSubmissionResponse.ApprovalLevel === 2 ? t.PromptForMultipleTransferApproval : t.None
                },
                function () {
                  return f && e && r.JobSubmissionResponse.ApprovalLevel === 2 ? t.MessageForMultiplePaymentApproval : t.None
                },
                function () {
                  return !f && e && r.JobSubmissionResponse.ApprovalLevel === 2 ? t.MessageForMultipleTransferApproval : t.None
                },
                function () {
                  return f && e && o ? t.PromptForPaymentApproval : t.None
                },
                function () {
                  return !f && e && o ? t.PromptForTransferApproval : t.None
                },
                function () {
                  return f && !(e && o) ? t.MessageForPaymentApproval : t.None
                },
                function () {
                  return !f && !(e && o) ? t.MessageForTransferApproval : t.None
                }
              ],
              s = t.None,
              c = 0;
              do s = h[c++]();
              while (s === t.None && c < h.length);
              i.jobSubmissionMessageType = s
            }
          })
        }
      }
    }
  ]);
  alpha.app.directive('menuBadge', [
    'AppEventsService',
    'SharedDataService',
    function (n, t) {
      var i = this;
      return {
        restrict: 'A',
        transclude: !0,
        proriority: 10000,
        template: '<span><span ng-show="showBadge && numberToShow > 0" class="badge menuBadge backcolorRed fontsize10">{{numberToShow}}</span><span ng-transclude></span></span>',
        controller: [
          '$scope',
          '$attrs',
          function (i, r) {
            i.showBadge = !0;
            i.numberToShow = t.GetControllerData(alpha.server.Controllers.Badge, r.menuBadge);
            n.subscribe(alpha.common.services.AppEventsService[r.menuBadge], function () {
              i.numberToShow = t.GetControllerData(alpha.server.Controllers.Badge, r.menuBadge)
            })
          }
        ]
      }
    }
  ]);
  alpha.app.directive('secondLevelMenuContent', [
    '$state',
    'SecurityService',
    '$rootScope',
    function (n, t, i) {
      var r = [
        '$scope',
        '$element',
        '$attrs',
        function (t) {
          t.showMenu = n.current.name != alpha.constants.stateNames.rootState;
          var r = i.$on('$stateChangeSuccess', function (n, i) {
            t.showMenu = i.name != alpha.constants.stateNames.rootState && i.name != alpha.constants.stateNames.messagesState && i.name != alpha.constants.stateNames.messageDetailsState
          });
          t.$on('$destroy', r);
          t.print = function () {
            window.print()
          }
        }
      ];
      return {
        restrict: 'AC',
        replace: !0,
        scope: {
        },
        templateUrl: 'Templates/common/directives/secondLevelMenuContent',
        controller: r
      }
    }
  ]);
  alpha.app.directive('personalInformation', [
    'SecurityService',
    '$rootScope',
    '$timeout',
    function (n, t, i) {
      var r = [
        '$scope',
        '$element',
        '$attrs',
        function (t) {
          var u = this,
          r;
          t.companyRepDate = 'loading...';
          t.companyLegalDate = 'loading...';
          t.companyTaxDate = 'loading...';
          t.companySecDate = 'loading...';
          t.tickInterval = 1000;
          r = function () {
            t.printDate = Date.now();
            i(r, t.tickInterval)
          };
          i(r, t.tickInterval);
          n.getUserSessionInfo().then(function (n) {
            t.model = n;
            n.UserInfo && n.UserInfo.CompanyInfo && (t.companyRepDate = n.UserInfo.CompanyInfo.LegalEntityExpiryDate, t.companyLegalDate = n.UserInfo.CompanyInfo.CorpExpirationDate, t.companyTaxDate = n.UserInfo.CompanyInfo.TaxClearanceExpiryDate, t.companySecDate = n.UserInfo.CompanyInfo.InsuranceClearanceExpiryDate)
          });
          this.dateDiff = function (n, t) {
            return Math.round((t - n) / 86400000)
          };
          t.IsRed = function (n) {
            var i;
            try {
              if (isNaN(parseInt(n))) return !1;
              var r = parseInt(n.slice(0, 4)),
              f = parseInt(n.slice(4, 6)),
              e = parseInt(n.slice(6, 8)),
              t = new Date(r, f, e);
              return t ? (i = u.dateDiff(Date.now(), t.getTime()), i <= 90 ? !0 : !1)  : !0
            } catch (o) {
              return !0
            }
          };
          t.IsOrange = function (n) {
            var t;
            try {
              if (isNaN(parseInt(n))) return !1;
              var r = parseInt(n.slice(0, 4)),
              f = parseInt(n.slice(4, 6)),
              e = parseInt(n.slice(6, 8)),
              i = new Date(r, f, e);
              return i ? (t = u.dateDiff(Date.now(), i.getTime()), t > 90 && t <= 180 ? !0 : !1)  : !1
            } catch (o) {
              return !1
            }
          }
        }
      ];
      return {
        restrict: 'AC',
        scope: {
        },
        templateUrl: 'Templates/common/directives/personalInformation',
        controller: r
      }
    }
  ]);
  alpha.app.directive('loading', [
    '$rootScope',
    function (n) {
      var t = [
        '$scope',
        '$element',
        '$attrs',
        function (t) {
          t.show = !0;
          var i = this;
          this.listener = {
          };
          this.listener = n.$on('$stateChangeSuccess', function () {
            t.show = !1;
            i.listener()
          })
        }
      ];
      return {
        restrict: 'AC',
        scope: {
        },
        templateUrl: 'Templates/common/directives/loading',
        controller: t
      }
    }
  ]);
  alpha.app.directive('messages', [
    'MessagesService',
    'AppEventsService',
    '$state',
    '$document',
    function (n, t) {
      return {
        restrict: 'EA',
        replace: !0,
        templateUrl: 'templates/common/directives/messages',
        link: function (i) {
          var u = i,
          r = t.subscribe(alpha.common.services.AppEventsService.AllStateGuardsCompleted_Event, function () {
            var e = n.getMessages().then(function (n) {
              var t = n.Items,
              r = n.UnreadRows;
              i.Messages = t;
              i.numberOfMessages = r
            }),
            f,
            u;
            t.subscribe(alpha.common.services.AppEventsService.MessageDeleted_Event, function (n, t) {
              i.Messages && (i.Messages = i.Messages.filter(function (n) {
                return n.ID == t ? (n.Status == 0 && i.numberOfMessages--, !1)  : !0
              }))
            });
            t.subscribe(alpha.common.services.AppEventsService.MessageRead_Event, function (n, t) {
              if (i.numberOfMessages--, i.Messages) for (var r = 0; r < i.Messages.length; r++) if (i.Messages[r].ID == t) {
                i.Messages[r].Status = 1;
                break
              }
            });
            t.subscribe('$stateChangeSuccess', function (n, t) {
              i.stateActive = t.name == 'root.messages' || t.name == 'root.messages.detail' ? !0 : !1
            });
            t.subscribe(alpha.common.services.AppEventsService.PopupWindowOpened_Event, function (n, t) {
              t != 'Messages' && i.hideMessagesMenu()
            });
            i.toggleMessagesMenu = function (n) {
              ($(n.target).attr.id == 'messages-menu' || $(n.target).is('.icon.pop-this') || $(n.target).is('.counter')) && ($('#messages-div').toggle(), $('#messages-menu').toggleClass('activeMsgFav'), $('#messages-menu').hasClass('activeMsgFav') && t.publish(alpha.common.services.AppEventsService.PopupWindowOpened_Event, 'Messages'))
            };
            i.hideMessagesMenu = function () {
              $('#messages-div').hide();
              $('#messages-menu').removeClass('activeMsgFav')
            };
            i.deleteClicked = function (r, u) {
              var e = i.Messages[u],
              f = {
              };
              f.Channel = 3;
              f.MessageID = e.ID;
              f.NewStatus = - 1;
              n.updateMessages(f).then(function () {
                t.publish(alpha.common.services.AppEventsService.MessageDeleted_Event, e.ID)
              })
            };
            f = function (n) {
              $(n.target).attr.id != 'messages-menu' && $(n.target).parents('#messages-menu').length == 0 && $('#messages-menu.activeMsgFav').length > 0 && ($('#messages-div').hide(), $('#messages-menu').removeClass('activeMsgFav'))
            };
            u = 'click';
            /iPad/.test(navigator.userAgent) && (u += ' touchend');
            $('body').on(u, f);
            i.$on('$destroy', function () {
              $('body').off(u, f)
            });
            r()
          })
        }
      }
    }
  ]);
  alpha.app.directive('validateMobilePhone', [
    'DialCodeService',
    function (n) {
      return {
        scope: {
          mobilePhone: '<',
          countryCode: '<'
        },
        require: {
          ngModelCtrl: 'ngModel'
        },
        link: function (t, i, r, u) {
          function e() {
            var e,
            o;
            if (t.mobilePhone && t.countryCode) {
              var i = n.normalizePhone(t.countryCode),
              r = t.mobilePhone,
              u = [
                '+' + i,
                '00' + i,
                '0' + i
              ];
              i !== '47' && u.push(i);
              e = !u.some(function (n) {
                return r.indexOf(n) === 0
              });
              f.$setValidity('wrongPhoneFormat', e);
              o = i !== '30' || r.indexOf('69') === 0;
              f.$setValidity('greekPhoneWrongFormat', o)
            }
          }
          var f = u.ngModelCtrl;
          t.$watch('mobilePhone', e);
          t.$watch('countryCode', e)
        }
      }
    }
  ]);
  alpha.app.constant('clickDelay', 300);
  alpha.app.directive('noMultiClicks', [
    'clickDelay',
    function (n) {
      return {
        restrict: 'A',
        controller: [
          '$scope',
          '$element',
          '$attrs',
          function (t, i, r) {
            n = + r.noMultiClicks || n;
            i.on('click', function (i) {
              var r = (new Date).getTime() - t.lastClick;
              if (t.lastClick && r < n) {
                i.preventDefault();
                i.stopImmediatePropagation();
                return
              }
              t.lastClick = (new Date).getTime()
            })
          }
        ]
      }
    }
  ]);
  __extends = this && this.__extends || function () {
    var n = Object.setPrototypeOf || {
      __proto__: [
      ]
    }
    instanceof Array && function (n, t) {
      n.__proto__ = t
    }
    || function (n, t) {
      for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
    };
    return function (t, i) {
      function r() {
        this.constructor = t
      }
      n(t, i);
      t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
    }
  }(),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var u,
        f,
        e,
        o,
        s,
        i,
        h;
        n.app.value('optRedirect', !1);
        u = {
          templateUrl: 'Templates/common/directives/opt-alpha-phone-modal',
          controller: 'OptAlphaPhoneModalController as vm',
          windowClass: 'custom',
          size: 'sm',
          backdrop: 'static'
        };
        n.app.directive('otpOnceOff', [
          '$parse',
          '$modal',
          function (n, t) {
            return {
              scope: {
                displayOtp: '@'
              },
              link: function (n) {
                n.displayOtp === 'true' && t.open(u)
              }
            }
          }
        ]);
        n.app.directive('otpOnClick', [
          'SecurityService',
          '$modal',
          '$parse',
          'AppEventsService',
          'RoleService',
          'VersionFilterService',
          function (t, i, r, f, e) {
            return {
              restrict: 'A',
              link: function (o, s, h) {
                function y(n) {
                  var r = !1,
                  i,
                  t;
                  if (!n) return !1;
                  for (i = n.split(','), t = 0; t < i.length; t++) if (e.isCurrentRole(i[t])) {
                    r = !0;
                    break
                  }
                  return r
                }
                function p(n) {
                  if (!n || n.length == 0) return undefined;
                  var t = {
                  },
                  i = n.split(',');
                  return i.forEach(function (n) {
                    t[n] = o.$eval(n)
                  }),
                  t
                }
                var c = 'click',
                d = h.otpEnabledOnly,
                a = h.otpExecuteOnSuccess,
                w = h.otpOnSuccessArgs,
                v = h.otpExecuteOnCancel,
                b = h.otpOnCancelArgs,
                k = h.otpTriggerEventOnSuccess === 'true',
                l = !1;
                h.otpDisableForRoles ? l = y(h.otpDisableForRoles)  : h.otpEnableForRoles && (l = !y(h.otpEnableForRoles));
                l || t.getUserSessionInfo().then(function (t) {
                  function h(s) {
                    if ((s.target.outerHTML.indexOf('data-prevent-click-event') == - 1 || s.target.childElementCount != 0) && (!e.IsIndividualUser() || t.OTPStatus != 1 && t.OTPStatus != 0)) {
                      s.preventDefault();
                      s.stopPropagation();
                      var y = i.open(u).result;
                      y.then(function () {
                        var t,
                        i;
                        l.removeEventListener(c, h, !0);
                        f.publish(n.common.services.AppEventsService.OtpSubmitted_Event);
                        a && (t = r(a), t(o.vm, p(w)));
                        k && (i = s.target || s.srcElement, i.click())
                      }, function () {
                        if (v) {
                          var n = r(v);
                          n(o.vm, p(b))
                        }
                      })
                    }
                  }
                  if (!n.utils.isUndefinedOrNull(t)) {
                    if (e.IsIndividualUser() && t.OTPStatus === 0 && t.SmsOTPEnabled === !0) return;
                    var l = s[0];
                    l.addEventListener(c, h, !0)
                  }
                });
                o.$on('$destroy', function () {
                  s.off(c)
                })
              }
            }
          }
        ]);
        n.app.value('optSmsInProgress', {
          value: !1
        });
        n.app.directive('otpInput', function () {
          return {
            restrict: 'A',
            scope: {
            },
            bindToController: {
              otpHandlerInstance: '<',
              showValidationErrors: '<',
              additionalSecurityCodeMode: '<?'
            },
            controller: f,
            controllerAs: 'vm',
            link: function (n, t, i, r) {
              r.init()
            },
            template: '<div data-ng-include="vm.getTemplate()"></div>'
          }
        });
        f = function () {
          function t(n, t, i, r, u, f, e, o, s, h) {
            this.$element = n;
            this.$scope = t;
            this.$attrs = i;
            this.securityService = r;
            this.versionService = u;
            this.intervalService = f;
            this.optSmsInProgress = e;
            this.rootScopeService = o;
            this.$timeout = s;
            this.$qService = h;
            this.btnInterval = 30000;
            this.tokenErrorMsg = null;
            this.tokenHasError = !1;
            this._maxLength = 6;
            this._isAsa = !1;
            this._isDevice = !1;
            this._smsStatusEnabled = !1;
            this._smsOtpEnabled = !1;
            this._smsCodeSendReset = !1;
            this._smsStatusPhone = '';
            this._btnDisabled = !1
          }
          return Object.defineProperty(t.prototype, 'maxLength', {
            get: function () {
              return this._maxLength
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(t.prototype, 'isAsa', {
            get: function () {
              return this._isAsa
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(t.prototype, 'isDevice', {
            get: function () {
              return this._isDevice
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(t.prototype, 'smsStatusEnabled', {
            get: function () {
              return this._smsStatusEnabled
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(t.prototype, 'smsOtpEnabled', {
            get: function () {
              return this._smsOtpEnabled
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(t.prototype, 'smsCodeSendReset', {
            get: function () {
              return this._smsCodeSendReset
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(t.prototype, 'smsStatusPhone', {
            get: function () {
              return this._smsStatusPhone
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(t.prototype, 'btnDisabled', {
            get: function () {
              return this._btnDisabled
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(t.prototype, 'isMinimalInlineView', {
            get: function () {
              return Boolean(this.$attrs.isMinimalInlineView)
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(t.prototype, 'otpModel', {
            get: function () {
              return this.otpHandlerInstance.model
            },
            enumerable: !0,
            configurable: !0
          }),
          t.prototype.getTemplate = function () {
            return this.$attrs.buttonOnly ? 'Templates/common/directives/sms-otp-button' : 'Templates/common/directives/otp'
          },
          t.prototype.init = function () {
            var n = this;
            this.optSmsInProgress.value = !1;
            this.focusOnOTPInput();
            this.securityService.getUserSessionInfo().then(function (t) {
              return n.userSessionInfoResponseProcess(t)
            });
            this.bindEvents()
          },
          t.prototype.bindEvents = function () {
            var i = this,
            n = null,
            r = this.$attrs.focusOnParentClick && this.$attrs.focusOnParentClick === 'false' ? !1 : !0,
            t = function (n) {
              n.stopPropagation();
              event && !$(event.target).hasClass('cancel') && i.focusOnOTPInput()
            };
            if (r) {
              n = $(this.$element).closest('.modal.fade');
              n.on('click', t)
            }
            this.$scope.$on('$destroy', function () {
              n && n.unbind('click', t)
            })
          },
          t.prototype.focusOnOTPInput = function () {
            $('input[name=\'otp\']', this.$element).focus()
          },
          t.prototype.userSessionInfoResponseProcess = function (t) {
            var i = this;
            this.channel = this.rootScopeService.OTPChannel ? this.rootScopeService.OTPChannel : t.OTPChannel;
            this._smsOtpEnabled = t.SmsOTPEnabled;
            t.OriginType == 2 && (this._maxLength = 11);
            this.versionService.IsInVersions(n.constants.versionFilters.CITI_ONLINE).then(function (n) {
              return i.versionProcessing(n, t)
            })
          },
          t.prototype.versionProcessing = function (n, t) {
            var i = this;
            this._smsStatusEnabled = n && t.SmsOTPEnabled;
            this._smsStatusPhone = t.MobilePhone;
            this.smsStatusEnabled || this.securityService.tokenInfo().then(function (n) {
              i._isAsa = n.AuthenticationType == 3;
              i._isDevice = !i.isAsa
            })
          },
          t.prototype.getSmsToken = function () {
            var t = this;
            this._btnDisabled = !0;
            this._smsCodeSendReset = !1;
            this.otpHandlerInstance.enquire().then(function (n) {
              return {
                OtpChannel: t.channel,
                DynamicLinkCode: n.dynamicLinkCode
              }
            }).then(function (n) {
              return t.securityService.getSmsToken(n)
            }).then(function (n) {
              return t.checkSmsTokenResponse(n)
            }).then(function () {
              return t.processSmsTokenResponse()
            }).catch (function (i) {
              t.processSmsTokenResponseWithError();
              t.tokenErrorMsg = n.utils.getErrorMsg(i);
              t.tokenHasError = !0
            })
          },
          t.prototype.checkSmsTokenResponse = function (t) {
            if (n.utils.isUndefinedOrNull(t) || t.ResultCode != 0) return this.$qService.reject(t)
          },
          t.prototype.processSmsTokenResponseWithError = function () {
            var n = this;
            this.optSmsInProgress.value = !1;
            this.intervalService(function () {
              n._btnDisabled = !1;
              n._smsCodeSendReset = !1
            }, this.btnInterval, 1, !0)
          },
          t.prototype.processSmsTokenResponse = function (n) {
            var t = this;
            n === void 0 && (n = !1);
            this.optSmsInProgress.value = !0;
            this.intervalService(function () {
              t._btnDisabled = !1;
              t._smsCodeSendReset = !0
            }, this.btnInterval, 1, !0)
          },
          t.$inject = [
            '$element',
            '$scope',
            '$attrs',
            'SecurityService',
            'VersionFilterService',
            '$interval',
            'optSmsInProgress',
            '$rootScope',
            '$timeout',
            '$q'
          ],
          t
        }();
        n.app.directive('optInnerMessage', [
          'SecurityService',
          'VersionFilterService',
          '$interval',
          'optSmsInProgress',
          'RoleService',
          function () {
            return {
              restrict: 'A',
              template: '<div ng-if="!hideOPT" data-ng-include="\'Templates/features/AlphaPhone/opt-inner-warning\'"></div>',
              link: function (n) {
                n.proceed = function () {
                  n.hideOPT = !0
                }
              }
            }
          }
        ]);
        n.app.directive('otpModal', function () {
          return {
            restrict: 'E',
            scope: {
            },
            bindToController: {
              otpHandlerInstance: '<'
            },
            controller: e,
            controllerAs: 'vm',
            link: function (n, t, i, r) {
              r.init()
            }
          }
        });
        e = function () {
          function n(n, t) {
            this.$modal = n;
            this.appEventsService = t
          }
          return n.prototype.init = function () {
            var n = this;
            this.modalInstance = this.$modal.open({
              templateUrl: 'Templates/common/directives/otp-modal-new',
              controller: 'OtpModalCtrl as vm',
              size: 'lg',
              windowClass: 'custom',
              backdrop: 'static',
              resolve: {
                otpHandler: function () {
                  return n.otpHandlerInstance
                }
              }
            });
            this.modalInstance.result.then(function () {
              n.otpHandlerInstance.markComplete()
            }, function () {
              n.otpHandlerInstance.cancelResult()
            })
          },
          Object.defineProperty(n.prototype, 'isCardBasedOtp', {
            get: function () {
              return this.otpHandlerInstance.isCardBasedOtp
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(n.prototype, 'isUserBasedOtp', {
            get: function () {
              return this.otpHandlerInstance.isUserBasedOtp
            },
            enumerable: !0,
            configurable: !0
          }),
          n.$inject = [
            '$modal',
            'AppEventsService'
          ],
          n
        }();
        n.app.directive('otpInline', function () {
          return {
            restrict: 'E',
            scope: {
            },
            bindToController: {
              otpHandlerInstance: '<',
              showValidationErrors: '<',
              embeddedInModal: '<'
            },
            controller: o,
            controllerAs: 'vm',
            link: function (n, t, i, r) {
              r.init()
            },
            templateUrl: 'Templates/common/directives/otp-inline'
          }
        });
        o = function () {
          function n(n, t) {
            this.SecurityService = n;
            this.rootScopeService = t;
            this.isClicked = !1;
            this.smsInProgress = !1
          }
          return Object.defineProperty(n.prototype, 'otpModel', {
            get: function () {
              return this.otpHandlerInstance.model
            },
            enumerable: !0,
            configurable: !0
          }),
          n.prototype.init = function () {
            var n = this;
            this.SecurityService.getUserSessionInfo().then(function (t) {
              n.channel = n.rootScopeService.OTPChannel ? n.rootScopeService.OTPChannel : t.OTPChannel;
              n.smsOtpEnabled = t.SmsOTPEnabled
            })
          },
          Object.defineProperty(n.prototype, 'isCardBasedOtp', {
            get: function () {
              return this.otpHandlerInstance.isCardBasedOtp
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(n.prototype, 'isUserBasedOtp', {
            get: function () {
              return this.otpHandlerInstance.isUserBasedOtp
            },
            enumerable: !0,
            configurable: !0
          }),
          n.prototype.viberOnClick = function () {
            var i = angular.element('#viberotp'),
            n,
            t;
            i.addClass('viberotpbtn');
            n = angular.element('#viberotplabel');
            n.addClass('viberotplabel');
            t = angular.element('#smsotp');
            t.removeClass('smsotpbtn')
          },
          n.prototype.smsOnClick = function () {
            var t = angular.element('#smsotp'),
            n;
            t.addClass('smsotpbtn');
            n = angular.element('#viberotp');
            n.removeClass('viberotpbtn')
          },
          n.$inject = [
            'SecurityService',
            '$rootScope'
          ],
          n
        }();
        n.app.directive('otpInlineMinimal', function () {
          return {
            restrict: 'E',
            scope: {
            },
            bindToController: {
              otpHandlerInstance: '<',
              showValidationErrors: '<',
              additionalSecurityCodeMode: '<?'
            },
            controller: s,
            controllerAs: 'vm',
            link: function (n, t, i, r) {
              r.init()
            },
            templateUrl: 'Templates/common/directives/otp-inline-minimal'
          }
        });
        s = function () {
          function n() {
          }
          return n.prototype.init = function () {
          },
          n
        }(),
        function (n) {
          n[n.Inline = 0] = 'Inline';
          n[n.Modal = 1] = 'Modal';
          n[n.InlineMinimal = 2] = 'InlineMinimal'
        }(i = t.OtpViewMode || (t.OtpViewMode = {
        }));
        n.app.directive('otpHandler', [
          function () {
            return {
              restrict: 'AE',
              scope: {
              },
              bindToController: {
                otpKey: '@',
                otpViewMode: '<',
                showValidationErrors: '<',
                showNoCardsWarning: '=?',
                keepHandlerAlive: '<?',
                additionalSecurityCodeMode: '<?'
              },
              templateUrl: 'Templates/common/directives/otp-handler',
              controller: h,
              controllerAs: 'vm',
              link: function (n, t, i, r) {
                r.init()
              }
            }
          }
        ]);
        h = function () {
          function n(n, t, i, r, u, f) {
            this.$element = n;
            this.$scope = t;
            this.$attrs = i;
            this.otpHandlerService = r;
            this.appEventsService = u;
            this.throttleService = f
          }
          return Object.defineProperty(n.prototype, 'otpHandler', {
            get: function () {
              return this._otpHandler
            },
            enumerable: !0,
            configurable: !0
          }),
          n.prototype.init = function () {
            var n = this,
            t,
            r;
            this._otpHandler = this.otpHandlerService.retrieveHandler(this.otpKey);
            t = this.$scope.$watch(function () {
              return n.otpHandler.showNoCardsWarning
            }, function (t) {
              n.showNoCardsWarning = t
            });
            r = this.otpViewMode === i.Inline || this.otpViewMode === i.InlineMinimal;
            this.otpHandler.setAutoComplete(r);
            this.$scope.$on('$destroy', function () {
              t();
              n.keepHandlerAlive || n.otpHandler.unregister()
            });
            this.otpKeyInputInitialize()
          },
          n.prototype.otpKeyInputInitialize = function () {
            var n = this,
            t;
            if (this.$attrs.inputKeyUp === 'true') {
              t = this.throttleService(2000, function (t) {
                t.stopPropagation();
                n.otpHandler.reset().enquire().then(function () {
                })
              });
              this.$element.on('input', t);
              this.$scope.$on('$destroy', function () {
                n.$element && n.$element.off('input', t)
              })
            }
          },
          Object.defineProperty(n.prototype, 'isEnabled', {
            get: function () {
              return this.otpHandler.isEnabled && (this.isInline || this.isInlineMinimal || this.otpHandler.hasPendingResults)
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(n.prototype, 'isInline', {
            get: function () {
              return this.otpViewMode == i.Inline
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(n.prototype, 'isInlineMinimal', {
            get: function () {
              return this.otpViewMode == i.InlineMinimal
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(n.prototype, 'isModal', {
            get: function () {
              return this.otpViewMode == i.Modal
            },
            enumerable: !0,
            configurable: !0
          }),
          n.$inject = [
            '$element',
            '$scope',
            '$attrs',
            'OtpHandlerService',
            'AppEventsService',
            'ThrottleService'
          ],
          n
        }();
        n.app.directive('otpCardPin', function () {
          return {
            scope: {
            },
            controller: c,
            controllerAs: 'vm',
            bindToController: {
              otpHandlerInstance: '<',
              showValidationErrors: '=',
              embeddedInModal: '<'
            },
            require: [
              'otpCardPin',
              '^form'
            ],
            link: function (n, t, i, r) {
              var u = r[0],
              f = r[1];
              u.init(f)
            },
            templateUrl: 'Templates/common/directives/otp-card-pin'
          }
        });
        var c = function () {
          function n(n, t) {
            this.$scope = n;
            this.batchPinDigitsUpdate = !1;
            this._selectedCard = null;
            this.filterFilter = t('filter')
          }
          return Object.defineProperty(n.prototype, 'otpModel', {
            get: function () {
              return this.otpHandlerInstance.model
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(n.prototype, 'otpCards', {
            get: function () {
              return this.otpHandlerInstance.cards
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(n.prototype, 'otpModelPin', {
            get: function () {
              return this.otpModel.cardPin
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(n.prototype, 'pinDigits', {
            get: function () {
              return this._pinDigits || [
              ]
            },
            enumerable: !0,
            configurable: !0
          }),
          n.prototype.pinDigit = function (n) {
            return this.isValidIndex(n) ? this.pinDigits[n].text : null
          },
          n.prototype.isValidIndex = function (n) {
            return n >= 0 && n < this.pinDigits.length
          },
          Object.defineProperty(n.prototype, 'selectedCard', {
            get: function () {
              return this._selectedCard
            },
            set: function (n) {
              this._selectedCard = n;
              this.otpModel.cardNumber = n ? n.Code : null
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(n.prototype, 'otpModelCard', {
            get: function () {
              return this.otpModel.cardNumber
            },
            enumerable: !0,
            configurable: !0
          }),
          n.prototype.updateSelectedCardFromModel = function () {
            var t = this.otpModelCard,
            i = undefined,
            n;
            t && (n = this.filterFilter(this.otpCards, function (n) {
              return n.Code === t
            }), n.length > 0 && (i = n[0]));
            this.selectedCard = i
          },
          n.prototype.init = function (n) {
            var t = this;
            this.form = n;
            var i = this.$scope.$watch(function () {
              return t.otpModelCard
            }, function () {
              return t.updateSelectedCardFromModel()
            }),
            r = this.$scope.$watch(function () {
              return t.otpModelPin
            }, function () {
              return t.updatePinDigits()
            }),
            u = this.$scope.$watch(function () {
              return t.showValidationErrors
            }, function (n) {
              n && t.validatePinDigits()
            });
            this.$scope.$on('$destroy', function () {
              i();
              r();
              u()
            });
            this.updatePinDigits()
          },
          n.prototype.validatePinDigits = function () {
            var n = this,
            t = function (t, i) {
              var r = 'pinDigits' + i;
              return Boolean(n.form[r] && n.form[r].$invalid)
            };
            this.showPinDigitsRequiredError = this.pinDigits.some(t)
          },
          n.generateDisabledPinDigitIndices = function () {
            for (var n = [
            ], t; n.length < 2; ) t = Math.floor(Math.random() * 4),
            n.indexOf(t) === - 1 && n.push(t);
            return n
          },
          n.prototype.updatePinDigits = function () {
            var s = this,
            t = this.otpModelPin,
            i,
            e,
            o,
            f,
            u;
            if (!t || t !== this.getPinDigitsText()) {
              for (i = void 0, t && t.length === n.PinDigitsCount ? (e = t.split(''), i = function (n) {
                var t = e[n];
                return t === '*' ? new r(!0)  : new r(t)
              })  : (o = n.generateDisabledPinDigitIndices(), i = function (n) {
                return new r(o.indexOf(n) >= 0)
              }), f = [
              ], u = 0; u < n.PinDigitsCount; u++) f.push(i(u));
              this._pinDigits = f.map(function (n, t) {
                return new a(s.buildPinDigitNotifyFn(t), n)
              });
              this.updateModelPinDigits()
            }
          },
          n.prototype.buildPinDigitNotifyFn = function (n) {
            var t = this;
            return function (i, r) {
              return t.onPinDigitChange(n, i, r)
            }
          },
          n.prototype.onPinDigitChange = function () {
            this.validatePinDigits();
            this.batchPinDigitsUpdate || this.updateModelPinDigits()
          },
          n.prototype.updateModelPinDigits = function () {
            this.otpModel.cardPin = this.getPinDigitsText()
          },
          n.prototype.getPinDigitsText = function () {
            return this.pinDigits.reduce(function (n, t) {
              return n + t.text
            }, '')
          },
          n.prototype.displayTitle = function () {
            return this.embeddedInModal
          },
          n.prototype.getCardLine1 = function (n) {
            return n ? n.Title || n.Code : ''
          },
          n.prototype.getCardLine2 = function (n) {
            return n && n.Title ? n.Code : ''
          },
          n.$inject = [
            '$scope',
            '$filter'
          ],
          n.PinDigitsCount = 4,
          n
        }(),
        r = function () {
          function n(n) {
            n === void 0 && (n = !1);
            this._value = null;
            typeof n == 'string' ? (this._isDisabled = !1, this.value = n)  : this._isDisabled = n
          }
          return Object.defineProperty(n.prototype, 'value', {
            get: function () {
              return this._value
            },
            set: function (t) {
              this.isDisabled || (this._value = n.isValidValue(t) ? t.trim()  : null)
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(n.prototype, 'text', {
            get: function () {
              return this.isDisabled ? '*' : this.isValid ? String(this.value)  : ' '
            },
            enumerable: !0,
            configurable: !0
          }),
          n.isValidValue = function (t) {
            return t !== undefined && t !== null && t.length > 0 && n.isValidDigit(Number(t))
          },
          n.isValidDigit = function (n) {
            return !isNaN(n) && n >= 0 && n < 10
          },
          Object.defineProperty(n.prototype, 'isValid', {
            get: function () {
              return n.isValidValue(this.value)
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(n.prototype, 'isDisabled', {
            get: function () {
              return this._isDisabled
            },
            enumerable: !0,
            configurable: !0
          }),
          n
        }(),
        l = function () {
          function n(n) {
            this.decoratee = n
          }
          return Object.defineProperty(n.prototype, 'value', {
            get: function () {
              return this.decoratee.value
            },
            set: function (n) {
              var i = this.value,
              t;
              this.decoratee.value = n;
              t = this.value;
              this.onValueSet(t, i)
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(n.prototype, 'text', {
            get: function () {
              return this.decoratee.text
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(n.prototype, 'isValid', {
            get: function () {
              return this.decoratee.isValid
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(n.prototype, 'isDisabled', {
            get: function () {
              return this.decoratee.isDisabled
            },
            enumerable: !0,
            configurable: !0
          }),
          n.prototype.onValueSet = function () {
          },
          n
        }(),
        a = function (n) {
          function t(t, i) {
            var u = n.call(this, i || new r) || this;
            return u.notifyFn = t,
            u
          }
          return __extends(t, n),
          t.prototype.onValueSet = function (n, t) {
            n !== t && this.notifyFn(n, t)
          },
          t
        }(l)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        n.app.directive('otpFacade', [
          'SecurityService',
          function () {
            return {
              restrict: 'EA',
              templateUrl: 'Templates/common/directives/otp-facade',
              controller: t,
              controllerAs: 'vm',
              link: function (n) {
                n.proceed = function () {
                  n.hideOPT = !0
                }
              }
            }
          }
        ]);
        var t = function () {
          function n() {
          }
          return n
        }()
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        n.app.directive('otpPrompt', [
          '$state',
          'SecurityService',
          '$modal',
          'VersionFilterService',
          'AppEventsService',
          'RoleService',
          function (n, t, i, r, u, f) {
            return {
              restrict: 'A',
              link: function () {
                var n = f.getRole() == 5 || f.getRole() == 13;
                n && t.getUserSessionInfo().then(function (n) {
                  n.OTPStatus == 0 && t.tokenInfo().then(function (n) {
                    if (n.TokenApplicationStatus == 0) return i.open({
                      templateUrl: 'Templates/common/modals/otp-prompt',
                      controller: 'BaseModalController as vm',
                      size: 'lg',
                      windowClass: 'custom',
                      backdrop: 'static',
                      resolve: {
                        userInfo: function () {
                        }
                      }
                    })
                  })
                })
              }
            }
          }
        ])
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  }));
  alpha.app.filter('PaymentCodeToName', [
    'LookupsService',
    function () {
      return function (n, t) {
        if (n == null && (n = ''), typeof t == 'undefined') return '';
        var i;
        return i = t.filter(function (t) {
          return t.Item.ProductTypeId == n
        }),
        i.length > 0 ? i[0].Item.Name : 'Payment\'s name is unavailable'
      }
    }
  ]);
  alpha.app.filter('PaymentCodeToCategory', [
    'LookupsService',
    'STRINGS',
    function (n, t) {
      return function (n, i) {
        if (n == null && (n = ''), typeof i == 'undefined') return '';
        var r;
        return r = i.filter(function (t) {
          return t.Item.ProductTypeId == n
        }),
        r.length > 0 ? r[0].Item.CategoryName : t.cardloanPayments
      }
    }
  ]);
  alpha.app.filter('ShouldShowPaymentCode', function () {
    return function (n, t, i) {
      if (n == null && (n = ''), typeof t == 'undefined' || typeof i == 'undefined') return '';
      var r;
      return r = t.filter(function (n) {
        return n.Item.ProductTypeId == i
      }),
      r.length > 0 && r[0].Item.FixedCodePayment ? n : ''
    }
  });
  alpha.app.directive('productActions', [
    'STRINGS',
    '$document',
    'StateHelperService',
    'analytics',
    '$filter',
    'RoleService',
    'AppEventsService',
    function (n, t, i, r, u, f, e) {
      return {
        restrict: 'EA',
        scope: {
          getActions: '&actions'
        },
        templateUrl: 'Templates/common/productActions',
        link: function (t, r, o) {
          var s = function (t) {
            var i = t.stateName,
            r;
            return t.titleResourceKey ? i = n[t.titleResourceKey] : (r = '', f.IsRetail() || t.stateName != alpha.constants.stateNames.transfersJobIntrabank || (r = 'corporate.'), i = n['burger.' + r + t.stateName], alpha.utils.isUndefinedOrNull(i) && (i = n[t.stateName])),
            t.title = i,
            t
          },
          h = function () {
            t.actions = u('permittedActions') (t.getActions());
            (t.actions != null || t.actions != undefined) && t.actions.map(s)
          };
          t.actions = u('permittedActions') (t.getActions());
          t.burgermenu = o.isBurgerMenu || 'true';
          t.burgerActionFromDonut = o.burgerActionFromDonut || 'false';
          t.productDetailsActions = [
          ];
          alpha.utils.isUndefinedOrNull(t.actions) || (t.productDetailsActions = t.actions.filter(function (n) {
            return n.forDetailsPage == !0
          }));
          (t.actions != null || t.actions != undefined) && t.actions.map(s);
          t.go = function (n) {
            i.go(n.stateName, n.stateParams, n.data, n.stateOptions);
            e.tryPublish(alpha.common.services.AppEventsService.BurgerMenuActionClicked, {
              title: n.title,
              toState: n.stateName,
              burgerActionFromDonut: t.burgerActionFromDonut
            })
          };
          t.$watch('getActions()', function (n, t) {
            n === t || !n || h()
          })
        }
      }
    }
  ]);
  alpha.app.filter('propsFilter', function () {
    return function (n, t) {
      var i = [
      ];
      return angular.isArray(n) ? n.forEach(function (n) {
        for (var u, o, f = !1, e = Object.keys(t), r = 0; r < e.length; r++) if (u = e[r], o = t[u].toLowerCase(), n[u].toString().toLowerCase().indexOf(o) !== - 1) {
          f = !0;
          break
        }
        f && i.push(n)
      })  : i = n,
      i
    }
  }),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        n.app.directive('psdPrompt', [
          'SecurityService',
          '$modal',
          'VersionFilterService',
          'AppEventsService',
          function (t, i, r, u) {
            return {
              restrict: 'A',
              link: function () {
                var f = u.subscribe(n.common.services.AppEventsService.SmsOtpPrompt_Event, function () {
                  r.IsInVersions(n.constants.versionFilters.PSD).then(function (n) {
                    n && t.getPSD().then(function (n) {
                      if (n && n.Status != 2) {
                        var r = i.open({
                          templateUrl: 'Templates/common/modals/psd',
                          controller: 'PsdPromptCtrl as vm',
                          size: 'lg',
                          windowClass: 'custom',
                          backdrop: 'static'
                        }).result;
                        r.then(function (i) {
                          t.setPSD(n, i)
                        }, function () {
                        }).finally (function () {
                        })
                      }
                    })
                  });
                  f()
                })
              }
            }
          }
        ])
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        n.app.directive('rightClick', [
          '$parse',
          function (n) {
            return function (t, i, r) {
              var u = n(r.ngRightClick);
              i.bind('contextmenu', function (n) {
                t.$apply(function () {
                  n.preventDefault();
                  u(t, {
                    $event: n
                  })
                })
              })
            }
          }
        ])
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        n.app.value('orderSaveState', {
          saving: !1
        });
        n.app.directive('rowOrder', [
          '$q',
          'orderSaveState',
          function (n, t) {
            return {
              restrict: 'AC',
              replace: !0,
              scope: {
                row: '&rowOrderRow',
                collection: '&rowOrderCollection',
                orderChangedHandler: '&rowOrderChanged'
              },
              template: '<div class="row-order-wrapper">    <a href=""  data-ng-show="selectedItem.scopeId==$id" class="row-order-up" data-ng-click="savingOrder.saving || decOrder()" data-ng-class="{\'disabled\': savingOrder.saving}">Up</a>    <a href=""  data-ng-show="selectedItem.scopeId==$id" class="row-order-down" data-ng-click="savingOrder.saving || incOrder()" data-ng-class="{\'disabled\': savingOrder.saving}">Down</a>            <input type="radio" id="{{$id}}" name="orderRadio" data-ng-model="selectedItem.scopeId" data-ng-value="$id" data-ng-show="selectedItem.scopeId!=$id">            <label for="{{$id}}" data-ng-show="selectedItem.scopeId!=$id"> <span></span></label></div>',
              link: function (i, r, u) {
                function l() {
                  e = i.collection().map(function (n) {
                    return n[f]
                  })
                }
                var e,
                c,
                o;
                i.savingOrder = t;
                var f = u.rowOrderProperty || 'Order',
                s = i.orderChangedHandler,
                h = i.row();
                if (i.$root.selectedRadio || (i.$root.selectedRadio = {
                  scopeId: ''
                }), i.selectedItem = i.$root.selectedRadio, i.collection().forEach(function (n, t) {
                  return n.Order = t + 1
                }), l(), c = e.every(function (n) {
                  return n == 0
                }), c) for (o = 1; o < e.length; o++) e[o] = o + 1;
                i.incOrder = function () {
                  a(h, i.collection(), f, 1, s)
                };
                i.decOrder = function () {
                  a(h, i.collection(), f, - 1, s)
                };
                var a = function (n, t, i, r) {
                  var u;
                  l();
                  var o = n[i],
                  f = o + r,
                  s = Math.min.apply(Math, e),
                  h = Math.max.apply(Math, e);
                  if ((s <= f && f <= h)) return (u = y(n, t, r), u == null) ? void 0 : (u[i] = o, n[i] = f, v(n, u), !1)
                },
                v = function (r, u) {
                  t.saving = !0;
                  n.when(i.orderChangedHandler({
                    row: r,
                    rowToSwitch: u
                  })).finally (function () {
                    t.saving = !1
                  })
                },
                y = function (n, t, r) {
                  var s = n[f],
                  u = i.collection().sort(function (n, t) {
                    return n[f] - t[f]
                  }),
                  e = u.indexOf(n),
                  o = Math.min(Math.max(0, e + r), t.length - 1);
                  return o == e ? null : u[o]
                }
              }
            }
          }
        ])
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  }));
  alpha.app.directive('scroller', [
    'ProductsService',
    function () {
      return {
        restrict: 'E',
        replace: 'true',
        templateUrl: 'Templates/common/directives/scroller',
        transclude: !0,
        scope: !0,
        controllerAs: 'scroller',
        controller: ScrollerController,
        link: function () {
        }
      }
    }
  ]),
  function (n) {
    n[n.Window = 0] = 'Window';
    n[n.Element = 1] = 'Element'
  }(ScrollerElement || (ScrollerElement = {
  }));
  ScrollerController = function () {
    function n(n, t, i, r) {
      var u = this;
      if (this.$scope = n, this.$element = t, this.$timeout = r, this.scrollDelay = 1000, this.scrollThrottled = !0, this.scrollStartingYPosition = 0, this.start = 0, this.scrollHandler = function () {
        !u.scrollThrottled && u.scrollBarIsOnBottom(u.$element) && u.isDownScroll(u.$element) && (u.scrollThrottled = !0, u.$scope.$emit('scrolled'), u.$scope.unthrottleEvent || u.$timeout(u.unthrottle, u.scrollDelay))
      }, this.isDownScroll = function (n) {
        if (u.scrollElement == ScrollerElement.Window) {
          if (window.scrollY > u.start) return u.start = window.scrollY,
          !0
        } else if (n[0].scrollTop > u.start) return u.start = u.$element[0].scrollTop,
        !0;
        return u.start = u.scrollElement == ScrollerElement.Window ? window.scrollY : u.$element[0].scrollTop,
        !1
      }, this.unthrottle = function () {
        u.scrollThrottled = !1
      }, this.scrollElement = n.isDropdown ? ScrollerElement.Element : ScrollerElement.Window, this.scrollElement == ScrollerElement.Element) {
        t.on('scroll', this.scrollHandler);
        n.$on('$destroy', function () {
          t.off('scroll', this.scrollHandler);
          r.cancel(this.unthrottle)
        })
      } else angular.element(i).bind('scroll', this.scrollHandler),
      n.$on('$destroy', function () {
        angular.element(i).unbind('scroll', this.scrollHandler);
        r.cancel(this.unthrottle)
      });
      n.unthrottleEvent && (n.$on(n.unthrottleEvent, this.unthrottle), n.$on('$destroy', function () {
        t.off(n.unthrottleEvent, this.scrollHandler);
        r.cancel(this.unthrottle)
      }))
    }
    return n.prototype.scrollBarIsOnBottom = function (n) {
      var i = !1,
      t;
      return this.scrollElement == ScrollerElement.Window ? (t = 300, i = window.innerHeight + window.scrollY >= document.body.offsetHeight - t)  : (t = 50, i = n[0].scrollTop + n[0].offsetHeight >= n[0].scrollHeight - t),
      i
    },
    n.$inject = [
      '$scope',
      '$element',
      '$window',
      '$timeout'
    ],
    n
  }(),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        n.app.directive('securityTips', [
          '$modal',
          'SecurityService',
          'VersionFilterService',
          'AppEventsService',
          function (t, i, r, u) {
            return {
              restrict: 'A',
              link: function (f) {
                var e,
                o = function () {
                  u.publish(n.common.services.AppEventsService.ModifiedApprovalTableModal_Event)
                },
                s = u.subscribe(n.common.services.AppEventsService.SmsOtpPrompt_Event, function () {
                  r.IsInVersions(n.constants.versionFilters.SECURITY_TIPS).then(function (n) {
                    return n
                  }).then(function (n) {
                    return n ? i.getUserSessionInfo()  : null
                  }).then(function (i) {
                    if (i && i.Channel == 3) {
                      var r = document.cookie || '';
                      if (!n.utils.isUndefinedOrNull(i.Profile) && r.indexOf('awb' + i.Profile.UserID) == - 1) return e = t.open({
                        templateUrl: 'Templates/common/modals/securityTips',
                        controller: 'SecurityTipsModalController as vm',
                        size: 'lg',
                        windowClass: 'custom',
                        backdrop: 'static',
                        resolve: {
                          userInfo: function () {
                            return i
                          }
                        }
                      }).result,
                      e.then(function (n) {
                        if (n == 1) {
                          var t = new Date;
                          t.setDate(t.getDate() + 30);
                          document.cookie = 'awb' + i.Profile.UserID + '=' + 1.toString() + '; expires=' + t.toUTCString()
                        }
                      }).finally (function () {
                        o()
                      })
                    }
                  }).finally (function () {
                    n.utils.isUndefinedOrNull(e) && o()
                  })
                });
                f.$on('$destroy', s)
              }
            }
          }
        ])
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        n.app.directive('sessionMessageModal', function () {
          return {
            restrict: 'A',
            template: '',
            controller: [
              '$scope',
              '$modal',
              'SecurityService',
              function (t, i, r) {
                r.getUserSessionInfo().then(function (t) {
                  var r = '',
                  u,
                  f;
                  n.utils.isUndefinedOrNull(t) || (r = t.Message);
                  n.utils.isUndefinedOrNullorWhiteSpace(r) || (u = {
                    templateUrl: 'Templates/common/modals/session-message-modal',
                    controller: 'SessionMessageModalInstanceCtrl as vm',
                    size: 'sm',
                    backdrop: !0,
                    resolve: {
                      session: function () {
                        return t
                      }
                    }
                  }, f = i.open(u).result, f.finally (function () {
                  }))
                })
              }
            ]
          }
        })
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        n.app.directive('showModalInLogin', [
          '$q',
          '$state',
          '$modal',
          'SecurityService',
          'RoleService',
          'AppEventsService',
          'ApprovalTableUtilsService',
          function (t, i, r, u, f, e, o) {
            return {
              restrict: 'A',
              link: function (t) {
                var h,
                i,
                s = function () {
                  e.publish(n.common.services.AppEventsService.ContactInfoUpdateModal_Event)
                },
                c = e.subscribe(n.common.services.AppEventsService.ModifiedApprovalTableModal_Event, function () {
                  u.getUserSessionInfo().then(function (t) {
                    t && f.isAccessAllowed('ApproveJobs') && t.UserInfo.CompanyInfo.IsSpecialSubscription && (h = o.hasApprovalTableModified().then(function (n) {
                      if (n) return i = r.open({
                        templateUrl: 'Templates/common/modals/ModifiedApprovalTable',
                        controller: [
                          '$scope',
                          function (t) {
                            t.message = n
                          }
                        ],
                        size: 'lg',
                        windowClass: 'custom',
                        backdrop: 'static'
                      }).result,
                      i.then(function () {
                      }).finally (function () {
                        s()
                      })
                    }).finally (function () {
                      n.utils.isUndefinedOrNull(i) && s()
                    }))
                  }).finally (function () {
                    n.utils.isUndefinedOrNull(h) && s()
                  })
                });
                t.$on('$destroy', c)
              }
            }
          }
        ])
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  }));
  alpha.app.directive('simpleProductActions', [
    'STRINGS',
    '$document',
    'analytics',
    'AppEventsService',
    function (n, t, i, r) {
      return {
        restrict: 'EA',
        scope: {
          getActions: '&actions'
        },
        templateUrl: 'Templates/common/simpleProductActions',
        link: function (t, i, u) {
          t.burgermenu = u.isBurgerMenu || 'true';
          var f = function () {
            t.actions = t.getActions();
            alpha.utils.isUndefinedOrNull(t.actions) || t.actions.map(function (t) {
              return t.title = n[t.title] || t.title,
              t
            })
          };
          t.classInClick = u.classInClick;
          t.selectiveItem = null;
          t.choiceSelectiveItem = function (n) {
            t.selectiveItem = n;
            r.tryPublish(alpha.common.services.AppEventsService.BurgerMenuActionClicked, {
              title: n.title,
              toState: n.stateName
            })
          };
          t.productDetailsActions = [
          ];
          alpha.utils.isUndefinedOrNull(t.actions) || (t.productDetailsActions = t.actions.filter(function (n) {
            return n.forDetailsPage == !0
          }));
          f();
          t.callCallback = function (n) {
            n.callback()
          };
          t.$watch('actions', function (n, t) {
            n === t || !n || f()
          }, !0)
        }
      }
    }
  ]);
  __extends = this && this.__extends || function () {
    var n = Object.setPrototypeOf || {
      __proto__: [
      ]
    }
    instanceof Array && function (n, t) {
      n.__proto__ = t
    }
    || function (n, t) {
      for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
    };
    return function (t, i) {
      function r() {
        this.constructor = t
      }
      n(t, i);
      t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
    }
  }(),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        var i,
        r,
        t;
        n.app.directive('smsOtpPrompt', [
          '$state',
          'SecurityService',
          'QueriesService',
          '$modal',
          'VersionFilterService',
          'AppEventsService',
          'RoleService',
          'OtpHandlerService',
          'MenuItemsService',
          function () {
            return {
              restrict: 'A',
              scope: {
              },
              controller: i,
              controllerAs: 'vm',
              link: function (n, t, i, r) {
                r.init()
              }
            }
          }
        ]);
        i = function () {
          function t(n, t, i, r, u, f, e, o, s, h, c) {
            this.$element = n;
            this.$modal = t;
            this.$q = i;
            this.$scope = r;
            this.appEventService = u;
            this.otpHandlerService = f;
            this.roleService = e;
            this.securityService = o;
            this.versionFilterService = s;
            this.stateService = h;
            this.queriesService = c
          }
          return t.prototype.nextModal = function () {
            this.appEventService.publish(n.common.services.AppEventsService.SmsOtpPrompt_Event)
          },
          t.prototype.getOtpPromptOptions = function () {
            var n = this;
            return this.queriesService.getOtpPromptOptions({
            }).then(function (t) {
              return n.checkOtpPromptOptionsResponse(t)
            })
          },
          t.prototype.checkOtpPromptOptionsResponse = function (t) {
            return n.utils.isUndefinedOrNull(t) || t.ResultCode !== 0 ? this.$q.reject(n.utils.getErrorMsg(t))  : this.$q.when(t)
          },
          t.prototype.otpPromptPopupShow = function (t) {
            return !n.utils.isUndefinedOrNull(t.EnablePrompt) && t.EnablePrompt ? this.$q.when(t)  : this.$q.reject('OtpPromptPopupShouldBeHidden')
          },
          t.prototype.do = function () {
            var n = this;
            return this.getOtpPromptOptions().then(function (t) {
              return n.otpPromptPopupShow(t)
            }).then(function (t) {
              return n.$modal.open({
                templateUrl: 'Templates/common/modals/sms-otp-prompt-modal',
                controller: 'SmsOtpPromptModalController as vm',
                size: 'lg',
                windowClass: 'custom',
                backdrop: 'static',
                keyboard: !1,
                resolve: {
                  otpPromptOptions: function () {
                    return t
                  }
                }
              }).result.finally (function () {
                n.stateService.go('root.overview')
              })
            }, function () {
              n.nextModal()
            })
          },
          t.prototype.init = function () {
            var t = this,
            i = this.appEventService.subscribe(n.common.services.AppEventsService.AllStateGuardsCompleted_Event, function () {
              t.do ();
              i()
            })
          },
          t.$inject = [
            '$element',
            '$modal',
            '$q',
            '$scope',
            'AppEventsService',
            'OtpHandlerService',
            'RoleService',
            'SecurityService',
            'VersionFilterService',
            '$state',
            'QueriesService'
          ],
          t
        }();
        n.app.directive('smsOtpUpgradeWizard', [
          function () {
            return {
              restrict: 'A',
              scope: {
                completeFn: '<?',
                cancelFn: '<?',
                otpPromptOptions: '<'
              },
              controller: r,
              controllerAs: 'vm',
              templateUrl: 'Templates/Features/Services/otp/sms-otp-upgrade-wrapper',
              link: function (n, t, i, r) {
                r.init()
              }
            }
          }
        ]);
        r = function (i) {
          function r(n, r, u, f, e, o, s, h, c, l, a, v) {
            var y = i.call(this, n, r) || this;
            return y.otpHandlerService = u,
            y.securityService = f,
            y.stringService = e,
            y.stateService = o,
            y.menuItemsService = s,
            y.rootScopeService = h,
            y.intervalService = c,
            y.queriesService = l,
            y.dialCodeService = a,
            y.roleService = v,
            y._uiSteps = [
              new t('1', function () {
                return y.isInformationStep
              }, function () {
                return y.hasVisitedInformationStep
              }),
              new t('2', function () {
                return y.isValidationStep
              }, function () {
                return y.hasVisitedValidationStep
              }),
              new t('3', function () {
                return y.isCompletionStep
              }),
            ],
            y._isSeriousError = !1,
            y._enableSkip = !0,
            y._tokenOtpUpgradeFlow = !1,
            y.smsInProgress = !1,
            y.btnDisabled = !1,
            y.insertAddressStepEnabled = !1,
            y.dialCodeMatcher = null,
            y.dialCodeService.getDialCodeMatcher().then(function (n) {
              y.dialCodeMatcher = n;
              y.otpHandler.reset({
                uiContext: {
                  isNewScreen: !0
                }
              });
              y.retrieveSessionInfo()
            }),
            y
          }
          return __extends(r, i),
          Object.defineProperty(r.prototype, 'uiSteps', {
            get: function () {
              return this._uiSteps
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(r.prototype, 'isTokenReplaceStep', {
            get: function () {
              return this._tokenOtpUpgradeFlow && this.upgradeScope.otpPromptOptions.PromptType == 3 && this.CurrentStepIndex == 1 || this._tokenOtpUpgradeFlow && this.upgradeScope.otpPromptOptions.PromptType == 2 && this.CurrentStepIndex == 2
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(r.prototype, 'isInformationStep', {
            get: function () {
              return this.CurrentGroupIndex === 0
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(r.prototype, 'hasVisitedInformationStep', {
            get: function () {
              return this.CurrentGroupIndex > 0
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(r.prototype, 'isValidationStep', {
            get: function () {
              return this.CurrentGroupIndex === 1
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(r.prototype, 'hasVisitedValidationStep', {
            get: function () {
              return this.CurrentGroupIndex > 1
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(r.prototype, 'isCompletionStep', {
            get: function () {
              return this.CurrentGroupIndex === 2
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(r.prototype, 'isSeriousError', {
            get: function () {
              return this._isSeriousError
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(r.prototype, 'enableSkip', {
            get: function () {
              return this._enableSkip
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(r.prototype, 'isRetail', {
            get: function () {
              return this.roleService.IsRetail()
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(r.prototype, 'upgradeScope', {
            get: function () {
              return this.scope
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(r.prototype, 'smsUpgradeModel', {
            get: function () {
              return this.Model
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(r.prototype, 'tokenUpgradeModel', {
            get: function () {
              return this.Model
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(r.prototype, 'otpHandler', {
            get: function () {
              return this.otpHandlerService.retrieveHandler(this.otpCallerType)
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(r.prototype, 'otpCallerType', {
            get: function () {
              return this._tokenOtpUpgradeFlow ? 38 : this.isMobileChangeFlow ? this.otpUpdateContactInfoCallerType : 14
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(r.prototype, 'otpUpdateContactInfoCallerType', {
            get: function () {
              return this.isRetail ? 3 : 27
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(r.prototype, 'canEditMobile', {
            get: function () {
              return !this.IsBusy
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(r.prototype, 'fullMobile', {
            get: function () {
              return this.dialCodeService.fullPhone(this.smsUpgradeModel.Mobile, this.mobileDc)
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(r.prototype, 'isMobileChanged', {
            get: function () {
              return this.fullMobile !== this.smsUpgradeModel.OriginalMobile
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(r.prototype, 'isMobileChangeFlow', {
            get: function () {
              return this.isMobileChanged
            },
            enumerable: !0,
            configurable: !0
          }),
          r.prototype.CheckSkipButtonValue = function () {
            return this._enableSkip = n.utils.isUndefinedOrNull(this.upgradeScope.otpPromptOptions.DisableSkip) ? !0 : !this.upgradeScope.otpPromptOptions.DisableSkip,
            !0
          },
          r.prototype.init = function () {
          },
          r.prototype.retrieveSessionInfo = function () {
            var n = this;
            return this.IsBusy = !0,
            this.securityService.getUserSessionInfo().then(function (t) {
              n.channel = n.rootScopeService.OTPChannel ? n.rootScopeService.OTPChannel : t.OTPChannel;
              n.smsOtpEnabled = t.SmsOTPEnabled;
              var i = n.retrieveMobile(t);
              return n.mobileDc = n.dialCodeMatcher.getDialCode(i),
              i = n.dialCodeMatcher.splitPhone(i, n.mobileDc).phone,
              n.smsUpgradeModel.Mobile = i,
              n.smsUpgradeModel.OriginalMobile = n.dialCodeService.fullPhone(i, n.mobileDc),
              n.updateMobileValidationRules(),
              !0
            }).catch (function (t) {
              return n.checkSeriousError(t)
            }).finally (function () {
              n.IsBusy = !1
            })
          },
          r.prototype.retrieveMobile = function (n) {
            return this.isRetail ? this.retrieveMobileForRetail(n)  : this.retrieveMobileForCorporate(n)
          },
          r.prototype.retrieveMobileForCorporate = function (t) {
            return n.utils.isUndefinedOrNull(t.CompanyUserContacts) ? '' : t.CompanyUserContacts.MobilePhone
          },
          r.prototype.retrieveMobileForRetail = function (n) {
            return n.MobilePhone
          },
          r.prototype.viberOnClick = function () {
            var i = angular.element('#viberotp'),
            n,
            t;
            i.addClass('viberotpbtn');
            n = angular.element('#viberotplabel');
            n.addClass('viberotplabel');
            t = angular.element('#smsotp');
            t.removeClass('smsotpbtn')
          },
          r.prototype.smsOnClick = function () {
            var t = angular.element('#smsotp'),
            n;
            t.addClass('smsotpbtn');
            n = angular.element('#viberotp');
            n.removeClass('viberotpbtn')
          },
          r.prototype.initializeStepsForRetail = function () {
            var n = this;
            return [{
              templateUrl: 'Templates/Features/Services/otp/sms-otp-upgrade-step1',
              title: 'step1',
              index: 0,
              groupIndex: 0,
              processStep: [
                function () {
                  return n.CheckSkipButtonValue()
                }
              ]
            },
            {
              templateUrl: 'Templates/Features/Services/otp/sms-otp-upgrade-step2',
              title: 'step2',
              index: 1,
              groupIndex: 1,
              processStep: [
                function () {
                  return n.sendTokens()
                }
              ]
            },
            {
              templateUrl: 'Templates/Features/Services/otp/sms-otp-upgrade-step3',
              title: 'step3',
              index: 2,
              groupIndex: 1,
              processStep: [
                function () {
                  return n.verifyPin().then(function () {
                    return n.enquireOtpRetail()
                  }).then(function (t) {
                    var i = n.qService.when(!0);
                    return t.required || (i = n.doOperationRetail().then(function (t) {
                      return n.CurrentStepIndex = 3,
                      t
                    })),
                    i
                  })
                }
              ]
            },
            {
              templateUrl: 'Templates/Features/Services/otp/sms-otp-upgrade-step4',
              title: 'step4',
              index: 3,
              groupIndex: 1,
              processStep: [
                function () {
                  return n.doOperationRetail()
                }
              ]
            },
            {
              templateUrl: 'Templates/Features/Services/otp/sms-otp-upgrade-step5',
              title: 'step5',
              index: 4,
              groupIndex: 2,
              processStep: [
                function () {
                  return n.complete()
                }
              ]
            }
            ]
          },
          r.prototype.initializeStepsForSingleUserCompany = function () {
            var n = this;
            return [{
              templateUrl: 'Templates/Features/Services/otp/sms-otp-upgrade-step1',
              title: 'step1',
              index: 0,
              groupIndex: 0,
              processStep: [
                function () {
                  return n.CheckSkipButtonValue()
                }
              ]
            },
            {
              templateUrl: 'Templates/Features/Services/otp/sms-otp-upgrade-step2',
              title: 'step2',
              index: 1,
              groupIndex: 1,
              processStep: [
                function () {
                  return n.sendTokens()
                }
              ]
            },
            {
              templateUrl: 'Templates/Features/Services/otp/sms-otp-upgrade-step3',
              title: 'step3',
              index: 2,
              groupIndex: 1,
              processStep: [
                function () {
                  return n.verifyPin().then(function () {
                    return n.enquireOtpSingleUserCompany()
                  }).then(function (t) {
                    var i = n.qService.when(!0);
                    return t.required || (i = n.doOperationCorporate().then(function (t) {
                      return n.CurrentStepIndex = 3,
                      t
                    })),
                    i
                  })
                }
              ]
            },
            {
              templateUrl: 'Templates/Features/Services/otp/sms-otp-upgrade-step4',
              title: 'step4',
              index: 3,
              groupIndex: 1,
              processStep: [
                function () {
                  return n.doOperationCorporate()
                }
              ]
            },
            {
              templateUrl: 'Templates/Features/Services/otp/sms-otp-upgrade-step5',
              title: 'step5',
              index: 4,
              groupIndex: 2,
              processStep: [
                function () {
                  return n.complete()
                }
              ]
            }
            ]
          },
          r.prototype.initializeStepsForMultipleUserCompany = function () {
            var n = this;
            return [{
              templateUrl: 'Templates/Features/Services/otp/otp-upgrade-step1',
              title: 'step1',
              index: 0,
              groupIndex: 0
            },
            {
              templateUrl: 'Templates/Features/Services/otp/otp-upgrade-step2',
              title: 'step2',
              index: 1,
              groupIndex: 0,
              processStep: [
                function () {
                  return n.CheckSkipButtonValue()
                }
              ]
            }
            ]
          },
          r.prototype.initializeStepsForAwitSubscription = function () {
            var n = this;
            return [{
              templateUrl: 'Templates/Features/Services/otp/otp-token-upgrade-step1',
              title: 'step1',
              index: 0,
              groupIndex: 0,
              processStep: [
                function () {
                  return n.CheckSkipButtonValue()
                }
              ]
            },
            {
              templateUrl: 'Templates/Features/Services/otp/otp-token-upgrade-address-info',
              title: 'step2',
              index: 1,
              groupIndex: 1,
              processStep: [
                function () {
                  return n.enquireForTokenOtpUpgrade().then(function (t) {
                    var i = n.qService.when(!0);
                    return t.required || (i = n.doUpgradeTokenOperation().then(function (t) {
                      return n.CurrentStepIndex = 2,
                      t
                    })),
                    i
                  })
                }
              ]
            },
            {
              templateUrl: 'Templates/Features/Services/otp/otp-upgrade-step5',
              title: 'step3',
              index: 2,
              groupIndex: 1,
              processStep: [
                function () {
                  return n.doUpgradeTokenOperation()
                }
              ]
            },
            {
              templateUrl: 'Templates/Features/Services/otp/otp-token-upgrade-step-completion',
              title: 'step4',
              index: 3,
              groupIndex: 2,
              processStep: [
                function () {
                  return n.complete()
                }
              ]
            }
            ]
          },
          r.prototype.addStepsForSmsOtpUpgradeFlow = function () {
            var n = this;
            this.Steps.push({
              templateUrl: 'Templates/Features/Services/otp/otp-upgrade-step3',
              title: 'step3',
              index: 2,
              groupIndex: 1,
              processStep: [
                function () {
                  return n.sendTokens()
                }
              ]
            }, {
              templateUrl: 'Templates/Features/Services/otp/otp-upgrade-step4',
              title: 'step4',
              index: 3,
              groupIndex: 1,
              processStep: [
                function () {
                  return n.verifyPin().then(function () {
                    return n.enquireOtpMultipleUserCompany()
                  }).then(function (t) {
                    var i = n.qService.when(!0);
                    return t.required || (i = n.doOperationCorporate().then(function (t) {
                      return n.CurrentStepIndex = 4,
                      t
                    })),
                    i
                  })
                }
              ]
            }, {
              templateUrl: 'Templates/Features/Services/otp/otp-upgrade-step5',
              title: 'step5',
              index: 4,
              groupIndex: 1,
              processStep: [
                function () {
                  return n.doOperationCorporate()
                }
              ]
            }, {
              templateUrl: 'Templates/Features/Services/otp/otp-upgrade-step6',
              title: 'step6',
              index: 5,
              groupIndex: 2,
              processStep: [
                function () {
                  return n.complete()
                }
              ]
            })
          },
          r.prototype.addStepsForTokenOtpUpgradeFlow = function () {
            var n = this;
            this.Steps.push({
              templateUrl: 'Templates/Features/Services/otp/otp-token-upgrade-address-info',
              title: 'step3',
              index: 2,
              groupIndex: 1,
              processStep: [
                function () {
                  return n.enquireOtpMultipleUserCompany().then(function (t) {
                    var i = n.qService.when(!0);
                    return t.required || (i = n.doUpgradeTokenOperation().then(function (t) {
                      return n.CurrentStepIndex = 3,
                      t
                    })),
                    i
                  })
                }
              ]
            }, {
              templateUrl: 'Templates/Features/Services/otp/otp-upgrade-step5',
              title: 'step5',
              index: 3,
              groupIndex: 1,
              processStep: [
                function () {
                  return n.doUpgradeTokenOperation()
                }
              ]
            }, {
              templateUrl: 'Templates/Features/Services/otp/otp-token-upgrade-step-completion',
              title: 'step5',
              index: 4,
              groupIndex: 2,
              processStep: [
                function () {
                  return n.complete()
                }
              ]
            })
          },
          r.prototype.initialiseSteps = function () {
            switch (this.upgradeScope.otpPromptOptions.PromptType) {
              case 0:
                return this.initializeStepsForRetail();
              case 3:
                return this._tokenOtpUpgradeFlow = !0,
                this.initializeStepsForAwitSubscription();
              case 1:
                return this.initializeStepsForSingleUserCompany();
              case 2:
                return this.initializeStepsForMultipleUserCompany()
            }
          },
          r.prototype.tokenOtpUpgradeFlow = function () {
            this._tokenOtpUpgradeFlow = !0;
            this.addStepsForTokenOtpUpgradeFlow();
            this.nextStep()
          },
          r.prototype.smsOtpUpgradeFlow = function () {
            this.addStepsForSmsOtpUpgradeFlow()
          },
          Object.defineProperty(r.prototype, 'dialCodes', {
            get: function () {
              return this.dialCodeService.dialCodes
            },
            enumerable: !0,
            configurable: !0
          }),
          r.prototype.updateMobileValidationRules = function () {
            var n = this.dialCodeService.getValidation(this.mobileDc);
            this.mobilePattern = n.pattern;
            this.mobilePatternError = n.errorMessage
          },
          r.prototype.sendTokens = function () {
            var n = this;
            return this.smsInProgress = !0,
            this.btnDisabled = !0,
            this.securityService.getSMSBankToken({
              Mobile: this.fullMobile,
              OtpChannel: this.channel
            }).then(function (t) {
              return n.intervalService(function () {
                n.smsInProgress = !1
              }, 30000, 1, !0).then(function () {
                n.btnDisabled = !1
              }),
              t
            }).catch (function (t) {
              return n.checkSeriousError(t)
            })
          },
          r.prototype.verifyPin = function () {
            var n = this;
            return this.securityService.validateBankTokenOTP({
              OTP: this.smsUpgradeModel.MobileToken,
              ValidationType: 0,
              ValidationValue: this.fullMobile
            }).catch (function (t) {
              return n.checkSeriousError(t, n.stringService.tokensNotValid)
            })
          },
          r.prototype.enquireOtpRetail = function () {
            var n = this,
            t = this.isMobileChangeFlow ? this.enquireForMobileChangeRetail()  : this.enquireForSmsOtpUpgrade();
            return t.catch (function (t) {
              return n.checkSeriousError(t)
            })
          },
          r.prototype.enquireOtpSingleUserCompany = function () {
            var n = this,
            t = this.isMobileChangeFlow ? this.enquireForMobileChangeCorporate()  : this.enquireForSmsOtpUpgrade();
            return t.catch (function (t) {
              return n.checkSeriousError(t)
            })
          },
          r.prototype.enquireOtpMultipleUserCompany = function () {
            var n = this,
            t = this._tokenOtpUpgradeFlow ? this.enquireForTokenOtpUpgrade()  : this.isMobileChangeFlow ? this.enquireForMobileChangeCorporate()  : this.enquireForSmsOtpUpgrade();
            return t.catch (function (t) {
              return n.checkSeriousError(t)
            })
          },
          r.prototype.enquireForTokenOtpUpgrade = function () {
            return this.otpHandler.reset({
              payload: this.updateTokenOtpUpgradePayload(this.buildTokenOtpUpgradePayload())
            }).enquire()
          },
          r.prototype.enquireForMobileChangeRetail = function () {
            return this.otpHandler.reset({
              payload: this.updateMobileChangePayload(this.buildMobileChangePayload())
            }).enquire()
          },
          r.prototype.enquireForMobileChangeCorporate = function () {
            return this.otpHandler.reset({
              payload: this.updateMobileChangePayloadCorporate(this.buildContactsUpdatePayload())
            }).enquire()
          },
          r.prototype.enquireForSmsOtpUpgrade = function () {
            return this.otpHandler.reset({
              payload: this.updateSmsOtpUpgradePayload(this.buildSmsOtpUpgradePayload())
            }).enquire()
          },
          r.prototype.doOperationRetail = function () {
            var n = this,
            t = this.isMobileChangeFlow ? this.changeMobileRetail()  : this.smsOtpUpgrade();
            return t.catch (function (t) {
              return n.checkSeriousError(t)
            })
          },
          r.prototype.doOperationCorporate = function () {
            var n = this,
            t = this.isMobileChangeFlow ? this.changeMobileSmsOtpUpgradeCorporate()  : this.smsOtpUpgrade();
            return t.catch (function (t) {
              return n.checkSeriousError(t)
            })
          },
          r.prototype.doUpgradeTokenOperation = function () {
            var n = this;
            return this.otpHandler.result().then(function () {
              return n.otpHandler.appendExtraInfoToPayload(n.buildTokenOtpUpgradePayload(), 'OTP')
            }).then(function (t) {
              return n.updateTokenOtpUpgradePayload(t)
            }).then(function (t) {
              return n.securityService.submitTokenUpgradeApplication(t)
            }).then(function (t) {
              return n.checkTokenUpgradeResponse(t)
            })
          },
          r.prototype.mobileChangeFlowManipulate = function () {
            return this.isRetail ? this.changeMobileRetail()  : this.changeMobileSmsOtpUpgradeCorporate()
          },
          r.prototype.changeMobileRetail = function () {
            var n = this;
            return this.otpHandler.result().then(function () {
              return n.otpHandler.appendExtraInfoToPayload(n.buildMobileChangePayload(), 'OTP')
            }).then(function (t) {
              return n.updateMobileChangePayload(t)
            }).then(function (t) {
              return n.securityService.changeContactsApplication(t)
            }).then(function (t) {
              return n.checkContactsResponse(t)
            })
          },
          r.prototype.checkContactsResponse = function (t) {
            return n.utils.isUndefinedOrNull(t) || t.ResultCode !== 0 ? this.qService.reject(n.utils.buildError(t, this.stringService.failChange))  : this.qService.when(!0)
          },
          r.prototype.checkTokenUpgradeResponse = function (t) {
            return n.utils.isUndefinedOrNull(t) || t.ResultCode !== 0 ? this.qService.reject(n.utils.buildError(t, this.stringService.failTokenUpgrade))  : this.qService.when(!0)
          },
          r.prototype.changeMobileSmsOtpUpgradeCorporate = function () {
            var n = this;
            return this.otpHandler.result().then(function () {
              return n.otpHandler.appendExtraInfoToPayload(n.buildContactsUpdatePayload(), 'OTP')
            }).then(function (t) {
              return n.updateMobileChangePayloadCorporate(t)
            }).then(function (t) {
              return n.securityService.updateCorporateUserContactInfo(t)
            }).then(function (t) {
              return n.checkContactsResponse(t)
            }).then(function () {
              return n.smsOtpUpgradeAction()
            })
          },
          r.prototype.smsOtpUpgrade = function () {
            var n = this;
            return this.otpHandler.result().then(function () {
              return n.smsOtpUpgradeAction()
            })
          },
          r.prototype.smsOtpUpgradeAction = function () {
            var t = this,
            i = this.otpHandler.appendExtraInfoToPayload(this.buildSmsOtpUpgradePayload(), 'OldOTP');
            return this.updateSmsOtpUpgradePayload(i),
            this.securityService.tokenReplace(i).then(function (i) {
              return i.ResultCode !== 0 ? t.qService.reject(n.utils.buildError(i.Error))  : (t.AppEventsService.publish(n.common.services.AppEventsService.InvalidateUserSessionInfo_Event), t.AppEventsService.publish(n.common.services.AppEventsService.InvalidateTokenInfo_Event), t.isRetail && t.menuItemsService.DisablePermissionItems('ViewOTP'), i)
            })
          },
          r.prototype.buildMobileChangePayload = function () {
            var t = {
              Contacts: [
              ]
            };
            return this.isMobileChanged && t.Contacts.push(new n.profile.Contact(3, this.fullMobile, this.smsUpgradeModel.MobileToken || undefined)),
            t
          },
          r.prototype.buildContactsUpdatePayload = function () {
            var t = new n.profile.UpdateContactInfo;
            return this.isMobileChanged && t.CompanyUserContacts.push(new n.profile.DeltaContact(new n.profile.Contact(3, this.fullMobile, null), 1, 2)),
            t
          },
          r.prototype.buildTokenOtpUpgradePayload = function () {
            var n = {
            };
            return n.Address = this.tokenUpgradeModel.Address,
            n.AddressNumber = this.tokenUpgradeModel.AddressNumber,
            n.Area = this.tokenUpgradeModel.Area,
            n.City = this.tokenUpgradeModel.City,
            n.Region = this.tokenUpgradeModel.Region,
            n.Phone = this.tokenUpgradeModel.Phone,
            n.PostCode = this.tokenUpgradeModel.PostCode,
            n
          },
          r.prototype.updateTokenOtpUpgradePayload = function (n) {
            return n.OTP = n.OTP || '',
            n
          },
          r.prototype.buildSmsOtpUpgradePayload = function () {
            return {
              OldOTP: ''
            }
          },
          r.prototype.updateMobileChangePayload = function (n) {
            return n.OTP = (n.OTP || '') + '::sca-phase-2',
            n
          },
          r.prototype.updateMobileChangePayloadCorporate = function (n) {
            return n.OTP = (n.OTP || '') + '::sca-phase-2',
            n
          },
          r.prototype.updateSmsOtpUpgradePayload = function (n) {
            var t = this.isRetail || this.isMobileChangeFlow ? '::sca-phase-2' : '::sca-phase-3';
            return n.OldOTP = (n.OldOTP || '') + t,
            n
          },
          r.prototype.cancel = function () {
            this.stateService.go('root.overview');
            this.upgradeScope.cancelFn && this.upgradeScope.cancelFn('user-cancel')
          },
          r.prototype.error = function () {
            this.upgradeScope.cancelFn && this.upgradeScope.cancelFn('system-error')
          },
          r.prototype.complete = function () {
            if (this.upgradeScope.completeFn) {
              var n = this.isMobileChangeFlow ? 'mobile-changed' : this._tokenOtpUpgradeFlow ? 'hard-token-upgrade' : 'otp-changed';
              this.upgradeScope.completeFn(n)
            }
          },
          r.prototype.checkSeriousError = function (t, i) {
            i === void 0 && (i = null);
            var r = n.utils.buildError(t, i),
            u = r.Code === 4 || r.ErrorCode === 99;
            return this._isSeriousError = !u,
            this.qService.reject(r)
          },
          r.$inject = [
            '$scope',
            '$injector',
            'OtpHandlerService',
            'SecurityService',
            'STRINGS',
            '$state',
            'MenuItemsService',
            '$rootScope',
            '$interval',
            'QueriesService',
            'DialCodeService',
            'RoleService'
          ],
          r
        }(n.wizards.WizardController);
        t = function () {
          function n(n, t, i) {
            t === void 0 && (t = function () {
              return !1
            });
            i === void 0 && (i = function () {
              return !1
            });
            this._title = n;
            this.isActivePredicate = t;
            this.isVisitedPredicate = i
          }
          return Object.defineProperty(n.prototype, 'title', {
            get: function () {
              return this._title
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(n.prototype, 'isActive', {
            get: function () {
              return this.isActivePredicate()
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(n.prototype, 'isVisited', {
            get: function () {
              return this.isVisitedPredicate()
            },
            enumerable: !0,
            configurable: !0
          }),
          n
        }()
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  }));
  alpha.app.directive('taxfreeDonut', [
    '$document',
    function (n) {
      return {
        restrict: 'EA',
        replace: !0,
        templateUrl: 'templates/features/services/taxfree/donut',
        link: function (t, i, r) {
          var o = d3.select(i[0]),
          s = r.year || undefined,
          f = [
          ],
          e,
          u;
          !alpha.utils.isUndefinedOrNull(t.vm.customerDetailsTaxEntries) && t.vm.customerDetailsTaxEntries.length > 0 && (e = t.vm.customerDetailsTaxEntries.filter(function (n) {
            return n.RefYear == s
          }), alpha.utils.isUndefinedOrNull(e) || (f = e[0].TaxEntry));
          t.totalbalancetext = r.resource;
          t.totalBalance = getTotalTaxFree(f);
          t.Math = Math;
          f.length > 0 ? (t.noDataAvailable = !1, u = new taxfreeDonut(180, 180, 86, f, o, t, n), u.draw(), t.clickedObject = {
            Title: t.totalbalancetext,
            Currency: 'EUR',
            Total: Math.abs(t.totalBalance)
          }, f.length == 1 && (u.clearDonut(), t.clickedObject = f[0], u.drawInnerArc({
            startAngle: 0,
            endAngle: Math.PI * 2
          }, 0, !0)), t.IsNumberLarge = function () {
            var n = t.clickedObject.Total;
            return n && Math.abs(n) > 99999
          }, t.IsClicked = function () {
            if (u) return u.selectedIndex !== - 1
          }, t.hasActions = !1, t.stopBubbling = function (n) {
            n.stopPropagation()
          }, t.$on('$destroy', function () {
            u.destroy()
          }))  : t.noDataAvailable = !0
        }
      }
    }
  ]);
  taxfreeDonut = function (n, t, i, r, u, f, e) {
    var o;
    this.width = n;
    this.height = t;
    this.radius = i;
    this.clickedObject = {
    };
    this.dataset = r.slice();
    this.scope = f;
    this.div = u;
    this.doc = e;
    this.selectedIndex = - 1;
    this.innerRadiusOffset = 15;
    this.svg = u.append('svg');
    this.animationConstant = 100;
    this.svg.data(this.dataset);
    this.svg.attr('width', n);
    this.svg.attr('height', t);
    this.donutData = d3.layout.pie().value(function (n) {
      return n && n.Total && typeof n.Total == 'number' ? Math.abs(n.Total)  : 1
    }).sort(null);
    o = this;
    this.container = o.div[0][0];
    this.draw = function () {
      this.donutGroup = this.setDonutGroup(this.svg, this.width, this.height);
      this.contentGroup = this.setDonutContentGroup(this.svg, this.width, this.height);
      this.mainDonut = this.createArc(this.radius - this.innerRadiusOffset, this.radius);
      this.paths = this.donutGroup.selectAll('path').data(this.donutData(this.dataset)).enter().append('path').attr('class', function (n) {
        var t = n.data.CatCode % 40 == 0 ? 40 : n.data.CatCode % 40;
        return 'color color-' + t.toString()
      }).attr('stroke', 'white').attr('stroke-width', '2').on('click', function (n, t) {
        d3.event.stopPropagation();
        o.dataset.length != 1 && o.drawInnerArc(n, t)
      }).transition().ease('linear').delay(function (n) {
        return n.startAngle * o.animationConstant
      }).duration(function (n) {
        return (n.endAngle - n.startAngle) * o.animationConstant
      }).attrTween('d', this.tweenPie);
      this.clearDonut();
      o.setDonutTextContent(!1)
    };
    this.drawInnerArc = function (n, t, i) {
      var r,
      u,
      f,
      e;
      o.selectedIndex !== t || o.selectedIndex === - 1 ? (o.clearDonut(), r = n.startAngle, u = n.endAngle, i && (t = 0), o.selectedIndex = t, f = o.paths[0][t], e = 'm 101.3922,9.6966073 c -5.854003,-3.533 -12.086003,-6.075 -18.484003,-7.646 -2.338,-0.9330004 -5.216,-2.78700035 -6.784,-4.4230004 l -4.714,-4.924 c -1.774,-1.8539999 -4.74,-1.9189999 -6.594,-0.144 l -5.182,4.964 c -1.847,1.76600005 -5.342,3.44900005 -7.76,4.3060004 -7.182,1.651 -14.117,4.485 -20.483,8.4719997 -6.308,3.672 -12.663,9.778 -16.752999,14.943 -0.033,0.041 -0.061,0.083 -0.093,0.125 -0.032,0.04 -0.066,0.077 -0.099,0.118 -22.9310008,28.972 -18.0350006,71.046996 10.937999,93.979993 28.971,22.929 71.048,18.033 93.979003,-10.94 0.034,-0.04 0.061,-0.082 0.091,-0.122 0.033,-0.038 0.069,-0.077 0.099,-0.119 22.934,-28.969993 18.036,-71.047993 -10.935,-93.977993 -2.106,-1.669 -4.62,-3.218 -7.226,-4.6119997 z', o.contentGroup.append('path').attr('d', e).attr('stroke', 'white').attr('stroke-width', '4px').attr('class', f.attributes.class.value).attr('transform', function () {
        return 'translate(23,23)rotate(' + o.getBezierAngleInDegrees(r, u) + ' 67 67)'
      }), o.contentGroup.append('circle').attr('fill', 'white').attr('cx', 68).attr('cy', 0).attr('transform', function () {
        return 'translate(23,23)rotate(' + o.getBezierAngleInDegrees(r, u) + ' 67 67)'
      }).attr('r', '3px'), o.setDonutTextContent(!0))  : (o.clearDonut(), o.setDonutTextContent(!1))
    };
    this.setDonutGroup = function (n) {
      return n.append('g').attr('transform', 'translate(' + this.width / 2 + ',' + this.height / 2 + ')')
    };
    this.clearDonut = function () {
      this.contentGroup.remove();
      this.selectedIndex = - 1;
      this.contentGroup = this.setDonutContentGroup(this.svg, this.width, this.height)
    };
    this.setDonutTextContent = function (n) {
      if (n) o.scope.clickedObject = o.dataset[o.selectedIndex];
       else {
        var t = {
          Title: f.totalbalancetext,
          Currency: 'EUR',
          Total: f.totalBalance
        };
        o.scope.clickedObject = t
      }
      !o.scope.$$phase && o.scope.$apply && o.scope.$apply()
    };
    this.x = function (n) {
      return n.x
    };
    this.y = function (n) {
      return n.y
    };
    this.tweenPie = function (n) {
      var t = d3.interpolate(n.startAngle, n.endAngle);
      return function (i) {
        return n.endAngle = t(i),
        o.mainDonut(n)
      }
    };
    this.createArc = function (n, t, i, r) {
      if (i || r) {
        var u = Number((r - i) / 2 + i);
        return d3.svg.arc().innerRadius(n).outerRadius(t).startAngle(0).endAngle(2 * Math.PI)
      }
      return d3.svg.arc().innerRadius(n).outerRadius(t)
    };
    this.setDonutContentGroup = function (n) {
      return n.append('g').attr('id', 'contentGroup')
    };
    this.getBezierAngleInDegrees = function (n, t) {
      var i = function (n) {
        return n * 180 / Math.PI
      };
      return i(Number((t - n) / 2 + n))
    };
    this.clickHandler = function (n) {
      $.contains(o.container, n.target) || (o.clearDonut(), o.dataset.length == 1 ? o.drawInnerArc({
        startAngle: 0,
        endAngle: 2 * Math.PI
      }, 0, !0)  : o.setDonutTextContent(!1))
    };
    this.doc.bind('click', this.clickHandler);
    this.destroy = function () {
      this.doc.unbind('click', this.clickHandler)
    }
  };
  alpha.app.directive('transactionFile', [
    'postNewWindowService',
    function (n) {
      return {
        restrict: 'EA',
        template: '<a href=\'\' class=\'utility-link download-withtext\' data-ng-click=\'documentButtonClicked()\'>{{documentType}}</a>',
        scope: {
          estatementButton: '=',
          estatementProduct: '=',
          estatementSource: '@',
          documentType: '@'
        },
        link: function (t, i, r) {
          t.documentButtonClicked = function () {
            var t = {
            };
            t.FileId = r.fileId;
            t.FileName = r.fileName;
            t.DocumentType = r.documentType == 'TXT' ? 3 : r.documentType == 'CSV' ? 1 : 0;
            n(t, 'file/GetTransactionFile', !1)
          }
        }
      }
    }
  ]),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        n.app.directive('translatedLiteral', [
          '$sce',
          'STRINGS',
          function () {
            return {
              restrict: 'A',
              replace: !0,
              scope: {
                translatedLiteral: '@'
              },
              template: '<span data-ng-bind-html="v"></span>',
              controller: [
                '$scope',
                '$sce',
                'STRINGS',
                function (n, t, i) {
                  n.$watch('translatedLiteral', function (r) {
                    n.v = t.trustAsHtml(i[r])
                  })
                }
              ]
            }
          }
        ]);
        n.app.directive('translated', [
          '$sce',
          function () {
            return {
              restrict: 'A',
              replace: !0,
              template: '<div data-ng-bind-html="v"></div>',
              controller: [
                '$scope',
                '$sce',
                '$element',
                function (n, t, i) {
                  var r = i.data('translated');
                  n.$watch(r, function (i) {
                    n.v = t.trustAsHtml(i)
                  })
                }
              ]
            }
          }
        ])
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  }));
  alpha.app.directive('uiSelectContainer', [
    '$parse',
    function () {
      return {
        transclude: {
          corporateSlot: '?customUiSelect',
          retailSlot: '?uiSelect'
        },
        $scope: {
          conditions: '@conditions'
        },
        templateUrl: 'Templates/common/directives/ui-select-container',
        link: function (n, t, i) {
          n.conditions = i && i.conditions ? i.conditions.toLowerCase() == 'true' : !0
        },
        controller: [
          '$scope',
          'RoleService',
          function (n, t) {
            n.isCorporate = t.getRoleType() == alpha.server.RoleType.Corporate
          }
        ]
      }
    }
  ]);
  alpha.app.constant('START_SEARCH_FROM', 3);
  alpha.app.directive('customUiSelect', [
    '$parse',
    'ProfileProductsService',
    'START_SEARCH_FROM',
    function (n, t, i) {
      return {
        restrict: 'AE',
        transclude: {
          matchSlot: 'customUiSelectMatch',
          headerSlot: '?customUiSelectHeader',
          scrollerSlot: 'scroller'
        },
        replace: 'true',
        templateUrl: 'Templates/common/directives/custom-ui-select',
        controllerAs: 'customUiSelectCtrl',
        controller: CustomUiSelectCtrl,
        link: function (t, r, u, f) {
          var e,
          o;
          $(r).click(function (n) {
            n.stopPropagation()
          });
          t.match = {
          };
          t.match.searchTerm = u.searchTerm || '';
          t.minSearchStringCharLength = u.minSearchStringCharLength || i;
          t.productChanged = n(u.productChanged);
          t.matchModel = n(u.matchModel);
          e = function () {
            var i = n(u.matchModel) (t);
            i && (f.$scope.selectedItem = i, f.assignToScope(i), f.$scope.categoryGroupType = i.BankProduct.CategoryGroup, f.$scope.match.hasFreshData = !1, f.updateControlFromSingleProduct(i.BankProduct))
          };
          t.$watch(u.matchModel, function () {
            e()
          });
          e();
          t.ExcludeByCode = u.excludeByCode;
          t.categoryGroupType = u.categoryGroupType;
          t.isDropdown = u.isDropdown;
          t.unthrottleEvent = u.unthrottleScrollEvent;
          u.$observe('excludeByCode', function (n) {
            t.ExcludeByCode = n
          });
          t.productRequestType = u.productRequestType;
          u.$observe('productRequestType', function (n) {
            t.productRequestTypeWatchPristine || (e(), f.$scope.containerList = [
            ], o());
            t.productRequestType = n;
            f.resetVariables();
            t.productRequestTypeWatchPristine = !1
          });
          o = function () {
            t.isDropdown || f.onFocus();
            t.match.searchTerm = '';
            t.match.hasFreshData = !0;
            f.resetVariables();
            t.isDropdown && (t.firstTimeOpenDropDown = !0)
          };
          o()
        }
      }
    }
  ]);
  CustomUiSelectCtrl = function () {
    function n(n, t, i, r, u, f, e) {
      var o = this;
      this.$scope = n;
      this.$element = t;
      this.$parse = i;
      this.$document = r;
      this.profileProductsService = u;
      this.AppEventsService = f;
      this.$q = e;
      this.init = function () {
        o.initVariables();
        o.registerEventHandlers();
        o.subscribeEvent()
      };
      this.initVariables = function () {
        o.resetVariables();
        o.$scope.productRequestTypeWatchPristine = !0;
        o.$scope.firstTimeOpenDropDown = !0;
        o.$scope.selectedItem = {
        };
        o.$scope.containerList = [
        ];
        o.$scope.searchStringState = new SearchStringState
      };
      this.registerEventHandlers = function () {
        o.$scope.$on('clearModel', function () {
          o.$scope.matchModel.assign && o.$scope.matchModel.assign(o.$scope, undefined)
        });
        o.$scope.$on('itemClick', o.selectItem);
        o.$scope.$on('updated', function (n) {
          (o.validSearchTerm = o.$scope.match.searchTerm.length >= o.$scope.minSearchStringCharLength ? o.$scope.match.searchTerm : '', o.$scope.selectedItem.Title != o.$scope.match.searchTerm && o.$scope.selectedItem.Code != o.$scope.match.searchTerm) && (o.$scope.isEverythingCached || (o.$scope.hasMore = !0), o.getNextPage(), n.preventDefault(), n.stopPropagation)
        });
        o.$scope.$on('$destroy', function () {
          o.unregisterEventHandlers()
        })
      };
      this.subscribeEvent = function () {
        o.AppEventsService.subscribe(alpha.common.services.AppEventsService.InvalidateCustomUiSelectProduct, function (n, t) {
          alpha.utilities.removeProductWithCode(o.$scope.containerList, t);
          o.$scope.currentRecords = o.$scope.containerList.length
        });
        o.AppEventsService.subscribe(alpha.common.services.AppEventsService.InvalidateCustomUiSelectCategoryGroup, function () {
          o.$scope.isEverythingCached = !1
        })
      };
      this.resetVariables = function () {
        var n = o.$scope.containerList && o.$scope.containerList.length ? o.$scope.containerList.length : 0;
        o.$scope.lastRowNumber = 0;
        o.$scope.currentRecords = n;
        o.$scope.totalRecords = n;
        o.$scope.maxRequestRecords = 10;
        o.$scope.hasError = !1;
        o.$scope.isEverythingCached = !1;
        o.$scope.hasMore = !0
      };
      this.unregisterEventHandlers = function () {
        o.$element && o.$element.off('itemClick', o.selectItem)
      };
      this.cacheProductsWithDetails = [
      ];
      this.selectItem = function (n, t) {
        if (t >= 0 && o.$scope.containerList && o.$scope.containerList.length > 0 && o.$scope.isPanelOpen) {
          o.$scope.containerList = [
            o.$scope.containerList[t]
          ];
          o.$scope.currentRecords = 0;
          o.$scope.selectedItem = o.$scope.containerList[0];
          var i = {
            RequestIDs: {
              IDs: o.$scope.selectedItem.BankProduct.ProductID
            },
            ResponseDetails: {
              ReturnOperationalGroups: !0,
              ReturnOperationalGroupsSpecified: !0,
              ReturnProductDetails: !0,
              ReturnProductDetailsSpecified: !0,
              ReturnUses: !0,
              ReturnUsesSpecified: !0
            },
            ReturnMode: 1
          };
          o.cacheProductsWithDetails[o.$scope.selectedItem.BankProduct.ProductID] ? o.setClickedItem(o.cacheProductsWithDetails[o.$scope.selectedItem.BankProduct.ProductID], o.$scope.selectedItem)  : o.getProfileProducts(i, o.setClickedItem, o.$scope.selectedItem).then(function (n) {
            o.cacheProductsWithDetails[n.Products[0].ProductID] = n
          })
        }
        o.togglePanel()
      };
      this.setClickedItem = function (n, t) {
        if (n.Products && n.Products.length > 0) {
          var r = alpha.model.ProductBase.IProductArrayToProductBaseArray(n.Products, o.$scope.categoryGroupType),
          i = alpha.utilities.getProductWithCode(r, t.Code);
          i && o.assignToScope(i)
        }
      };
      this.assignToScope = function (n) {
        o.$scope.matchModel.assign(o.$scope, n);
        o.$scope.productChanged(o.$scope);
        o.$scope.match.searchTerm = n.listLine1;
        o.refreshSearchTermIfEmpty(n)
      };
      this.refreshSearchTermIfEmpty = function (n) {
        o.$scope.match.searchTerm == '' && (o.$scope.match.searchTerm = n.Title || n.Code)
      };
      this.getNextClickHandler = function () {
        o.getNextPage()
      };
      this.requestCallbacks = new callbacksPromisesContainer;
      this.getNextPage = function (n) {
        n === void 0 && (n = !1);
        o.requestCallbacks.runAfter(o.getNextPageAfter)
      };
      this.getNextPageAfter = function () {
        var n = o.$q.defer(),
        t;
        return o.validSearchTerm = (o.$scope.match.searchTerm.length >= o.$scope.minSearchStringCharLength ? o.$scope.match.searchTerm : '').replace(/ /g, ''),
        o.$scope.isEverythingCached ? ((o.$scope.hasMore || o.$scope.match.hasFreshData) && o.updateControlOffline(), n.resolve())  : o.$scope.hasMore || o.$scope.match.searchTerm == '' ? (t = {
          ReturnMode: 0,
          RequestCriteria: {
            MaxRecords: o.$scope.maxRequestRecords,
            MaxRecordsSpecified: !0,
            ProductTypes: [
              o.$scope.productRequestType
            ],
            SearchStringInfo: {
              SearchTerm: o.validSearchTerm,
              SearchField: 2,
              SearchFieldSpecified: !0
            }
          }
        }, o.$scope.match.hasFreshData || (t.RequestCriteria.FromRowNumber = o.$scope.lastRowNumber), o.getProfileProducts(t, o.updateControl).finally (function () {
          o.excludeAccountByCode();
          n.resolve()
        }))  : (o.$scope.match.hasFreshData && o.updateControlOffline(), n.resolve()),
        o.excludeAccountByCode(),
        n
      };
      this.updateControlOffline = function () {
        var n = o.profileProductsService.getCachedFilteredProductsByRequestType(o.validSearchTerm, o.$scope.categoryGroupType, o.$scope.productRequestType),
        t = o.$scope.searchStringState.getSearchStringState(o.validSearchTerm),
        i = {
        };
        i = t == null ? {
          Products: n,
          CurrentPageIndex: '',
          Error: null,
          HasMore: !1,
          ReplyRecords: n.length,
          ResultCode: 0,
          TotalRecords: n.length
        }
         : {
          Products: n,
          CurrentPageIndex: '',
          Error: t.Error,
          HasMore: t.HasMore,
          ReplyRecords: n.length,
          ResultCode: 0,
          TotalRecords: t.TotalRecords
        };
        o.updateControl(i);
        o.$scope.$broadcast('scrollEnded')
      };
      this.updateControl = function (n) {
        o.$scope.searchStringState.updateSearchStringState(o.validSearchTerm, n);
        o.$scope.hasError = n && n.Error ? !0 : !1;
        o.$scope.hasError || o.updateStateFromControl(n);
        o.AppEventsService.publish(alpha.common.services.AppEventsService.CustomUiSelectProductsChanged_Event, {
          response: n,
          products: o.$scope.containerList
        })
      };
      this.firstProfileResponse = !0;
      this.getProfileProducts = function (n, t, i) {
        return o.profileProductsService.getLargeProfileProducts(n, o.$scope.categoryGroupType, o.$scope.productRequestType, !0, !1).then(function (n) {
          return t(n, i),
          n
        }).catch (function () {
          this.$scope.hasError = !0
        }).finally (function () {
          o.$scope.$broadcast('scrollEnded');
          o.firstProfileResponse && (o.$scope.$broadcast('updateSearchTerm'), o.firstProfileResponse = !1)
        })
      };
      this.togglePanel = function () {
        o.$scope.isPanelOpen = !o.$scope.isPanelOpen;
        o.$scope.isPanelOpen && o.pristine()
      };
      this.onFocus = function () {
        o.$scope.isPanelOpen = !0;
        o.pristine()
      };
      this.pristine = function () {
        o.$scope.firstTimeOpenDropDown && (o.getNextPage(), o.$scope.match.hasFreshData = !0, o.$scope.firstTimeOpenDropDown = !1)
      };
      this.onScrolled = function (n) {
        n.stopPropagation();
        o.$scope.hasMore ? o.getNextPage()  : o.$scope.$broadcast('scrollEnded')
      };
      this.init()
    }
    return n.prototype.excludeAccountByCode = function () {
      var n = this;
      this.$scope.ExcludeByCode && (this.$scope.containerList = this.$scope.containerList.filter(function (t) {
        return t.Code != n.$scope.ExcludeByCode
      }))
    },
    n.prototype.updateControlFromSingleProduct = function (n) {
      var t = {
        Products: [
          n
        ],
        CurrentPageIndex: '',
        Error: null,
        HasMore: !1,
        ReplyRecords: 1,
        ResultCode: 0,
        TotalRecords: 1
      };
      this.updateControl(t)
    },
    n.prototype.updateStateFromControl = function (n) {
      if (n && n.Products && n.Products.length > 0) {
        var t = alpha.model.ProductBase.IProductArrayToProductBaseArray(n.Products, this.$scope.categoryGroupType);
        this.$scope.totalRecords = n.TotalRecords;
        this.$scope.lastRowNumber = n.LastRowNumber;
        this.$scope.hasMore = n.HasMore;
        this.$scope.match.searchTerm != '' || this.$scope.hasMore || (this.$scope.isEverythingCached = !0);
        this.$scope.match.hasFreshData ? this.$scope.containerList = t : (this.$scope.containerList.length != 1 || t.length != 1) && (this.$scope.containerList = this.$scope.containerList.concat(t));
        this.$scope.containerList.sort(function (n, t) {
          return n.listLine1 === n.Code && t.listLine1 !== t.Code ? 1 : t.listLine1 === t.Code && n.listLine1 !== n.Code ? - 1 : n.listLine1.localeCompare(t.listLine1)
        });
        this.$scope.currentRecords = this.$scope.containerList.length;
        this.$scope.match.hasFreshData = !1
      } else this.clearUpdateState()
    },
    n.prototype.clearUpdateState = function () {
      this.$scope.currentRecords = 0;
      this.$scope.totalRecords = 0;
      this.$scope.lastRowNumber = 0;
      this.$scope.hasMore = !1;
      this.$scope.containerList = [
      ]
    },
    n.$inject = [
      '$scope',
      '$element',
      '$parse',
      '$document',
      'ProfileProductsService',
      'AppEventsService',
      '$q'
    ],
    n
  }();
  SearchStringState = function () {
    function n() {
      var n = this;
      this.updateSearchStringState = function (t, i) {
        n.searchStringState[t] = i
      };
      this.getSearchStringState = function (t) {
        return n.searchStringState[t] || null
      };
      this.searchStringState = [
      ]
    }
    return n
  }();
  alpha.app.directive('customUiSelectByKey', function () {
    return {
      restrict: 'A',
      controller: customUiSelectByKeyCtrl,
      controllerAs: 'customUiSelectByKeyCtrl',
      compile: function () {
      }
    }
  });
  customUiSelectByKeyCtrl = function () {
    function n(n, t) {
      var i = this;
      this.$scope = n;
      this.$element = t;
      this.keyboardSelectedIndex = new counter;
      this.ensureHighlightVisible = function () {
        var n = i.$element.parent().querySelectorAll('.list-scrollable'),
        f = n.querySelectorAll('.custom-ui-select-row'),
        t = f[i.keyboardSelectedIndex.index],
        u,
        r;
        t && f && n && (u = n[0].offsetHeight, r = t.offsetTop + t.clientHeight - n[0].scrollTop, r > u ? n[0].scrollTop += r - u : r < t.clientHeight && (n[0].scrollTop -= t.clientHeight - r))
      };
      this.UP = 38;
      this.DOWN = 40;
      this.ENTER = 13;
      this.keyPress = function (n) {
        if (n.keyCode == i.ENTER) {
          i.$scope.$emit('itemClick', i.keyboardSelectedIndex.index);
          n.preventDefault();
          return
        }
        n.keyCode == i.DOWN ? i.keyboardSelectedIndex.increaseByOne(i.$scope.containerList.length - 1)  : n.keyCode === i.UP && i.keyboardSelectedIndex.decreaseByOne();
        i.ensureHighlightVisible();
        n.stopPropagation()
      };
      n.keyPress = this.keyPress;
      n.$on('updated', function () {
        i.lastContainerLength !== i.$scope.containerList.length && i.keyboardSelectedIndex.index > i.$scope.containerList.length && i.keyboardSelectedIndex.setIndex(i.$scope.containerList.length - 1);
        i.lastContainerLength = i.$scope.containerList.length
      })
    }
    return n.$inject = [
      '$scope',
      '$element'
    ],
    n
  }();
  counter = function () {
    function n() {
      this.index = - 1;
      this.increaseByOne = function (n) {
        this.index < n && ++this.index
      };
      this.decreaseByOne = function (n) {
        n === void 0 && (n = 0);
        this.index > n && --this.index
      };
      this.setIndex = function (n) {
        n === void 0 && (n = 0);
        this.index = n
      }
    }
    return n
  }();
  alpha.app.directive('customUiSelectHeader', function () {
    return {
      restrict: 'AE',
      transclude: 'true',
      require: '^customUiSelect',
      $scope: !0,
      templateUrl: 'Templates/common/directives/custom-ui-select-header'
    }
  });
  alpha.app.directive('customUiSelectMatch', [
    '$parse',
    function () {
      return {
        restrict: 'AE',
        transclude: 'true',
        require: '^customUiSelect',
        replace: 'true',
        scope: !0,
        templateUrl: 'Templates/common/directives/custom-ui-select-match',
        controllerAs: 'customUiSelectMatchCtrl',
        controller: CustomUiSelectMatchCtrl,
        link: function (n, t, i, r) {
          r.$scope.placeHolder = i.placeHolder;
          r.$scope.match ? r.$scope.match.searchTerm = i.match : (r.$scope.match = {
          }, r.$scope.match.searchTerm = i.match);
          i.$observe('match', function () {
            r.$scope.match.searchTerm = i.match
          })
        }
      }
    }
  ]);
  CustomUiSelectMatchCtrl = function () {
    function n(n) {
      var t = this;
      this.$scope = n;
      this.updateSearchTerm = function (n, i) {
        (i != undefined || n != '') && (n == '' && t.$scope.$emit('clearModel'), n != i && (t.$scope.match.hasFreshData = !0, t.$scope.$emit('updated')))
      };
      this.minSearchStringCharLength = n.minSearchStringCharLength;
      this.$scope.$watch('match.searchTerm', this.updateSearchTerm);
      this.$scope.$on('updateSearchTerm', function () {
        t.updateSearchTerm(t.$scope.match.searchTerm, null)
      })
    }
    return n.$inject = [
      '$scope'
    ],
    n
  }();
  alpha.app.directive('customUiSelectRow', function () {
    return {
      restrict: 'AE',
      transclude: 'true',
      require: '^customUiSelect',
      replace: 'true',
      $scope: !0,
      templateUrl: 'Templates/common/directives/custom-ui-select-row',
      controllerAs: 'customUiSelectRowCtrl',
      controller: CustomUiSelectRowCtrl
    }
  });
  var CustomUiSelectRowCtrl = function () {
    function n(n) {
      this.$scope = n;
      n.isDropdown && (n.itemClick = function () {
        n.$emit('itemClick', n.$index)
      })
    }
    return n.$inject = [
      '$scope'
    ],
    n
  }(),
  Queue = function () {
    function n() {
      this.queue = [
      ];
      this.index = 0;
      this.enqueue = function (n) {
        this.queue.push(n)
      };
      this.dequeue = function () {
        if (this.queue.length == 0) return undefined;
        var n = this.queue[this.index];
        return ++this.index * 2 >= this.queue.length && (this.queue = this.queue.slice(this.index), this.index = 0),
        n
      }
    }
    return n.prototype.getLength = function () {
      return this.queue.length - this.index
    },
    n.prototype.isEmpty = function () {
      return this.queue.length == 0
    },
    n.prototype.peek = function () {
      return this.queue.length > 0 ? this.queue[this.index] : undefined
    },
    n
  }(),
  callbacksPromisesContainer = function () {
    function n() {
      this.requestCallbacks = new Queue;
      this.runningCallback = null;
      this.runAfter = function (n) {
        this.requestCallbacks.enqueue(n);
        this.runningCallback === null && this.startFirstItem()
      };
      this.startFirstItem = function () {
        var n = this;
        if (this.requestCallbacks.isEmpty()) {
          this.runningCallback = null;
          return
        }
        this.runningCallback = this.requestCallbacks.dequeue();
        this.runningCallback().promise.then(function () {
          n.startFirstItem()
        })
      }
    }
    return n
  }();
  alpha.app.directive('approvalTable', function () {
    return {
      restrict: 'E',
      scope: {
        approvalTable: '=',
        title: '@'
      },
      templateUrl: 'templates/common/directives/r_Corporate/approvalTables/approvalTable',
      controller: [
        '$scope',
        function (n) {
          function t(n) {
            var t = 0;
            return n && n.ApprovalTableRows && angular.forEach(n.ApprovalTableRows, function (n) {
              n.ApprovalTableCells && n.ApprovalTableCells.length > t && (t = n.ApprovalTableCells.length)
            }),
            t
          }
          function i(n) {
            return 90 / n
          }
          n.levels = t(n.approvalTable);
          n.colWidthPct = i(n.levels);
          n.getCellUsers = function (n, t) {
            var r = '',
            u,
            i,
            f,
            e;
            if (n && n.ApprovalTableCells && n.ApprovalTableCells[t] && n.ApprovalTableCells[t].Users) {
              for (u = n.ApprovalTableCells[t].Users.length, i = 0; i < u; i++) f = n.ApprovalTableCells[t].Users[i],
              r += f.Name + ' ' + f.Surname,
              i !== u - 1 && (r += ', ');
              e = r.split(', ')
            }
            return e
          }
        }
      ]
    }
  });
  alpha.app.filter('quartets', function () {
    return function (n) {
      for (var n = n || '', i = '', t = 0; t < n.length; t++) i = (t + 1) % 4 == 0 ? i + n.charAt(t) + ' ' : i + n.charAt(t);
      return i
    }
  });
  alpha.app.filter('companyDataFormat', [
    'STRINGS',
    function () {
      return function (n) {
        var t = /^\d+$/.test(n);
        if (t) {
          if (n.length === 8) return n.slice(6, 8) + '-' + n.slice(4, 6) + '-' + n.slice(0, 4)
        } else if (n[4] == '-' && n[7] == '-' && n.length === 10) return n.slice(8, 10) + '-' + n.slice(5, 7) + '-' + n.slice(0, 4);
        return n ? n : 'N/A'
      }
    }
  ]);
  alpha.app.filter('EnumToCurrencyFilter', function () {
    return function (n) {
      if (n) switch (n) {
        case 0:
          return 'N/A';
        case 1:
          return 'EUR';
        case 2:
          return 'USD';
        case 3:
          return 'GBP';
        case 4:
          return 'CHF';
        case 5:
          return 'AUD';
        case 6:
          return 'CAD';
        case 7:
          return 'SEK';
        case 8:
          return 'DKK';
        case 9:
          return 'NOK';
        case 10:
          return 'CYP';
        case 11:
          return 'JPY';
        case 12:
          return 'ZAR';
        case 13:
          return 'HUF';
        case 14:
          return 'HKD';
        case 15:
          return 'ALL';
        case 16:
          return 'SGD';
        case 17:
          return 'PLN';
        case 18:
          return 'CZK';
        case 19:
          return 'BGN';
        case 20:
          return 'DEM';
        case 21:
          return 'FRF';
        case 22:
          return 'BEF';
        case 23:
          return 'ITL';
        case 24:
          return 'NLG';
        case 25:
          return 'TRY';
        case 26:
          return 'ATS';
        case 27:
          return 'FIM';
        case 28:
          return 'IEP';
        case 29:
          return 'ESP';
        case 30:
          return 'PTE';
        case 31:
          return 'SCP';
        case 32:
          return 'NIP';
        case 33:
          return 'MTL';
        case 34:
          return 'KWD';
        case 35:
          return 'SAR';
        case 36:
          return 'JOD';
        case 37:
          return 'IQD';
        case 38:
          return 'NZD';
        case 39:
          return 'ILS';
        case 40:
          return 'ISK';
        case 41:
          return 'GIP';
        case 42:
          return 'SYP';
        case 43:
          return 'AED';
        case 44:
          return 'OMR';
        case 45:
          return 'CAF';
        case 46:
          return 'WAF';
        case 47:
          return 'GRD';
        case 48:
          return 'MKD';
        case 49:
          return 'RON';
        case 50:
          return 'PEN';
        case 51:
          return 'RUB';
        case 52:
          return 'CNY';
        case 53:
          return 'SKK';
        case 54:
          return 'HRK';
        case 55:
          return 'RSD';
        case 56:
          return 'THB';
        case 57:
          return 'KRW';
        case 58:
          return 'LTT';
        case 59:
          return 'UAH';
        case 60:
          return 'TWD';
        case 61:
          return 'MYR';
        case 62:
          return 'INR';
        case 63:
          return '_BP'
      }
    }
  }); alpha.app.filter('formatStringAmount', [
    'LanguageService',
    function (n) {
      var t = n.getLanguage().toUpperCase();
      return function (n) {
        if (!alpha.utils.isUndefinedOrNull(n) && t == 'EN') {
          var i = n.split(' ');
          if (!alpha.utils.isUndefinedOrNull(i) && i.length > 1 && (n = i[0], !alpha.utils.isUndefinedOrNull(i[0]))) return n = n.replace(',', '.'),
          i[0].length > 6 && (n = n.replace('.', ',')),
          n + (' ' + i[1])
        }
        return n
      }
    }
  ]); alpha.app.filter('MiddleTrimFilter', function () {
    return function (n, t, i) {
      return (t || (t = 15), n && ('' + n).length > t + 1) ? (n = '' + n, i ? n.substring(0, t - i) + '...' + n.substring(n.length - i, n.length)  : n.substring(0, t / 2) + '...' + n.substring(n.length - t / 2, n.length))  : n
    }
  }); alpha.app.filter('phone', function () {
    var n = 'GR',
    t = {
      GR: '+30'
    };
    return function (i, r) {
      if (!i) return i;
      var f = r || n,
      u = t[f];
      return i.indexOf(u) == 0 ? i : u + i
    }
  }); alpha.app.filter('NumberToWordFilter', function () {
    return function (n) {
      if (n != null) {
        if (n == 1) return 'one';
        if (n == 2) return 'two';
        if (n == 3) return 'three';
        if (n == 4) return 'four';
        if (n == 5) return 'five';
        if (n == 6) return 'six';
        if (n == 7) return 'seven';
        if (n == 8) return 'eight';
        if (n == 9) return 'nine';
        if (n == 10) return 'ten'
      }
    }
  }); alpha.app.filter('otpLastUseDateFilter', function () {
    return function (n) {
      return n && n.length > 0 ? n.charAt(0).toUpperCase() + n.substr(1).toLowerCase()  : ''
    }
  }); alpha.app.filter('permittedActions', [
    'RoleService',
    'MenuItemsService',
    function (n, t) {
      var r = function (n) {
        for (var t = 0; t < n.length; t++) if (n[t].stateName.indexOf('card') > 0 || n[t].stateName.indexOf('loan') > 0) return !1;
        return !0
      },
      i = [
        {
          ExecuteRight: 'ExecuteAllTransfers',
          ExecuteState: alpha.constants.stateNames.newIntraBankTransferState,
          PrepareJobRight: 'AddJobs',
          PrepareJobState: alpha.constants.stateNames.transfersJobIntrabank
        },
        {
          ExecuteRight: 'ExecuteIntrabankTransfer',
          ExecuteState: alpha.constants.stateNames.newIntraBankTransferState,
          PrepareJobRight: 'AddJobs',
          PrepareJobState: alpha.constants.stateNames.transfersJobIntrabank
        },
        {
          ExecuteRight: 'ExecuteInterbankTransfer',
          ExecuteState: alpha.constants.stateNames.newInterBankTransferState,
          PrepareJobRight: 'AddJobs',
          PrepareJobState: alpha.constants.stateNames.transfersJobInterbank
        },
        {
          ExecuteRight: 'ExecuteInternationalTransfer',
          ExecuteState: alpha.constants.stateNames.newInternationalTransferState,
          PrepareJobRight: 'AddJobs',
          PrepareJobState: alpha.constants.stateNames.transfersJobInternational
        },
        {
          ExecuteRight: 'ExecuteSimpleImportsTransfer',
          ExecuteState: alpha.constants.stateNames.newEUTransferState,
          PrepareJobRight: 'AddJobs',
          PrepareJobState: alpha.constants.stateNames.transfersJobEEImports
        },
      ],
      u = [
        'EditColorProduct',
        'EditOverviewProduct',
        'EditFriendlyNameProduct',
        'EditUsesProduct'
      ];
      return function (f) {
        var o,
        e,
        s,
        c,
        h,
        l;
        if (!n.IsRetail() && f && f.length) {
          for (o = n.getRolePermissions(), e = f.length - 1; e >= 0; e--) {
            if (s = f[e], t.isStateDisable(s.stateName)) {
              f.splice(e, 1);
              continue
            }
            if (s.stateName == alpha.constants.stateNames.newTransferState) if (r(f)) {
              for (c = !1, h = 0; h <= i.length; h++) if (o.indexOf(i[h].ExecuteRight) == - 1) {
                if (o.indexOf(i[h].PrepareJobRight) != - 1) {
                  s.stateName = i[h].PrepareJobState;
                  c = !0;
                  break
                }
              } else {
                s.stateName = i[h].ExecuteState;
                c = !0;
                break
              }
              c || f.splice(e, 1)
            } else f.splice(e, 1);
             else [
              alpha.constants.stateNames.newAlphaLoanPaymentState,
              alpha.constants.stateNames.newLoanPaymentState,
              alpha.constants.stateNames.newHousingLoanPaymentState,
              alpha.constants.stateNames.newCardPaymentState,
              alpha.constants.stateNames.newInterbankCardPaymentState
            ].indexOf(s.stateName) != - 1 ? o.indexOf('ExecuteOtherPayment') == - 1 && o.indexOf('ViewPayments') == - 1 && f.splice(e, 1)  : [
              alpha.constants.stateNames.eStatementAccount,
              alpha.constants.stateNames.eStatementCard,
              alpha.constants.stateNames.eStatementLoan
            ].indexOf(s.stateName) != - 1 ? o.indexOf('ViewEstatements') == - 1 && o.indexOf('EditEstatements') == - 1 && f.splice(e, 1)  : [
              alpha.constants.stateNames.settingsAccount,
              alpha.constants.stateNames.settingsCard,
              alpha.constants.stateNames.settingsLoan,
              alpha.constants.stateNames.settingsInvestment
            ].indexOf(s.stateName) != - 1 ? o.filter(function (n) {
              return u.indexOf(n) != - 1
            }).length === 0 && f.splice(e, 1)  : [
              alpha.constants.stateNames.transfersDeleteTemplate
            ].indexOf(s.stateName) != - 1 ? (f.forEach(function (n) {
              i.forEach(function (t) {
                t.ExecuteState == n.stateName && o.indexOf(t.ExecuteRight) > - 1 && (l = !0)
              })
            }), l || f.splice(e, 1))  : [
              alpha.constants.stateNames.transfersHistoryCancel
            ].indexOf(s.stateName) != - 1 ? o.indexOf('ViewTransfersHistory') == - 1 && f.splice(e, 1)  : [
              alpha.constants.stateNames.paymentsHistoryCancel
            ].indexOf(s.stateName) != - 1 && o.indexOf('ViewPaymentsHistory') == - 1 && f.splice(e, 1)
          }
          return f
        }
        return f
      }
    }
  ]); alpha.app.filter('SortProducts', function () {
    return function (n) {
      return n.sort(function (n, t) {
        return n.BankProduct.Title.toLocaleLowerCase() > t.BankProduct.Title.toLocaleLowerCase() ? 1 : n.BankProduct.Title.toLocaleLowerCase() < t.BankProduct.Title.toLocaleLowerCase() ? - 1 : 0
      }).sort(function (n, t) {
        return n.BankProduct.Code.toLocaleLowerCase() > t.BankProduct.Code.toLocaleLowerCase() ? 1 : n.BankProduct.Code.toLocaleLowerCase() < t.BankProduct.Code.toLocaleLowerCase() ? - 1 : 0
      }),
      n
    }
  }); alpha.app.filter('StopWatchTimeFilter', function () {
    function n(n) {
      return n >= 0 ? Math.floor(n) > 9 ? '' + Math.floor(n)  : '0' + Math.floor(n)  : '00'
    }
    return function (t) {
      var i,
      r,
      u;
      if (t) return i = t,
      r = + (i / 60000),
      i %= 60000,
      u = + (i / 1000),
      n(r) + '.' + n(u)
    }
  }); alpha.app.filter('stringsFilter', [
    'STRINGS',
    function (n) {
      return function (t) {
        return n[t] || t
      }
    }
  ]); alpha.registerInterceptor({
    interceptorProcessIndex: 20,
    interceptorValue: [
      '$q',
      'AppEventsService',
      function (n, t) {
        return {
          response: function (t) {
            return t || n.when(t)
          },
          responseError: function (i) {
            var r = {
              '401': function (n) {
                t.publish(alpha.common.services.AppEventsService.TimerExpired_Event, n)
              },
              '403': function (n) {
                alpha.utils.IsAnyPropertyInGraphNull(n, 'data.Message') || n.data.Message != alpha.server.CookieInvalidReason.ClientIpChanged ? t.publish(alpha.common.services.AppEventsService.TimerExpired_Event, n)  : t.publish(alpha.common.services.AppEventsService.ClientIPChanged_Event, n)
              }
            };
            return i.status in r && r[i.status](i),
            n.reject(i)
          }
        }
      }
    ]
  }); alpha.registerInterceptor({
    interceptorProcessIndex: 0,
    interceptorValue: [
      '$q',
      '$rootScope',
      'TimerService',
      'WrapRequestService',
      'OtpEncryptionService',
      'STRINGS',
      function (n, t, i, r, u) {
        return {
          request: function (n) {
            return n.method == 'POST' && n.data && (n.data = r(n.data), u.encryptOtp(n.data), t.LastApiCallTimestamp = new Date, i.refreshTimeRemaining()),
            n
          },
          response: function (t) {
            var i;
            return t.config.method == 'POST' ? (i = t.data, t.headers('Content-Type') == 'text/html; charset=UTF-8') ? n.reject(t)  : !alpha.utils.isUndefinedOrNull(i.ResultCode) && i.ResultCode == 1 && !alpha.utils.isUndefinedOrNull(i.Error) && [
              5,
              4
            ].indexOf(i.Error.Code) == - 1 && i.Error.Code != 9 ? n.reject(i)  : i : t.config.method == 'GET' ? t : void 0
          }
        }
      }
    ]
  }); alpha.registerInterceptor({
    interceptorProcessIndex: 10,
    interceptorValue: [
      '$q',
      '$rootScope',
      '$stateParams',
      'LanguageService',
      '$injector',
      function (n, t, i, r, u) {
        var f = $('meta[name=TemplatesVersion]').attr('content');
        return {
          request: function (n) {
            if (n.method == 'GET' && (angular.isFunction(n.url) && (n.url = n.url(i)), n.url)) {
              var t = u.get('RoleService');
              n.url.toLowerCase().indexOf('templates/') > - 1 && (n.url.indexOf('?') == - 1 && (n.url += '?v=' + r.getLanguage() + f), n.url += alpha.utils.isUndefinedOrNullorWhiteSpace(t.getRoleString(!0)) ? '' : '&r=' + t.getRoleString(!0))
            }
            return n
          }
        }
      }
    ]
  }), function (n) {
    n.compatModule = angular.module('compatdirectives', [
    ]);
    angular.version.minor >= 3 && (n.compatModule.directive('ngClick', function () {
      return {
        restrict: 'A',
        link: function (n, t) {
          if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
            var i = function (n) {
              n.stopPropagation()
            };
            t.on('touchstart', i);
            t.on('touchend', i);
            n.$on('$destroy', function () {
              t.off('touchstart', i);
              t.off('touchend', i)
            })
          }
        }
      }
    }), n.compatModule.directive('tooltip', function () {
      return {
        restrict: 'EA',
        link: function (n, t, i) {
          i.tooltipPlacement = i.tooltipPlacement || 'top';
          i.tooltipAnimation = i.tooltipAnimation || !0;
          i.tooltipPopupDelay = i.tooltipPopupDelay || 0;
          i.tooltipTrigger = i.tooltipTrigger || 'mouseenter';
          i.tooltipAppendToBody = i.tooltipAppendToBody || !1
        }
      }
    }), n.compatModule.directive('datepickerPopup', [
      function () {
        return {
          restrict: 'EAC',
          require: 'ngModel',
          link: function (n, t, i, r) {
            r.$formatters.shift()
          }
        }
      }
    ]), n.compatModule.directive('tooltipHtmlUnsafe', [
      '$tooltip',
      function (n) {
        return n('tooltipHtmlUnsafe', 'tooltip', 'mouseenter')
      }
    ]), n.compatModule.directive('tooltipHtmlUnsafePopup', function () {
      return {
        restrict: 'EA',
        replace: !0,
        scope: {
          content: '@',
          placement: '@',
          animation: '&',
          isOpen: '&'
        },
        templateUrl: 'template/tooltip/tooltip-html-unsafe-popup.html'
      }
    }), angular.module('template/tooltip/tooltip-html-unsafe-popup.html', [
    ]).run(['$templateCache',
    function (n) {
      n.put('template/tooltip/tooltip-html-unsafe-popup.html', '<div class="tooltip {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind-html="content"></div>\n</div>\n')
    }
    ]), n.compatModule.directive('tooltipHtmlUnsafe', function () {
      return {
        restrict: 'EA',
        link: function (n, t, i) {
          i.tooltipPlacement = i.tooltipPlacement || 'top';
          i.tooltipAnimation = i.tooltipAnimation || !0;
          i.tooltipPopupDelay = i.tooltipPopupDelay || 0;
          i.tooltipTrigger = i.tooltipTrigger || 'mouseenter';
          i.tooltipAppendToBody = i.tooltipAppendToBody || !1
        }
      }
    }), n.compatModule.filter('unsafe', [
      '$sce',
      function (n) {
        return function (t) {
          return n.trustAsHtml(t)
        }
      }
    ]), n.compatModule.config(['$provide',
    function (n) {
      n.decorator('$tooltipSuppressWarning', function () {
        return !0
      });
      n.decorator('$modalSuppressWarning', function () {
        return !0
      });
      n.decorator('$datepickerSuppressWarning', function () {
        return !0
      })
    }
    ]), n.compatModule.directive('checkTransferDate', [
      '$parse',
      function (n) {
        return {
          restrict: 'A',
          require: 'ngModel',
          link: function (t, i, r, u) {
            var f,
            o,
            e,
            s,
            h,
            c;
            r.nextWorkingDate && (o = new Date(n(r.nextWorkingDate) (t)));
            r.minDate && (e = new Date(n(r.minDate) (t)));
            r.maxDate && (s = new Date(n(r.maxDate) (t)));
            h = function () {
              var r = u.$viewValue,
              n,
              t,
              i,
              f,
              e;
              r && (r.toString().indexOf('/') != - 1 ? (n = r.split('/') [2], n != undefined && n.length > 4 && (n = n.substr(0, 4)), n != undefined && n.length == 2 && (n = '20' + n), t = r.split('/') [1], i = r.split('/') [0])  : (f = new Date(r.toString()), n = f.getFullYear(), t = f.getMonth() + 1, i = f.getDate()), isNaN(parseInt(n)) || isNaN(parseInt(t)) || isNaN(parseInt(i)) ? e = '' : (t.toString() && t.toString().length == 1 && (t = '0' + t.toString()), i.toString() && i.toString().length == 1 && (i = '0' + i.toString()), e = i + '/' + t + '/' + n.toString()), u.$commitViewValue(), u.$setViewValue(e))
            };
            i.on('keyup', h);
            i.on('blur', function () {
              h();
              u.$render()
            });
            c = function (i) {
              var v,
              y,
              h,
              c,
              l,
              a,
              p;
              if (u.$setValidity('futuredate', !0), u.$setValidity('weekdays', !0), u.$setValidity('required', !0), v = !0, y = i, i) {
                if (i.toString().indexOf('/') != - 1 ? (v = !1, h = i.split('/') [2], h != undefined && h.length > 4 && (h = h.substr(0, 4)), h != undefined && h.length == 2 && (h = '20' + h), c = parseInt(i.split('/') [1]) - 1, l = i.split('/') [0])  : (a = new Date(i.toString()), h = a.getFullYear(), c = a.getMonth(), l = a.getDate()), p = l + '/' + c + '/' + h, f = new Date(h, c, l), r.minDate && (e = new Date(n(r.minDate) (t))), isNaN(f.getDay())) return u.$setValidity('futuredate', !0),
                u.$setValidity('weekdays', !0),
                u.$setValidity('required', !1),
                undefined;
                if (r.allowWeekends) u.$setValidity('weekdays', !0);
                 else {
                  if (f.getDay() == 6 || f.getDay() == 0) return u.$setValidity('weekdays', !1),
                  u.$setValidity('required', !0),
                  v ? f : y;
                  u.$setValidity('weekdays', !0)
                }
                if (o && f < o) return u.$setValidity('futuredate', !1),
                u.$setValidity('required', !0),
                undefined;
                if (u.$setValidity('futuredate', !0), e && f < e) return u.$setValidity('dateDisabled', !1),
                u.$setValidity('required', !0),
                undefined;
                if (u.$setValidity('dateDisabled', !0), s && f > s) return u.$setValidity('maxdate', !1),
                u.$setValidity('required', !0),
                undefined;
                u.$setValidity('maxdate', !0)
              } else return u.$setValidity('required', !1),
              undefined;
              return y
            };
            u.$parsers.unshift(c);
            u.$formatters.unshift(c)
          }
        }
      }
    ]))
  }(compatdirectives || (compatdirectives = {
  })), function (n) {
    var t,
    i,
    r,
    f,
    u;
    n.mainModule = angular.module('shareddirectives', [
    ]);
    n.mainModule.service('logoffService', [
      'SecurityService',
      '$q',
      'RoleService',
      'AppEventsService',
      function (n, t, i, r) {
        var u = !1,
        e = uuid.v4(),
        f = {
          preventNavigationLogout: function () {
            u = !0
          },
          logoutjQuery: function () {
            u || $.ajax('api/Security.svc/SignOff', {
              method: 'POST',
              dataType: 'json',
              async: !1,
              data: {
                ActivityDateTime: (new Date).toUTCString(),
                UniqueIdentifier: e
              }
            }).then(function () {
              AppInsights.Constants.EnableSetAuthenticatedUserContext && r.tryPublish(alpha.common.services.AppEventsService.LogoutTriggered)
            })
          },
          logout: function () {
            return u ? t.defer().promise : n.signOff().then(function () {
              AppInsights.Constants.EnableSetAuthenticatedUserContext && r.tryPublish(alpha.common.services.AppEventsService.LogoutTriggered)
            })
          },
          logoutAndRedirect: function (n, t) {
            f.logout().finally (function () {
              f.preventNavigationLogout();
              $('body').hide();
              alpha.utils.isUndefinedOrNullorWhiteSpace(t) || $(n).append($('<input name="logoutWay" type="hidden" value="' + t + '"/>'));
              i.getRoleType() == alpha.server.RoleType.None || i.IsRetail() || (i.hasFeature('CashManagement') ? $(n).append($('<input name="loginType" type="hidden" value="3"/>'))  : $(n).append($('<input name="loginType" type="hidden" value="2"/>')));
              $(n).submit()
            })
          }
        };
        return f
      }
    ]);
    n.mainModule.directive('logoffOnLeave', [
      'logoffService',
      function (n) {
        return $(document).bind('keydown', function (t) {
          (t.which || t.keyCode) == 116 && n.preventNavigationLogout()
        }),
        {
          restrict: 'A',
          controller: function () {
          }
        }
      }
    ]);
    n.mainModule.directive('datepickerLocaldate', [
      '$parse',
      function () {
        function n(n, t, i, r) {
          var u = r[0];
          u.$parsers.push(function (n) {
            return n.setMinutes(n.getMinutes() - n.getTimezoneOffset()),
            n.toISOString().substring(0, 19)
          });
          u.$formatters.push(function (n) {
            if (!n) return undefined;
            var t = new Date(n);
            return t.setMinutes(t.getMinutes() + t.getTimezoneOffset()),
            t
          })
        }
        return {
          restrict: 'A',
          require: [
            'ngModel'
          ],
          link: n
        }
      }
    ]);
    n.mainModule.directive('logout', [
      'logoffService',
      function (n) {
        return {
          restrict: 'EA',
          replace: !1,
          templateUrl: 'templates/common/directives/logout',
          link: function (n, t, i) {
            n.logoutFormSelector = i.logout;
            n.tooltipPlacement = i.tooltipPlacement == null ? 'bottom' : i.tooltipPlacement.trim()
          },
          controller: [
            '$scope',
            function (t) {
              t.logout = function () {
                n.logoutAndRedirect(t.logoutFormSelector, 'normal')
              }
            }
          ]
        }
      }
    ]);
    n.mainModule.directive('logoutTimer', [
      'logoffService',
      '$rootScope',
      'TimerService',
      'AppEventsService',
      function (n, t, i, r) {
        return {
          restrict: 'EA',
          replace: !0,
          scope: {
            logoutFormSelector: '@logoutTimer'
          },
          templateUrl: 'templates/common/directives/timer',
          controller: [
            '$scope',
            function (n) {
              n.timeRemaining = 0;
              n.canRefresh = !0;
              i.startTimer(function () {
                r.publish(alpha.common.services.AppEventsService.TimerExpired_Event)
              });
              n.timerService = i;
              n.timeRemaining = i.getTimeRemaining();
              n.totalElapsedTime = i.getTotalElapsedTime();
              n.idleTimeout = i.idleTimeout;
              n.sessionTimeout = i.sessionTimeout;
              n.$watch('timerService.getTimeRemaining()', function (t, i) {
                t === i || !t || (n.timeRemaining = t)
              });
              n.$watch('timerService.canRefresh()', function (t) {
                n.canRefresh = t
              });
              n.$watch('timerService.getTotalElapsedTime()', function (t, i) {
                t === i || !t || (n.totalElapsedTime = t)
              });
              n.OnRefresh = function () {
                i.refreshTimeRemaining()
              }
            }
          ]
        }
      }
    ]);
    n.mainModule.directive('contextualHelp', [
      function () {
        return {
          restrict: 'A',
          replace: !0,
          templateUrl: 'templates/common/directives/contextualHelp',
          controller: [
            '$scope',
            '$state',
            '$rootScope',
            '$modal',
            'STRINGS',
            function (n, t, i, r, u) {
              var f,
              e;
              n.helpContext = {
                state: 'root.overview',
                params: null
              };
              n.helpVisible = !1;
              f = function () {
                var t = n.helpContext.state.replace(/root\./, '').replace(/\./g, '_');
                return 'Templates/help/' + t
              };
              n.helpTemplateUrl = '';
              e = i.$on('$stateChangeSuccess', function (t, i, r) {
                n.helpContext = {
                  state: i.name,
                  params: r
                }
              });
              n.$on('$destroy', e);
              n.toggleHelp = function () {
                n.helpTemplateUrl = f();
                r.open({
                  templateUrl: 'Templates/help/modalTemplate',
                  backdrop: !0,
                  size: 'lg',
                  windowClass: 'help-modal',
                  controller: [
                    '$scope',
                    '$modalInstance',
                    function (t, i) {
                      t.helpTemplateUrl = n.helpTemplateUrl;
                      t.close = function () {
                        i.dismiss()
                      };
                      t.title = u[n.helpContext.state]
                    }
                  ]
                })
              }
            }
          ]
        }
      }
    ]);
    n.mainModule.directive('validateTrue', function () {
      return {
        restrict: 'A',
        require: '?ngModel',
        link: function (n, t, i, r) {
          if (r) {
            var u = function (n) {
              return r.$setValidity('validateTrue', n),
              n ? n : undefined
            };
            r.$formatters.push(u)
          }
        }
      }
    });
    t = {
      templateUrl: 'Templates/common/modals/timer-expired-modal',
      controller: 'TimerExpiredModalInstanceCtrl as vm',
      size: 'lg',
      backdrop: 'static',
      resolve: {
      }
    };
    i = function () {
      function n(n, t, i) {
        this.modalInstance = n;
        t.modalInstance = n;
        t.msg = i
      }
      return n.$inject = [
        '$modalInstance',
        '$scope',
        'msg'
      ],
      n
    }();
    n.TimerExpiredModalInstanceCtrl = i;
    n.mainModule.controller('TimerExpiredModalInstanceCtrl', i);
    n.mainModule.directive('timerExpired', [
      '$modal',
      'logoffService',
      'AppEventsService',
      function (n, i, r) {
        return {
          restrict: 'A',
          transclude: !0,
          link: function (u, f, e) {
            function o(r) {
              t.resolve = r;
              var u = n.open(t).result;
              u.finally (function () {
                i.logoutAndRedirect('#logoutForm')
              })
            }
            r.subscribe(alpha.common.services.AppEventsService.UserEnteredThreeTimesWrongPin, function () {
              var n = {
                msg: function () {
                  return e.userLockedMessage
                }
              };
              return o(n),
              !1
            });
            r.subscribe(alpha.common.services.AppEventsService.ClientIPChanged_Event, function () {
              var n = {
                msg: function () {
                  return e.ipChangedMessage
                }
              };
              return o(n),
              !1
            });
            var s = !1;
            r.subscribe(alpha.common.services.AppEventsService.TimerExpired_Event, function () {
              if (!s) {
                var n = {
                  msg: function () {
                    return e.timerExpiredMsg
                  }
                };
                o(n);
                s = !0
              }
              return !1
            })
          }
        }
      }
    ]);
    n.mainModule.directive('focusField', [
      '$timeout',
      function (n) {
        return {
          link: function (t, i, r) {
            var u = r.focusField,
            f;
            u && (f = function () {
              $('input[name=\'' + u + '\']', i).length > 0 ? $('input[name=\'' + u + '\']', i).focus()  : n(f, 700)
            }, n(f, 700))
          }
        }
      }
    ]);
    n.mainModule.service('agentInfo', function () {
      var n = navigator.userAgent.match(/android|iphone|ipad|ipod|iemobile|blackberry|opera mini/i) != null;
      return {
        isMobile: n
      }
    });
    n.mainModule.directive('focusFirstInput', [
      '$timeout',
      'agentInfo',
      function (n, t) {
        return {
          link: function (i, r) {
            if (!t.isMobile) {
              var u = 0,
              f = function () {
                var t = $('input[type=\'text\']:enabled,input[type=\'password\']:enabled,button[type=\'button\']:enabled', r);
                t.length > 0 ? t.first().focus()  : (u++, u < 5 && n(f, 700))
              };
              n(f, 700)
            }
          }
        }
      }
    ]);
    n.mainModule.directive('validatePasswordPattern', function () {
      var n = /^([0-9]{6})([A-Za-z0-9!@#$%_]{2,8})$/;
      return {
        restrict: 'A',
        require: '?ngModel',
        link: function (t, i, r, u) {
          u && u.$parsers.unshift(function (t) {
            return alpha.utils.isUndefinedOrNullorWhiteSpace(t) ? u.$setValidity('validatePasswordPattern', !0)  : u.$setValidity('validatePasswordPattern', n.test(t)),
            t
          })
        }
      }
    });
    n.mainModule.directive('validatePasswordPh', function () {
      var n = /^(?=[A-Za-z0-9!@#$%]*[A-Za-z!@#$%]{2}).{8,14}$/;
      return {
        restrict: 'A',
        require: '?ngModel',
        link: function (t, i, r, u) {
          u && u.$parsers.unshift(function (t) {
            if (!alpha.utils.isUndefinedOrNullorWhiteSpace(t)) return u.$setValidity('validatePasswordPattern', n.test(t)),
            t
          })
        }
      }
    });
    n.mainModule.directive('validateInternationalIban', function () {
      return {
        restrict: 'A',
        require: '?ngModel',
        link: function (n, t, i, r) {
          if (r) {
            var u = {
            },
            f = function (n) {
              var i,
              t;
              if (!alpha.utils.isUndefinedOrNullorWhiteSpace(n)) {
                if (alpha.utils.isUndefinedOrNull(u)) {
                  r.$setValidity('validateInternationalIban', !1);
                  return
                }
                return i = u.SupportsIBAN ? new RegExp('^[a-z,A-Z]{2}\\d{2}[0-9,a-z,A-Z]{' + (u.IBANSize - 4) + '}$')  : new RegExp('^[0-9,A-Z,a-z, ,\',`,.,/,,]{1,34}$'),
                t = i.test(n),
                r.$setValidity('validateInternationalIban', t),
                t ? n : undefined
              }
            };
            i.$observe('validateInternationalIban', function (n) {
              n && (u = JSON.parse(n), f(r.$viewValue))
            });
            r.$parsers.unshift(f)
          }
        }
      }
    });
    n.mainModule.directive('validateLoanType', function () {
      var t = {
        2001: {
          regex: /^[0-9]{16}$/,
          maxlength: 16
        },
        2003: {
          regex: /^[0-9]{16}$/,
          maxlength: 16
        },
        2002: {
          regex: /^[0-9]{15}$/,
          maxlength: 15
        },
        10046: {
          regex: /^989[0-9]{12}$/,
          maxlength: 15
        },
        1311020: {
          regex: /^[0-9]{8,35}$/,
          maxlength: 35
        },
        1311028: {
          regex: /^[0-9]{8,35}$/,
          maxlength: 35
        }
      },
      n = function (n) {
        return t[n]
      };
      return {
        restrict: 'A',
        require: '?ngModel',
        link: function (t, i, r, u) {
          if (u) {
            var f = n(2001),
            o = function (n) {
              var n,
              t;
              if (!alpha.utils.isUndefinedOrNullorWhiteSpace(n)) return n = n.substring(0, f.maxlength),
              u.$viewValue = n,
              u.$render(),
              t = f.regex.test(n),
              u.$setValidity('loantype', t),
              t ? n : undefined
            },
            e = function (n) {
              if (alpha.utils.isUndefinedOrNullorWhiteSpace(n)) return n;
              var t = f.regex.test(n);
              return u.$setValidity('loantype', t),
              n
            };
            r.$observe('validateLoanType', function (t) {
              f = n(t);
              e(u.$viewValue)
            });
            u.$formatters.push(e);
            u.$parsers.unshift(o)
          }
        }
      }
    });
    n.mainModule.directive('refNumberVal', function () {
      return {
        require: 'ngModel',
        link: function (n, t, i, r) {
          r.$validators.refNumberVal = function (n, t) {
            var i,
            u;
            if (r.$isEmpty(n)) return !0;
            if (i = /^\d{14}$/, u = [
              '01',
              '02',
              '29',
              '36'
            ], i.test(t) && u.indexOf(t.substring(0, 2)) != - 1) {
              var f = parseInt(t.substring(2, 6)),
              e = parseInt(t.substring(6, 8)),
              o = parseInt(t.substring(8, 10)),
              s = (new Date).getFullYear();
              if (f >= s - 1 && f <= s && e > 0 && e <= 12 && o > 0 && o <= 31) return !0
            }
            return !1
          }
        }
      }
    });
    angular.version.minor < 3 && n.mainModule.directive('checkTransferDate', [
      '$parse',
      function (n) {
        return {
          restrict: 'A',
          require: 'ngModel',
          link: function (t, i, r, u) {
            var f,
            o,
            e,
            s;
            r.nextWorkingDate && (o = new Date(n(r.nextWorkingDate) (t)));
            r.minDate && (e = new Date(n(r.minDate) (t)));
            i.on('blur', function () {
              var f = u.$viewValue,
              n,
              t,
              r,
              e,
              o;
              f && (f.toString().indexOf('/') != - 1 ? (n = f.split('/') [2], n != undefined && n.length > 4 && (n = n.substr(0, 4)), n != undefined && n.length == 2 && (n = '20' + n), t = f.split('/') [1], r = f.split('/') [0])  : (e = new Date(f.toString()), n = e.getFullYear(), t = e.getMonth() + 1, r = e.getDate()), isNaN(parseInt(n)) || isNaN(parseInt(t)) || isNaN(parseInt(r)) ? o = '' : (t.toString() && t.toString().length == 1 && (t = '0' + t.toString()), r.toString() && r.toString().length == 1 && (r = '0' + r.toString()), o = r + '/' + t + '/' + n.toString()), i.val(o))
            });
            s = function (i) {
              var p,
              v,
              s,
              l,
              a,
              y,
              h,
              c;
              if (u.$setValidity('futuredate', !0), u.$setValidity('weekdays', !0), u.$setValidity('required', !0), p = !0, v = i, i) {
                if (i.toString().indexOf('/') != - 1 ? (p = !1, s = i.split('/') [2], s != undefined && s.length > 4 && (s = s.substr(0, 4)), s != undefined && s.length == 2 && (s = '20' + s), l = parseInt(i.split('/') [1]) - 1, a = i.split('/') [0])  : (y = new Date(i.toString()), s = y.getFullYear(), l = y.getMonth(), a = y.getDate()), isNaN(parseInt(s)) || isNaN(parseInt(l)) || isNaN(parseInt(a)) || (h = a, c = l + 1, c.toString() && c.toString().length == 1 && (c = '0' + c.toString()), h.toString() && h.toString().length == 1 && (h = '0' + h.toString()), v = h + '/' + c + '/' + s.toString()), f = new Date(s, l, a), r.minDate && (e = new Date(n(r.minDate) (t))), isNaN(f.getDay())) return u.$setValidity('futuredate', !0),
                u.$setValidity('weekdays', !0),
                u.$setValidity('required', !1),
                undefined;
                if (r.allowWeekends) u.$setValidity('weekdays', !0);
                 else {
                  if (f.getDay() == 6 || f.getDay() == 0) return u.$setValidity('weekdays', !1),
                  u.$setValidity('required', !0),
                  p ? f : v;
                  u.$setValidity('weekdays', !0)
                }
                if (o && f < o) return u.$setValidity('futuredate', !1),
                u.$setValidity('required', !0),
                undefined;
                if (u.$setValidity('futuredate', !0), e && f < e) return u.$setValidity('dateDisabled', !1),
                u.$setValidity('required', !0),
                undefined;
                u.$setValidity('dateDisabled', !0)
              } else return u.$setValidity('required', !1),
              undefined;
              return v
            };
            u.$parsers.unshift(s);
            u.$formatters.unshift(s)
          }
        }
      }
    ]);
    n.mainModule.directive('validateDate', [
      '$parse',
      function (n) {
        return {
          restrict: 'A',
          require: 'ngModel',
          link: function (t, i, r, u) {
            var e,
            o,
            f,
            s;
            r.maxDate && (e = new Date(n(r.maxDate) (t)));
            r.minDate && (o = new Date(n(r.minDate) (t)));
            s = function (i) {
              var a,
              s,
              h,
              c,
              l;
              if (u.$setValidity('mindate', !0), u.$setValidity('maxdate', !0), a = !0, i) {
                if (i.toString().indexOf('/') != - 1 ? (a = !1, s = i.split('/') [2], s != undefined && s.length > 4 && (s = s.substr(0, 4)), s != undefined && s.length == 2 && (s = '20' + s), h = parseInt(i.split('/') [1]) - 1, c = i.split('/') [0])  : (l = new Date(i.toString()), s = l.getFullYear(), h = l.getMonth(), c = l.getDate()), f = new Date(s, h, c), i = a ? f : c + '/' + (h + 1) + '/' + s, r.minDate && (o = new Date(n(r.minDate) (t))), r.maxDate && (e = new Date(n(r.maxDate) (t))), isNaN(f.getDay())) return u.$setValidity('mindate', !0),
                u.$setValidity('maxdate', !0),
                u.$setValidity('required', !1),
                undefined;
                if (o && f < o) return u.$setValidity('mindate', !1),
                u.$setValidity('required', !0),
                undefined;
                if (u.$setValidity('mindate', !0), e && f > e) return u.$setValidity('maxdate', !1),
                u.$setValidity('required', !0),
                undefined;
                u.$setValidity('maxdate', !0)
              } else return u.$setValidity('required', !1),
              undefined;
              return i
            };
            u.$parsers.unshift(s);
            u.$formatters.unshift(s)
          }
        }
      }
    ]);
    n.mainModule.directive('pwCheck', [
      function () {
        return {
          require: 'ngModel',
          link: function (n, t, i, r) {
            var u = '#' + i.pwCheck;
            t.add(u).on('keyup', function () {
              n.$apply(function () {
                if (t.val() != '') {
                  var n = t.val() === $(u).val();
                  r.$setValidity('pwmatch', n)
                } else r.$setValidity('pwmatch', !0)
              })
            })
          }
        }
      }
    ]);
    n.mainModule.directive('notValue', [
      function () {
        return {
          restrict: 'A',
          require: 'ngModel',
          link: function (n, t, i) {
            if (i.notValue) {
              var r = i.notValue;
              if (t.val() == r) return !1
            }
            return !0
          }
        }
      }
    ]);
    n.mainModule.directive('dropdownhandlerInner', [
      '$timeout',
      function (n) {
        return {
          restrict: 'C',
          link: function (t, i) {
            var r = $(i);
            r.click(function (t) {
              $(t.target).is('.dropdownhandler-inner') && n(function () {
                angular.element('button.ui-select-match', r).trigger('click')
              }, 0)
            })
          }
        }
      }
    ]);
    n.mainModule.directive('scrollable', [
      function () {
        return {
          restrict: 'A',
          link: function (n, t) {
            $(t.parent()).hasClass('alpha-arrow') || (t.removeAttr('data-scrollable'), t.removeClass('dropdown-menu'), $(t).wrap('<div class=\'alpha-arrow dropdown-menu\'></div>'))
          }
        }
      }
    ]);
    n.mainModule.directive('enumToText', [
      'STRINGS',
      function (n) {
        return {
          restrict: 'AC',
          replace: !0,
          scope: {
            enumValue: '=enumToText',
            enumType: '@enumToTextType'
          },
          template: '<span class="{{enumType}}">{{content}}</span>',
          controller: [
            '$scope',
            function (t) {
              var i = n['enum.' + t.enumType + '.' + t.enumValue];
              t.content = i
            }
          ]
        }
      }
    ]);
    n.mainModule.directive('colorPicker', function () {
      return {
        restrict: 'A',
        replace: !0,
        require: 'ngModel',
        scope: {
          type: '@'
        },
        templateUrl: 'templates/common/Directives/colorPicker',
        link: function (n, t, i, r) {
          n.type = n.type.toLowerCase();
          n.type == 'account' ? n.colors = [
            '1',
            '2',
            '3',
            '4',
            '5',
            '6',
            '7',
            '8',
            '9',
            '10'
          ] : n.type == 'card' ? n.colors = [
            '11',
            '12',
            '13',
            '14',
            '15',
            '16',
            '17',
            '18',
            '19',
            '20'
          ] : n.type == 'loan' ? n.colors = [
            '21',
            '22',
            '23',
            '24',
            '25',
            '26',
            '27',
            '28',
            '29',
            '30'
          ] : n.type == 'investment' && (n.colors = [
            '31',
            '32',
            '33',
            '34',
            '35',
            '36',
            '37',
            '38',
            '39',
            '40'
          ]);
          r.$render = function () {
            n.value = r.$modelValue
          };
          n.selectColor = function (t) {
            n.value = t;
            r.$setViewValue(t)
          }
        }
      }
    });
    n.mainModule.directive('productUses', [
      'STRINGS',
      function () {
        return {
          restrict: 'AC',
          replace: !0,
          scope: {
            productUses: '='
          },
          template: '<span data-ng-repeat="use in productUses"><span data-translated-literal="enum.ProductUses.{{use}}"></span><span>{{$last ? "" : ", " }} </span></span> ',
          link: function (n, t, i) {
            var r,
            u;
            alpha.utils.isUndefinedOrNull(n.productUses) || (r = n.productUses.indexOf(5), r != - 1 && n.productUses.splice(r, 1), u = i.productUsesForCard === 'true')
          }
        }
      }
    ]);
    n.mainModule.directive('productUsesInput', [
      'STRINGS',
      function (n) {
        return {
          restrict: 'AC',
          require: 'ngModel',
          scope: {
            isDisabled: '=?ngDisabled',
            available: '=?productUsesInputAvailable'
          },
          templateUrl: 'templates/common/Directives/product-uses-input',
          link: function (t, i, r, u) {
            t.isDisabled = t.isDisabled || !1;
            t.available = t.available || [
            ];
            t.productType = r.productTypeFamily || alpha.server.ProductTypeFamily.Account;
            t.useSelected = !0;
            var f = function (i) {
              if (alpha.utils.isUndefinedOrNull(i)) return undefined;
              var r = [
              ];
              return (alpha.utils.isEmptyArray(t.available) || t.available.indexOf(2) != - 1) && r.push({
                id: 2,
                title: n['enum.ProductUses.2'],
                value: i.indexOf(2) != - 1,
                disabled: !1
              }),
              (alpha.utils.isEmptyArray(t.available) || t.available.indexOf(3) != - 1) && r.push({
                id: 3,
                title: n['enum.ProductUses.3'],
                value: i.indexOf(3) != - 1,
                disabled: !1
              }),
              (alpha.utils.isEmptyArray(t.available) || t.available.indexOf(1) != - 1) && r.push({
                id: 1,
                title: n['enum.ProductUses.1'],
                value: i.indexOf(1) != - 1,
                disabled: !1
              }),
              (alpha.utils.isEmptyArray(t.available) || t.available.indexOf(4) != - 1) && r.push({
                id: 4,
                title: n['enum.ProductUses.4'],
                value: i.indexOf(4) != - 1,
                disabled: !1
              }),
              t.isDisabled && r.map(function (n) {
                n.disabled = !0
              }),
              r
            };
            u.$render = function () {
              t.uses = f(u.$modelValue);
              var n = 0;
              t.uses.forEach(function (t) {
                t.value || (n += 1)
              });
              n == t.uses.length ? t.usesForm.$setValidity('usesVal', !1)  : t.usesForm.$setValidity('usesVal', !0)
            };
            t.selected = function () {
              var n = 0,
              i;
              t.uses.forEach(function (t) {
                t.value || (n += 1)
              });
              n == t.uses.length ? t.usesForm.$setValidity('usesVal', !1)  : t.usesForm.$setValidity('usesVal', !0);
              i = t.uses.filter(function (n) {
                return n.value
              }).map(function (n) {
                return n.id
              });
              u.$setViewValue(i);
              u.$render()
            }
          }
        }
      }
    ]);
    n.mainModule.directive('helpAlert', function () {
      return {
        restrict: 'A',
        replace: !0,
        transclude: !0,
        template: '<div class="col-md-12"><div class="alert alert-info" role="alert"><span data-ng-transclude=""></span></div></div>'
      }
    });
    n.mainModule.filter('offset', function () {
      return function (n, t) {
        return n.slice(parseInt(t))
      }
    });
    n.mainModule.directive('paymentsNav', function () {
      return {
        restrict: 'A',
        scope: {
          paymentItems: '=',
          pageSize: '='
        },
        templateUrl: 'Templates/common/Directives/PaymentsNav',
        link: function (n) {
          var t = function () {
            var i = n.paymentItems,
            r = n.selectedSubCategory,
            u = [
            ],
            t;
            if (r.length == 1) for (t = 0; t < i.length; t++) i[t].Name[0] == r && u.push(i[t]);
             else if (r == '0...9') for (t = 0; t < i.length; t++) isNaN(parseInt(i[t].Name[0])) || u.push(i[t]);
             else if (r == 'popular') for (t = 0; t < i.length; t++) i[t].IsPopular == !0 && u.push(i[t]);
             else if (r == 'new') for (t = 0; t < i.length; t++) i[t].IsNew == !0 && u.push(i[t]);
             else if (r == 'all') u = i;
             else for (t = 0; t < i.length; t++) i[t].SubCategoryName == r && u.push(i[t]);
            n.payments = u;
            n.currentPage = 1
          };
          n.payments = [
          ];
          n.pageSize = n.pageSize || 24;
          n.start = n.currentPage * n.pageSize;
          n.changeLanguage = function (i) {
            n.selectedLanguage = i.target.text;
            n.selectedSubCategory = n.selectedLanguage == 'English' ? 'A' : 'Α';
            $('.dd_lang_menu').removeClass('open');
            t()
          };
          n.ELalphabet = [
            'Α',
            'Β',
            'Γ',
            'Δ',
            'Ε',
            'Ζ',
            'Η',
            'Θ',
            'Ι',
            'Κ',
            'Λ',
            'Μ',
            'Ν',
            'Ξ',
            'Ο',
            'Π',
            'Ρ',
            'Σ',
            'Τ',
            'Υ',
            'Φ',
            'Χ',
            'Ψ',
            'Ω',
            '0...9'
          ];
          n.ENalphabet = [
            'A',
            'B',
            'C',
            'D',
            'E',
            'F',
            'G',
            'H',
            'I',
            'J',
            'K',
            'L',
            'M',
            'N',
            'O',
            'P',
            'Q',
            'R',
            'S',
            'T',
            'U',
            'V',
            'W',
            'X',
            'Y',
            'Z',
            '0...9'
          ];
          n.selectedLanguage = 'Ελληνικά';
          n.Category = 'popular';
          n.selectedSubCategory = 'popular';
          n.Categories = alpha.utils.getUniquePropertyValues(n.paymentItems, 'CategoryName').sort();
          t();
          n.setPopular = function () {
            n.selectedSubCategory = 'popular';
            n.Category = 'popular';
            t()
          };
          n.setNew = function () {
            n.selectedSubCategory = 'new';
            n.Category = 'new';
            t()
          };
          n.setCategory = function (i) {
            n.Category = i;
            var r = n.paymentItems.filter(function (n) {
              return n.CategoryName == i
            });
            n.subCategories = alpha.utils.getUniquePropertyValues(r, 'SubCategoryName').sort();
            n.selectedSubCategory = n.subCategories[0];
            t()
          };
          n.setSubCategory = function (i) {
            n.selectedSubCategory = i;
            t()
          };
          n.setAlphabetical = function () {
            n.selectedSubCategory = 'Α';
            n.Category = 'all';
            t()
          };
          n.setLetter = function (i) {
            n.selectedSubCategory = i;
            t()
          }
        }
      }
    });
    n.mainModule.directive('numbersOnly', function () {
      return {
        restrict: 'A',
        require: '?ngModel',
        link: function (n, t, i, r) {
          function f(n) {
            return n.tagName == 'INPUT' && (n.type == 'text' || n.type == 'email' || n.type == 'password' || n.type == 'date' || n.type == 'datetime' || n.type == 'datetime-local' || n.type == 'month' || n.type == 'tel' || n.type == 'time' || n.type == 'url' || n.type == 'week') || n.tagName == 'TEXTAREA' ? !0 : !1
          }
          function e(n) {
            return f(n) ? n.selectionEnd : !1
          }
          function o(n, t) {
            if (n !== null && f(n)) if (n.createTextRange) {
              var i = n.createTextRange();
              i.move('character', t);
              i.select()
            } else n.selectionEnd ? (n.focus(), n.setSelectionRange(t, t))  : n.focus()
          }
          var u = t[0];
          r && r.$parsers.unshift(function (n) {
            var t,
            f,
            s;
            return t = n == ' ' || angular.isUndefined(n) ? '' : n.split('').filter(function (n) {
              return !isNaN(n) && n.indexOf(' ') != 0
            }).join(''),
            t == '' ? (t = undefined, r.$setValidity('required', !1))  : r.$setValidity('required', !0),
            f = e(u),
            r.$viewValue = t,
            r.$render(),
            o(u, f),
            i.min && (s = parseInt(i.min), r.$setValidity('minval', parseInt(t) >= s), t ? r.$setValidity('required', !0)  : (r.$setValidity('minval', !0), r.$setValidity('required', !1))),
            i.notrequired == 'true' && r.$setValidity('required', !0),
            t
          })
        }
      }
    });
    n.mainModule.directive('textOnly', function () {
      return {
        restrict: 'A',
        require: '?ngModel',
        link: function (n, t, i, r) {
          function f(n) {
            return n.tagName == 'INPUT' && (n.type == 'text' || n.type == 'email' || n.type == 'password' || n.type == 'date' || n.type == 'datetime' || n.type == 'datetime-local' || n.type == 'month' || n.type == 'tel' || n.type == 'time' || n.type == 'url' || n.type == 'week') || n.tagName == 'TEXTAREA' ? !0 : !1
          }
          function o(n) {
            return f(n) ? n.selectionEnd : !1
          }
          function s(n, t) {
            if (n !== null && f(n)) if (n.createTextRange) {
              var i = n.createTextRange();
              i.move('character', t);
              i.select()
            } else n.selectionEnd ? (n.focus(), n.setSelectionRange(t, t))  : n.focus()
          }
          var u = t[0],
          e;
          r && (e = i.isEmail == 'true' ? new RegExp('[1234567890QWERTYUIOPLKJHGFDSAZXCVBNMqwertyuioplkjhgfdsazxcvbnm!@#$%^/&*()_+{\\-}~`;\':<>?,.\\[\\]]')  : i.isDoy == 'true' ? new RegExp('[QWERTYUIOPLKJHGFDSAZXCVBNMqwertyuioplkjhgfdsazxcvbnmΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρστυφχψωςίϊΐόάέύϋΰήώΊΌΈΆΎΏ!@#$%^/&*()_+{}~`;\':<>=?,.\\[\\]|\\-]')  : new RegExp('[QWERTYUIOPLKJHGFDSAZXCVBNMqwertyuioplkjhgfdsazxcvbnmΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρστυφχψωςίϊΐόάέύϋΰήώΊΌΈΆΎΏ]'), r.$parsers.unshift(function (n) {
            var t = '',
            i;
            return n != undefined && (t = n.split('').filter(function (n) {
              return e.test(n) || n == ' '
            }).join('')),
            i = o(u),
            t == '' ? (t = undefined, r.$setValidity('required', !1))  : r.$setValidity('required', !0),
            r.$viewValue = t,
            r.$render(),
            s(u, i),
            t
          }))
        }
      }
    });
    n.mainModule.directive('documentHandler', [
      'postNewWindowService',
      '$http',
      '$modal',
      'SecurityService',
      function (n, t, i) {
        return {
          restrict: 'A',
          template: '<a href=\'\' data-ng-click=\'exportDocument();\' class=\'{{classDefinition}}\'>{{anchorLiteral}}</a>',
          scope: {
            payload: '=',
            documentType: '@',
            createRequest: '&',
            whenIsValid: '@',
            classDefinition: '@',
            anchorLiteral: '@'
          },
          link: function (r) {
            r.classDefinition = r.classDefinition || 'utility-link download-withtext';
            r.anchorLiteral = r.anchorLiteral || r.documentType;
            r.exportDocument = function () {
              var u = r.payload || r.createRequest();
              r.whenIsValid && r.whenIsValid !== 'true' || (r.documentType == 'PDF' ? n(u, 'GetPdf', !1)  : r.documentType == 'MAIL' && t.post('api/Documents.svc/SendDocumentViaMail', u).then(function (n) {
                i.open({
                  templateUrl: 'templates/common/modals/emailConfirmationModal',
                  controller: 'EmailModalController as vm',
                  size: 'sm',
                  windowClass: 'custom',
                  resolve: {
                    success: function () {
                      return n.ResultCode == 0
                    },
                    userInfo: [
                      'SecurityService',
                      function (n) {
                        return n.getUserSessionInfo()
                      }
                    ]
                  }
                })
              }, function () {
                i.open({
                  templateUrl: 'templates/common/modals/emailConfirmationModal',
                  controller: 'EmailModalController as vm',
                  size: 'sm',
                  windowClass: 'custom',
                  resolve: {
                    success: function () {
                      return !1
                    },
                    userInfo: [
                      'SecurityService',
                      function (n) {
                        return n.getUserSessionInfo()
                      }
                    ]
                  }
                })
              }))
            }
          }
        }
      }
    ]);
    n.mainModule.directive('documentButton', [
      'WrapRequestService',
      'postNewWindowService',
      '$http',
      '$modal',
      'SecurityService',
      function (n, t, i, r) {
        return {
          restrict: 'EA',
          template: '<a href=\'\' data-ng-click=\'documentButtonClicked()\' class=\'utility-link download-withtext\'>{{documentType}}</a>',
          scope: {
            payload: '=',
            documentType: '@'
          },
          link: function (u, f, e) {
            u.documentButtonClicked = function () {
              if (u.payload) {
                var f = e.documentType,
                o = n(u.payload);
                f == 'PDF' ? (u.payload.DocumentType = 0, t(o, 'file/GetDocument', !1))  : f == 'CSV' ? (u.payload.DocumentType = 1, t(o, 'file/GetDocument', !1))  : f == 'FAX' || f == 'MAIL' && (u.payload.DocumentType = 2, i.post('api/Documents.svc/SendMail', o).then(function (n) {
                  r.open({
                    templateUrl: 'templates/common/modals/emailConfirmationModal',
                    controller: 'EmailModalController as vm',
                    size: 'sm',
                    windowClass: 'custom',
                    resolve: {
                      success: function () {
                        return n.ResultCode == 0 ? !0 : !1
                      },
                      userInfo: [
                        'SecurityService',
                        function (n) {
                          return n.getUserSessionInfo()
                        }
                      ]
                    }
                  })
                }, function () {
                  r.open({
                    templateUrl: 'templates/common/modals/emailConfirmationModal',
                    controller: 'EmailModalController as vm',
                    size: 'sm',
                    windowClass: 'custom',
                    resolve: {
                      success: function () {
                        return !1
                      },
                      userInfo: [
                        'SecurityService',
                        function (n) {
                          return n.getUserSessionInfo()
                        }
                      ]
                    }
                  })
                }))
              }
            }
          }
        }
      }
    ]);
    n.mainModule.directive('mailButton', [
      '$http',
      function (n) {
        return {
          restrict: 'EA',
          template: '<a href=\'\' data-ng-click=\'documentButtonClicked()\' class=\'utility-link download-withtext\'>{{documentType}}</a>',
          scope: {
            payload: '=',
            documentType: '@'
          },
          link: function (t) {
            t.documentButtonClicked = function () {
              t.payload && n.post('api/Documents.svc/SendMail', t.payload).then(function () {
              }, function () {
              })
            }
          }
        }
      }
    ]);
    n.mainModule.directive('estatementButton', [
      'WrapRequestService',
      'postNewWindowService',
      '$http',
      '$modal',
      'RoleService',
      function (n, t, i, r, u) {
        return {
          restrict: 'EA',
          template: '<a href=\'\' class=\'download-pdf\' data-ng-click=\'documentButtonClicked()\' ng-if="!isAlphaPhone && estatementExportType != \'MAIL\'"><a href=\'\' class=\'download-pdf\' data-ng-click=\'documentButtonClicked()\' ng-if="isAlphaPhone && estatementExportType == \'\'"><a href=\'\' class=\'download-pdf col-sm-5 col-sm-offset-2\' data-ng-click=\'documentButtonClicked()\' ng-if="isAlphaPhone && estatementExportType == \'MAIL\'"></a><a href=\'\' class=\'col-sm-5\' data-ng-click=\'documentButtonClicked()\' ng-if="isAlphaPhone && estatementExportType == \'MAIL\'">{{estatementExportType}}</a>',
          scope: {
            estatementButton: '=',
            estatementProduct: '=',
            estatementSource: '@',
            estatementExportType: '@'
          },
          link: function (f) {
            f.isAlphaPhone = u.isAlphaPhone();
            f.documentButtonClicked = function () {
              var u = {
              },
              e;
              f.estatementSource == 'idocs' ? (u.Source = 0, u.AccountFilter = {
                EStatementID: f.estatementButton.EstatementID
              })  : f.estatementSource == 'fdh' ? (u.Source = 1, u.CardFilter = {
                CardNumber: f.estatementProduct.Code,
                ProductID: f.estatementProduct.BankProduct ? f.estatementProduct.BankProduct.ProductID : f.estatementProduct.Id,
                IssueDate: f.estatementButton.IssueDate
              })  : f.estatementSource == 'url' && (u.Source = 1, u.CardFilter = {
                Url: f.estatementButton.EstatementURL
              });
              u.Target = 0;
              e = n(u);
              f.estatementExportType && f.estatementExportType == 'MAIL' ? i.post('api/products.svc/SendEStatementViaEmail', u).then(function (n) {
                r.open({
                  templateUrl: 'templates/common/modals/emailConfirmationModal',
                  controller: 'EmailModalController as vm',
                  size: 'sm',
                  windowClass: 'custom',
                  resolve: {
                    success: function () {
                      return n.ResultCode == 0 ? !0 : !1
                    },
                    userInfo: [
                      'SecurityService',
                      function (n) {
                        return n.getUserSessionInfo()
                      }
                    ]
                  }
                })
              }, function () {
                r.open({
                  templateUrl: 'templates/common/modals/emailConfirmationModal',
                  controller: 'EmailModalController as vm',
                  size: 'sm',
                  windowClass: 'custom',
                  resolve: {
                    success: function () {
                      return !1
                    },
                    userInfo: [
                      'SecurityService',
                      function (n) {
                        return n.getUserSessionInfo()
                      }
                    ]
                  }
                })
              })  : t(u, 'file/GetEStatement', !1)
            }
          }
        }
      }
    ]);
    n.mainModule.directive('numberGreater', [
      function () {
        return {
          require: 'ngModel',
          link: function (n, t, i, r) {
            var u = '#' + i.numberGreater;
            t.add(u).on('keyup', function () {
              n.$apply(function () {
                var n = parseInt(t.val()) > parseInt($(u).val());
                r.$setValidity('greater', n)
              })
            })
          }
        }
      }
    ]);
    n.mainModule.directive('otpValidate', [
      function () {
        return {
          require: 'ngModel',
          link: function (n, t, i, r) {
            var f = /^[0-9]{6}$/,
            u;
            r.$parsers.unshift(function (n) {
              return n ? f.test(n) ? (r.$setValidity('minOtpChars', !0), r.$setValidity('required', !0), n)  : (r.$setValidity('minOtpChars', !1), r.$setValidity('required', !0), undefined)  : (r.$setValidity('minOtpChars', !0), r.$setValidity('required', !1), undefined)
            });
            u = function (n) {
              n || (r.$setValidity('minOtpChars', !0), r.$setValidity('required', !1))
            };
            r.$formatters.push(u)
          }
        }
      }
    ]);
    n.mainModule.directive('valNum', [
      function () {
        return {
          restrict: 'A',
          require: '?ngModel',
          link: function (n, t, i, r) {
            function s(n) {
              return n.tagName == 'INPUT' && (n.type == 'text' || n.type == 'email' || n.type == 'password' || n.type == 'date' || n.type == 'datetime' || n.type == 'datetime-local' || n.type == 'month' || n.type == 'tel' || n.type == 'time' || n.type == 'url' || n.type == 'week') || n.tagName == 'TEXTAREA' ? !0 : !1
            }
            function l(n) {
              return s(n) ? n.selectionEnd : - 1
            }
            function a(n, t) {
              if (n !== null && s(n)) if (n.createTextRange) {
                var i = n.createTextRange();
                i.move('character', t);
                i.select()
              } else n.selectionEnd ? (n.focus(), n.setSelectionRange(t, t))  : n.focus()
            }
            var o = t[0],
            u,
            f,
            e,
            v,
            h,
            c;
            if (i.isAmount != 'false') t.on('blur', function () {
              var n = r.$viewValue,
              i,
              u;
              n && (i = parseFloat(n.replace(',', '.')).toFixed(2), u = i.toString().replace('.', ','), t.val(u))
            });
            r && (i.max && (u = parseFloat(i.max)), i.min && (f = parseFloat(i.min)), e = !0, i.notrequired == 'true' && (e = !1), v = /^\d+,?[0-9]{0,2}$/i, h = function (n) {
              if (n) return parseFloat(n).toFixed(2).toString().replace('.', ',')
            }, i.isAmount != 'false' && r.$formatters.push(h), c = new RegExp('^[.,0-9]+$'), r.$parsers.unshift(function (n) {
              var s,
              t;
              if (!n && e) {
                for (s in r.$error) r.$setValidity(s, !0);
                return r.$setValidity('required', !1),
                r.$viewValue
              }
              var v = 0,
              y = 0,
              h = n.toString().split('').filter(function (n, t) {
                return t == 0 && (n == ',' || n == '.') ? !1 : (n == ',' && v++, n == '.' && y++, v + y > 1) ? !1 : c.test(n)
              }).join(''),
              p = l(o);
              if (angular.version.minor >= 3 ? r.$setViewValue(h)  : r.$viewValue = h, r.$render(), p >= 0 && a(o, p), h == '' && e) {
                for (s in r.$error) r.$setValidity(s, !0);
                return r.$setValidity('required', !1),
                r.$viewValue
              }
              if (t = parseFloat(parseFloat(h.replace(',', '.')).toFixed(2)), i.hasOwnProperty('onlyIntegral') && t % 1 != 0) return r.$setValidity('required', !0),
              r.$setValidity('onlyIntegral', !1),
              '';
              if (r.$setValidity('onlyIntegral', !0), i.max) if (u = parseFloat(i.max), isNaN(t)) r.$setValidity('maxval', !0);
               else if (r.$setValidity('maxval', t <= u), t > u) return '';
              if (i.min) if (f = parseFloat(i.min), isNaN(t)) r.$setValidity('minval', !0);
               else if (r.$setValidity('minval', t >= f), t < f) return '';
              return r.$setValidity('required', !0),
              t
            }))
          }
        }
      }
    ]),
    function (n) {
      n[n.applyFirstRemoveOnEvent = 0] = 'applyFirstRemoveOnEvent';
      n[n.removeFirstApplyOnEvent = 1] = 'removeFirstApplyOnEvent';
      n[n.applyOnEvent = 2] = 'applyOnEvent';
      n[n.removeOnEvent = 3] = 'removeOnEvent'
    }(r || (r = {
    }));
    f = function () {
      var n = function (n, t) {
        n.addClass(t)
      },
      t = function (n, t) {
        n.removeClass(t)
      };
      return {
        Init: {
          0: n,
          1: t
        },
        Event: {
          0: t,
          1: n,
          2: n,
          3: t
        }
      }
    };
    n.mainModule.directive('onEventApply', [
      'AppEventsService',
      function (n) {
        return {
          link: function (t, i, u) {
            var h = u.onEventClass,
            c = u.onEventApply.split(','),
            l = u.onEventMode,
            o = r[l],
            s = f(),
            e;
            o.toString() in s.Init && s.Init[o.toString()](i, h);
            e = {
              addEvent: function (n) {
                this[n] = !1
              },
              onEvent: function (n) {
                this[n] = !0
              },
              all: function () {
                var n = !0;
                for (var t in this) n = n && this[t];
                return n
              }
            };
            c.forEach(function (r) {
              e.addEvent(r);
              var u = n.subscribe(alpha.common.services.AppEventsService[r], function () {
                e.onEvent(r);
                e.all() && s.Event[o.toString()](i, h)
              });
              t.$on('$destroy', u)
            })
          }
        }
      }
    ]);
    n.mainModule.directive('applyOnInvalidPassword', [
      'userPassword',
      function (n) {
        return {
          link: function (t, i, r) {
            if (!n.valid) {
              var u = r.applyOnInvalidPassword;
              i.addClass(u)
            }
          }
        }
      }
    ]);
    n.mainModule.directive('alertBox', function () {
      return {
        restrict: 'A',
        scope: {
          message: '=alertBoxMessage',
          type: '=?alertBoxType',
          title: '=?alertBoxTitle',
          showCloseButton: '=?alertBoxCloseBtn',
          noTitle: '@alertBoxNoTitle',
          state: '=?alertBoxState'
        },
        templateUrl: 'Templates/common/directives/alert-box',
        controller: [
          '$scope',
          '$element',
          '$attrs',
          function (n, t, i) {
            n.type = n.type || 'error';
            n.state = n.state || '';
            n.showTitle = !i.hasOwnProperty('alertBoxNoTitle');
            n.getClass = function () {
              return 'status-' + n.type
            };
            n.hide = function () {
              return alpha.utils.isUndefinedOrNullorWhiteSpace(n.message)
            };
            n.close = function () {
              n.message = ''
            }
          }
        ]
      }
    });
    n.mainModule.directive('noRecordsFound', function () {
      return {
        restrict: 'EΑ',
        replace: !0,
        scope: {
          message: '@'
        },
        templateUrl: 'Templates/common/directives/no-records-found'
      }
    });
    n.mainModule.filter('htmlToPlaintext', function () {
      return function (n) {
        return n ? String(n).replace(/<[^>]+>/gm, '')  : ''
      }
    }),
    function (n) {
      n[n.NA = 0] = 'NA';
      n[n.EUR = 1] = 'EUR';
      n[n.USD = 2] = 'USD';
      n[n.GBP = 3] = 'GBP';
      n[n.CHF = 4] = 'CHF';
      n[n.AUD = 5] = 'AUD';
      n[n.CAD = 6] = 'CAD';
      n[n.SEK = 7] = 'SEK';
      n[n.DKK = 8] = 'DKK';
      n[n.NOK = 9] = 'NOK';
      n[n.CYP = 10] = 'CYP';
      n[n.JPY = 11] = 'JPY';
      n[n.ZAR = 12] = 'ZAR';
      n[n.HUF = 13] = 'HUF';
      n[n.HKD = 14] = 'HKD';
      n[n.ALL = 15] = 'ALL';
      n[n.SGD = 16] = 'SGD';
      n[n.PLN = 17] = 'PLN';
      n[n.CZK = 18] = 'CZK';
      n[n.BGN = 19] = 'BGN';
      n[n.DEM = 20] = 'DEM';
      n[n.FRF = 21] = 'FRF';
      n[n.BEF = 22] = 'BEF';
      n[n.ITL = 23] = 'ITL';
      n[n.NLG = 24] = 'NLG';
      n[n.TRY = 25] = 'TRY';
      n[n.ATS = 26] = 'ATS';
      n[n.FIM = 27] = 'FIM';
      n[n.IEP = 28] = 'IEP';
      n[n.ESP = 29] = 'ESP';
      n[n.PTE = 30] = 'PTE';
      n[n.SCP = 31] = 'SCP';
      n[n.NIP = 32] = 'NIP';
      n[n.MTL = 33] = 'MTL';
      n[n.KWD = 34] = 'KWD';
      n[n.SAR = 35] = 'SAR';
      n[n.JOD = 36] = 'JOD';
      n[n.IQD = 37] = 'IQD';
      n[n.NZD = 38] = 'NZD';
      n[n.ILS = 39] = 'ILS';
      n[n.ISK = 40] = 'ISK';
      n[n.GIP = 41] = 'GIP';
      n[n.SYP = 42] = 'SYP';
      n[n.AED = 43] = 'AED';
      n[n.OMR = 44] = 'OMR';
      n[n.CAF = 45] = 'CAF';
      n[n.WAF = 46] = 'WAF';
      n[n.GRD = 47] = 'GRD';
      n[n.MKD = 48] = 'MKD';
      n[n.RON = 49] = 'RON';
      n[n.PEN = 50] = 'PEN';
      n[n.RUB = 51] = 'RUB';
      n[n.CNY = 52] = 'CNY';
      n[n.SKK = 53] = 'SKK';
      n[n.HRK = 54] = 'HRK';
      n[n.RSD = 55] = 'RSD';
      n[n.THB = 56] = 'THB';
      n[n.KRW = 57] = 'KRW';
      n[n.LTT = 58] = 'LTT';
      n[n.UAH = 59] = 'UAH';
      n[n.TWD = 60] = 'TWD';
      n[n.MYR = 61] = 'MYR';
      n[n.INR = 62] = 'INR'
    }(u || (u = {
    }));
    n.mainModule.filter('CurrencyString', function () {
      return function (n) {
        var t = u;
        return t[parseInt(n)]
      }
    });
    n.mainModule.directive('allowAccess', [
      'RoleService',
      function (n) {
        return {
          restrict: 'A',
          compile: function (t, i) {
            var u = i.allowAccessOp ? i.allowAccessOp : '',
            f = u.toLowerCase() != 'or' && u.toLowerCase() != 'not',
            o = u.toLowerCase() == 'not',
            e = i.allowAccess.split(','),
            r = f ? !0 : !1;
            return e.length == 0 && (e[0] = i.allowAccess),
            t.removeClass('notVisible'),
            {
              pre: function (t, i) {
                n.getPermissionsPromise().then(function () {
                  e.forEach(function (t) {
                    f || o || !n.isAccessAllowed(t) ? f && !n.isAccessAllowed(t) ? r = !1 : o && !n.isAccessAllowed(t) && (r = !0)  : r = !0
                  });
                  r ? i.removeClass('notVisible')  : (i.children().remove(), i.remove())
                })
              }
            }
          }
        }
      }
    ]);
    n.mainModule.directive('allowRoleAccess', [
      'RoleService',
      function (n) {
        return {
          restrict: 'A',
          compile: function (t, i) {
            var u = i.allowRoleAccessOp ? i.allowRoleAccessOp : '',
            f = u.toLowerCase() != 'or' && u.toLowerCase() != 'not',
            o = u.toLowerCase() == 'not',
            e = i.allowRoleAccess.split(','),
            r = f ? !0 : !1;
            return e.length == 0 && (e[0] = i.allowRoleAccess),
            t.removeClass('notVisible'),
            {
              pre: function (t, i) {
                var u = n.getRole();
                e.forEach(function (t) {
                  f || o || !n.isCurrentRole(t) ? f && !n.isCurrentRole(t) ? r = !1 : o && !n.isCurrentRole(t) && (r = !0)  : r = !0
                });
                r ? i.removeClass('notVisible')  : (i.children().remove(), i.remove())
              }
            }
          }
        }
      }
    ]);
    n.mainModule.directive('allowFeature', [
      'RoleService',
      function (n) {
        return {
          restrict: 'A',
          compile: function (t, i) {
            n.hasFeature(i.allowFeature) || (t.children().remove(), t.remove())
          }
        }
      }
    ]);
    n.mainModule.directive('excludeInState', [
      '$state',
      function (n) {
        return {
          restrict: 'A',
          compile: function (t, i) {
            n.current.name === i.excludeInState && (t.children().remove(), t.remove())
          }
        }
      }
    ]);
    n.mainModule.directive('limitTo', [
      '$parse',
      function () {
        return {
          restrict: 'A',
          link: function (n, t, i) {
            var r = i.limitTo;
            i.$observe('limitTo', function (n) {
              n != r && (r = n)
            });
            angular.element(t).on('keypress', function (n) {
              this.value.length == r && n.preventDefault()
            })
          }
        }
      }
    ])
  }(shareddirectives || (shareddirectives = {
  })), function (n) {
    var t;
    (function (t) {
      var u = angular.module('alpha.flux', [
      ]),
      f,
      i,
      r;
      (function () {
      }) (f = t.FluxActionTypes || (t.FluxActionTypes = {
      }));
      i = function () {
        function n() {
          this._storesHolder = [
          ]
        }
        return n.prototype.register = function (n) {
          if (n && n.update) {
            var t = [
            ],
            i = function () {
              t.forEach(function (n) {
                n()
              })
            },
            r = function (n, i) {
              t.push(n);
              i ? n()  : null
            };
            return this._storesHolder.push({
              store: n,
              change: i
            }),
            r
          }
          throw new Error('You should provide a store that has an `update` method.');
        },
        n.prototype.dispatch = function (n) {
          this._storesHolder.length > 0 && this._storesHolder.forEach(function (t) {
            t.store.update(n, t.change)
          })
        },
        n
      }();
      u.service('Dispatcher', i);
      r = function () {
        function t() {
        }
        return t.createAction = function (n) {
          if (angular.isNumber(n)) return function (i) {
            return t.dispatcher.dispatch({
              Type: n,
              Payload: i
            })
          };
          throw new Error('Please, provide action\'s type who exist inside alpha.flux.FluxActionTypes.');
        },
        t.staticConstructor = function () {
          u.factory('FluxAction', function () {
            return function (t, i) {
              n.flux.FluxUtils.createAction(t) (i)
            }
          })
        },
        t.createSubscriber = function (n) {
          return t.dispatcher.register(n)
        },
        t.dispatcher = new i,
        t
      }();
      t.FluxUtils = r;
      r.staticConstructor()
    }) (t = n.flux || (n.flux = {
    }))
  }(alpha || (alpha = {
  })); __assign = this && this.__assign || Object.assign || function (n) {
    for (var t, r, i = 1, u = arguments.length; i < u; i++) {
      t = arguments[i];
      for (r in t) Object.prototype.hasOwnProperty.call(t, r) && (n[r] = t[r])
    }
    return n
  }, function (n) {
    function v(t, i) {
      var u = {
      },
      e = '',
      i = i || '',
      o = '',
      f,
      s = !1,
      r;
      if (t && t.TransferType !== undefined) {
        e = 'Transfer';
        f = t.TransferType;
        s = !0;
        for (r in n.TransferType) if (r === f.toString()) {
          o = n.TransferType[r];
          break
        }
      } else if (t && t.PaymentType !== undefined) {
        e = 'Payment';
        f = t.PaymentType;
        s = !0;
        for (r in n.PaymentType) if (r === f.toString()) {
          o = n.PaymentType[r];
          break
        }
      }
      return s && (u.genericTransactionType = e, u.transactionType = f, u.transactionTypeStringValue = o, u.transactionTitle = i),
      u
    }
    function d(n, e, s, h) {
      var a,
      v,
      l,
      p;
      try {
        a = s === - 1 ? t.SUW + (s + 1)  : t.SUW + (s + 1) + 'of' + h;
        v = f(r.nstate, a);
        alpha.utils.isUndefinedOrNullorWhiteSpace(v) || (l = u(a, v, i.WIZ), l = y(e, s, h, 'submit-success', l), (s === - 1 || s + 1 === h - 1) && (p = (new Date).getTime(), l.wizardInteractionStartTime = c, l.wizardInteractionEndTime = p, l.wizardInteractionDuration = p - c), n.publish(alpha.common.services.AppEventsService.BIApplicationEventTriggered, {
          telemetryClientOperation: o.TEV,
          telemetryName: t.SUW,
          telemetryProps: l
        }))
      } catch (w) {
      }
    }
    function g(n, e, s, h, c) {
      var a,
      v,
      l;
      if (s) try {
        a = h === - 1 ? t.SEW + (h + 1)  : t.SEW + (h + 1) + 'of' + c;
        v = f(r.nstate, a);
        alpha.utils.isUndefinedOrNullorWhiteSpace(v) || (l = u(a, v, i.WIZ), l = y(e, h, c, 'submit-server-error', l), l.serverError = alpha.utils.getErrorMsg(s, 'A generic error has occured.'), n.publish(alpha.common.services.AppEventsService.BIApplicationEventTriggered, {
          telemetryClientOperation: o.TEV,
          telemetryName: t.SEW,
          telemetryProps: l
        }))
      } catch (p) {
      }
    }
    var s,
    b,
    h,
    l,
    p,
    a;
    s = typeof shareddirectives != 'undefined' && shareddirectives.mainModule ? shareddirectives.mainModule : alpha.app;
    var i = {
      CTE: 'CustomAlphaTelemetry',
      PVI: 'PageView',
      NAV: 'Navigation',
      WIZ: 'Wizard',
      NFO: 'NgForm',
      SYS: 'GenericInfo'
    },
    t = {
      VIP: 'PageView',
      STC: 'State.Change.Success',
      SCE: 'State.Change.Error',
      MOA: 'Modal.Appear',
      CLK: 'Click',
      BMA: 'BurgerMenu.Action',
      TOO: 'InfoTooltip',
      SWS: 'Wizard.Show.Step',
      WII: 'Wizard.Interaction',
      ERW: 'Wizard.Error.Step',
      SEW: 'Wizard.ServerError.Step',
      SUW: 'Wizard.Success.Step',
      STW: 'Wizard.Success.Transaction',
      ETW: 'Wizard.Error.Transaction',
      NGF: 'NgForm.Show',
      NGI: 'NgForm.Interaction',
      CSR: 'Application.Boot',
      LOG: 'Log',
      HIJ: 'HtmlInsteadOfJson',
      CAP: 'CustomAlphaPageView',
      CAE: 'CustomAlphaEvent'
    },
    o = {
      TPV: 'TrackPageView',
      TEV: 'TrackEvent'
    },
    w;
    (function (n) {
      n[n.GENERIC_PAYMENT_FROM_CONFIGURATION = 0] = 'GENERIC_PAYMENT_FROM_CONFIGURATION';
      n[n.INTERBANK_CARD_LOAN_PAYMENT = 1] = 'INTERBANK_CARD_LOAN_PAYMENT';
      n[n.ALPHA_CARD_LOAN_PAYMENT = 2] = 'ALPHA_CARD_LOAN_PAYMENT';
      n[n.LMS_PAYMENT = 3] = 'LMS_PAYMENT';
      n[n.LABOR_TICKET = 4] = 'LABOR_TICKET';
      n[n.CONSUMERIST_LOAN_PAYMENT = 5] = 'CONSUMERIST_LOAN_PAYMENT';
      n[n.SPECIAL_PAYMENT = 6] = 'SPECIAL_PAYMENT';
      n[n.E_VOUCHER_ISSUE_AND_PAY = 7] = 'E_VOUCHER_ISSUE_AND_PAY';
      n[n.DCT_ORDERED_AND_ONLINE = 8] = 'DCT_ORDERED_AND_ONLINE';
      n[n.HOUSING_LOAN = 9] = 'HOUSING_LOAN';
      n[n.PUBLIC_IKA_MULTI = 10] = 'PUBLIC_IKA_MULTI';
      n[n.PUBLIC_OAEE_MULTI = 11] = 'PUBLIC_OAEE_MULTI';
      n[n.AXA_PAYMENT = 12] = 'AXA_PAYMENT'
    }) (w = n.PaymentType || (n.PaymentType = {
    })),
    function (n) {
      n[n.WithinALPHA = 0] = 'WithinALPHA';
      n[n.INTERBANK = 1] = 'INTERBANK';
      n[n.INTERBANK_FTS = 2] = 'INTERBANK_FTS';
      n[n.CASH_ADVANCE = 3] = 'CASH_ADVANCE';
      n[n.LOAN_TRANSFER = 4] = 'LOAN_TRANSFER';
      n[n.BONUS_POINTS_TRANSFER = 5] = 'BONUS_POINTS_TRANSFER';
      n[n.DIAS_B2B_ONLINE = 6] = 'DIAS_B2B_ONLINE';
      n[n.DiasMyBank = 7] = 'DiasMyBank';
      n[n.SIMPLE_IMPORTS_CREDIT_ACCOUNT = 10] = 'SIMPLE_IMPORTS_CREDIT_ACCOUNT';
      n[n.SIMPLE_IMPORTS_ISSUE_ORDER = 11] = 'SIMPLE_IMPORTS_ISSUE_ORDER';
      n[n.BOG_TRANSFER = 13] = 'BOG_TRANSFER';
      n[n.FROM_OTHER_BANK = 14] = 'FROM_OTHER_BANK';
      n[n.CARD_TO_CARD = 24] = 'CARD_TO_CARD';
      n[n.SIMPLE_IMPORTS = 23] = 'SIMPLE_IMPORTS'
    }(b = n.TransferType || (n.TransferType = {
    }));
    h = function () {
      function n() {
      }
      return n.EnableSetAuthenticatedUserContext = !0,
      n.SendExceptionToAppInsights = !1,
      n.BITelemetryEnabled = !0,
      n.TelemetryDataVersion = '2.0',
      n
    }();
    n.Constants = h;
    n.enrichTransactionTelemetry = v;
    var r = {
    },
    u = function (n, t, i, r) {
      var u = {
      };
      return r && (u = r),
      u.telemetryAction = n,
      u.telemetryDetails = t,
      u.genericTelemetryCategory = i,
      u
    },
    f = function (n, t) {
      return !alpha.utils.isUndefinedOrNullorWhiteSpace(n) && !alpha.utils.isUndefinedOrNullorWhiteSpace(t) ? '[' + t + ']|[' + n + ']' : null
    },
    k = function () {
      return 'ontouchstart' in window || navigator && navigator.maxTouchPoints > 0 || navigator && navigator.msMaxTouchPoints > 0
    },
    e = function (t, i) {
      try {
        t && t()
      } catch (r) {
        n.Constants.SendExceptionToAppInsights && i.publish(alpha.common.services.AppEventsService.AppInsightsExceptionRaised, r)
      }
    },
    c,
    y = function (n, t, i, r, u) {
      var f = {
      },
      e,
      o;
      return u && (f = u),
      f.action = r,
      f.currentStepIndex = t,
      f.totalWizardSteps = i,
      e = t === - 1 ? '100' : ((t + 1) / i * 100).toFixed(2),
      f.wizardCompletionPercent = e,
      n.vm && n.vm.Model && (o = v(n.vm.Model, n.vm.Title), f = __assign({
      }, f, o)),
      f
    };
    n.tryPublishWizardSuccessfulStepForwardChangeForBITelemetry = d;
    n.tryPublishServerErrorOnNextStepForBITelemetry = g;
    s.provider('analytics', function () {
      function c(n) {
        function r(n) {
          t[n] = function () {
            var i = arguments;
            t.queue.push(function () {
              t[n].apply(t, i)
            })
          }
        }
        var t = {
          config: n
        },
        u = document,
        e = window,
        o = 'script',
        s = u.createElement(o),
        i,
        f;
        for (s.src = n.url || '//az416426.vo.msecnd.net/scripts/a/ai.0.js', u.getElementsByTagName(o) [0].parentNode.appendChild(s), t.cookie = u.cookie, t.queue = [
        ], i = [
          'Event',
          'Exception',
          'Metric',
          'PageView',
          'Trace'
        ]; i.length; ) r('track' + i.pop());
        return r('setAuthenticatedUserContext'),
        r('clearAuthenticatedUserContext'),
        n.disableExceptionTracking || (i = 'onerror', r('_' + i), f = e[i], e[i] = function (n, r, u, e, o) {
          var s = f && f(n, r, u, e, o);
          return s !== !0 && t['_' + i](n, r, u, e, o),
          s
        }),
        t
      }
      var o = $('meta[name=Server]'),
      s = $('meta[name^="prop_"]'),
      e = null,
      l = function (n) {
        var t = n.data.baseData,
        i;
        t.properties = t.properties || {
        };
        for (i in r) t.properties[i] = r[i]
      },
      a = {
        trackPageView: function () {
          if (e && e.trackPageView) try {
            e.trackPageView.apply(e, arguments)
          } catch (n) {
          }
        },
        trackAlphaPageView: function (o, s, h, c) {
          var l,
          a,
          v;
          if (e && e.trackPageView) try {
            l = alpha.utils.isUndefinedOrNullorWhiteSpace(s) ? o : o + ': ' + s;
            a = f(r.nstate, l);
            alpha.utils.isUndefinedOrNullorWhiteSpace(a) || (v = u(l, a, i.CTE, h), e.trackPageView.apply(e, [
              t.CAP,
              v,
              c
            ]))
          } catch (y) {
            e.trackException && n.Constants.SendExceptionToAppInsights && e.trackException.apply(e, [
              y
            ])
          }
        },
        trackEvent: function () {
          if (e && e.trackEvent) try {
            e.trackEvent.apply(e, arguments)
          } catch (n) {
          }
        },
        trackAlphaEvent: function (o, s, h) {
          var c,
          l;
          if (e && e.trackEvent) try {
            c = f(r.nstate, o);
            alpha.utils.isUndefinedOrNullorWhiteSpace(c) || (l = u(o, c, i.CTE, s), e.trackEvent.apply(e, [
              t.CAE,
              l,
              h
            ]))
          } catch (a) {
            e.trackException && n.Constants.SendExceptionToAppInsights && e.trackException.apply(e, [
              a
            ])
          }
        },
        trackDependencyData: function (t) {
          if (e && e.context.track) try {
            var r = new Microsoft.ApplicationInsights.Telemetry.Common.Data(Microsoft.ApplicationInsights.Telemetry.RemoteDependencyData.dataType, t),
            i = new Microsoft.ApplicationInsights.Telemetry.Common.Envelope(r, Microsoft.ApplicationInsights.Telemetry.RemoteDependencyData.envelopeType);
            alpha.utils.isUndefinedOrNullorWhiteSpace(i) || e.context.track(i)
          } catch (u) {
            e.trackException && n.Constants.SendExceptionToAppInsights && e.trackException.apply(e, [
              u
            ])
          }
        },
        trackMetric: function () {
          if (e && e.trackMetric) try {
            e.trackMetric.apply(e, arguments)
          } catch (n) {
          }
        },
        trackException: function () {
          if (e && e.trackException) try {
            e.trackException.apply(e, arguments)
          } catch (n) {
          }
        },
        trackTrace: function () {
          if (e && e.trackTrace) try {
            e.trackTrace.apply(e, arguments)
          } catch (n) {
          }
        },
        setAuthenticatedUserContext: function () {
          if (e && e.setAuthenticatedUserContext) try {
            e.setAuthenticatedUserContext.apply(e, arguments)
          } catch (n) {
          }
        },
        clearAuthenticatedUserContext: function () {
          if (e && e.clearAuthenticatedUserContext) try {
            e.clearAuthenticatedUserContext.apply(e, arguments)
          } catch (n) {
          }
        },
        setProp: function (n, t) {
          r[n] = t
        }
      };
      this.start = function (n, t, i, u) {
        var f,
        v,
        a;
        if (n && n != '') {
          for (r.server = o.attr('content'), f = 0; f < s.length; f++) v = $(s[f]),
          r[v.attr('name')] = v.attr('content');
          var w = i || !1,
          y = 100,
          p = r.prop_App;
          if (p) switch (p) {
            case 'mbD':
            case 'cbD':
            case 'wbD':
              y = 100;
              break;
            case 'mb':
            case 'cb':
            case 'wb':
            case 'mp':
            case 'ph':
              y = 100;
              break;
            default:
              y = 100
          }
          return a = {
            instrumentationKey: n,
            autoTrackPageVisitTime: !0,
            disableCorrelationHeaders: !1,
            disableTelemetry: w,
            disableAjaxTracking: !0
        },
        t && t != '' && (a.appId = t),
        u && u != '' && (a.endpointUrl = u),
        window.appInsights = e = c(a),
        e.queue.push(function () {
          e.context.addTelemetryInitializer(l)
        }),
        e.queue.push(function () {
          e.context.addTelemetryInitializer(function (n) {
            var t = n.data.baseData;
            t.properties = t.properties || {
            };
            t.properties.isTouchDevice = k();
            var i = window,
            r = document,
            u = r ? r.documentElement : null,
            f = r ? r.body : null,
            e = i && i.innerWidth || u && u.clientWidth || f && f.clientWidth,
            o = i && i.innerHeight || u && u.clientHeight || f && f.clientHeight;
            t.properties.browserWidth = e ? e : '{{undefined}}';
            t.properties.browserHeight = o ? o : '{{undefined}}';
            t.properties.telemetryDataVersion = h.TelemetryDataVersion
          })
        }),
        e.queue.push(function () {
          e.context.addTelemetryInitializer(function (n) {
            n.tags['ai.cloud.role'] = 'myAlpha Web';
            n.tags['ai.cloud.roleInstance'] || (n.tags['ai.cloud.roleInstance'] = o.attr('content'))
          })
        }),
        !0
      }
      return !1
    };
    this.$get = function () {
      return a
    }
  }); s.directive('analytics', [
    '$rootScope',
    '$location',
    'analytics',
    'AppEventsService',
    function (n, s, c, l) {
      return {
        restrict: 'EA',
        link: function (s, a, v) {
          h.EnableSetAuthenticatedUserContext && e(function () {
            var n = function (n) {
              if (n === void 0 && (n = null), alpha.utils.isUndefinedOrNullorWhiteSpace(n)) {
                var t = $('meta[name=BII]').attr('content');
                alpha.utils.isUndefinedOrNullorWhiteSpace(t) || c.setAuthenticatedUserContext(t.replace(/[,;=| ]+/g, '_'), null, !0)
              } else c.setAuthenticatedUserContext(n.replace(/[,;=| ]+/g, '_'), null, !0)
            },
            t = $('meta[name=prop_App]').attr('content');
            [
              'wb',
              'wbD',
              'cb',
              'cbD',
              'mb',
              'mbD'
            ].indexOf(t) > - 1 ? n()  : l.subscribe(alpha.common.services.AppEventsService.MAWLoginSuccessTriggered, function (t, i) {
              n(i)
            })
          }, l);
          v && v.enableDarkThemeTrack === 'true' && n.$watch(function () {
            return n.darken
          }, function (n, t) {
            n || t ? n != t && c.setProp('isDarkThemeSelected', n)  : c.setProp('isDarkThemeSelected', 'false')
          });
          e(function () {
            var r = t.CSR,
            e = i.SYS,
            o = f(e, r),
            n;
            alpha.utils.isUndefinedOrNullorWhiteSpace(o) || (n = u(r, o, e), n.screenWidth = screen ? screen.width : '{{undefined}}', n.screenHeight = screen ? screen.height : '{{undefined}}', c.trackEvent(r, n))
          }, l);
          n.$on('$stateChangeSuccess', function (n, r, e, s) {
            var h,
            a;
            r || (r = {
              name: ''
            });
            s || (s = {
              name: ''
            });
            c.setProp('nstate', r.name);
            var v = t.VIP,
            p = f(r.name, v),
            y = t.STC,
            w = f(r.name, y);
            alpha.utils.isUndefinedOrNullorWhiteSpace(p) || (h = u(v, p, i.PVI), h.toStateUrl = r.url, h.toStateName = r.name, l.publish(alpha.common.services.AppEventsService.BIApplicationEventTriggered, {
              telemetryClientOperation: o.TPV,
              telemetryName: v,
              telemetryProps: h,
              toStateName: r.name
            }));
            alpha.utils.isUndefinedOrNullorWhiteSpace(w) || (a = u(y, w, i.NAV), a.from = s.name, a.to = r.name, l.publish(alpha.common.services.AppEventsService.BIApplicationEventTriggered, {
              telemetryClientOperation: o.TEV,
              telemetryName: y,
              telemetryProps: a
            }))
          });
          l.subscribe(alpha.common.services.AppEventsService.AppInsightsExceptionRaised, function (n, t) {
            e(function () {
              t && c.trackException(t)
            }, l)
          });
          l.subscribe(alpha.common.services.AppEventsService.WizardStepChanged, function (n, o) {
            e(function () {
              var h;
              if (o) {
                var n = o,
                l = n.currentStepIndex,
                e = t.SWS + (l + 1) + 'of' + n.totalWizardSteps,
                s = f(r.nstate, e);
                alpha.utils.isUndefinedOrNullorWhiteSpace(s) || (h = u(e, s, i.NAV, n), c.trackEvent(t.SWS, h))
              }
            }, l)
          });
          l.subscribe(alpha.common.services.AppEventsService.BurgerMenuActionClicked, function (n, o) {
            e(function () {
              var n,
              e,
              s;
              o && (n = t.BMA, e = f(r.nstate, n), alpha.utils.isUndefinedOrNullorWhiteSpace(e) || (s = u(n, e, i.NAV, o), c.trackEvent(n, s)))
            }, l)
          });
          l.subscribe(alpha.common.services.AppEventsService.InfoTooltipShowed, function (n, o) {
            e(function () {
              var n,
              e,
              s;
              o && (n = t.TOO, e = f(r.nstate, n), alpha.utils.isUndefinedOrNullorWhiteSpace(e) || (s = u(n, e, i.NAV, o), c.trackEvent(n, s)))
            }, l)
          });
          l.subscribe(alpha.common.services.AppEventsService.StateChangeErrorEvent, function (n, r) {
            e(function () {
              var n,
              e,
              o;
              r && (n = t.SCE, e = f(r.fromState, n), alpha.utils.isUndefinedOrNullorWhiteSpace(e) || (o = u(n, e, i.NAV, r), c.trackEvent(n, o)))
            }, l)
          });
          l.subscribe(alpha.common.services.AppEventsService.DonutProductInfoShowEvent, function (n, o) {
            e(function () {
              var n,
              a;
              if (o) {
                var e = t.CLK,
                s = 'ProductDonut',
                h = s + e,
                l = f(r.nstate, h);
                alpha.utils.isUndefinedOrNullorWhiteSpace(l) || (n = o, n.trackValue = s, n.trackAction = e, a = u(h, l, i.NAV, n), c.trackEvent(e, a))
              }
            }, l)
          });
          l.subscribe(alpha.common.services.AppEventsService.TransactionEndResultTriggered, function (n, o) {
            e(function () {
              var n,
              e,
              s;
              o && (n = o.isTransactionSuccessful ? t.STW : t.ETW, e = f(r.nstate, n), alpha.utils.isUndefinedOrNullorWhiteSpace(e) || (s = u(n, e, i.WIZ, o), c.trackEvent(n, s)))
            }, l)
          });
          l.subscribe(alpha.common.services.AppEventsService.LogoutTriggered, function () {
            e(function () {
              c.clearAuthenticatedUserContext()
            }, l)
          });
          l.subscribe(alpha.common.services.AppEventsService.TimerExpired_Event, function () {
            e(function () {
              c.clearAuthenticatedUserContext()
            }, l)
          });
          l.subscribe(alpha.common.services.AppEventsService.ClientIPChanged_Event, function () {
            e(function () {
              c.clearAuthenticatedUserContext()
            }, l)
          });
          l.subscribe(alpha.common.services.AppEventsService.AbWcfDependency, function (n, t) {
            e(function () {
              if (t) {
                var r = t.requestMethod,
                a = t.requestUrl,
                u = t.requestUrlWithParams,
                f = t.success,
                e = t.resultCode,
                o = t.totalTime,
                s = t.dependencyId,
                i = t.correlationId,
                h = t.requestUniqueIdentifier,
                l = document.location.protocol + '//' + document.location.host + '/' + u,
                n = new Microsoft.ApplicationInsights.Telemetry.RemoteDependencyData(s, l, r + ' ' + u, o, f, e, r);
                n.properties || (n.properties = {
                });
                n.properties.uniqueIdentifier = h;
                i && i !== '' && (n.target = n.target + ' | ' + i);
                c.trackDependencyData(n)
              }
            }, l)
          });
          l.subscribe(alpha.common.services.AppEventsService.BIApplicationEventTriggered, function (n, t) {
            e(function () {
              if (t && t.telemetryName && t.telemetryProps && t.telemetryClientOperation) switch (t.telemetryClientOperation) {
                case o.TPV:
                  t.toStateName && c.trackPageView(t.telemetryName, t.toStateName, t.telemetryProps);
                  break;
                case o.TEV:
                  c.trackEvent(t.telemetryName, t.telemetryProps)
              }
            },
            l)
          })
        }
      }
    }
    ]); s.config(['analyticsProvider',
    '$provide',
    '$httpProvider',
    function (s, h, a) {
      var p = $('meta[name=AnalyticsId]').attr('content'),
      v = $('meta[name=ApplicationId]').attr('content'),
      w = $('meta[name=AiBrowserEndPointAddress]').attr('content'),
      y = !1;
      ($('meta[name=DisableBrowserAppInsights]').attr('content') == 'True' || $('meta[name=DisableBrowserAppInsights]').attr('content') == 'true') && (y = !0);
      s.start(p, v, y, w) && (n.Constants.BITelemetryEnabled && (h.decorator('formDirective', [
        '$delegate',
        'analytics',
        'AppEventsService',
        function (s, h, l) {
          var a = s[0],
          v = a.compile;
          return a.priority = 1001,
          a.compile = function () {
            var s = v.apply(this, arguments);
            return {
              pre: function () {
                s.pre && s.pre.apply(this, arguments)
              },
              post: function (h, a, v, y) {
                s.post && s.post.apply(this, arguments);
                e(function () {
                  var p = - 1,
                  s = 1,
                  a,
                  w,
                  v,
                  b,
                  e,
                  k;
                  if (c = null, a = '', h.vm && h.vm.CurrentStepIndex >= 0 ? (h.vm.Steps && (s = h.vm.Steps.length), p = h.vm.CurrentStepIndex, a = t.SWS + (p + 1) + 'of' + s)  : a = t.SWS + (p + 1), w = f(r.nstate, a), alpha.utils.isUndefinedOrNullorWhiteSpace(w) || (v = u(a, w, i.NAV), v.currentStepIndex = p, h.vm && h.vm.Model && (b = n.enrichTransactionTelemetry(h.vm.Model, h.vm.Title), v = __assign({
                  }, v, b)), l.publish(alpha.common.services.AppEventsService.BIApplicationEventTriggered, {
                    telemetryClientOperation: o.TEV,
                    telemetryName: t.SWS,
                    telemetryProps: v
                  })), e = null, e = y && y.length ? y[0] : y, e) {
                    k = h.$watch(function () {
                      return e.$dirty
                    }, function (e) {
                      var a,
                      v,
                      s,
                      y;
                      e && (k(), a = t.WII, v = f(r.nstate, a), alpha.utils.isUndefinedOrNullorWhiteSpace(v) || (c = (new Date).getTime(), s = u(a, v, i.WIZ), s.$dirty = 'true', h.vm && h.vm.Model && (y = n.enrichTransactionTelemetry(h.vm.Model, h.vm.Title), s = __assign({
                      }, s, y)), l.publish(alpha.common.services.AppEventsService.BIApplicationEventTriggered, {
                        telemetryClientOperation: o.TEV,
                        telemetryName: a,
                        telemetryProps: s
                      })))
                    });
                    $('form[name="' + e.$name + '"]').on('submit', function () {
                      var a = - 1,
                      d,
                      p,
                      w,
                      v,
                      y,
                      g,
                      b,
                      k,
                      c,
                      nt;
                      if (h.BICurrentStepIndex >= 0 && (a = h.BICurrentStepIndex), h.BIStepsLength >= 0 && (s = h.BIStepsLength), d = a === - 1 ? '100' : ((a + 1) / s * 100).toFixed(2), e.$invalid) {
                        p = [
                        ];
                        w = '';
                        for (v in e.$error) for (y = 0; y < e.$error[v].length; y++) g = {
                          validationRule: v,
                          propertyName: e.$error[v][y].$name
                        },
                        p.push(g);
                        w = JSON.stringify({
                          errors: p
                        });
                        b = a === - 1 ? t.ERW + (a + 1)  : t.ERW + (a + 1) + 'of' + s;
                        k = f(r.nstate, b);
                        alpha.utils.isUndefinedOrNullorWhiteSpace(k) || (c = u(b, k, i.WIZ), c.action = 'submit-error', c.errors = w, c.currentStepIndex = a, c.totalWizardSteps = s, c.wizardCompletionPercent = d, h.vm && h.vm.Model && (nt = n.enrichTransactionTelemetry(h.vm.Model, h.vm.Title), c = __assign({
                        }, c, nt)), l.publish(alpha.common.services.AppEventsService.BIApplicationEventTriggered, {
                          telemetryClientOperation: o.TEV,
                          telemetryName: t.ERW,
                          telemetryProps: c
                        }))
                      }
                    })
                  }
                }, l)
              }
            }
          },
          s
        }
      ]), h.decorator('ngFormDirective', [
        '$delegate',
        'analytics',
        'AppEventsService',
        function (n, s, h) {
          var c = n[0],
          l = c.compile;
          return c.priority = 1001,
          c.compile = function () {
            var n = l.apply(this, arguments);
            return {
              pre: function () {
                n.pre && n.pre.apply(this, arguments)
              },
              post: function (s, c, l, a) {
                n.post && n.post.apply(this, arguments);
                e(function () {
                  var e = t.NGF,
                  c = f(r.nstate, e),
                  l,
                  n,
                  v;
                  alpha.utils.isUndefinedOrNullorWhiteSpace(c) || (l = u(e, c, i.NFO), h.publish(alpha.common.services.AppEventsService.BIApplicationEventTriggered, {
                    telemetryClientOperation: o.TEV,
                    telemetryName: e,
                    telemetryProps: l
                  }));
                  n = null;
                  n = a && a.length ? a[0] : a;
                  n && (v = s.$watch(function () {
                    return n.$dirty
                  }, function (n) {
                    var e,
                    s,
                    c;
                    n && (v(), e = t.NGI, s = f(r.nstate, e), alpha.utils.isUndefinedOrNullorWhiteSpace(s) || (c = u(e, s, i.NFO), c.$dirty = 'true', h.publish(alpha.common.services.AppEventsService.BIApplicationEventTriggered, {
                      telemetryClientOperation: o.TEV,
                      telemetryName: e,
                      telemetryProps: c
                    })))
                  }))
                }, h)
              }
            }
          },
          n
        }
      ]), h.decorator('$modal', [
        '$delegate',
        'analytics',
        'AppEventsService',
        function (n, s, h) {
          var c = n.open;
          return n.open = function (n) {
            var s = c.apply(this, arguments);
            return s.opened.then(function () {
              e(function () {
                var e = t.MOA,
                c = f(r.nstate, e),
                s;
                alpha.utils.isUndefinedOrNullorWhiteSpace(c) || (s = u(e, c, i.NAV), s.modalTemplateUrl = n.templateUrl, h.publish(alpha.common.services.AppEventsService.BIApplicationEventTriggered, {
                  telemetryClientOperation: o.TEV,
                  telemetryName: e,
                  telemetryProps: s
                }))
              }, h)
            }),
            s
          },
          n
        }
      ]), h.decorator('ngClickDirective', [
        '$delegate',
        'analytics',
        'AppEventsService',
        function (n, s, h) {
          var c = n[0].compile;
          return n[0].compile = function () {
            var n = c.apply(this, arguments);
            return function (s, c, l) {
              return e(function () {
                var n = function () {
                  var s = l.biTrack,
                  e = t.CLK,
                  c = s + e,
                  a = f(r.nstate, c),
                  n;
                  alpha.utils.isUndefinedOrNullorWhiteSpace(a) || (n = u(c, a, i.NAV), n.trackValue = s, n.trackAction = e, h.publish(alpha.common.services.AppEventsService.BIApplicationEventTriggered, {
                    telemetryClientOperation: o.TEV,
                    telemetryName: e,
                    telemetryProps: n
                  }))
                };
                l.biTrack !== undefined && (c.bind('click', n), s.$on('$destroy', function () {
                  c.unbind('click', n)
                }))
              }, h),
              n.apply(this, arguments)
            }
          },
          n
        }
      ])), h.decorator('$exceptionHandler', [
        '$delegate',
        'analytics',
        function (n, t) {
          return function (i, r) {
            '[object Error]' === Object.prototype.toString.call(i) && (n(i, r), t.trackException(i))
          }
        }
      ]), h.decorator('$log', [
        '$delegate',
        'analytics',
        function (n, r) {
          var e,
          o;
          for (e in {
            warn: '',
            error: ''
          }) o = n[e],
          n[e] = function () {
            if (arguments.length > 0) {
              var s = t.LOG,
              c = f('log ' + e, s),
              h = u(s, c, i.SYS);
              h.message = arguments[0];
              r.trackEvent(s, h)
            }
            o.apply(n, arguments)
          };
          return n
        }
      ]), a.interceptors.push(['$q',
      'analytics',
      'AppEventsService',
      function (n, r, e) {
        return {
          request: function (n) {
            if (n.method == 'POST' && window.appInsights && window.appInsights.context && window.appInsights.context.operation) {
              var t = window.appInsights.context.operation.id,
              i = '|' + t + '.' + Microsoft.ApplicationInsights.UtilHelpers.newId();
              n.requestStartTime = (new Date).getTime();
              n.headers['Request-Id'] = i;
              n.headers['Request-Context'] = 'appId=cid-v1:' + v;
              n.headers['x-ms-request-root-id'] = t  // NOTE check here
            }
            return n
          },
          response: function (n) {
            var p,
            s,
            h,
            c,
            o,
            y,
            v;
            if (n.config && n.config.method == 'POST') {
              p = n.data;
              try {
                if (n.headers('Content-Type') == 'text/html; charset=UTF-8') {
                  if (s = 'no id found', n.data) for (h = /<p>([^<]*)<\/p>/gim, c = void 0, s = ''; (c = h.exec(n.data)) !== null; ) c.index === h.lastIndex && h.lastIndex++,
                  s += c[1];
                  o = {
                    status: n.status,
                    statusText: n.statusText,
                    method: 'missing config!',
                    url: '',
                    uid: null,
                    impId: s
                  };
                  n.config ? (o.method = n.config.method, o.url = n.config.url)  : document.location && (o.url = document.location.href);
                  n.config && n.config.data && n.config.data.UniqueIdentifier && (o.uid = n.config.data.UniqueIdentifier);
                  var a = t.HIJ,
                  w = f(o.url, a),
                  b = u(a, w, i.SYS, o);
                  r.trackEvent(a, b)
                }
                n.config.requestStartTime && n.config.headers['Request-Id'] && (y = {
                  requestMethod: n.config.method,
                  requestParams: n.config.params,
                  requestUrl: n.config.url,
                  requestUrlWithParams: n.config.url,
                  requestUniqueIdentifier: n.config.data && n.config.data.UniqueIdentifier
                }, v = '', n.headers != null && (v = l(n.headers('Request-Context'))), e.tryPublish(alpha.common.services.AppEventsService.AbWcfDependency, __assign({
                }, y, {
                  success: !0,
                  resultCode: n.status,
                  error: null,
                  totalTime: (new Date).getTime() - n.config.requestStartTime,
                  dependencyId: n.config.headers['Request-Id'],
                  correlationId: v
                })))
              } catch (k) {
              }
            }
            return n
          },
          responseError: function (t) {
            var i,
            f,
            u;
            try {
              i = {
                status: t.status,
                statusText: t.statusText,
                method: 'missing config!',
                url: '',
                uid: null
              };
              t.config ? (i.method = t.config.method, i.url = t.config.url)  : document.location && (i.url = document.location.href);
              t.config && t.config.data && t.config.data.UniqueIdentifier && (i.uid = t.config.data.UniqueIdentifier);
              t.status != 401 && t.status != 403 && r.trackException('Http Response Error', null, i);
              t.config && t.config.method == 'POST' && t.config.requestStartTime && t.config.headers['Request-Id'] && (f = {
                requestMethod: t.config.method,
                requestParams: t.config.params,
                requestUrl: t.config.url,
                requestUrlWithParams: t.config.url,
                requestUniqueIdentifier: t.config.data && t.config.data.UniqueIdentifier
              }, u = '', t.headers != null && (u = l(t.headers('Request-Context'))), e.tryPublish(alpha.common.services.AppEventsService.AbWcfDependency, __assign({
              }, f, {
                success: !1,
                resultCode: t.status,
                error: t,
                totalTime: (new Date).getTime() - t.config.requestStartTime,
                dependencyId: t.config.headers['Request-Id'],
                correlationId: u
              })))
            } catch (o) {
            }
            return n.reject(t)
          }
        }
      }
      ]))
    }
    ]); l = function (n) {
      if (n) {
        var t = p(n, 'appId');
        if (t && t !== 'cid-v1:') return t
      }
    }; p = function (n, t) {
      var u,
      i,
      r;
      if (n) for (u = n.split(','), i = 0; i < u.length; ++i) if (r = u[i].split('='), r.length === 2 && r[0] === t) return r[1]
    }; h.BITelemetryEnabled && (a = function (n) {
      return {
        restrict: 'EA',
        link: function (t, i, r) {
          var u = function () {
            e(function () {
              var t = r ? r.tooltip || r.tooltipHtmlUnsafe : null;
              alpha.utils.isUndefinedOrNullorWhiteSpace(t) || n.tryPublish(alpha.common.services.AppEventsService.InfoTooltipShowed, {
                infoText: t.substr(0, 1024)
              })
            }, n)
          };
          e(function () {
            if (r) {
              var n = r.tooltipTrigger || 'mouseenter';
              i.bind(n, u);
              t.$on('$destroy', function () {
                i.unbind(n, u)
              })
            }
          }, n)
        }
      }
    }, s.directive('tooltip', [
      'AppEventsService',
      a
    ]), s.directive('tooltipHtmlUnsafe', [
      'AppEventsService',
      a
    ]), s.directive('biBanner', [
      'AppEventsService',
      function (n) {
        return {
          restrict: 'A',
          scope: {
            biBannerSrc: '@biBanner'
          },
          link: function (s, h, c) {
            var l = function () {
              e(function () {
                var l = 'Banner',
                h = t.CLK,
                a = l + h,
                v = f(r.nstate, a),
                e;
                alpha.utils.isUndefinedOrNullorWhiteSpace(v) || (e = u(a, v, i.NAV, {
                  bannerSrc: s && s.biBannerSrc,
                  bannerMenuPath: c && c.uiSref
                }), e.trackValue = l, e.trackAction = h, n.publish(alpha.common.services.AppEventsService.BIApplicationEventTriggered, {
                  telemetryClientOperation: o.TEV,
                  telemetryName: h,
                  telemetryProps: e
                }))
              }, n)
            };
            e(function () {
              c && c.biBanner && c.uiSref && s && s.biBannerSrc && (h.bind('click', l), s.$on('$destroy', function () {
                h.unbind('click', l)
              }))
            }, n)
          }
        }
      }
    ]))
  }(AppInsights || (AppInsights = {
  })), function (n) {
    n.dynamicfields = angular.module('dynamicfieldsdirective', [
    ]);
    n.dynamicfields.directive('dynamicFields', function () {
      return {
        restrict: 'A',
        templateUrl: 'templates/common/directives/dynamicFields',
        replace: !0,
        scope: {
          fields: '=',
          vm: '='
        },
        controller: [
          '$scope',
          'PaymentTypeService',
          function (n, t) {
            n.getFieldTemplate = function (n) {
              return t.getFieldTypeTemplate(n)
            }
          }
        ]
      }
    });
    n.dynamicfields.directive('dynamicFieldsEb', function () {
      return {
        restrict: 'EA',
        templateUrl: 'templates/common/directives/dynamicFields',
        replace: !0,
        scope: !0
      }
    });
    n.dynamicfields.directive('localizedFields', [
      '$upload',
      function () {
        return {
          restrict: 'A',
          templateUrl: 'templates/common/directives/localizedContentFields',
          scope: {
            content: '=',
            contentGroup: '@'
          },
          controller: [
            '$scope',
            '$templateCache',
            '$attrs',
            '$modal',
            function (n, t, i, r) {
              var u = i.promptClass || 'col-md-2',
              f = i.inputClass || 'col-md-4';
              n.$watch('content', function () {
                n.content && n.content.forEach(function (n) {
                  n && (n.promptClass = u, n.inputClass = f, n.isVisibleforGroup = function (n) {
                    return this.EditFormInfo ? n ? n == this.EditFormInfo.FieldGroup : !0 : !1
                  })
                })
              });
              n.templates = {
              };
              n.templates.Text = '<input name required maxlength inputCheck ng-model="lcField.PropertyValue" type="text" class="form-control" placeholder="{{lcField.EditFormInfo.Prompt}}" data-val-tip data-required-error="Υποχρεωτικό πεδίο" />';
              n.templates.TextArea = '<textarea name required inputCheck patternsMsg data-val-tip data-required-error="Υποχρεωτικό πεδίο" ng-model="lcField.PropertyValue" rows="3" maxlength="500" class="form-control" ></textarea>';
              n.templates.File = '<div class="form-control"><input name required type="file" ng-file-select="onFileSelect($files,lcField)" multiple accept="image/*" onclick="this.value=null" data-ng-model="lcField.PropertyValue" data-val-tip="" data-required-error="Υποχρεωτικό πεδίο"/></div><div class="form-control" data-ng-show="lcField.PropertyValue"><button type="button" data-ng-click="filePreview(lcField);">preview</button></div><div class="form-control" data-ng-show="lcField.PropertyValue"><button type="button" data-ng-click="deleteFile(lcField);">Delete</button></div>';
              n.templates.Html = '<div text-angular name required inputCheck patternsMsg data-val-tip data-required-error="Υποχρεωτικό πεδίο" ng-model="lcField.PropertyValue"></div>';
              n.getFieldTypeTemplate = function (i) {
                var r = n.templates[i.EditFormInfo.Template],
                u = 'dynamicField_' + i.PropertyName + '_' + i.Locale,
                f;
                return i.EditFormInfo.IsRequired || (r = r.replace('required', '')),
                r = i.EditFormInfo.MaxLength ? r.replace('maxlength', 'maxlength="' + i.EditFormInfo.MaxLength + '"')  : r.replace('maxlength', ''),
                i.EditFormInfo.InputCheck && (r = r.replace('inputCheck', i.EditFormInfo.InputCheck)),
                t.get(u) || (f = 'name="' + u + '"', r = r.replace('name', f), t.put(u, r)),
                u
              };
              n.onFileSelect = function (n, t) {
                if (n != null && n.length > 0) {
                  var i = new FileReader;
                  i.onload = function () {
                    t.PropertyValue = i.result
                  };
                  i.readAsDataURL(n[0])
                } else t.PropertyValue = null
              };
              n.filePreview = function (n) {
                r.open({
                  templateUrl: 'templates/common/directives/blobPreview',
                  resolve: {
                    selectedContent: function () {
                      return n
                    }
                  },
                  controller: [
                    '$scope',
                    '$modalInstance',
                    'selectedContent',
                    function (n, t, i) {
                      n.selectedContent = i;
                      n.close = function () {
                        t.dismiss()
                      }
                    }
                  ]
                })
              };
              n.deleteFile = function (n) {
                n.PropertyValue = ''
              }
            }
          ]
        }
      }
    ])
  }(dynamicfieldsdirective || (dynamicfieldsdirective = {
  })), function () {
    'use strict';
    var n = function () {
      function n(n, t, i, r, u, f, e, o) {
        var s = this;
        this.$compile = n;
        this.$templateCache = t;
        this.$http = i;
        this.$injector = r;
        this.$parse = u;
        this.$interpolate = f;
        this.STRINGS = e;
        this.$filter = o;
        this.require = '?^form';
        this.priority = 1500;
        this.restrict = 'A';
        this.errorsTemplateUrl = 'Templates/common/directives/input-validation-tip';
        this.compile = function (n, t) {
          var i = [
            {
              key: 'required',
              message: angular.isDefined(t.requiredError) ? t.requiredError : s.STRINGS['valtip.required']
            },
            {
              key: 'minlength',
              message: angular.isDefined(t.minLengthError) ? t.minLengthError : s.STRINGS['valtip.atLeastLong'] + t.ngMinlength + s.STRINGS['valtip.charactersLong']
            },
            {
              key: 'maxlength',
              message: angular.isDefined(t.maxLengthError) ? t.maxLengthError : s.STRINGS['valtip.nolongerthan'] + t.ngMaxlength + s.STRINGS['valtip.characters']
            },
            {
              key: 'pattern',
              message: angular.isDefined(t.patternError) ? t.patternError : s.STRINGS['valtip.fieldsIncorrect']
            },
            {
              key: 'email',
              message: angular.isDefined(t.emailError) ? t.emailError : s.STRINGS['valtip.email']
            },
            {
              key: 'unique',
              message: angular.isDefined(t.uniqueError) ? t.uniqueError : s.STRINGS['valtip.uniqueError']
            },
            {
              key: 'maxTags',
              message: angular.isDefined(t.maxTagsError) ? t.maxTagsError : s.STRINGS['valtip.maxAllowedTags'] + (t.maxTags || '') + '.'
            },
            {
              key: 'minTags',
              message: angular.isDefined(t.minTagsError) ? t.minTagsError : s.STRINGS['valtip.minAllowedTags'] + (t.minTags || '') + '.'
            },
            {
              key: 'leftoverText',
              message: angular.isDefined(t.leftoverTextError) ? t.leftoverTextError : s.STRINGS['valtip.leftoverText']
            },
            {
              key: 'number',
              message: angular.isDefined(t.numberError) ? t.numberError : s.STRINGS['valtip.isNotAnumber']
            },
            {
              key: 'pwmatch',
              message: angular.isDefined(t.pwmatchError) ? t.pwmatchError : s.STRINGS['valtip.PasswordDontMatch']
            },
            {
              key: 'float',
              message: angular.isDefined(t.floatError) ? t.floatError : s.STRINGS['valtip.isNotAnumber']
            },
            {
              key: 'minval',
              message: angular.isDefined(t.minvalError) ? t.minvalError : s.STRINGS['error.message.minval'] + t.min
            },
            {
              key: 'maxval',
              message: angular.isDefined(t.maxvalError) ? t.maxvalError : s.STRINGS['error.message.maxval'] + t.max
            },
            {
              key: 'sameacc',
              message: angular.isDefined(t.sameaccError) ? t.sameaccError : s.STRINGS['valtip.sameacc']
            },
            {
              key: 'difcurrency',
              message: angular.isDefined(t.difcurrencyError) ? t.difcurrencyError : s.STRINGS['valtip.difcurrency']
            },
            {
              key: 'weekdays',
              message: angular.isDefined(t.weekdaysError) ? t.weekdaysError : s.STRINGS['valtip.weekdays']
            },
            {
              key: 'futuredate',
              message: angular.isDefined(t.futuredateError) ? t.futuredateError : s.STRINGS['valtip.futuredate']
            },
            {
              key: 'loantype',
              message: angular.isDefined(t.loantypeError) ? t.loantypeError : s.STRINGS['valtip.loanNumberNotCorrect']
            },
            {
              key: 'validatePasswordPattern',
              message: s.STRINGS['valtip.passwordPattern']
            },
            {
              key: 'validateInternationalIban',
              message: angular.isDefined(t.validateInternationalIbanError) ? t.validateInternationalIbanError : s.STRINGS['valtip.IBANNotCorrect']
            },
            {
              key: 'min',
              message: angular.isDefined(t.minError) ? t.minError : s.STRINGS['valtip.nolessthan'] + t.min
            },
            {
              key: 'max',
              message: angular.isDefined(t.maxError) ? t.maxError : s.STRINGS['valtip.nogreaterthan'] + t.max
            },
            {
              key: 'validateTrue',
              message: angular.isDefined(t.validateTrueError) ? t.validateTrueError : s.STRINGS['valtip.PleaseAggree']
            },
            {
              key: 'minOtpChars',
              message: angular.isDefined(t.minOtpChars) ? t.minOtpChars : s.STRINGS['valtip.minOtpChars']
            },
            {
              key: 'dateDisabled',
              message: angular.isDefined(t.dateDisabled) ? t.dateDisabled : s.STRINGS['valtip.dateDisabled']
            },
            {
              key: 'onlyIntegralError',
              message: angular.isDefined(t.onlyIntegralError) ? t.onlyIntegralError : s.STRINGS['valTip.onlyIntegralAmount']
            },
            {
              key: 'mindateerror',
              message: angular.isDefined(t.minDateError) ? t.minDateError : s.STRINGS['valTip.minDate']
            },
            {
              key: 'maxdateerror',
              message: angular.isDefined(t.maxDateError) ? t.maxDateError : s.STRINGS['valTip.maxDate']
            },
            {
              key: 'date',
              message: angular.isDefined(t.dateError) ? t.dateError : s.STRINGS['valtip.dateFormat']
            },
            {
              key: 'parse',
              message: angular.isDefined(t.parseError) ? t.parseError : s.STRINGS['valtip.fieldsIncorrect']
            },
            {
              key: 'alphaiban',
              message: angular.isDefined(t.alphaiban) ? t.alphaiban : s.STRINGS['valtip.alphaiban']
            },
            {
              key: 'refNumberVal',
              message: angular.isDefined(t.refNumberValError) ? t.refNumberValError : s.STRINGS['valtip.refNumberVal']
            },
            {
              key: 'notValue',
              message: angular.isDefined(t.notValueError) ? t.notValueError : s.STRINGS['valtip.notValueError']
            },
            {
              key: 'pinDigitsRequired',
              message: angular.isDefined(t.pinDigitsRequiredError) ? t.pinDigitsRequiredError : s.STRINGS['valtip.pinDigitsRequired']
            },
            {
              key: 'wrongPhoneFormat',
              message: s.STRINGS.wrongPhoneFormat
            },
            {
              key: 'greekPhoneWrongFormat',
              message: s.STRINGS.greekPhoneWrongFormat
            },
            {
              key: 'numberComparison',
              message: t.numberComparisonError
            },
            {
              key: 'eighteenMonthsOrOlder',
              message: s.STRINGS['valtip.eighteenMonthsOrOlder']
            },
            {
              key: 'dateToIsBigger',
              message: s.STRINGS['valtip.dateToIsBigger']
            }
          ],
          r = s.$http.get(s.errorsTemplateUrl, {
            cache: s.$templateCache
          }).then(function (n) {
            return angular.element(n.data)
          });
          return function (u, f, e, o) {
            if (o) {
              u.$form = o;
              var h = s;
              r.then(function (r) {
                var c = u.$new(),
                l;
                c.errorClass = e.errorClass;
                c.tooltipVisible = !1;
                c.opacityHalf = !0;
                c.$validationMessages = {
                };
                angular.forEach(i, function (n) {
                  if (n && n.message) {
                    var i = s.$interpolate(n.message) (u);
                    n.key == 'maxTags' && e.maxTags && !t.maxTagsError && (i = 'You have reached the maximum allowed tags ' + (u.maxTags || '') + '.');
                    n.key == 'minTags' && e.minTags && !t.minTagsError && (i = 'At least ' + (u.minTags || '') + ' tag/tags is required.');
                    c.$validationMessages[n.key] = i
                  }
                });
                c.$validationMessages.min = angular.isDefined(e.minError) ? e.minError : h.buildNumberRangeErrorMessage(h.STRINGS, e.max, e.min);
                c.$validationMessages.max = angular.isDefined(e.maxError) ? e.maxError : h.buildNumberRangeErrorMessage(h.STRINGS, e.max, e.min);
                c.$validationMessages.minval = angular.isDefined(e.minvalError) ? e.minvalError : h.buildNumberRangeErrorMessage(h.STRINGS, e.max, e.min);
                c.$validationMessages.maxval = angular.isDefined(e.maxvalError) ? e.maxvalError : h.buildNumberRangeErrorMessage(h.STRINGS, e.max, e.min);
                s.$compile(r) (c, function (n) {
                  f.after(n);
                  l = n
                });
                o && (c.$form = o, c.$field = o[e.name]);
                c.$field || setTimeout(function () {
                  c.$field = o[e.name]
                });
                e && (e.$observe('min', function () {
                  e.min && c && c.$validationMessages && (c.$validationMessages.min = angular.isDefined(e.minError) ? e.minError : h.buildNumberRangeErrorMessage(h.STRINGS, e.max, e.min, e.isAmount), c.$validationMessages.minval = angular.isDefined(e.minvalError) ? e.minvalError : h.buildNumberRangeErrorMessage(h.STRINGS, e.max, e.min, e.isAmount), c.$validationMessages.max = angular.isDefined(e.maxError) ? e.maxError : h.buildNumberRangeErrorMessage(h.STRINGS, e.max, e.min, e.isAmount), c.$validationMessages.maxval = angular.isDefined(e.maxvalError) ? e.maxvalError : h.buildNumberRangeErrorMessage(h.STRINGS, e.max, e.min, e.isAmount))
                }), e.$observe('max', function () {
                  e.max && c && c.$validationMessages && (c.$validationMessages.min = angular.isDefined(e.minError) ? e.minError : h.buildNumberRangeErrorMessage(h.STRINGS, e.max, e.min, e.isAmount), c.$validationMessages.minval = angular.isDefined(e.minvalError) ? e.minvalError : h.buildNumberRangeErrorMessage(h.STRINGS, e.max, e.min, e.isAmount), c.$validationMessages.max = angular.isDefined(e.maxError) ? e.maxError : h.buildNumberRangeErrorMessage(h.STRINGS, e.max, e.min, e.isAmount), c.$validationMessages.maxval = angular.isDefined(e.maxvalError) ? e.maxvalError : h.buildNumberRangeErrorMessage(h.STRINGS, e.max, e.min, e.isAmount))
                }), e.$observe('patternError', function () {
                  e.patternError && c && c.$validationMessages && (c.$validationMessages.pattern = e.patternError)
                }));
                s.customLink(c, f, l, n, e, o)
              })
            }
          }
        };
        this.customLink = function (n, t, i, r, u) {
          t.bind('focus', function () {
            n.$$phase || n.$root.$$phase || !n.$apply ? n.opacityHalf = !0 : n.$apply(function () {
              n.opacityHalf = !0
            })
          });
          t.bind('blur', function () {
            n.$$phase || n.$root.$$phase || !n.$apply ? n.opacityHalf = !1 : n.$apply(function () {
              n.opacityHalf = !1
            })
          });
          t.bind('mouseenter', function () {
            n.$$phase || n.$root.$$phase || !n.$apply ? n.tooltipVisible = !0 : n.$apply(function () {
              n.tooltipVisible = !0
            })
          });
          t.bind('mouseleave', function () {
            n.$$phase || n.$root.$$phase || !n.$apply ? n.tooltipVisible = !1 : n.$apply(function () {
              n.tooltipVisible = !1
            })
          });
          var e = u.name,
          o = '($form[\'' + e + '\'].$dirty || $form.attempt)  && $form[\'' + e + '\'].$invalid && vm.showValidationErrors',
          f = t;
          setTimeout(function () {
            f = t[0].nodeName == '#comment' ? t.parent().find(r[0].nodeName.toLowerCase())  : t
          });
          n.$watch(o, function (n) {
            n ? (f.addClass('has-error'), $(f).attr('type') == 'hidden' ? f.parent().parent().addClass('has-error')  : f.parent().addClass('has-error-withicon'))  : (f.removeClass('has-error'), $(f).attr('type') == 'hidden' ? f.parent().parent().removeClass('has-error')  : f.parent().removeClass('has-error-withicon'))
          })
        }
      }
      return n.prototype.buildNumberRangeErrorMessage = function (n, t, i, r) {
        var u = '',
        o = parseFloat(t),
        f = isNaN(o) ? '' : ' ' + o.toFixed(2).toLocaleString() + ' ',
        s = parseFloat(i),
        e = isNaN(s) ? '' : ' ' + s.toFixed(2).toLocaleString() + ' ';
        return t && (u = n['valtip.nogreaterthan'] + f + ' '),
        i && (u = n['valtip.nolessthan'] + e + ' '),
        t && i && (u = r == 'false' ? n['valtip.numberbetween'] + this.$filter('currency') (e, '') + ' ' + n['valtip.amountbetween.and'] + ' ' + this.$filter('currency') (f, '') + ' ' : n['valtip.amountbetween'] + this.$filter('currency') (e, '') + ' ' + n['valtip.amountbetween.and'] + ' ' + this.$filter('currency') (f, '') + ' '),
        u
      },
      n.$inject = [
        '$compile',
        '$templateCache',
        '$http',
        '$injector',
        '$parse',
        '$interpolate',
        'STRINGS',
        '$filter'
      ],
      n.directiveId = 'valTip',
      n
    }(),
    t = angular.module('shareddirectives');
    t.directive(n.directiveId, [
      '$compile',
      '$templateCache',
      '$http',
      '$injector',
      '$parse',
      '$interpolate',
      'STRINGS',
      '$filter',
      function (t, i, r, u, f, e, o, s) {
        return new n(t, i, r, u, f, e, o, s)
      }
    ])
  }(shareddirectives || (shareddirectives = {
  })), function (n) {
    var t;
    (function (t) {
      'use strict';
      t.mainModule = angular.module('alpha.messages', [
        'alpha',
        'alpha.services'
      ]);
      t.mainModule.config(['$httpProvider',
      '$stateProvider',
      '$urlRouterProvider',
      function (t, i) {
        i.state('root.messages', {
          url: '/messages/:pageIndex',
          templateUrl: 'Templates/Features/Messages/messages',
          resolve: {
            customerDetails: [
              'CustomerServiceProxy',
              function (n) {
                return n.getDetails({
                  Flatten: !0
                }).then(function (n) {
                  return n.FlattenDetails
                })
              }
            ],
            userInfo: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ],
            pagedResponse: [
              'MessagesService',
              '$stateParams',
              function (n, t) {
                var i = t.pageIndex;
                return i ? n.getMessagesFromPage(i)  : n.getMessagesFromPage(0).then(function (n) {
                  return n
                })
              }
            ]
          },
          controller: 'MessagesController',
          menuItem: {
            inMenu: !1,
            parent: 'root'
          }
        }).state('root.messages.detail', {
          url: '/detail/:id',
          templateUrl: 'Templates/Features/Messages/messages',
          resolve: {
            fixedServiceMessages: [
              'MessagesService',
              'AppEventsService',
              'pagedResponse',
              '$stateParams',
              'MessageHelperService',
              'customerDetails',
              function (t, i, r, u, f, e) {
                var c,
                o,
                s,
                h;
                if (r) {
                  if (c = u.id, c) for (o = 0; o < r.Items.length; o++) if (o == c) {
                    if (r.Items[o].IsOpen = !0, s = r.Items[o], r.Items[o].Status == 0 && (h = {
                    }, h.Channel = 3, h.MessageID = s.ID, h.NewStatus = 1, t.updateMessages(h).then(function () {
                      s.Status = 1;
                      i.publish(n.common.services.AppEventsService.MessageRead_Event, s.ID)
                    })), f.hasTemplate(s)) return t.getMessageTemplate(s, e).then(function (n) {
                      s.src = n.Template
                    })
                  } else r.Items[o].IsOpen = !1;
                  return r.Items
                }
              }
            ]
          },
          controller: 'MessagesDetailsController',
          menuItem: {
            inMenu: !1,
            parent: 'root.messages'
          }
        })
      }
      ])
    }) (t = n.messages || (n.messages = {
    }))
  }(alpha || (alpha = {
  })), function (n) {
    var t = angular.module('navigation', [
    ]),
    r = function () {
      function n(n, t, i, r, u, f, e) {
        var o,
        s,
        h;
        this.stateService = n;
        this.stringService = t;
        this.$http = i;
        this.roleService = r;
        this.activeNodes = [
        ];
        this.stateMenus = [
        ];
        this.levelMenuArrays = [
        ];
        this.permissions = [
        ];
        this.menuPromise = null;
        o = this;
        s = f.defer();
        this.menuPromise = s.promise;
        h = $('meta[name=TemplatesVersion]').attr('content');
        u.filter(e.menuTree).then(function (n) {
          return u.restructure(n)
        }).then(function (n) {
          o.menuTree = n;
          o.menuTree.children.forEach(function (n) {
            o.initItem(n.children, n, t)
          });
          s.resolve()
        })
      }
      return n.prototype.initItem = function (n, t, r, u) {
        var s = this,
        e,
        o,
        f;
        if (t.state = $.trim(t.state), t.permissions && (e = t.permissions), t.lazyPermissions && (o = t.lazyPermissions), jQuery.extend(t, new i), e && (t.permissions = e), o && (t.lazyPermissions = o), u && (t.ParentMenu = u), t.level || (t.level = u ? u.level + 1 : 1), t.children && (t.hasChildren = !0), t.params && t.params.permissions) for (f = 0; f < t.params.permissions.length; f++) t.params.permissions[f] = this.mapPermission(t.params.permissions[f]);
        t.isPreviousCopy && (t.state = u.state, t.parent = t.state, t.level = u.level + 1, t.index = 1, t.isDisabled = u.isDisabled ? u.isDisabled : t.isDisabled, t.inMenu = u.inMenu ? t.inMenu : u.inMenu, t.isVisible = u.isVisible ? t.isVisible : u.isVisible);
        t.stateResource && (t.title = r[t.stateResource]);
        this.setStateMenu(t.state, t);
        t.title || (t.title = r[t.state] || t.state);
        t.isPreviousCopy = alpha.utils.isUndefinedOrNull(t.isPreviousCopy) ? !1 : t.isPreviousCopy;
        t.hasTranslatedTitle = t.title != t.state;
        t.inMenu = alpha.utils.isUndefinedOrNull(t.inMenu) ? !0 : t.inMenu;
        n && n.length > 0 && n.forEach(function (n) {
          n.parent = n.parent ? n.parent : t.state;
          s.initItem(n.children, n, r, t)
        })
      },
      n.prototype.setStateMenu = function (n, t) {
        this.stateMenus[n] = t
      },
      n.prototype.getStateMenu = function (n) {
        return this.stateMenus[n]
      },
      n.prototype.getMenuItemsForState = function (n, t, i) {
        var r;
        if (i === void 0 && (i = !0), r = this.findSelectedMenuItem(t, n), i && (this.clearActive(), r && this.highlightActiveTrail(r)), n == 1) return this.menuTree.children;
        if (r) {
          while (r.level >= n && r.level != 0) r = r.ParentMenu;
          return r.children ? r.children.filter(function (n) {
            return alpha.utils.isUndefinedOrNull(n.inMenu) || n.inMenu
          })  : [
          ]
        }
        return []
      },
      n.prototype.getMenuItemsFor = function (n, t) {
        return t === void 0 && (t = !0),
        this.getMenuItemsForState(n, this.stateService.current.name, t)
      },
      n.prototype.clearActive = function () {
        this.activeNodes && (this.activeNodes.forEach(function (n) {
          n.active = !1
        }), this.activeNodes = [
        ])
      },
      n.prototype.getClosestAncestorWithTitle = function () {
        for (var n = this.findSelectedMenuItem(this.stateService.current.name, 1, 2); n != null && n && !n.hasTranslatedTitle && n.level > 0; ) n = n.ParentMenu;
        return n
      },
      n.prototype.findSelectedMenuItem = function (n, t, i) {
        var u,
        o,
        s,
        r,
        e,
        f,
        h;
        for (alpha.utils.isUndefinedOrNull(this.levelMenuArrays[t]) && (this.levelMenuArrays[t] = this.getByLevel(this.menuTree, t)), u = this.levelMenuArrays[t].filter(function (t) {
          return t && t.state == n
        }), s = - 1, i = alpha.utils.isUndefinedOrNull(i) ? 100 : i, r = 0; r < u.length; r++) u[r].level > s && u[r].level <= i && (s = u[r].level, o = u[r]);
        if (o) return o;
        if (e == null) {
          f = n;
          do {
            if (h = f.lastIndexOf('.'), h == - 1) break;
            f = f.substring(0, h);
            e = this.getStateMenu(f)
          } while (!e)
        }
        return e
      },
      n.prototype.getByLevel = function (n, t) {
        var r = this,
        i = [
        ];
        return n.children.forEach(function (n) {
          n.level >= t && i.push(n);
          n.children && (i = i.concat(r.getByLevel(n, t)))
        }),
        i
      },
      n.prototype.highlightActiveTrail = function (n) {
        n && (this.activeNodes.push(n), n.active = !0);
        var t = n.ParentMenu;
        t && this.highlightActiveTrail(t)
      },
      n.prototype.getMenuTree = function () {
        return this.menuTree
      },
      n.prototype.getMenuTreeAsync = function () {
        var n = this;
        return this.menuPromise.then(function () {
          return n.menuTree
        })
      },
      n.prototype.mapPermission = function (n) {
        return this.permissions.length == 0 && (this.permissions.MerchantApplication_Create = 13, this.permissions.MerchantApplication_Update = 14, this.permissions.PaymentType_Create = 1, this.permissions.PaymentType_Update = 10, this.permissions.TransactionsHistory_Search = 22, this.permissions.PortalUser_Update = 21, this.permissions.PaymentTypeCategory_Create = 3, this.permissions.PaymentTypeCategory_Update = 4, this.permissions.PaymentGroup_Create = 9, this.permissions.PaymentGroup_Update = 10, this.permissions.Banner_Create = 15, this.permissions.Banner_Update = 16, this.permissions.SecurityQuestion_Create = 11, this.permissions.LoyaltyOffer_Create = 17, this.permissions.LoyaltyOffer_Update = 18, this.permissions.PortalMessage_Create = 19, this.permissions.PortalMessage_Update = 20, this.permissions.Settings_Update = 23, this.permissions.CMSUSer_Create = 5, this.permissions.CMSUser_Update = 6, this.permissions.CMSRole_Create = 7, this.permissions.CMSRole_Update = 8, this.permissions.PrepaidTopUps_View = 32, this.permissions.SearchBleepUser = 33, this.permissions.SearchPinLockedCards = 34),
        this.permissions[n] ? this.permissions[n] : void 0
      },
      n.prototype.DisablePermissionItems = function (n, t) {
        var i = this;
        t === void 0 && (t = null);
        t == null && (t = this.menuTree);
        t.children && t.children.forEach(function (t) {
          t.permissions.indexOf(n) != - 1 && (t.inMenu = !1);
          i.DisablePermissionItems(n, t)
        })
      },
      n.prototype.EnablePermissionItems = function (n, t) {
        var i = this;
        t === void 0 && (t = null);
        t == null && (t = this.menuTree);
        t.children && t.children.forEach(function (t) {
          t.permissions.indexOf(n) != - 1 && (t.inMenu = !0);
          i.EnablePermissionItems(n, t)
        })
      },
      n.prototype.isExistState = function (n) {
        return !alpha.utils.isUndefinedOrNullorWhiteSpace(n)
      },
      n.prototype.isStateDisable = function (n, t) {
        t === void 0 && (t = 'true');
        for (var i = this.getStateMenu(n); !this.isExistState(i) && JSON.parse(t.toLowerCase()); ) {
          if (n == 'root') return !0;
          n = n.substr(0, n.lastIndexOf('.'));
          i = this.getStateMenu(n)
        }
        while (this.isExistState(i)) {
          if (i.isDisabled) return !0;
          i = i.ParentMenu
        }
        return !1
      },
      n.$inject = [
        '$state',
        'STRINGS',
        '$http',
        'RoleService',
        'MenuFilterService',
        '$q',
        'roleMenuJson'
      ],
      n
    }(),
    u,
    f,
    i;
    n.MenuItemsService = r;
    t.service('MenuItemsService', r);
    t.directive('checkValidOfState', [
      'MenuItemsService',
      '$state',
      '$rootScope',
      'RoleService',
      function (n, t, i) {
        return {
          restrict: 'A',
          priority: 10000,
          controller: [
            '$scope',
            '$element',
            '$attrs',
            function (r, u, f) {
              var e = function (t) {
                return this._values = this._values || {
                },
                this._values[t] != undefined ? this._values[t] : this._values[t] = n.isStateDisable(t, f.lookParents)
              },
              o = function (i, r, u, f) {
                f === void 0 && (f = {
                  name: 'root.overview'
                });
                n.menuPromise.then(function () {
                  e(r.name) && (e(f.name) && (f = {
                    name: 'root.overview'
                  }), t.go(f.name))
                })
              };
              o(undefined, t.current);
              i.$on('$stateChangeStart', o)
            }
          ]
        }
      }
    ]);
    t.directive('menu', [
      'MenuItemsService',
      'STRINGS',
      '$state',
      'LazyPermissionService',
      function (n, t, i, r) {
        return {
          restrict: 'EA',
          scope: {
            hideMenuItems: '@hideMenuItems',
            selectedClass: '@selectedClass',
            topElementClass: '@topElementClass',
            level: '@level',
            updateActive: '@updateActive'
          },
          templateUrl: 'templates/common/directives/menu',
          link: function (t, u, f) {
            var c = f.runEarly || !1,
            l = f.clearOnNoChildren || !1,
            e = f.highligthActive === 'true',
            o,
            s,
            h;
            e === undefined && (e = !0);
            o = function () {
              var i = n.getMenuItemsFor(t.level, e),
              u = i.filter(function (n) {
                return null != n.lazyPermissions && n.lazyPermissions.length > 0 && (n.lazyPermissions.every(function (n) {
                  return null == r.getPermissionValue(n.permission)
                }) || n.lazyPermissions.some(function (n) {
                  return r.getPermissionValue(n.permission) && n.action === 'hide'
                }) || n.lazyPermissions.some(function (n) {
                  return !r.getPermissionValue(n.permission) && n.action === 'show'
                }))
              });
              i = alpha.utils.Except(i, u);
              i && i.length > 0 || l ? t.items = i : $('body').removeClass('open-menu')
            };
            s = function (u, f, o) {
              var l = n.getMenuItemsForState(t.level, f.name, e),
              h = l.filter(function (n) {
                return null != n.lazyPermissions && n.lazyPermissions.length > 0
              }),
              c,
              s;
              h.length && (c = alpha.utils.SelectMany(h, function (n) {
                return n.lazyPermissions
              }), s = alpha.utils.Distinct(c.map(function (n) {
                return n.permission
              })), r.arePermissionsCalculated(s) || (u.preventDefault(), r.calculatePermissions(s).then(function () {
                i.go(f, o)
              })))
            };
            c && o();
            h = t.$on('$stateChangeSuccess', o);
            n.menuPromise.then(function () {
              t.$on('$stateChangeStart', s)
            });
            t.$on('$destroy', h)
          }
        }
      }
    ]);
    t.directive('pageTitle', [
      '$state',
      'MenuItemsService',
      function (n, t) {
        return {
          restrict: 'EA',
          template: '<span>{{t}}</span>',
          link: function (n) {
            var i = function () {
              var i = t.getClosestAncestorWithTitle();
              i != null && (n.t = i.title)
            },
            r = n.$on('$stateChangeSuccess', i);
            n.$on('$destroy', r)
          }
        }
      }
    ]);
    u = function () {
      function n() {
      }
      return n.checkHasOverflow = function () {
        if (++this.counter, this.counter > 100) throw 'Too many current state change requests.';
        this.startTime || (this.startTime = new Date);
        (new Date).getTime() - this.startTime.getTime() > this.RESET_COUNTER_TIME && (this.startTime = new Date, this.counter = 0)
      },
      n.counter = 0,
      n.RESET_COUNTER_TIME = 1000,
      n
    }();
    n.CounterByTime = u;
    f = function () {
      function n() {
        this.permissions = [
        ];
        this.orderings = [
        ]
      }
      return n
    }();
    n.ChildrenOrdering = f;
    i = function () {
      function n() {
        this.showChildren = !1;
        this.hasChildren = !1;
        this.isVisible = !0;
        this.permissions = [
        ];
        this.lazyPermissions = [
        ];
        this.hideStateForRoles = [
        ];
        this._uiSref = null;
        this._permissions = [
        ]
      }
      return n.prototype.getUISref = function () {
        return this.isDisabled ? '.' : (this._uiSref == null && (this._uiSref = alpha.utils.isUndefinedOrNull(this.params) ? this.state : this.state + '(' + JSON.stringify(this.params) + ')'), this._uiSref)
      },
      n.prototype.hideMenuOnClick = function (n) {
        this.isDisabled ? (n.preventDefault(), n.stopPropagation())  : this.level == 2 && $('body').removeClass('open-menu')
      },
      Object.defineProperty(n.prototype, 'ParentMenu', {
        get: function () {
          return this._parentMenu
        },
        set: function (n) {
          this._parentMenu = n
        },
        enumerable: !0,
        configurable: !0
      }),
      n
    }();
    n.MenuItem = i
  }(navigation || (navigation = {
  })), function (n) {
    n.commonServices = angular.module('alpha.common.services', [
    ])
  }(alpha || (alpha = {
  })), function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t;
        (function (n) {
          var t = function () {
            function n(n, t) {
              this.httpService = n;
              this.$q = t;
              this.promiseHolder = [
              ]
            }
            return n.prototype.dispatch = function (n, t) {
              return this.httpService.post(n, t)
            },
            n.prototype.getCached = function (n, t, i, r) {
              var u = this;
              return r && (this.promiseHolder[i] = null),
              this.promiseHolder[i] == null && (this.promiseHolder[i] = this.httpService.post(n, t).then(function (n) {
                return n.ResultCode == 0 ? n : (u.promiseHolder[i] = null, u.$q.reject(n))
              }, function (n) {
                return u.promiseHolder[i] = null,
                u.$q.reject(n)
              })),
              this.promiseHolder[i]
            },
            n
          }();
          n.ProxyDispatcher = t
        }) (t = n.proxies || (n.proxies = {
        }))
      }) (t = n.services || (n.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })), function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i = function () {
          function n(n) {
            this.$rootScope = n
          }
          return n.prototype.tryPublish = function (n, t) {
            try {
              return this.$rootScope.$emit(n, t)
            } catch (i) {
            }
          },
          n.prototype.publish = function (n, t) {
            return this.$rootScope.$emit(n, t)
          },
          n.prototype.subscribe = function (n, t) {
            return this.$rootScope.$on(n, t)
          },
          n.$inject = [
            '$rootScope'
          ],
          n.InvalidateInvestments_Event = 'InvalidateInvestments',
          n.InvalidateOtherBankAccounts_Event = 'InvalidateOtherBankAccounts',
          n.InvalidateAccounts_Event = 'InvalidateAccounts',
          n.InvalidateLoans_Event = 'InvalidateLoans',
          n.InvalidateOtherBankCards_Event = 'InvalidateOtherBankCards',
          n.InvalidateCards_Event = 'InvalidateCards',
          n.InvalidateLookups_Event = 'InvalidateLookups',
          n.InvalidateTransferTemplates_Event = 'InvalidateTransferTemplates',
          n.InvalidatePaymentTemplates_Event = 'InvalidatePaymentTemplates',
          n.InvalidateUserSessionInfo_Event = 'InvalidateUserSessionInfo',
          n.InvalidateTokenInfo_Event = 'InvalidateTokenInfo',
          n.InvalidateCartolini_Event = 'InvalidateCartolini',
          n.InvalidatePortalMessages_Event = 'InvalidatePortalMessages',
          n.InvalidateCustomUiSelectProduct = 'InvalidateCustomUiSelectProduct',
          n.InvalidateCustomUiSelectCategoryGroup = 'InvalidateCustomUiSelectCategoryGroup',
          n.MessageDeleted_Event = 'MessageDeleted',
          n.MessageRead_Event = 'MessageRead',
          n.TimerExpired_Event = 'TimerExpired',
          n.InvalidateAllEtimeDepositInfo_Event = 'InvalidateAllEtimeDepositInfo',
          n.InvalidateActiveEtimeDepositInfo_Event = 'InvalidateActiveEtimeDepositInfo',
          n.InvalidateAllDebitCardApplicationInfo_Event = 'InvalidateAllDebitCardApplicationInfo',
          n.InvalidateAllSaveSmartInfo_Event = 'InvalidateAllSaveSmartInfo',
          n.InvalidateAllCustomerDetailsTaxEntries_Event = 'InvalidateAllCustomerDetailsTaxEntries',
          n.TransactionCancelled_Event = 'TransactionCancelled',
          n.ClientIPChanged_Event = 'ClientIPChanged',
          n.PasswordValidationSuccess_Event = 'PasswordValidationSuccessEvent',
          n.InvalidateAddresses_Event = 'InvalidateAddressesEvent',
          n.InvalidateCheckoutCardList_Event = 'InvalidateCheckoutCardListEvent',
          n.UserEnteredThreeTimesWrongPin = 'UserEnteredThreeTimesWrongPin',
          n.MyBankValidationSuccess_Event = 'MyBankValidationSuccessEvent',
          n.IrisValidationSuccess_Event = 'IrisValidationSuccessEvent',
          n.AllStateGuardsCompleted_Event = 'AllStateGuardsCompletedEvent',
          n.ModifiedApprovalTableModal_Event = 'ModifiedApprovalTableModalEvent',
          n.ContactInfoUpdateModal_Event = 'ContactInfoUpdateModalEvent',
          n.FireDonationModal_Event = 'FireDonationModalEvent',
          n.SmsOtpPrompt_Event = 'SmsOtpPromptEvent',
          n.FailedTransModal_Event = 'FailedTransModalEvent',
          n.OtpSubmitted_Event = 'OtpSubmittedEvent',
          n.PopupWindowOpened_Event = 'PopupWindowOpenedEvent',
          n.GraphDataUpdated_Event = 'GraphDateUpdatedEvent',
          n.UpdateUsers_Event = 'UpdateUsersEvent',
          n.InvalidateSubscriptionInfo_Event = 'InvalidateSubscriptionInfoEvent',
          n.JobFinalization_Event = 'JobFinalizationEvent',
          n.MultiJobEdit_Event = 'MultiJobEdit_Event',
          n.JobViewDetails_Event = 'JobViewDetails_Event',
          n.CustomUiSelectProductsChanged_Event = 'CustomUiSelectProductsChanged',
          n.LazyPermissionChanged_Event = 'LazyPermissionChanged',
          n.JobProcessedbyOtherUser_Event = 'JobProcessedbyOtherUserEvent',
          n.webAdmin_SaveApprovalTable = 'webAdmin_SaveApprovalTable',
          n.webAdmin_DisableApprovalTableButtons = 'webAdmin_DisableApprovalTableButtons',
          n.jobApprovalCount = 'jobApprovalCount',
          n.SubscriptionHeaders_Event = 'SubscriptionHeaders',
          n.ApplicationHeaders_Event = 'ApplicationHeaders',
          n.StateChanged_Event = 'StateChanged_Event',
          n.WebAdmin_OnApprovalInitializing = 'WebAdmin_OnApprovalInitializing',
          n.DisplayApprovalTableErrros = 'DisplayApprovalTableErrors',
          n.ApprovalTableEdited = 'ApprovalTableEdited',
          n.InfoTooltipShowed = 'InfoTooltipShowed',
          n.WizardStepChanged = 'WizardStepChanged',
          n.BurgerMenuActionClicked = 'BurgerMenuActionClicked',
          n.DonutProductInfoShowEvent = 'DonutProductInfoShowEvent',
          n.AppInsightsExceptionRaised = 'AppInsightsExceptionRaised',
          n.BIApplicationEventTriggered = 'BIApplicationEventTriggered',
          n.TransactionEndResultTriggered = 'TransactionEndResultTriggered',
          n.MAWLoginSuccessTriggered = 'MAWLoginSuccessTriggered',
          n.LogoutTriggered = 'LogoutTriggered',
          n.StateChangeErrorEvent = 'StateChangeErrorEvent',
          n.AbWcfDependency = 'AbWcfDependency',
          n.PSD2ProductBalanceServiceTrigger = 'PSD2ProductBalanceServiceTrigger',
          n.PSD2ProductDetailsServiceTrigger = 'PSD2ProductDetailsServiceTrigger',
          n.PSD2ProductTransactionsServiceTrigger = 'PSD2ProductTransactionsServiceTrigger',
          n.PSD2ClearLocalStorageTrigger = 'PSD2ClearLocalStorageTrigger',
          n.PSD2OtherBankProductAddedToProfile = 'PSD2OtherBankProductAddedToProfile',
          n
        }();
        t.AppEventsService = i;
        n.commonServices.service('AppEventsService', i)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })), function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        var i = function () {
          function t(n) {
            this.bannersServiceProxy = n
          }
          return t.prototype.setBannerPosition = function (n) {
            return this.bannersServiceProxy.setBannerPosition(n)
          },
          t.prototype.getBannerFor = function (n) {
            return this.bannersServiceProxy.getBannerFor(n, !1)
          },
          t.prototype.getBanners = function (t) {
            return n.utils.isUndefinedOrNull(t.SearchValue) && delete t.SearchValue,
            this.bannersServiceProxy.getBanners(t)
          },
          t.prototype.getBanner = function (n) {
            return n === void 0 && (n = {
              BannerId: 0
            }),
            n.BannerId = n.BannerId || 0,
            this.bannersServiceProxy.getBanner(n).then(function (n) {
              return n.Item
            })
          },
          t.prototype.updateBanner = function (n) {
            return this.bannersServiceProxy.updateBanner(n).then(function (n) {
              return n.Item
            })
          },
          t.$inject = [
            'BannersServiceProxy'
          ],
          t
        }(),
        t;
        n.commonServices.service('BannerService', i);
        n.commonServices.directive('banner', [
          'BannerService',
          '$state',
          '$stateParams',
          'baseUrl',
          'LanguageService',
          function (n, t, i, r, u) {
            return {
              restrict: 'A',
              replace: !0,
              scope: {
                bannerPlacementId: '=',
                bannerReload: '=',
                bannerPosition: '@'
              },
              template: '<div><a target="_blank" data-ng-if="banner.Link" data-ng-href="{{banner.Link}}" data-ng-attr-rel="{{banner.NoFollow ? \'nofollow\' : \'\'}}">                <img data-ng-src="{{imgSrc}}" alt="" class="img-responsive"/></a> <img  data-ng-if="!banner.Link" data-ng-src="{{imgSrc}}" alt="" class="img-responsive"/></div>',
              controller: [
                '$scope',
                '$element',
                '$attrs',
                function (t) {
                  var i = function () {
                    n.getBannerFor({
                      PlacementId: t.bannerPlacementId,
                      Position: t.bannerPosition
                    }).then(function (n) {
                      t.banner = n;
                      t.imgSrc = r.value + 'images/' + t.bannerPlacementId + '/' + t.bannerPosition + '/' + n.Version + '/' + u.getLanguage()
                    })
                  };
                  t.$watch('bannerPlacementId', function (n, t) {
                    n === t || i()
                  });
                  i()
                }
              ]
            }
          }
        ]);
        n.commonServices.directive('bannerPicker', [
          'BannerService',
          '$state',
          '$stateParams',
          '$modal',
          'baseUrl',
          function (n, t, i, r, u) {
            return {
              restrict: 'A',
              replace: !0,
              scope: {
                bannerPickerPlacementId: '=',
                bannerPickerPosition: '@'
              },
              templateUrl: 'Templates/Features/Banners/BannerPicker',
              controller: [
                '$scope',
                '$element',
                '$attrs',
                function (t) {
                  t.version = 0;
                  t.isOverridable = function () {
                    return t.bannerPickerPlacementId && t.bannerPickerPlacementId.indexOf('_') != - 1
                  };
                  var i = function () {
                    n.getBannerFor({
                      PlacementId: t.bannerPickerPlacementId,
                      Position: t.bannerPickerPosition
                    }).then(function (n) {
                      t.banner = n;
                      t.imgSrc = f()
                    })
                  },
                  f = function () {
                    return t.version++,
                    u.value + 'images/' + t.bannerPickerPlacementId + '/' + t.bannerPickerPosition + '?v=' + t.version
                  };
                  i();
                  t.open = function (u) {
                    var f = r.open({
                      templateUrl: 'Templates/Features/Banners/BannerPickerModal',
                      controller: 'ModalUpdateBannerController as vm',
                      size: u,
                      resolve: {
                        banners: [
                          'BannerService',
                          function (n) {
                            return n.getBanners({
                              ResultsPerPage: 100,
                              PageNumber: 1,
                              SearchValue: ''
                            })
                          }
                        ]
                      }
                    });
                    f.result.then(function (r) {
                      return n.setBannerPosition({
                        BannerId: r.Id,
                        PlacementId: t.bannerPickerPlacementId,
                        Position: t.bannerPickerPosition,
                        RemoveOverride: !1
                      }).then(function () {
                        i()
                      })
                    }, function () {
                    })
                  };
                  t.remove = function () {
                    return n.setBannerPosition({
                      BannerId: t.banner.Id,
                      PlacementId: t.bannerPickerPlacementId,
                      Position: t.bannerPickerPosition,
                      RemoveOverride: !0
                    }).then(function () {
                      i()
                    })
                  };
                  t.$watch('bannerPickerPlacementId', function (n, t) {
                    n === t || i()
                  })
                }
              ]
            }
          }
        ]);
        t = function () {
          function n(n, t) {
            this.modalInstance = n;
            this.response = t;
            this.banners = this.response.Items
          }
          return n.prototype.select = function (n) {
            this.modalInstance.close(n)
          },
          n.prototype.cancel = function () {
            this.modalInstance.dismiss()
          },
          n.$inject = [
            '$modalInstance',
            'banners'
          ],
          n
        }();
        n.commonServices.controller('ModalUpdateBannerController', t)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })); __extends = this && this.__extends || function () {
    var n = Object.setPrototypeOf || {
      __proto__: [
      ]
    }
    instanceof Array && function (n, t) {
      n.__proto__ = t
    }
    || function (n, t) {
      for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
    };
    return function (t, i) {
      function r() {
        this.constructor = t
      }
      n(t, i);
      t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
    }
  }(), function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i;
        (function (t) {
          var i = function (t) {
            function i(n, i) {
              var r = t.call(this, n, i) || this;
              return r.baseUrl = 'api/channels/eBanking/Customer.svc',
              r
            }
            return __extends(i, t),
            i.prototype.getDetails = function (t, i) {
              i === void 0 && (i = !1);
              var r = 'getDetails_Flatten:' + (n.utils.isUndefinedOrNull(t.Flatten) ? '' : t.Flatten.toString());
              return this.getCached(this.baseUrl + '/getDetails', t, r, i)
            },
            i.$inject = [
              '$http',
              '$q'
            ],
            i
          }(t.ProxyDispatcher);
          n.commonServices.service('CustomerServiceProxy', i)
        }) (i = t.proxies || (t.proxies = {
        }))
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })), function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        var t = function () {
          function t(t, i, r, u) {
            var f = this;
            this.qService = i;
            this.queriesServiceProxy = r;
            this.securityServiceProxy = u;
            this.queriesBasePath = 'api/queries.svc/';
            this.securityBasePath = 'api/Security.svc/';
            this.getDebitCardApplicationInfoList = {
            };
            this.getDebitCardApplicationInfoList[0] = null;
            t.subscribe(n.common.services.AppEventsService.InvalidateAllDebitCardApplicationInfo_Event, function () {
              f.getDebitCardApplicationInfoList[0] = null
            })
          }
          return t.prototype.getDebitCardApplicationInfo = function (n) {
            return this.getDebitCardApplicationInfoList.hasOwnProperty(n.RequestOption) ? (null == this.getDebitCardApplicationInfoList[n.RequestOption] && (this.getDebitCardApplicationInfoList[n.RequestOption] = this.queriesServiceProxy.getDebitCardApplicationInfo(n)), this.getDebitCardApplicationInfoList[n.RequestOption])  : this.queriesServiceProxy.getDebitCardApplicationInfo(n)
          },
          t.prototype.getDebitCardApplicationInfoDetails = function (n, t) {
            t === void 0 && (t = null);
            var i = {
              ApplicationID: n
            };
            return this.queriesServiceProxy.getDebitCardApplicationInfoDetails(i)
          },
          t.prototype.getKYCInfo = function () {
            return this.securityServiceProxy.isKYCAuthorized({
            })
          },
          t.prototype.getUserCDIInfo = function (n) {
            return this.securityServiceProxy.getUserCDIInfo(n)
          },
          t.prototype.createNewDebitCardApplicationReq = function (n) {
            return this.securityServiceProxy.createNewDebitCardApplication(n)
          },
          t.$inject = [
            'AppEventsService',
            '$q',
            'QueriesServiceProxy',
            'SecurityServiceProxy'
          ],
          t
        }();
        n.commonServices.service('DebitCardApplicationService', t)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })), function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        function t() {
          return {
            IDC_ID: - 1,
            Code: ''
          }
        }
        var i = function () {
          function n(n, i, r) {
            r === void 0 && (r = null);
            var u = this;
            this.dialCodeService = n;
            this.dialCodesById = {
            };
            this.dialCodesByCode = {
            };
            this.dialCodeMaxLength = 0;
            i = i || [
            ];
            i.filter(function (n) {
              return n.IDC_ID && u.dialCodeService.normalizePhone(n.Code)
            }).forEach(function (n) {
              var t = u.dialCodeService.normalizePhone(n.Code);
              u.dialCodesById[String(n.IDC_ID)] = n;
              u.dialCodesByCode[t] = n;
              u.dialCodeMaxLength = Math.max(u.dialCodeMaxLength, t.length)
            });
            r = r || '30';
            this.defaultDialCode = typeof r == 'number' ? this.dialCodesById[String(r)] || t()  : this.dialCodesByCode[this.dialCodeService.normalizePhone(r)] || t()
          }
          return n.prototype.getDialCodeById = function (n) {
            var t = null;
            return (n || n === 0) && (t = this.dialCodesById[String(n)]),
            t || this.defaultDialCode
          },
          n.prototype.getDialCodeByCode = function (n) {
            var t = null;
            return n = this.dialCodeService.normalizePhone(n),
            n && (t = this.dialCodesByCode[n]),
            t || this.defaultDialCode
          },
          n.prototype.getDialCode = function (n) {
            var i = null,
            t;
            if (this.dialCodeService.hasDialCode(n)) for (n = this.dialCodeService.normalizePhone(n), t = Math.min(this.dialCodeMaxLength, n.length); !i && t > 0; ) i = this.dialCodesByCode[n.substring(0, t)],
            t--;
            return i || this.defaultDialCode
          },
          n.prototype.splitPhone = function (n, t) {
            var i,
            r;
            return t === void 0 && (t = null),
            i = null,
            i = t ? typeof t == 'string' ? this.getDialCodeByCode(t)  : t : this.getDialCode(n),
            i && (n = this.dialCodeService.normalizePhone(n), r = this.dialCodeService.normalizePhone(i.Code), n.indexOf(r) === 0 && (n = n.substring(r.length))),
            {
              dialCode: i,
              phone: n
            }
          },
          n
        }();
        n.DialCodeMatcher = i
      }) (t = n.services || (n.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })); __assign = this && this.__assign || Object.assign || function (n) {
    for (var t, r, i = 1, u = arguments.length; i < u; i++) {
      t = arguments[i];
      for (r in t) Object.prototype.hasOwnProperty.call(t, r) && (n[r] = t[r])
    }
    return n
  }, function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        function i(n) {
          return n.Description + ' (+' + n.Code + ')'
        }
        var r = function () {
          function n(n, t, r) {
            this.$q = n;
            this.queriesService = t;
            this.stringService = r;
            this.dialCodesCache = [
            ];
            this._descriptionFormatter = i
          }
          return n.prototype.normalizePhone = function (n) {
            return n = (n || '').trim(),
            n.substring(0, 1) === '+' ? n = n.substring(1)  : n.substring(0, 2) === '00' && (n = n.substring(2)),
            n.replace('-', '')
          },
          n.prototype.fullPhone = function (n, t) {
            t = t || '';
            var r = typeof t == 'string' ? t : t.Code,
            i = this.normalizePhone(n);
            return i ? '+' + this.normalizePhone(r) + i : ''
          },
          n.prototype.hasDialCode = function (n, t) {
            if (t === void 0 && (t = null), !t) return this.hasAnyDialCode(n);
            var i = typeof t == 'string' ? t : t.Code;
            return i === '47' && (i = '4747'),
            this.normalizePhone(n).indexOf(this.normalizePhone(i)) === 0
          },
          n.prototype.hasAnyDialCode = function (n) {
            return n = (n || '').trim(),
            n.indexOf('+') === 0 || n.indexOf('00') === 0
          },
          n.prototype.getValidation = function (n) {
            var t = typeof n == 'string' ? n : n.Code;
            return this.normalizePhone(t) === '30' ? {
              pattern: /^[0-9]{10,18}$/,
              errorMessage: this.stringService.atLeast10Digits
            }
             : {
              pattern: /^[0-9]{7,18}$/,
              errorMessage: this.stringService.atLeast7Digits
            }
          },
          n.prototype.getDialCodeMatcher = function (n) {
            var i = this,
            r;
            return n === void 0 && (n = undefined),
            r = n ? this.$q.when(n)  : this.retrieveDialCodes(),
            r.then(function (n) {
              var t = i.descriptionFormatter;
              return n = n.map(function (n) {
                return __assign({
                }, n, {
                  Description: t(n)
                })
              }),
              i.dialCodesCache = n,
              n
            }).then(function (n) {
              return new t.DialCodeMatcher(i, n)
            })
          },
          n.prototype.retrieveDialCodes = function () {
            var n = this;
            return this.queriesService.getInternationalDialCodes().then(function (t) {
              return t.ResultCode !== 0 || t.Error ? n.$q.reject(t)  : t.Data
            }).catch (function (t) {
              return n.$q.reject(t)
            })
          },
          Object.defineProperty(n.prototype, 'dialCodes', {
            get: function () {
              return this.dialCodesCache
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(n.prototype, 'descriptionFormatter', {
            get: function () {
              return this._descriptionFormatter
            },
            set: function (n) {
              n = n || i;
              this.descriptionFormatter !== n && (this._descriptionFormatter = n, this.dialCodesCache = this.dialCodes.map(function (t) {
                return __assign({
                }, t, {
                  Description: n(t)
                })
              }))
            },
            enumerable: !0,
            configurable: !0
          }),
          n.$inject = [
            '$q',
            'QueriesService',
            'STRINGS'
          ],
          n
        }();
        t.DialCodeService = r;
        n.commonServices.service('DialCodeService', r)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })); __extends = this && this.__extends || function () {
    var n = Object.setPrototypeOf || {
      __proto__: [
      ]
    }
    instanceof Array && function (n, t) {
      n.__proto__ = t
    }
    || function (n, t) {
      for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
    };
    return function (t, i) {
      function r() {
        this.constructor = t
      }
      n(t, i);
      t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
    }
  }(), function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i;
        (function (t) {
          var i = function (n) {
            function t(t, i) {
              var r = n.call(this, t, i) || this;
              return r.baseUrl = 'api/DocumentUpload.svc',
              r
            }
            return __extends(t, n),
            t.prototype.newDocUploadApplication = function (n) {
              return this.dispatch(this.baseUrl + '/newDocUploadApplication', n)
            },
            t.prototype.docUploadActionsTypesRelations = function (n) {
              return this.dispatch(this.baseUrl + '/docUploadActionsTypesRelations', n)
            },
            t.prototype.getUserDocumentApplications = function (n) {
              return this.dispatch(this.baseUrl + '/getUserDocumentApplications', n)
            },
            t.prototype.getCDICustomerData = function (n) {
              return this.dispatch(this.baseUrl + '/getCDICustomerData', n)
            },
            t.prototype.docUploadCustomerInformation = function (n) {
              return this.dispatch(this.baseUrl + '/docUploadCustomerInformation', n)
            },
            t.prototype.confirmContactDetailStatus = function (n) {
              return this.dispatch(this.baseUrl + '/confirmContactDetailStatus', n)
            },
            t.$inject = [
              '$http',
              '$q'
            ],
            t
          }(t.ProxyDispatcher);
          n.commonServices.service('DocumentUploadServiceProxy', i)
        }) (i = t.proxies || (t.proxies = {
        }))
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })), function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        var t = function () {
          function n() {
            this._encryptionParams = null
          }
          return n.prototype.encryptionParams = function () {
            return this._encryptionParams || (this._encryptionParams = {
              N: $('meta[name=N]').attr('content'),
              E: $('meta[name=E]').attr('content')
            }),
            this._encryptionParams
          },
          n.prototype.encryptText = function (n) {
            var t = this.encryptionParams(),
            i = new RSAKey;
            return i.setPublic(t.N, t.E),
            i.encrypt(n)
          },
          n
        }();
        n.commonServices.service('EncryptionService', t)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })), function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        var t = function () {
          function n(n) {
            this.queriesServiceProxy = n
          }
          return n.prototype.setEstatements = function (n) {
            return this.queriesServiceProxy.setEStatement(n)
          },
          n.prototype.getCardAlerts = function (n) {
            return this.queriesServiceProxy.getCardAlerts(n)
          },
          n.prototype.setCardAlerts = function (n) {
            return this.queriesServiceProxy.setCardAlerts(n)
          },
          n.prototype.getAlerts = function () {
            return this.queriesServiceProxy.getSetAlerts({
              GetAlerts: !0
            }).then(function (n) {
              return n.GetAlerts
            })
          },
          n.prototype.setAlerts = function (n) {
            return this.queriesServiceProxy.getSetAlerts(n)
          },
          n.prototype.getAccountAlertList = function () {
            return this.queriesServiceProxy.getAccountsAlerts({
            }).then(function (n) {
              return n.AccountAlerts
            })
          },
          n.prototype.getAccountAlertInfo = function () {
            return this.queriesServiceProxy.getAccountAlertInfo({
            })
          },
          n.prototype.setAccountAlertInfo = function (n) {
            return this.queriesServiceProxy.setAccountAlertInfo(n)
          },
          n.prototype.createAccountAlerts = function (n) {
            return this.modifyAccountAlertsInternal(n, 0)
          },
          n.prototype.modifyAccountAlerts = function (n) {
            return this.modifyAccountAlertsInternal(n, 1)
          },
          n.prototype.removeAccountAlerts = function (n) {
            return this.modifyAccountAlertsInternal(n, 2)
          },
          n.prototype.modifyAccountAlertsInternal = function (n, t) {
            var i = {
              AccountAlert: {
              }
            };
            return i.AccountAlert.Account = n.Account,
            i.AccountAlert.AccountDescription = n.AccountDescription,
            i.AccountAlert.Amount = n.Amount,
            i.AccountAlert.byEMail = n.byEMail,
            i.AccountAlert.byMobile = n.byMobile,
            i.AccountAlert.Category = n.Category,
            i.AccountAlert.includeATMTransactions = n.includeCreditCardTransactions,
            i.AccountAlert.includeCreditCardTransactions = n.includeCreditCardTransactions,
            i.Action = t,
            i.email = n.email,
            i.mobileNumber = n.mobile,
            this.queriesServiceProxy.setAccountAlert(i)
          },
          n.$inject = [
            'QueriesServiceProxy'
          ],
          n
        }();
        n.commonServices.service('EServicesService', t)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })); __extends = this && this.__extends || function () {
    var n = Object.setPrototypeOf || {
      __proto__: [
      ]
    }
    instanceof Array && function (n, t) {
      n.__proto__ = t
    }
    || function (n, t) {
      for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
    };
    return function (t, i) {
      function r() {
        this.constructor = t
      }
      n(t, i);
      t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
    }
  }(), function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i;
        (function (t) {
          var i = function (n) {
            function t(t, i) {
              var r = n.call(this, t, i) || this;
              return r.baseUrl = 'Alpha.Mobile.Services.IIntraServer',
              r
            }
            return __extends(t, n),
            t.$inject = [
              '$http',
              '$q'
            ],
            t
          }(t.ProxyDispatcher);
          n.commonServices.service('IntraServerServiceProxy', i)
        }) (i = t.proxies || (t.proxies = {
        }))
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })), function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        var t = function () {
          function n() {
            this.language = $('meta[name=Locale]').attr('content')
          }
          return n.prototype.getLanguage = function () {
            return this.language
          },
          n
        }();
        n.commonServices.service('LanguageService', t)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })), function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        var t = function () {
          function t(t, i, r, u) {
            var f = this;
            this.queriesService = t;
            this.qService = i;
            this.securityService = u;
            this.lazyMapping = {
            };
            r.subscribe(n.common.services.AppEventsService.LazyPermissionChanged_Event, function (n, t) {
              delete f.lazyMapping[t.permission]
            })
          }
          return t.prototype.arePermissionsCalculated = function (n) {
            var t = this;
            return n.every(function (n) {
              return n in t.lazyMapping
            })
          },
          t.prototype.calculatePermissions = function (n) {
            var t = this,
            i = [
            ];
            return n.forEach(function (n) {
              if (n in t.lazyMapping) i.push(t.lazyMapping[n].promise);
               else {
                var r = t.getPermissionPromise(n);
                t.lazyMapping[n] = {
                  promise: r
                };
                i.push(r)
              }
            }),
            this.qService.all(i).then(function (i) {
              return i.forEach(function (i, r) {
                var u = n[r];
                t.lazyMapping[u].value = i
              })
            })
          },
          t.prototype.getPermissionValue = function (n) {
            return n in this.lazyMapping && null != this.lazyMapping[n].value ? this.lazyMapping[n].value : (delete this.lazyMapping[n], null)
          },
          t.prototype.getPermissionPromise = function (t) {
            if ('P2PActive' === t) return this.queriesService.getP2PSettings({
            }).then(function (n) {
              return n.IsActive
            }, function () {
              return null
            });
            if ('ViewAlphaPhoneProfile' === t) return this.securityService.getCartolini().then(function (n) {
              return n.Cartolini.Channel.indexOf(5) != - 1 ? !0 : !1
            });
            throw n.utils.formatString('Wrong permissionName ({0}) in \'LazyPermission\' service', [
              t
            ]);
          },
          t.$inject = [
            'QueriesService',
            '$q',
            'AppEventsService',
            'SecurityService'
          ],
          t
        }();
        n.commonServices.service('LazyPermissionService', t)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })), function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        var t = function () {
          function n(n) {
            this.qService = n
          }
          return n.prototype.filter = function (n) {
            return this.qService.when(n)
          },
          n.prototype.restructure = function (n) {
            return this.qService.when(n)
          },
          n.$inject = [
            '$q'
          ],
          n
        }();
        n.commonServices.service('MenuFilterService', t)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })), function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        var t = function () {
          function n(n, t, i) {
            this.sce = n;
            this.messageService = t;
            this.qService = i
          }
          return n.prototype.hasTemplate = function (n) {
            return [2,
            1].indexOf(n.Type) > - 1
          },
          n.prototype.createTrustedInlineTemplate = function (n) {
            return this.sce.trustAsResourceUrl('data:text/html;charset=utf-8,' + encodeURIComponent(n))
          },
          n.prototype.getTemplateAsSource = function (n, t, i) {
            var r = this;
            return this.getTemplate(n, t, i).then(function (n) {
              return r.createTrustedInlineTemplate(n)
            })
          },
          n.prototype.getTemplate = function () {
            return null
          },
          n.$inject = [
            '$sce',
            'MessagesService',
            '$q'
          ],
          n
        }();
        n.commonServices.service('MessageHelperService', t)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })), function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i = function () {
          function n(n) {
            this.queriesServiceProxy = n
          }
          return n.prototype.getMessagesFromServer = function (n, t) {
            var i = {
              Channel: 3
            };
            return i.PageNumber = n,
            i.ResultsPerPage = t,
            this.queriesServiceProxy.getMessages(i)
          },
          n.prototype.updateMessages = function (n) {
            return this.queriesServiceProxy.updateMessages(n)
          },
          n.prototype.getMessages = function () {
            var n = {
              Channel: 3
            };
            return n.PageNumber = 0,
            n.ResultsPerPage = 10,
            this.queriesServiceProxy.getMessages(n)
          },
          n.prototype.getUnreadMessages = function () {
            return this.unreadMessages
          },
          n.prototype.getMessagesFromPage = function (n) {
            var t = {
              Channel: 3
            };
            return t.PageNumber = n == 0 ? 0 : parseInt(n) + 1,
            t.ResultsPerPage = 10,
            this.queriesServiceProxy.getMessages(t)
          },
          n.prototype.getMessageTemplate = function (n, t) {
            var i = {
              Message: {
                TemplateName: n.TemplateName,
                Type: n.Type,
                Message: n.Message
              },
              CustomerDetails: t
            };
            return this.queriesServiceProxy.getMessageTemplate(i)
          },
          n.$inject = [
            'QueriesServiceProxy'
          ],
          n
        }();
        t.MessagesService = i;
        n.commonServices.service('MessagesService', i)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })); __extends = this && this.__extends || function () {
    var n = Object.setPrototypeOf || {
      __proto__: [
      ]
    }
    instanceof Array && function (n, t) {
      n.__proto__ = t
    }
    || function (n, t) {
      for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
    };
    return function (t, i) {
      function r() {
        this.constructor = t
      }
      n(t, i);
      t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
    }
  }(), function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i;
        (function (t) {
          var i = function (n) {
            function t(t, i) {
              var r = n.call(this, t, i) || this;
              return r.baseUrl = 'Alpha.Mobile.Services.IOtherBankProducts',
              r
            }
            return __extends(t, n),
            t.prototype.getOtherBanks = function (n) {
              return this.dispatch(this.baseUrl + '/getOtherBanks', n)
            },
            t.prototype.getProductBalance = function (n) {
              return this.dispatch(this.baseUrl + '/getProductBalance', n)
            },
            t.prototype.getProductDetails = function (n) {
              return this.dispatch(this.baseUrl + '/getProductDetails', n)
            },
            t.prototype.getProductTransactions = function (n) {
              return this.dispatch(this.baseUrl + '/getProductTransactions', n)
            },
            t.prototype.finishOtherBankMultipleProductsAddition = function (n) {
              return this.dispatch(this.baseUrl + '/finishOtherBankMultipleProductsAddition', n)
            },
            t.prototype.saveOAuthCallbackState = function (n) {
              return this.dispatch(this.baseUrl + '/saveOAuthCallbackState', n)
            },
            t.prototype.getAllOrSpecifiedProducts = function (n) {
              return this.dispatch(this.baseUrl + '/getAllOrSpecifiedProducts', n)
            },
            t.$inject = [
              '$http',
              '$q'
            ],
            t
          }(t.ProxyDispatcher);
          n.commonServices.service('OtherBankProductsServiceProxy', i)
        }) (i = t.proxies || (t.proxies = {
        }))
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })), function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        n.commonServices.service('OtpEncryptionService', [
          'EncryptionService',
          function (n) {
            function i(n) {
              for (var i = t.length; i >= 0 && !n[t[i]]; ) i--;
              return i >= 0 ? t[i] : null
            }
            this.encryptOtp = function (t) {
              var r,
              u,
              f;
              t && (r = i(t), r && t.ActivityDateTime && t.UniqueIdentifier && (u = {
                a: t.ActivityDateTime,
                u: t.UniqueIdentifier,
                p: t[r]
              }, f = JSON.stringify(u), t[r] = n.encryptText(f) + ' ' + n.encryptionParams().N + ' ' + n.encryptionParams().E))
            };
            var t = [
              'OTP',
              'otp',
              'otpCode',
              'Otp',
              'OldOTP'
            ]
          }
        ])
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })), function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t;
        (function (n) {
          n[n.Inactive = 0] = 'Inactive';
          n[n.Enquire = 1] = 'Enquire';
          n[n.Required = 2] = 'Required';
          n[n.NotRequired = 3] = 'NotRequired';
          n[n.Resolved = 4] = 'Resolved';
          n[n.Unfulfillable = 5] = 'Unfulfillable';
          n[n.Error = 6] = 'Error'
        }) (t = n.OtpStatus || (n.OtpStatus = {
        }))
      }) (t = n.services || (n.services = {
      }))
    }) (t = n.interfaces || (n.interfaces = {
    }))
  }(alpha || (alpha = {
  })); __extends = this && this.__extends || function () {
    var n = Object.setPrototypeOf || {
      __proto__: [
      ]
    }
    instanceof Array && function (n, t) {
      n.__proto__ = t
    }
    || function (n, t) {
      for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
    };
    return function (t, i) {
      function r() {
        this.constructor = t
      }
      n(t, i);
      t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
    }
  }(), function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i;
        (function (t) {
          var i = function (t) {
            function i(n, i) {
              var r = t.call(this, n, i) || this;
              return r.baseUrl = 'api/Payments.svc',
              r
            }
            return __extends(i, t),
            i.prototype.executePayment = function (n) {
              return this.dispatch(this.baseUrl + '/executePayment', n)
            },
            i.prototype.getPaymentTypes = function (t, i) {
              i === void 0 && (i = !1);
              var r = 'getPaymentTypes_PageNumber:' + (n.utils.isUndefinedOrNull(t.PageNumber) ? '' : t.PageNumber.toString()) + '_ResultsPerPage:' + (n.utils.isUndefinedOrNull(t.ResultsPerPage) ? '' : t.ResultsPerPage.toString()) + '_SearchValue:' + (n.utils.isUndefinedOrNull(t.SearchValue) ? '' : t.SearchValue.toString()) + '_CreateGroups:' + (n.utils.isUndefinedOrNull(t.CreateGroups) ? '' : t.CreateGroups.toString()) + '_IncludeChildPayments:' + (n.utils.isUndefinedOrNull(t.IncludeChildPayments) ? '' : t.IncludeChildPayments.toString()) + '_PaymentProductType:' + (n.utils.isUndefinedOrNull(t.PaymentProductType) ? '' : t.PaymentProductType.toString()) + '_OnlyForCurrentChannel:' + (n.utils.isUndefinedOrNull(t.OnlyForCurrentChannel) ? '' : t.OnlyForCurrentChannel.toString());
              return this.getCached(this.baseUrl + '/getPaymentTypes', t, r, i)
            },
            i.prototype.getPaymentTypesByGroup = function (t, i) {
              i === void 0 && (i = !1);
              var r = 'getPaymentTypesByGroup_GroupId:' + (n.utils.isUndefinedOrNull(t.GroupId) ? '' : t.GroupId.toString());
              return this.getCached(this.baseUrl + '/getPaymentTypesByGroup', t, r, i)
            },
            i.prototype.getPaymentType = function (t, i) {
              i === void 0 && (i = !1);
              var r = 'getPaymentType_PaymentTypeId:' + (n.utils.isUndefinedOrNull(t.PaymentTypeId) ? '' : t.PaymentTypeId.toString());
              return this.getCached(this.baseUrl + '/getPaymentType', t, r, i)
            },
            i.prototype.paymentExpenses = function (n) {
              return this.dispatch(this.baseUrl + '/paymentExpenses', n)
            },
            i.prototype.authorize = function (n) {
              return this.dispatch(this.baseUrl + '/authorize', n)
            },
            i.prototype.eParavoloIssue = function (n) {
              return this.dispatch(this.baseUrl + '/eParavoloIssue', n)
            },
            i.prototype.geteParavoloData = function (t, i) {
              i === void 0 && (i = !1);
              var r = 'geteParavoloData_ForeasID:' + (n.utils.isUndefinedOrNull(t.ForeasID) ? '' : t.ForeasID.toString()) + '_CategoryID:' + (n.utils.isUndefinedOrNull(t.CategoryID) ? '' : t.CategoryID.toString()) + '_TypeID:' + (n.utils.isUndefinedOrNull(t.TypeID) ? '' : t.TypeID.toString());
              return this.getCached(this.baseUrl + '/geteParavoloData', t, r, i)
            },
            i.prototype.getDateAndAmountForPayment = function (n) {
              return this.dispatch(this.baseUrl + '/getDateAndAmountForPayment', n)
            },
            i.$inject = [
              '$http',
              '$q'
            ],
            i
          }(t.ProxyDispatcher);
          n.commonServices.service('PaymentsServiceProxy', i)
        }) (i = t.proxies || (t.proxies = {
        }))
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })), function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        var t = function () {
          function t(n, t) {
            this.paymentsServiceProxy = n;
            this.transfersServiceProxy = t
          }
          return t.prototype.ExecutePayment = function (n) {
            return this.paymentsServiceProxy.executePayment(n)
          },
          t.prototype.ExecuteLoanPayment = function (t, i) {
            return i && delete t.PaymentDate,
            n.utils.isUndefinedOrNull(t.OTP) && delete t.OTP,
            t.Currency = n.server.Currency.EUR,
            t.PaymentType = 2,
            this.paymentsServiceProxy.executePayment(t)
          },
          t.prototype.GetExpenses = function (n) {
            return this.transfersServiceProxy.transferExpenses(n)
          },
          t.prototype.Authorize = function (n) {
            return this.paymentsServiceProxy.authorize(n)
          },
          t.prototype.IssueVoucher = function (n) {
            return this.paymentsServiceProxy.eParavoloIssue(n)
          },
          t.$inject = [
            'PaymentsServiceProxy',
            'TransfersServiceProxy'
          ],
          t
        }();
        n.commonServices.service('PaymentsService', t)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })), function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        var t = function () {
          function t(n, t) {
            this.templateCache = n;
            this.stringsService = t
          }
          return t.prototype.getFieldTypes = function () {
            return [{
              id: 0,
              value: 'Kείμενο',
              icon: 'fa-edit',
              template: '<input %d% name type="text" data-ng-model="vm.Model.DynamicValues[%c%]" data-ng-required="{{field.IsRequired}}" data-ng-pattern=' + (angular.version.minor >= 3 ? '"field.RegExpression"' : '"/{{field.Regex}}/"') + ' class="form-control" data-pattern-error="%e%" data-edit-paste="" data-val-tip />'
            },
            {
              id: 1,
              value: 'Boolean',
              icon: 'fa-edit',
              template: '<input %d% name type="text" data-ng-model="vm.Model.DynamicValues[%c%]" data-ng-required="{{field.IsRequired}}" data-ng-pattern=' + (angular.version.minor >= 3 ? '"field.RegExpression"' : '"/{{field.Regex}}/"') + ' class="form-control" data-pattern-error="%e%" data-val-tip />'
            },
            {
              id: 2,
              value: 'Aριθμός',
              icon: 'fa-edit',
              template: '<input %d% name type="text" data-val-num data-is-amount="false" data-ng-model="vm.Model.DynamicValues[%c%]" data-ng-required="{{field.IsRequired }}" class="form-control" data-val-tip />'
            },
            {
              id: 3,
              value: 'Hμερομηνία',
              icon: 'fa-edit',
              template: '<div class="datepicker"><input %d% name  type="text" data-check-transfer-date="" data-allow-weekends="true" class="form-control date" data-ng-model="vm.Model.DynamicValues[%c%]" data-datepicker-options="vm.dateOptions" data-datepicker-popup="{{vm.dateFormat}}" data-is-open="vm.toggleDatePicker1" data-show-button-bar="false" data-close-text="Close" data-min-date="vm.Model.CurrentWorkingDateValue" data-ng-required="{{field.IsRequired }}" data-val-tip /><div>'
            },
            {
              id: 4,
              value: 'Λίστα Επιλογών',
              icon: 'fa-edit',
              template: '<div class="dropdownhandler"><div class="dropdownhandler-inner"><div ui-select="" data-ng-disabled="vm.IsBusy" data-ng-model="vm.Model.DynamicValues[%c%]" data-theme="bootstrap" ><div ui-select-match="" placeholder="' + this.stringsService.chooseLabel + '" ><div class="singleColoring"><span class="bank-product-elipsis">{{$select.selected.Txt}}</span></div></div><div ui-select-choices="" data-repeat="item in vm.Model.OptionsFor[%c%][0]" data-scrollable="" ><div><div class="singleColoring"><span class="bank-product-elipsis">{{item.Txt}}</span></div></div></div></div></div></div><div><input name %req% data-ng-model="vm.Model.DynamicValues[%c%]" type="hidden" data-val-tip /></div>'
            },
            {
              id: 5,
              value: 'Hμερομηνία χωρίς ελάχιστο',
              icon: 'fa-edit',
              template: '<div class="datepicker"><input %d% name  type="text" data-check-transfer-date="" data-allow-weekends="true" class="form-control date" data-ng-model="vm.Model.DynamicValues[%c%]" data-datepicker-options="vm.dateOptions" data-datepicker-popup="{{vm.dateFormat}}" data-is-open="vm.toggleDatePicker1" data-show-button-bar="false" data-close-text="Close" data-ng-required="{{field.IsRequired }}" data-val-tip /><div>'
            },
            {
              id: 6,
              value: 'Κωδικός πληρωμής με έλεγχο ψηφίων',
              icon: 'fa-edit',
              template: '<input %d% name type="text" data-ng-blur="vm.checkDigits()" data-ng-model="vm.Model.DynamicValues[%c%]" data-ng-required="{{field.IsRequired}}" data-ng-pattern=' + (angular.version.minor >= 3 ? '"field.RegExpression"' : '"/{{field.Regex}}/"') + ' class="form-control" data-pattern-error="%e%" data-edit-paste="" data-val-tip />'
            }
            ]
          },
          t.prototype.getFieldTypeTemplate = function (t, i, r) {
            var e = this.getFieldTypes().filter(function (n) {
              return n.id == t.FieldType
            }) [0],
            s = 'paymentTypeField_' + t.Id.toString(),
            o,
            h;
            if (!this.templateCache.get(s)) {
              var f = '',
              c = 'name="paymentTypeField_' + t.Id.toString() + '"',
              u = e.template.replace('name', c);
              u = u.replace(/%c%/g, '\'' + t.FieldName + '\'');
              o = '';
              t.FieldError ? o = t.FieldError : null != i && null != r && (t.MinLength || t.MaxLength) ? (h = r && i.Info.CodePrompt && i.Info.CodePrompt.length ? i.Info.CodePrompt : t.DisplayName, o = t.MinLength < t.MaxLength ? n.utils.formatString(this.stringsService['payments.dynamic.validation.numbers.atLeastLength.message'], [
                h,
                t.MinLength
              ])  : n.utils.formatString(this.stringsService['payments.dynamic.validation.numbers.length.message'], [
                h,
                t.MinLength
              ]))  : o = this.stringsService.invalidCode;
              u = u.replace('%e%', o);
              (e.id == 0 || e.id == 6) && (t.MaxLength && t.MaxLength > 0 && (f += ' data-ng-maxlength="' + t.MaxLength + '"\' data-max-length-error="' + this.stringsService['valtip.maxlength'] + ' ' + t.MaxLength + '"\' ', f += ' maxlength="' + t.MaxLength + '"\' '), t.MinLength && t.MinLength > 0 && (f += ' data-ng-minlength="' + t.MinLength + '"\' data-min-length-error="' + this.stringsService['valtip.minlength'] + ' ' + t.MinLength + '"\' '));
              e.id == 4 && (u = t.IsRequired ? u.replace('%req%', 'required')  : u.replace('%req%', ''));
              e.id == 2 && (t.MaxValue && t.MaxValue > 0 && (f += ' max="' + t.MaxValue + '" data-max-error="' + this.stringsService['valtip.maxamount'] + ' ' + t.MaxValue + '"'), t.MinValue && t.MinValue > 0 && (f += ' min="' + t.MinValue + '" data-min-error="' + this.stringsService['valtip.minamount'] + ' ' + t.MinValue + '"'));
              f == '' ? u.indexOf('%d%') != - 1 && (u = u.replace('%d%', ''))  : u = u.replace('%d%', f);
              this.templateCache.put(s, u)
            }
            return s
          },
          t.$inject = [
            '$templateCache',
            'STRINGS'
          ],
          t
        }();
        n.commonServices.service('PaymentTypeService', t)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })); __extends = this && this.__extends || function () {
    var n = Object.setPrototypeOf || {
      __proto__: [
      ]
    }
    instanceof Array && function (n, t) {
      n.__proto__ = t
    }
    || function (n, t) {
      for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
    };
    return function (t, i) {
      function r() {
        this.constructor = t
      }
      n(t, i);
      t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
    }
  }(), function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i;
        (function (t) {
          var i = function (n) {
            function t(t, i) {
              var r = n.call(this, t, i) || this;
              return r.baseUrl = 'Alpha.Mobile.Services.IPhoneBanking',
              r
            }
            return __extends(t, n),
            t.prototype.executeSignOn = function (n, t) {
              t === void 0 && (t = !1);
              return this.getCached(this.baseUrl + '/executeSignOn', n, 'executeSignOn', t)
            },
            t.$inject = [
              '$http',
              '$q'
            ],
            t
          }(t.ProxyDispatcher);
          n.commonServices.service('PhoneBankingServiceProxy', i)
        }) (i = t.proxies || (t.proxies = {
        }))
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })); alpha.commonServices.service('postNewWindowService', [
    '$window',
    'baseUrl',
    'RoleService',
    function (n, t, i) {
      return function (r, u, f) {
        var s,
        y,
        e,
        a,
        h,
        o,
        c,
        l,
        v;
        r.hasOwnProperty('Product') && r.DocumentRequestType === 31 && (r.Details = JSON.stringify(r.Product.Details));
        r.hasOwnProperty('Banks') && delete r.Banks;
        r.hasOwnProperty('Countries') && delete r.Countries;
        s = '';
        s += '<form method=\'POST\' accept-charset=\'UTF-8\' ';
        s += 'action=\'' + n.location.protocol + '//' + n.location.host + t.value + u + '\'>';
        y = $('input[name=\'__RequestVerificationToken\']').val();
        s += '<input type=\'hidden\' name=\'__RequestVerificationToken\' value=\'' + y + '\'/>';
        for (e in r) if (r.hasOwnProperty(e) && !angular.isFunction(r[e]) && !/^_/.test(e)) if (e == 'LastPageIndices') {
          h = 0;
          for (o in r[e]) {
            for (a in o) o.hasOwnProperty(a) && (s += '<input type=\'hidden\' name=\'' + e + '[' + h + ']\' value=\'' + r[e][o] + '\'/>');
            h++
          }
        } else if (angular.isArray(r[e])) {
          h = 0;
          for (o in r[e]) {
            for (a in o) o.hasOwnProperty(a) && (s += '<input type=\'hidden\' name=\'' + e + '[' + h + '].Key\' value=\'' + alpha.utils.safeSingleQuoteEscape(r[e][o].Key) + '\'/>', s += '<input type=\'hidden\' name=\'' + e + '[' + h + '].Value\' value=\'' + alpha.utils.safeSingleQuoteEscape(r[e][o].Value) + '\'/>');
            h++
          }
        } else if (angular.isObject(r[e])) {
          h = 0;
          for (o in r[e]) r[e].hasOwnProperty(o) && (s += '<input type=\'hidden\' name=\'' + e + '.' + o + '\' value=\'' + r[e][o] + '\'/>'),
          h++
        } else s += '<input type=\'hidden\' name=\'' + e + '\' value=\'' + alpha.utils.safeSingleQuoteEscape(r[e]) + '\'/>';
        f = i.isAlphaPhone();
        f ? (c = $('<iframe style=\'display:none\'/>').appendTo('body'), l = c[0].contentWindow || c[0].contentDocument, l.document.open(), l.document.write('<html><head><meta charset=\'utf-8\'/></head><body>'), l.document.write(s), l.document.write('</body></html>'), l.document.close(), v = c.contents().find('form'), v != null && v.submit())  : (c = n.open(), $(c.document.head).html('<meta charset=\'utf-8\'/>'), $(c.document.body).html(s), $('form', c.document.body).submit())
      }
    }
  ]); __extends = this && this.__extends || function () {
    var n = Object.setPrototypeOf || {
      __proto__: [
      ]
    }
    instanceof Array && function (n, t) {
      n.__proto__ = t
    }
    || function (n, t) {
      for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
    };
    return function (t, i) {
      function r() {
        this.constructor = t
      }
      n(t, i);
      t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
    }
  }(), function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i;
        (function (t) {
          var i = function (t) {
            function i(n, i) {
              var r = t.call(this, n, i) || this;
              return r.baseUrl = 'api/products.svc',
              r
            }
            return __extends(i, t),
            i.prototype.getProfileProducts = function (t, i) {
              i === void 0 && (i = !1);
              var r = 'getProfileProducts_ProductTypeIDs:' + (n.utils.isUndefinedOrNull(t.ProductTypeIDs) ? '' : t.ProductTypeIDs.toString()) + '_RequestType:' + (n.utils.isUndefinedOrNull(t.RequestType) ? '' : t.RequestType.toString()) + '_ReturnBalances:' + (n.utils.isUndefinedOrNull(t.ReturnBalances) ? '' : t.ReturnBalances.toString()) + '_MaxRecords:' + (n.utils.isUndefinedOrNull(t.MaxRecords) ? '' : t.MaxRecords.toString()) + '_LastPageIndex:' + (n.utils.isUndefinedOrNull(t.LastPageIndex) ? '' : t.LastPageIndex.toString()) + '_PreferredOnly:' + (n.utils.isUndefinedOrNull(t.PreferredOnly) ? '' : t.PreferredOnly.toString()) + '_ReturnDetails:' + (n.utils.isUndefinedOrNull(t.ReturnDetails) ? '' : t.ReturnDetails.toString()) + '_ProductCategories:' + (n.utils.isUndefinedOrNull(t.ProductCategories) ? '' : t.ProductCategories.toString());
              return this.getCached(this.baseUrl + '/getProfileProducts?q=' + n.server.ProductRequestType[t.RequestType], t, r, i)
            },
            i.prototype.getProfileProductsNew = function (n) {
              return this.dispatch(this.baseUrl + '/getProfileProductsNew', n)
            },
            i.prototype.getCMProfileProducts = function (t, i) {
              i === void 0 && (i = !1);
              var r = 'getCMProfileProducts_ProductTypeIDs:' + (n.utils.isUndefinedOrNull(t.ProductTypeIDs) ? '' : t.ProductTypeIDs.toString()) + '_RequestType:' + (n.utils.isUndefinedOrNull(t.RequestType) ? '' : t.RequestType.toString()) + '_ReturnBalances:' + (n.utils.isUndefinedOrNull(t.ReturnBalances) ? '' : t.ReturnBalances.toString()) + '_MaxRecords:' + (n.utils.isUndefinedOrNull(t.MaxRecords) ? '' : t.MaxRecords.toString()) + '_LastPageIndex:' + (n.utils.isUndefinedOrNull(t.LastPageIndex) ? '' : t.LastPageIndex.toString()) + '_PreferredOnly:' + (n.utils.isUndefinedOrNull(t.PreferredOnly) ? '' : t.PreferredOnly.toString()) + '_ReturnDetails:' + (n.utils.isUndefinedOrNull(t.ReturnDetails) ? '' : t.ReturnDetails.toString()) + '_ProductCategories:' + (n.utils.isUndefinedOrNull(t.ProductCategories) ? '' : t.ProductCategories.toString());
              return this.getCached(this.baseUrl + '/getCMProfileProducts', t, r, i)
            },
            i.prototype.getAccountStatements = function (n) {
              return this.dispatch(this.baseUrl + '/getAccountStatements', n)
            },
            i.prototype.getAccountBalance = function (n) {
              return this.dispatch(this.baseUrl + '/getAccountBalance', n)
            },
            i.prototype.getIncomingOrders = function (n) {
              return this.dispatch(this.baseUrl + '/getIncomingOrders', n)
            },
            i.prototype.getIncomingOrderDetails = function (n) {
              return this.dispatch(this.baseUrl + '/getIncomingOrderDetails', n)
            },
            i.prototype.getCardBalance = function (n) {
              return this.dispatch(this.baseUrl + '/getCardBalance', n)
            },
            i.prototype.getLoanBalance = function (n) {
              return this.dispatch(this.baseUrl + '/getLoanBalance', n)
            },
            i.prototype.getChequeStatus = function (n) {
              return this.dispatch(this.baseUrl + '/getChequeStatus', n)
            },
            i.prototype.getCardStatements = function (n) {
              return this.dispatch(this.baseUrl + '/getCardStatements', n)
            },
            i.prototype.getLoanStatements = function (n) {
              return this.dispatch(this.baseUrl + '/getLoanStatements', n)
            },
            i.prototype.getCardBonusSecure = function (t, i) {
              i === void 0 && (i = !1);
              var r = 'getCardBonusSecure_CDI:' + (n.utils.isUndefinedOrNull(t.CDI) ? '' : t.CDI.toString());
              return this.getCached(this.baseUrl + '/getCardBonusSecure', t, r, i)
            },
            i.prototype.getProductTypes = function (t, i) {
              i === void 0 && (i = !1);
              var r = 'getProductTypes_RequestType:' + (n.utils.isUndefinedOrNull(t.RequestType) ? '' : t.RequestType.toString());
              return this.getCached(this.baseUrl + '/getProductTypes', t, r, i)
            },
            i.prototype.getProductInfo = function (n) {
              return this.dispatch(this.baseUrl + '/getProductInfo', n)
            },
            i.prototype.getCdiMatch = function (n) {
              return this.dispatch(this.baseUrl + '/getCdiMatch', n)
            },
            i.prototype.getTimeDepositInfos = function (n) {
              return this.dispatch(this.baseUrl + '/getTimeDepositInfos', n)
            },
            i.prototype.getMutualInfo = function (n) {
              return this.dispatch(this.baseUrl + '/getMutualInfo', n)
            },
            i.prototype.getMutualInfoDetails = function (n) {
              return this.dispatch(this.baseUrl + '/getMutualInfoDetails', n)
            },
            i.prototype.getAggregatedAccountStatements = function (n) {
              return this.dispatch(this.baseUrl + '/getAggregatedAccountStatements', n)
            },
            i.prototype.getAlphaPrimeOrPrivateInfo = function (n) {
              return this.dispatch(this.baseUrl + '/getAlphaPrimeOrPrivateInfo', n)
            },
            i.prototype.chequeBookApplication = function (n) {
              return this.dispatch(this.baseUrl + '/chequeBookApplication', n)
            },
            i.prototype.chequeBookCancelApplication = function (n) {
              return this.dispatch(this.baseUrl + '/chequeBookCancelApplication', n)
            },
            i.prototype.chequeBookQueryApplications = function (n) {
              return this.dispatch(this.baseUrl + '/chequeBookQueryApplications', n)
            },
            i.prototype.getCardEStatements = function (n) {
              return this.dispatch(this.baseUrl + '/getCardEStatements', n)
            },
            i.prototype.getAccountEStatements = function (n) {
              return this.dispatch(this.baseUrl + '/getAccountEStatements', n)
            },
            i.prototype.getCitibankProductMapping = function (n) {
              return this.dispatch(this.baseUrl + '/getCitibankProductMapping', n)
            },
            i.prototype.accountTotalBlock = function (n) {
              return this.dispatch(this.baseUrl + '/accountTotalBlock', n)
            },
            i.prototype.accountTotalUnblock = function (n) {
              return this.dispatch(this.baseUrl + '/accountTotalUnblock', n)
            },
            i.prototype.cdiMatch = function (n) {
              return this.dispatch(this.baseUrl + '/cdiMatch', n)
            },
            i.prototype.getOtpCards = function (n) {
              return this.dispatch(this.baseUrl + '/getOtpCards', n)
            },
            i.prototype.getProductType = function (n) {
              return this.dispatch(this.baseUrl + '/getProductType', n)
            },
            i.$inject = [
              '$http',
              '$q'
            ],
            i
          }(t.ProxyDispatcher);
          n.commonServices.service('ProductsServiceProxy', i)
        }) (i = t.proxies || (t.proxies = {
        }))
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })), function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i = function () {
          function t(n, t) {
            this.productsServiceProxy = n;
            this.cache = {
            };
            this.$q = t
          }
          return t.prototype.getProfileProducts = function (n, t) {
            t === void 0 && (t = !1);
            n.OperationalGroups = n.OperationalGroups || [
            ];
            n.ProductCategories = n.ProductCategories || [
            ];
            n.PreferredOnly = n.PreferredOnly || !1;
            n.ReturnDetails = n.ReturnDetails || !1;
            n.ProductTypeIDs = n.ProductTypeIDs || [
            ];
            n.LastPageIndex = n.LastPageIndex || '';
            return this.productsServiceProxy.getProfileProducts(n, t)
          },
          t.prototype.getProfileProductsNew = function (n, t) {
            t === void 0 && (t = !1);
            return this.productsServiceProxy.getProfileProductsNew(n)
          },
          t.prototype.getProductType = function (n) {
            return this.productsServiceProxy.getProductType(n)
          },
          t.prototype.getProfileProductsRequest = function (n, t, i, r, u, f, e) {
            var o = {
            };
            return o.ReturnBalances = n,
            o.MaxRecords = t,
            o.LastPageIndex = r || '',
            o.PreferredOnly = u,
            o.ReturnDetails = f,
            o.RequestType = i,
            o.ProductTypeIDs = e || [
            ],
            o
          },
          t.prototype.getPreferredProfileProducts = function (n, t, i, r) {
            return this.getProfileProducts({
              ReturnBalances: n,
              MaxRecords: t,
              RequestType: i,
              LastPageIndex: r,
              PreferredOnly: !0
            }, !0)
          },
          t.prototype.getProductInfo = function (t, i) {
            var r = {
            };
            return n.utils.isUndefinedOrNull(t.Family) && delete t.Family,
            r.Product = [
              t
            ],
            t.ProductInfoType && (r.ProductInfoType = t.ProductInfoType),
            i && (r.ExtraDetails = i),
            this.productsServiceProxy.getProductInfo(r)
          },
          t.prototype.getCdiMatch = function (n) {
            var t = {
            };
            return delete n.Family,
            t.Product = [
              n
            ],
            this.productsServiceProxy.getCdiMatch(t)
          },
          t.prototype.GetCardBonusSecure = function (n) {
            return this.productsServiceProxy.getCardBonusSecure(n)
          },
          t.prototype.getCardBalance = function (n) {
            return this.productsServiceProxy.getCardBalance(n)
          },
          t.prototype.getCardStatements = function (n) {
            return this.productsServiceProxy.getCardStatements(n)
          },
          t.prototype.getAccountStatements = function (n, t, i, r, u, f, e) {
            var o = this.getAccountStatementsRequest(n, t, i, r, u, f, e);
            return this.productsServiceProxy.getAccountStatements(o)
          },
          t.prototype.getAccountStatementsRequest = function (n, t, i, r, u, f, e) {
            return {
              ProductCode: n,
              ProductTypeID: t,
              FromDate: f || null,
              ToDate: e || null,
              MaxRecords: i,
              LastPageIndex: u || '',
              LastTen: r
            }
          },
          t.prototype.getAccountBalance = function (n) {
            return this.productsServiceProxy.getAccountBalance(n)
          },
          t.prototype.getChequeStatus = function (n) {
            return n.LastPageIndex = n.LastPageIndex || '',
            this.productsServiceProxy.getChequeStatus(n)
          },
          t.prototype.accountTotalBlock = function (n) {
            return this.productsServiceProxy.accountTotalBlock(n)
          },
          t.prototype.accountTotalUnblock = function (n) {
            return this.productsServiceProxy.accountTotalUnblock(n)
          },
          t.prototype.cdiMatch = function (n, t) {
            var i = {
            };
            return i.ProductCode = n,
            i.ProductTypeId = t,
            this.productsServiceProxy.cdiMatch(i)
          },
          t.prototype.getIncomingOrders = function (n, t, i, r, u, f, e, o, s) {
            var h = this.getIncomingOrdersRequest(n, t, i, r, u, f, e, o, s);
            return this.productsServiceProxy.getIncomingOrders(h)
          },
          t.prototype.getIncomingOrdersRequest = function (n, t, i, r, u, f, e, o, s) {
            return {
              PaymentIO: 1,
              ProductCode: n,
              ProductTypeID: t,
              LastPageIndex: s || '',
              AmountFrom: r,
              AmountTo: u,
              DateFrom: f,
              DateTo: e,
              Currency: o
            }
          },
          t.prototype.getIncomingOrdersRequestPDF = function (t, i, r, u, f, e, o, s, h) {
            return {
              PaymentIO: 1,
              ProductCode: t,
              ProductTypeID: i,
              LastPageIndex: h || '',
              AmountFrom: u,
              AmountTo: f,
              DateFrom: e ? n.utils.toShortDateString(e)  : undefined,
              DateTo: o ? n.utils.toShortDateString(o)  : undefined,
              Currency: s
            }
          },
          t.prototype.getLoanBalance = function (n) {
            return this.productsServiceProxy.getLoanBalance(n)
          },
          t.prototype.getLoanStatementsRequest = function (n, t, i, r, u, f) {
            var e = {
              ProductCode: n,
              ProductTypeID: t,
              LastPageIndex: r || '',
              MaxRecords: i,
              FromDate: u,
              ToDate: f
            };
            return (u == undefined || f == undefined) && (delete e.FromDate, delete e.ToDate),
            e
          },
          t.prototype.getLoanStatements = function (n) {
            return n.LastPageIndex = n.LastPageIndex || '',
            (n.FromDate == undefined || n.ToDate == undefined) && (delete n.FromDate, delete n.ToDate),
            this.productsServiceProxy.getLoanStatements(n)
          },
          t.prototype.getTimeDeposit = function (n) {
            return this.productsServiceProxy.getTimeDepositInfos(n)
          },
          t.prototype.getMutualInfo = function (n) {
            return this.productsServiceProxy.getMutualInfo(n)
          },
          t.prototype.getMutualInfoRequest = function (n, t) {
            return {
              ProductCode: n,
              ProductTypeID: t
            }
          },
          t.prototype.getMutualDetailsInfo = function (n) {
            return this.productsServiceProxy.getMutualInfoDetails(n)
          },
          t.prototype.getMutualDetailsInfoRequest = function (n, t, i) {
            return {
              ProductCode: n,
              ProductTypeID: t,
              FundCode: i
            }
          },
          t.prototype.getAlphaPrimePrivateInfo = function (n) {
            return this.productsServiceProxy.getAlphaPrimeOrPrivateInfo(n)
          },
          t.prototype.getAggregatedAccountStatementsRequest = function (n, t, i, r, u) {
            return {
              ProductCode: n,
              ProductTypeID: t,
              GetDetails: i,
              GetSummary: r,
              LastPageIndex: u
            }
          },
          t.prototype.getAggregatedAccountStatements = function (t) {
            return n.utils.isUndefinedOrNull(t.GetDetails) && delete t.GetDetails,
            n.utils.isUndefinedOrNull(t.GetSummary) && delete t.GetSummary,
            this.productsServiceProxy.getAggregatedAccountStatements(t)
          },
          t.prototype.getAccountEStatements = function (n) {
            return this.productsServiceProxy.getAccountEStatements(n)
          },
          t.prototype.getCardEStatements = function (n) {
            return this.productsServiceProxy.getCardEStatements(n)
          },
          t.prototype.getIncomingOrderDetails = function (n) {
            return this.productsServiceProxy.getIncomingOrderDetails(n)
          },
          t.prototype.getChequebooks = function () {
            var n = {
              FromDate: new Date(1, 1, 2000).toDateString(),
              ToDate: (new Date).toDateString(),
              Status: 0
            };
            return this.productsServiceProxy.chequeBookQueryApplications(n)
          },
          t.prototype.cancelChequebook = function (n) {
            return this.productsServiceProxy.chequeBookCancelApplication(n)
          },
          t.prototype.orderNewChequebook = function (n) {
            return this.productsServiceProxy.chequeBookApplication(n)
          },
          t.prototype.getProductTypes = function (n) {
            return this.productsServiceProxy.getProductTypes(n)
          },
          t.prototype.getCitiBankProductMapping = function (n) {
            return this.productsServiceProxy.getCitibankProductMapping(n)
          },
          t.prototype.getCMProfileProducts = function (n) {
            return this.productsServiceProxy.getCMProfileProducts(n)
          },
          t.prototype.getCardBonusSecure = function (n) {
            return this.productsServiceProxy.getCardBonusSecure(n)
          },
          t.prototype.getOtpCards = function () {
            return this.productsServiceProxy.getOtpCards({
            })
          },
          t.$inject = [
            'ProductsServiceProxy',
            '$q'
          ],
          t
        }();
        t.ProductsService = i;
        n.commonServices.service('ProductsService', i)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })); __extends = this && this.__extends || function () {
    var n = Object.setPrototypeOf || {
      __proto__: [
      ]
    }
    instanceof Array && function (n, t) {
      n.__proto__ = t
    }
    || function (n, t) {
      for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
    };
    return function (t, i) {
      function r() {
        this.constructor = t
      }
      n(t, i);
      t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
    }
  }(), function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i;
        (function (t) {
          var i = function (n) {
            function t(t, i) {
              var r = n.call(this, t, i) || this;
              return r.baseUrl = 'api/public.svc',
              r
            }
            return __extends(t, n),
            t.prototype.getBranches = function (n) {
              return this.dispatch(this.baseUrl + '/getBranches', n)
            },
            t.prototype.getRates = function (n, t) {
              t === void 0 && (t = !1);
              return this.getCached(this.baseUrl + '/getRates', n, 'getRates', t)
            },
            t.prototype.lookUp = function (n, t) {
              t === void 0 && (t = !1);
              return this.getCached(this.baseUrl + '/lookUp', n, 'lookUp', t)
            },
            t.$inject = [
              '$http',
              '$q'
            ],
            t
          }(t.ProxyDispatcher);
          n.commonServices.service('PublicServiceProxy', i)
        }) (i = t.proxies || (t.proxies = {
        }))
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })); __extends = this && this.__extends || function () {
    var n = Object.setPrototypeOf || {
      __proto__: [
      ]
    }
    instanceof Array && function (n, t) {
      n.__proto__ = t
    }
    || function (n, t) {
      for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
    };
    return function (t, i) {
      function r() {
        this.constructor = t
      }
      n(t, i);
      t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
    }
  }(), function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i;
        (function (t) {
          var i = function (t) {
            function i(n, i) {
              var r = t.call(this, n, i) || this;
              return r.baseUrl = 'api/queries.svc',
              r
            }
            return __extends(i, t),
            i.prototype.validateDiasPaymentInfo = function (n) {
              return this.dispatch(this.baseUrl + '/validateDiasPaymentInfo', n)
            },
            i.prototype.getBackEndConfig = function (n) {
              return this.dispatch(this.baseUrl + '/getBackEndConfig', n)
            },
            i.prototype.getTransactionTemplates = function (t, i) {
              i === void 0 && (i = !1);
              var r = 'getTransactionTemplates_ID:' + (n.utils.isUndefinedOrNull(t.ID) ? '' : t.ID.toString()) + '_Type:' + (n.utils.isUndefinedOrNull(t.Type) ? '' : t.Type.toString());
              return this.getCached(this.baseUrl + '/getTransactionTemplates', t, r, i)
            },
            i.prototype.setTransactionTemplate = function (n) {
              return this.dispatch(this.baseUrl + '/setTransactionTemplate', n)
            },
            i.prototype.getSocialSecurityTree = function (n) {
              return this.dispatch(this.baseUrl + '/getSocialSecurityTree', n)
            },
            i.prototype.getTransactions = function (n) {
              return this.dispatch(this.baseUrl + '/getTransactions', n)
            },
            i.prototype.getDatesAndOnLineStatus = function (n) {
              return this.dispatch(this.baseUrl + '/getDatesAndOnLineStatus', n)
            },
            i.prototype.checkIBAN = function (n) {
              return this.dispatch(this.baseUrl + '/checkIBAN', n)
            },
            i.prototype.getAccountCurrency = function (n) {
              return this.dispatch(this.baseUrl + '/getAccountCurrency', n)
            },
            i.prototype.checkBIC = function (n) {
              return this.dispatch(this.baseUrl + '/checkBIC', n)
            },
            i.prototype.checkMIT101 = function (n) {
              return this.dispatch(this.baseUrl + '/checkMIT101', n)
            },
            i.prototype.checkProduct = function (n) {
              return this.dispatch(this.baseUrl + '/checkProduct', n)
            },
            i.prototype.getRates = function (n) {
              return this.dispatch(this.baseUrl + '/getRates', n)
            },
            i.prototype.getCountries = function (n, t) {
              t === void 0 && (t = !1);
              return this.getCached(this.baseUrl + '/getCountries', n, 'getCountries', t)
            },
            i.prototype.getProductBlocks = function (n) {
              return this.dispatch(this.baseUrl + '/getProductBlocks', n)
            },
            i.prototype.getProductHolds = function (n) {
              return this.dispatch(this.baseUrl + '/getProductHolds', n)
            },
            i.prototype.getProductUnclears = function (n) {
              return this.dispatch(this.baseUrl + '/getProductUnclears', n)
            },
            i.prototype.getCurrencies = function (n, t) {
              t === void 0 && (t = !1);
              return this.getCached(this.baseUrl + '/getCurrencies', n, 'getCurrencies', t)
            },
            i.prototype.getMessages = function (n) {
              return this.dispatch(this.baseUrl + '/getMessages', n)
            },
            i.prototype.updateMessages = function (n) {
              return this.dispatch(this.baseUrl + '/updateMessages', n)
            },
            i.prototype.getStandingOrders = function (n) {
              return this.dispatch(this.baseUrl + '/getStandingOrders', n)
            },
            i.prototype.getCardData = function (n) {
              return this.dispatch(this.baseUrl + '/getCardData', n)
            },
            i.prototype.getSetAlerts = function (n) {
              return this.dispatch(this.baseUrl + '/getSetAlerts', n)
            },
            i.prototype.getAccountAlertInfo = function (n) {
              return this.dispatch(this.baseUrl + '/getAccountAlertInfo', n)
            },
            i.prototype.setAccountAlertInfo = function (n) {
              return this.dispatch(this.baseUrl + '/setAccountAlertInfo', n)
            },
            i.prototype.getAccountsAlerts = function (n) {
              return this.dispatch(this.baseUrl + '/getAccountsAlerts', n)
            },
            i.prototype.setAccountAlert = function (n) {
              return this.dispatch(this.baseUrl + '/setAccountAlert', n)
            },
            i.prototype.getCardAlerts = function (n) {
              return this.dispatch(this.baseUrl + '/getCardAlerts', n)
            },
            i.prototype.setCardAlerts = function (n) {
              return this.dispatch(this.baseUrl + '/setCardAlerts', n)
            },
            i.prototype.getStandingPayment = function (n) {
              return this.dispatch(this.baseUrl + '/getStandingPayment', n)
            },
            i.prototype.setStandingPayment = function (n) {
              return this.dispatch(this.baseUrl + '/setStandingPayment', n)
            },
            i.prototype.getStandingPaymentFull = function (n) {
              return this.dispatch(this.baseUrl + '/getStandingPaymentFull', n)
            },
            i.prototype.verifiedByVisa = function (n) {
              return this.dispatch(this.baseUrl + '/verifiedByVisa', n)
            },
            i.prototype.setEStatement = function (n) {
              return this.dispatch(this.baseUrl + '/setEStatement', n)
            },
            i.prototype.getETimeDepositRates = function (t, i) {
              i === void 0 && (i = !1);
              var r = 'getETimeDepositRates_IsBonus:' + (n.utils.isUndefinedOrNull(t.IsBonus) ? '' : t.IsBonus.toString());
              return this.getCached(this.baseUrl + '/getETimeDepositRates', t, r, i)
            },
            i.prototype.getETimeDepositInfo = function (n, t) {
              t === void 0 && (t = !1);
              return this.getCached(this.baseUrl + '/getETimeDepositInfo', n, 'getETimeDepositInfo', t)
            },
            i.prototype.getETimeDepositInfoDetails = function (n) {
              return this.dispatch(this.baseUrl + '/getETimeDepositInfoDetails', n)
            },
            i.prototype.getSubscriptionBranches = function (n) {
              return this.dispatch(this.baseUrl + '/getSubscriptionBranches', n)
            },
            i.prototype.getInternationalDialCodes = function (n, t) {
              t === void 0 && (t = !1);
              return this.getCached(this.baseUrl + '/getInternationalDialCodes', n, 'getInternationalDialCodes', t)
            },
            i.prototype.getMyBankInfo = function (n) {
              return this.dispatch(this.baseUrl + '/getMyBankInfo', n)
            },
            i.prototype.getIRISPaymentInfo = function (n) {
              return this.dispatch(this.baseUrl + '/getIRISPaymentInfo', n)
            },
            i.prototype.confirmContactQuestion = function (n) {
              return this.dispatch(this.baseUrl + '/confirmContactQuestion', n)
            },
            i.prototype.confirmContactAnswer = function (n) {
              return this.dispatch(this.baseUrl + '/confirmContactAnswer', n)
            },
            i.prototype.getDebitCardApplicationInfo = function (n) {
              return this.dispatch(this.baseUrl + '/getDebitCardApplicationInfo', n)
            },
            i.prototype.getDebitCardApplicationInfoDetails = function (n) {
              return this.dispatch(this.baseUrl + '/getDebitCardApplicationInfoDetails', n)
            },
            i.prototype.registerP2P = function (n) {
              return this.dispatch(this.baseUrl + '/registerP2P', n)
            },
            i.prototype.sendP2PValidationCode = function (n) {
              return this.dispatch(this.baseUrl + '/sendP2PValidationCode', n)
            },
            i.prototype.getP2PSettings = function (n) {
              return this.dispatch(this.baseUrl + '/getP2PSettings', n)
            },
            i.prototype.queryContact = function (n) {
              return this.dispatch(this.baseUrl + '/queryContact', n)
            },
            i.prototype.updateP2P = function (n) {
              return this.dispatch(this.baseUrl + '/updateP2P', n)
            },
            i.prototype.unregisterP2P = function (n) {
              return this.dispatch(this.baseUrl + '/unregisterP2P', n)
            },
            i.prototype.getDiasExpenses = function (n) {
              return this.dispatch(this.baseUrl + '/getDiasExpenses', n)
            },
            i.prototype.getP2PTransactions = function (n) {
              return this.dispatch(this.baseUrl + '/getP2PTransactions', n)
            },
            i.prototype.getP2PRequests = function (n) {
              return this.dispatch(this.baseUrl + '/getP2PRequests', n)
            },
            i.prototype.getRecentContacts = function (n) {
              return this.dispatch(this.baseUrl + '/getRecentContacts', n)
            },
            i.prototype.cancelP2PRequest = function (n) {
              return this.dispatch(this.baseUrl + '/cancelP2PRequest', n)
            },
            i.prototype.deleteDeviceIDForFingerprintAndPin = function (n) {
              return this.dispatch(this.baseUrl + '/deleteDeviceIDForFingerprintAndPin', n)
            },
            i.prototype.getDeviceInfo = function (n) {
              return this.dispatch(this.baseUrl + '/getDeviceInfo', n)
            },
            i.prototype.getMessageTemplate = function (n) {
              return this.dispatch(this.baseUrl + '/getMessageTemplate', n)
            },
            i.prototype.getTaxFreeEntries = function (n) {
              return this.dispatch(this.baseUrl + '/getTaxFreeEntries', n)
            },
            i.prototype.isImmediateExecutionTime = function (n) {
              return this.dispatch(this.baseUrl + '/isImmediateExecutionTime', n)
            },
            i.prototype.getSmartOnlineApplicationInfo = function (n) {
              return this.dispatch(this.baseUrl + '/getSmartOnlineApplicationInfo', n)
            },
            i.prototype.getSmartOnlineApplicationInfoDetails = function (n) {
              return this.dispatch(this.baseUrl + '/getSmartOnlineApplicationInfoDetails', n)
            },
            i.prototype.getRatesForSmartOnlineApp = function (n) {
              return this.dispatch(this.baseUrl + '/getRatesForSmartOnlineApp', n)
            },
            i.prototype.getOtpPromptOptions = function (n) {
              return this.dispatch(this.baseUrl + '/getOtpPromptOptions', n)
            },
            i.$inject = [
              '$http',
              '$q'
            ],
            i
          }(t.ProxyDispatcher);
          n.commonServices.service('QueriesServiceProxy', i)
        }) (i = t.proxies || (t.proxies = {
        }))
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })), function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        var t = function () {
          function t(n) {
            this.queriesServiceProxy = n
          }
          return t.prototype.getTransactions = function (n) {
            return this.queriesServiceProxy.getTransactions(n)
          },
          t.prototype.getTransactionsRequest = function (t, i, r, u, f, e, o, s, h, c, l, a, v, y) {
            var p = {
              MaxRecords: t,
              QueryType: f || 0,
              ByDate: e || 0,
              FromDate: r || '',
              ToDate: u || '',
              ProductTypeID: s || 0,
              DebitProductCode: a || '',
              ForCancellation: o || !1,
              LastPageIndex: i || '',
              CreditProductSearchTerm: h,
              AUN: c,
              Language: n.utils.isUndefinedOrNull(l) ? undefined : l,
              GetFailed: v,
              DebitProductID: y
            };
            return c || delete p.AUN,
            v || delete p.GetFailed,
            p
          },
          t.prototype.getProductBlocks = function (n) {
            n.LastPageIndex = n.LastPageIndex || '';
            return this.queriesServiceProxy.getProductBlocks(n)
          },
          t.prototype.getProductHolds = function (n) {
            n.LastPageIndex = n.LastPageIndex || '';
            return this.queriesServiceProxy.getProductHolds(n)
          },
          t.prototype.getProductUnclears = function (n) {
            n.LastPageIndex = n.LastPageIndex || '';
            return this.queriesServiceProxy.getProductUnclears(n)
          },
          t.prototype.getDatesAndOnLineStatus = function (n) {
            n === void 0 && (n = {
            });
            return this.queriesServiceProxy.getDatesAndOnLineStatus(n)
          },
          t.prototype.getRates = function (n) {
            n.AmountPosition = n.AmountPosition || 0;
            return this.queriesServiceProxy.getRates(n)
          },
          t.prototype.checkIBAN = function (n) {
            return this.queriesServiceProxy.checkIBAN(n)
          },
          t.prototype.checkBIC = function (n) {
            return this.queriesServiceProxy.checkBIC(n)
          },
          t.prototype.checkMIT101 = function (n) {
            return this.queriesServiceProxy.checkMIT101(n)
          },
          t.prototype.checkProduct = function (n) {
            return this.queriesServiceProxy.checkProduct(n)
          },
          t.prototype.getCheckProductRequest = function (t, i) {
            var r = {
            },
            u,
            f;
            return r.TypeID = 0,
            u = {
            },
            u.Name = n.server.DetailName.IBAN,
            u.DataType = 0,
            u.Value = t,
            f = {
            },
            f.Name = n.server.DetailName.BIC_CODE,
            f.DataType = 0,
            f.Value = i,
            r.Details = [
            ],
            r.Details.push(u),
            r.Details.push(f),
            r.Uses = [
            ],
            r.Code = '',
            r.TypeName = '',
            {
              InProduct: r
            }
          },
          t.prototype.getStandingOrders = function (n) {
            return this.queriesServiceProxy.getStandingOrders(n)
          },
          t.prototype.getStandingOrdersRequest = function (n, t, i) {
            return {
              StandingOrderNumber: n,
              MaxRecords: t || 10,
              LastPageIndex: i || ''
            }
          },
          t.prototype.getTransactionTemplates = function (n) {
            return this.queriesServiceProxy.getTransactionTemplates(n, !0)
          },
          t.prototype.getTransactionTemplatesRequest = function (n, t, i, r) {
            var u = {
            };
            return u.ID = n,
            u.Type = t,
            u.MaxRecords = i || 10,
            u.LastPageIndex = r || '',
            u
          },
          t.prototype.setTransactionTemplate = function (n, t, i, r, u, f, e) {
            i.Description = u;
            i.Transaction.Description = u;
            var o = this.buildTransactionTemplateModel(n, i, e);
            return this.queriesServiceProxy.setTransactionTemplate(o)
          },
          t.prototype.buildTransactionTemplateModel = function (n, t, i) {
            return {
              Action: n,
              AUN: t.Transaction.TransactionAUN,
              Template: t,
              TemplateType: t.TemplateType,
              Channel: 3,
              AddProductToProfile: i
            }
          },
          t.prototype.setTransactionTemplateOrder = function (n, t) {
            var i = {
              Template: {
              }
            };
            return i.Action = n,
            i.DataForUpdateOrderOnly = t,
            i.Channel = 3,
            this.queriesServiceProxy.setTransactionTemplate(i)
          },
          t.prototype.getStandingPayment = function (n) {
            return this.queriesServiceProxy.getStandingPayment(n)
          },
          t.prototype.getStandingPaymentRequest = function (n, t, i) {
            var r = {
            };
            return r.PaymentCode = n,
            r.PaymentTypeID = t,
            r.Channel = i,
            r
          },
          t.prototype.setStandingPayment = function (n, t, i, r, u) {
            var f = {
              Channel: n,
              Details: u || null,
              StandingPaymentEdit: i,
              StandingPaymentSet: t,
              StandingPaymentRecall: r
            };
            return i == null && delete f.StandingPaymentEdit,
            t == null && delete f.StandingPaymentSet,
            r == null && delete f.StandingPaymentRecall,
            this.queriesServiceProxy.setStandingPayment(f)
          },
          t.prototype.getStandingPaymentFull = function (n) {
            return this.queriesServiceProxy.getStandingPaymentFull(n)
          },
          t.prototype.verifiedByVisa = function (n) {
            return this.queriesServiceProxy.verifiedByVisa(n)
          },
          t.prototype.getCardData = function (n) {
            return this.queriesServiceProxy.getCardData(n)
          },
          t.prototype.getSubscriptionBranches = function () {
            return this.queriesServiceProxy.getSubscriptionBranches({
            })
          },
          t.prototype.getInternationalDialCodes = function () {
            return this.queriesServiceProxy.getInternationalDialCodes({
            }, !1)
          },
          t.prototype.getAccountCurrency = function (n) {
            return this.queriesServiceProxy.getAccountCurrency({
              Iban: n
            })
          },
          t.prototype.getMyBankInfo = function (n) {
            return this.queriesServiceProxy.getMyBankInfo(n)
          },
          t.prototype.getIRISPaymentInfo = function (n) {
            return this.queriesServiceProxy.getIRISPaymentInfo(n)
          },
          t.prototype.confirmContactQuestion = function (n) {
            return this.queriesServiceProxy.confirmContactQuestion({
              ContactType: n
            })
          },
          t.prototype.confirmContactAnswer = function (n, t, i) {
            return this.queriesServiceProxy.confirmContactAnswer({
              ActionType: n,
              ContactType: t,
              hasOTP: i
            })
          },
          t.prototype.getP2PSettings = function (n) {
            return this.queriesServiceProxy.getP2PSettings(n)
          },
          t.prototype.updateP2P = function (n) {
            return this.queriesServiceProxy.updateP2P(n)
          },
          t.prototype.unregisterP2P = function (n) {
            return this.queriesServiceProxy.unregisterP2P(n)
          },
          t.prototype.deleteDeviceIDForFingerprintAndPin = function (n) {
            return this.queriesServiceProxy.deleteDeviceIDForFingerprintAndPin(n)
          },
          t.prototype.getDeviceInfo = function (n) {
            return this.queriesServiceProxy.getDeviceInfo(n)
          },
          t.prototype.registerP2P = function (n) {
            return this.queriesServiceProxy.registerP2P(n)
          },
          t.prototype.validateDiasPaymentInfo = function (n) {
            return this.queriesServiceProxy.validateDiasPaymentInfo(n)
          },
          t.prototype.getBackEndConfig = function (n) {
            return this.queriesServiceProxy.getBackEndConfig(n)
          },
          t.prototype.getOtpPromptOptions = function (n) {
            return this.queriesServiceProxy.getOtpPromptOptions(n)
          },
          t.$inject = [
            'QueriesServiceProxy'
          ],
          t
        }();
        n.commonServices.service('QueriesService', t)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })), function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i = function () {
          function t(n, t, i) {
            this.$injector = n;
            this.lazyPermissionService = t;
            this.securtityService = i;
            this.role = 0;
            this.permissions = [
            ];
            this.lazyPermissions = [
            ];
            this.features = [
            ];
            var r = $('meta[name=Role]').attr('content');
            this.roleString = r;
            this.role = this.getRoleByString(r);
            this.isDemoUser = $('meta[name=IsDemo]').attr('content') === 'True'
          }
          return t.prototype.getRole = function () {
            return this.role
          },
          t.prototype.isDemo = function () {
            return this.isDemoUser
          },
          t.prototype.getRoleType = function () {
            if (this.role) switch (this.role) {
              case 1:
              case 16:
              case 10:
                return n.server.RoleType.Retail;
              case 5:
              case 8:
              case 13:
                return n.server.RoleType.Corporate;
              default:
                return n.server.RoleType.None
            }
            return n.server.RoleType.None
          },
          t.prototype.getRoleString = function (n) {
            return n === void 0 && (n = !1),
            n ? this.roleString.replace('_DualAction', '')  : this.roleString
          },
          t.prototype.getRolePermissions = function () {
            return this.permissions
          },
          t.prototype.isAccessAllowed = function (n) {
            var t = n.split(' ');
            for (var i in t) if (~this.permissions.indexOf(t[i])) return !0;
            return !1
          },
          t.prototype.getPermissionsPromise = function () {
            n.utils.isUndefinedOrNull(this.securtityService) && (this.securtityService = this.$injector.get('SecurityService'));
            var t = this;
            return this.securtityService.getUserSessionInfo().then(function (i) {
              return t.permissions = n.utils.isUndefinedOrNull(i.UserInfo.Permissions) ? [
              ] : i.UserInfo.Permissions,
              t.features = n.utils.isUndefinedOrNull(i.UserInfo.Features) ? [
              ] : i.UserInfo.Features,
              t.lazyPermissions = i.UserInfo.LazyPermissions || [
              ],
              t.permissions
            }, function () {
              return []
            })
          },
          t.prototype.hasFeature = function (n) {
            var t = n.split(' ');
            for (var i in t) if (~this.features.indexOf(t[i])) return !0;
            return !1
          },
          t.prototype.IsRetail = function () {
            switch (this.role) {
              case 1:
              case 2:
              case 10:
                return !0;
              default:
                return !1
            }
          },
          t.prototype.IsIndividualUser = function () {
            switch (this.role) {
              case 1:
              case 2:
                return !0;
              default:
                return !1
            }
          },
          t.prototype.IsAdminUser = function () {
            switch (this.role) {
              case 5:
              case 6:
              case 3:
              case 7:
                return !0;
              default:
                return !1
            }
          },
          t.prototype.IsApprovalUser = function () {
            switch (this.role) {
              case 13:
                return !0;
              default:
                return !1
            }
          },
          t.prototype.isEndUser = function () {
            switch (this.role) {
              case 8:
              case 11:
                return !0;
              default:
                return !1
            }
          },
          t.prototype.isAlphaPhone = function () {
            return this.getRole() == 10
          },
          t.prototype.isCurrentRole = function (n) {
            return this.role == this.getRoleByString(n)
          },
          t.prototype.getRoleByString = function (n) {
            switch (n) {
              case 'NoRole':
                return 0;
              case 'IndividualUser':
                return 1;
              case 'AdvancedIndividual':
                return 2;
              case 'PersonalCompany':
                return 3;
              case 'BMaster':
                return 4;
              case 'CompanyAdminUser':
                return 5;
              case 'CompanyAdminUser_DualAction':
                return 6;
              case 'SimpleCompany':
                return 7;
              case 'CompanyEndUser':
                return 8;
              case 'CompanyEndUser_DualAction':
                return 11;
              case 'CallCenterUser':
                return 9;
              case 'Alphaphone':
                return 10;
              case 'Mobile':
                return 12;
              case 'CompanyApproverUser':
                return 13;
              case 'PaymentHub':
                return 14;
              case 'PaymentHub_Mobile':
                return 15;
              default:
                return this.roleString = 'NoRole',
                0
            }
          },
          t.prototype.hasLazyPermission = function (n) {
            var t = this;
            return this.getPermissionsPromise().then(function () {
              return t.lazyPermissions.indexOf(n) > - 1 ? t.lazyPermissionService.calculatePermissions([n]).then(function () {
                return t.lazyPermissionService.getPermissionValue(n)
              })  : !1
            })
          },
          t.$inject = [
            '$injector',
            'LazyPermissionService'
          ],
          t
        }();
        t.RoleService = i;
        n.commonServices.service('RoleService', i)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  }));
  __extends = this && this.__extends || function () {
    var n = Object.setPrototypeOf || {
      __proto__: [
      ]
    }
    instanceof Array && function (n, t) {
      n.__proto__ = t
    }
    || function (n, t) {
      for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
    };
    return function (t, i) {
      function r() {
        this.constructor = t
      }
      n(t, i);
      t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
    }
  }(),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i;
        (function (t) {
          var i = function (n) {
            function t(t, i) {
              var r = n.call(this, t, i) || this;
              return r.baseUrl = 'api/Security.svc',
              r
            }
            return __extends(t, n),
            t.prototype.validateCardPin = function (n) {
              return this.dispatch(this.baseUrl + '/validateCardPin', n)
            },
            t.prototype.updateGDPRData = function (n) {
              return this.dispatch(this.baseUrl + '/updateGDPRData', n)
            },
            t.prototype.getGDPRData = function (n) {
              return this.dispatch(this.baseUrl + '/getGDPRData', n)
            },
            t.prototype.signOn = function (n, t) {
              t === void 0 && (t = !1);
              return this.getCached(this.baseUrl + '/signOn', n, 'signOn', t)
            },
            t.prototype.signOnDocumentUploadWithCardPin = function (n, t) {
              t === void 0 && (t = !1);
              return this.getCached(this.baseUrl + '/signOnDocumentUploadWithCardPin', n, 'signOnDocumentUploadWithCardPin', t)
            },
            t.prototype.changePassword = function (n) {
              return this.dispatch(this.baseUrl + '/changePassword', n)
            },
            t.prototype.changeUserName = function (n) {
              return this.dispatch(this.baseUrl + '/changeUserName', n)
            },
            t.prototype.updateContactInfo = function (n) {
              return this.dispatch(this.baseUrl + '/updateContactInfo', n)
            },
            t.prototype.updateCorporateUserContactInfo = function (n) {
              return this.dispatch(this.baseUrl + '/updateCorporateUserContactInfo', n)
            },
            t.prototype.signOff = function (n) {
              return this.dispatch(this.baseUrl + '/signOff', n)
            },
            t.prototype.captcha = function (n) {
              return this.dispatch(this.baseUrl + '/captcha', n)
            },
            t.prototype.getSubscriptionInfo = function (n, t) {
              t === void 0 && (t = !1);
              return this.getCached(this.baseUrl + '/getSubscriptionInfo', n, 'getSubscriptionInfo', t)
            },
            t.prototype.captchaSignOn = function (n) {
              return this.dispatch(this.baseUrl + '/captchaSignOn', n)
            },
            t.prototype.modifyProfileProducts = function (n) {
              return this.dispatch(this.baseUrl + '/modifyProfileProducts', n)
            },
            t.prototype.getEncryptionKey = function (n) {
              return this.dispatch(this.baseUrl + '/getEncryptionKey', n)
            },
            t.prototype.getPinset = function (n) {
              return this.dispatch(this.baseUrl + '/getPinset', n)
            },
            t.prototype.getUserCDIInfo = function (n) {
              return this.dispatch(this.baseUrl + '/getUserCDIInfo', n)
            },
            t.prototype.getUserSessionInfo = function (n) {
              return this.dispatch(this.baseUrl + '/getUserSessionInfo', n)
            },
            t.prototype.validateOTP = function (n) {
              return this.dispatch(this.baseUrl + '/validateOTP', n)
            },
            t.prototype.getCartolini = function (n) {
              return this.dispatch(this.baseUrl + '/getCartolini', n)
            },
            t.prototype.changeCardLimit = function (n) {
              return this.dispatch(this.baseUrl + '/changeCardLimit', n)
            },
            t.prototype.reIssueCardPin = function (n) {
              return this.dispatch(this.baseUrl + '/reIssueCardPin', n)
            },
            t.prototype.reIssueCard = function (n) {
              return this.dispatch(this.baseUrl + '/reIssueCard', n)
            },
            t.prototype.updateCardSpendingLimit = function (n) {
              return this.dispatch(this.baseUrl + '/updateCardSpendingLimit', n)
            },
            t.prototype.updateCardStandingOrder = function (n) {
              return this.dispatch(this.baseUrl + '/updateCardStandingOrder', n)
            },
            t.prototype.updateCardBankAccount = function (n) {
              return this.dispatch(this.baseUrl + '/updateCardBankAccount', n)
            },
            t.prototype.updateCardInsuranceProgram = function (n) {
              return this.dispatch(this.baseUrl + '/updateCardInsuranceProgram', n)
            },
            t.prototype.updateCardDeliveryAddress = function (n) {
              return this.dispatch(this.baseUrl + '/updateCardDeliveryAddress', n)
            },
            t.prototype.deactivateCard = function (n) {
              return this.dispatch(this.baseUrl + '/deactivateCard', n)
            },
            t.prototype.activateCard = function (n) {
              return this.dispatch(this.baseUrl + '/activateCard', n)
            },
            t.prototype.disableSubscription = function (n) {
              return this.dispatch(this.baseUrl + '/disableSubscription', n)
            },
            t.prototype.tokenAcquire = function (n) {
              return this.dispatch(this.baseUrl + '/tokenAcquire', n)
            },
            t.prototype.tokenActivation = function (n) {
              return this.dispatch(this.baseUrl + '/tokenActivation', n)
            },
            t.prototype.sendTokenActivationCode = function (n) {
              return this.dispatch(this.baseUrl + '/sendTokenActivationCode', n)
            },
            t.prototype.tokenSync = function (n) {
              return this.dispatch(this.baseUrl + '/tokenSync', n)
            },
            t.prototype.tokenInfo = function (n) {
              return this.dispatch(this.baseUrl + '/tokenInfo', n)
            },
            t.prototype.getTokenLevelDetails = function (n) {
              return this.dispatch(this.baseUrl + '/getTokenLevelDetails', n)
            },
            t.prototype.tokenReplace = function (n) {
              return this.dispatch(this.baseUrl + '/tokenReplace', n)
            },
            t.prototype.tokenInfoEmporiki = function (n) {
              return this.dispatch(this.baseUrl + '/tokenInfoEmporiki', n)
            },
            t.prototype.tokenReplaceEmporiki = function (n) {
              return this.dispatch(this.baseUrl + '/tokenReplaceEmporiki', n)
            },
            t.prototype.getSetDailyLimit = function (n) {
              return this.dispatch(this.baseUrl + '/getSetDailyLimit', n)
            },
            t.prototype.getLoginAlerts = function (n) {
              return this.dispatch(this.baseUrl + '/getLoginAlerts', n)
            },
            t.prototype.sendMail = function (n) {
              return this.dispatch(this.baseUrl + '/sendMail', n)
            },
            t.prototype.createNewETimeDeposit = function (n) {
              return this.dispatch(this.baseUrl + '/createNewETimeDeposit', n)
            },
            t.prototype.checkNewETimeDeposit = function (n) {
              return this.dispatch(this.baseUrl + '/checkNewETimeDeposit', n)
            },
            t.prototype.cancelETimeDeposit = function (n) {
              return this.dispatch(this.baseUrl + '/cancelETimeDeposit', n)
            },
            t.prototype.isKYCAuthorized = function (n) {
              return this.dispatch(this.baseUrl + '/isKYCAuthorized', n)
            },
            t.prototype.discountingETimeDeposit = function (n) {
              return this.dispatch(this.baseUrl + '/discountingETimeDeposit', n)
            },
            t.prototype.editETimeDeposit = function (n) {
              return this.dispatch(this.baseUrl + '/editETimeDeposit', n)
            },
            t.prototype.getSmsToken = function (n) {
              return this.dispatch(this.baseUrl + '/getSmsToken', n)
            },
            t.prototype.getPSD = function (n) {
              return this.dispatch(this.baseUrl + '/getPSD', n)
            },
            t.prototype.setPSD = function (n) {
              return this.dispatch(this.baseUrl + '/setPSD', n)
            },
            t.prototype.getCustomerMobile = function (n) {
              return this.dispatch(this.baseUrl + '/getCustomerMobile', n)
            },
            t.prototype.changeChannel = function (n) {
              return this.dispatch(this.baseUrl + '/changeChannel', n)
            },
            t.prototype.createNewDebitCardApplication = function (n) {
              return this.dispatch(this.baseUrl + '/createNewDebitCardApplication', n)
            },
            t.prototype.getProfileApprovalTables = function (n) {
              return this.dispatch(this.baseUrl + '/getProfileApprovalTables', n)
            },
            t.prototype.createNewSmartOnlineApplication = function (n) {
              return this.dispatch(this.baseUrl + '/createNewSmartOnlineApplication', n)
            },
            t.prototype.getSMSBankToken = function (n) {
              return this.dispatch(this.baseUrl + '/getSMSBankToken', n)
            },
            t.prototype.validateBankTokenOTP = function (n) {
              return this.dispatch(this.baseUrl + '/validateBankTokenOTP', n)
            },
            t.prototype.changeContactsApplication = function (n) {
              return this.dispatch(this.baseUrl + '/changeContactsApplication', n)
            },
            t.prototype.submitTokenUpgradeApplication = function (n) {
              return this.dispatch(this.baseUrl + '/submitTokenUpgradeApplication', n)
            },
            t.prototype.getConsent = function (n) {
              return this.dispatch(this.baseUrl + '/getConsent', n)
            },
            t.prototype.enquireOtp = function (n) {
              return this.dispatch(this.baseUrl + '/enquireOtp', n)
            },
            t.$inject = [
              '$http',
              '$q'
            ],
            t
          }(t.ProxyDispatcher);
          n.commonServices.service('SecurityServiceProxy', i)
        }) (i = t.proxies || (t.proxies = {
        }))
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i = function () {
          function t(t, i, r, u, f, e) {
            this.$injector = t;
            this.$q = i;
            this.$rootScope = r;
            this.$timeout = u;
            this.appEventsService = f;
            this.securityServiceProxy = e;
            this.userSessionPromise = null;
            this.cartoliniPromise = null;
            this.tokenInfoPromise = null;
            this.InvalidateSubscriptionInfo = !1;
            var o = this;
            this.appEventsService.subscribe(n.common.services.AppEventsService.InvalidateUserSessionInfo_Event, function () {
              o.userSessionPromise = null
            });
            this.appEventsService.subscribe(n.common.services.AppEventsService.InvalidateCartolini_Event, function () {
              o.cartoliniPromise = null
            });
            this.appEventsService.subscribe(n.common.services.AppEventsService.InvalidateTokenInfo_Event, function () {
              o.tokenInfoPromise = null
            });
            this.appEventsService.subscribe(n.common.services.AppEventsService.InvalidateSubscriptionInfo_Event, function () {
              o.InvalidateSubscriptionInfo = !0
            })
          }
          return t.prototype.sendTokenActivationCode = function () {
            return this.securityServiceProxy.sendTokenActivationCode({
            })
          },
          t.prototype.tokenSync = function (n, t, i) {
            return this.securityServiceProxy.tokenSync({
              FirstOTP: n,
              SecondOTP: t,
              TokenSN: i
            })
          },
          t.prototype.tokenActivation = function (n) {
            return this.securityServiceProxy.tokenActivation(n)
          },
          t.prototype.getSubscriptionInfo = function (n, t) {
            return t === void 0 && (t = !1),
            this.InvalidateSubscriptionInfo && (this.InvalidateSubscriptionInfo = !1, t = !0),
            this.securityServiceProxy.getSubscriptionInfo(n, t)
          },
          t.prototype.tokenInfo = function () {
            if (this.tokenInfoPromise == null) this.tokenInfoPromise = this.securityServiceProxy.tokenInfo({
            }).then(function (n) {
              return n
            }, function () {
              return null
            });
            return this.tokenInfoPromise
          },
          t.prototype.tokenAcquire = function (n) {
            return this.securityServiceProxy.tokenAcquire(n)
          },
          t.prototype.tokenReplace = function (n) {
            return this.securityServiceProxy.tokenReplace(n)
          },
          t.prototype.signOn = function () {
            return this.securityServiceProxy.signOn({
            })
          },
          t.prototype.createEncryptedPassword = function (n, t, i) {
            var r,
            u,
            f;
            return n && t && i ? (r = new RSAKey, r.setPublic(t, i), u = n, f = r.encrypt(u), f)  : n
          },
          t.prototype.changePassword = function (n, t) {
            var i = {
            },
            r = $('meta[name=N]').attr('content'),
            u = $('meta[name=E]').attr('content');
            return i.OldPassword = this.createEncryptedPassword(n, r, u),
            i.NewPassword = this.createEncryptedPassword(t, r, u),
            i.N = r,
            i.E = u,
            this.securityServiceProxy.changePassword(i)
          },
          t.prototype.changeChannel = function (n) {
            var t = {
            };
            return t.Channels = n,
            this.securityServiceProxy.changeChannel(t)
          },
          t.prototype.changeUserName = function (n) {
            return this.securityServiceProxy.changeUserName(n)
          },
          t.prototype.getConsent = function (n) {
            return this.securityServiceProxy.getConsent(n)
          },
          t.prototype.getGDPRData = function (n) {
            return this.securityServiceProxy.getGDPRData(n)
          },
          t.prototype.updateGDPRData = function (n) {
            return this.securityServiceProxy.updateGDPRData(n)
          },
          t.prototype.signOff = function () {
            return this.securityServiceProxy.signOff({
            })
          },
          t.prototype.captcha = function () {
            return this.securityServiceProxy.captcha({
            })
          },
          t.prototype.captchaSignOn = function () {
            return this.securityServiceProxy.captchaSignOn({
            })
          },
          t.prototype.modifyProfileProducts = function (n) {
            return this.securityServiceProxy.modifyProfileProducts(n)
          },
          t.prototype.getEncryptionKey = function () {
            return this.securityServiceProxy.getEncryptionKey({
            })
          },
          t.prototype.getUserSessionInfo = function (n) {
            var t,
            i;
            return n === void 0 && (n = !1),
            t = this,
            this.userSessionPromise == null && (i = {
            }, i.UpdateContacts = n, this.userSessionPromise = this.securityServiceProxy.getUserSessionInfo(i).then(function (n) {
              return n
            }, function () {
              return t.userSessionPromise = null,
              t.$q.reject()
            })),
            this.userSessionPromise
          },
          t.prototype.ValidateOTP = function (t) {
            var r = this,
            i = {
            };
            return i.OTP = t,
            this.securityServiceProxy.validateOTP(i).then(function (t) {
              return n.utils.isUndefinedOrNull(t) || t.ResultCode != 0 || t.Validated != !0 || r.appEventsService.publish(n.common.services.AppEventsService.InvalidateUserSessionInfo_Event),
              t
            }, function (n) {
              return n
            })
          },
          t.prototype.getCartolini = function () {
            if (this.cartoliniPromise == null) this.cartoliniPromise = this.securityServiceProxy.getCartolini({
            }).then(function (n) {
              return n
            }, function () {
              return null
            });
            return this.cartoliniPromise
          },
          t.prototype.updateContactInfo = function (t) {
            var i = this;
            return this.securityServiceProxy.updateContactInfo(t).then(function (t) {
              return t.ResultCode == 0 && i.appEventsService.publish(n.common.services.AppEventsService.InvalidateUserSessionInfo_Event),
              t
            })
          },
          t.prototype.updateCorporateUserContactInfo = function (t) {
            var i = this;
            return this.securityServiceProxy.updateCorporateUserContactInfo(t).then(function (t) {
              return t.ResultCode == 0 && i.appEventsService.publish(n.common.services.AppEventsService.InvalidateUserSessionInfo_Event),
              t
            })
          },
          t.prototype.disableSubscription = function (n) {
            var t = {
            },
            i = $('meta[name=N]').attr('content'),
            r = $('meta[name=E]').attr('content');
            return t.DeactivateReason = this.createEncryptedPassword(n, i, r),
            t.N = i,
            t.E = r,
            t.SubscriptionDeactivationType = 1,
            this.securityServiceProxy.disableSubscription(t)
          },
          t.prototype.getSetDailyLimit = function (n) {
            var t = n;
            return this.securityServiceProxy.getSetDailyLimit(t)
          },
          t.prototype.activateCard = function (n) {
            var t = n;
            return this.securityServiceProxy.activateCard(t)
          },
          t.prototype.getTokenLevelDetails = function (n) {
            return this.securityServiceProxy.getTokenLevelDetails(n)
          },
          t.prototype.getUserCDIInfo = function (n) {
            return this.securityServiceProxy.getUserCDIInfo(n)
          },
          t.prototype.createNewDebitCardApplicationReq = function (n) {
            return this.securityServiceProxy.createNewDebitCardApplication(n)
          },
          t.prototype.deactivateCard = function (n) {
            var t = n;
            return this.securityServiceProxy.deactivateCard(t)
          },
          t.prototype.reissueCard = function (n) {
            var t = n;
            return this.securityServiceProxy.reIssueCard(t)
          },
          t.prototype.reissueCardPin = function (n) {
            var t = n;
            return this.securityServiceProxy.reIssueCardPin(t)
          },
          t.prototype.changeCardLimit = function (n) {
            var t = n;
            return this.securityServiceProxy.changeCardLimit(t)
          },
          t.prototype.getSmsToken = function (n) {
            return this.$rootScope.OTPChannel = n.OtpChannel,
            this.securityServiceProxy.getSmsToken(n).then(function (n) {
              return n
            }).catch (function (n) {
              var t = n;
              return t.Error = t.Error || {
                Message: t.Message
              },
              t
            })
          },
          t.prototype.getPSD = function () {
            return this.securityServiceProxy.getPSD({
            }).then(function (n) {
              return n
            }).catch (function () {
              return null
            })
          },
          t.prototype.setPSD = function (n, t) {
            var i = {
              Status: n.Status,
              AcceptType: t,
              PSDVersion: n.PSDVersion,
              AuthenticationCode: null,
              PSDVersionDate: n.PSDVersionDate
            };
            return this.securityServiceProxy.setPSD(i).then(function (n) {
              return n
            }).catch (function () {
              return null
            })
          },
          t.prototype.updateCardStandingOrder = function (n) {
            return this.securityServiceProxy.updateCardStandingOrder(n).then(function (n) {
              return n
            }).catch (function (n) {
              return n
            })
          },
          t.prototype.updateCardSpendingLimit = function (n) {
            return this.securityServiceProxy.updateCardSpendingLimit(n).then(function (n) {
              return n
            }).catch (function () {
              return null
            })
          },
          t.prototype.updateCardBankAccount = function (n) {
            return this.securityServiceProxy.updateCardBankAccount(n).then(function (n) {
              return n
            }).catch (function (n) {
              return n
            })
          },
          t.prototype.updateCardDeliveryAddress = function (n) {
            return this.securityServiceProxy.updateCardDeliveryAddress(n).then(function (n) {
              return n
            }).catch (function (n) {
              return n
            })
          },
          t.prototype.getProfileApprovalTables = function (n) {
            return this.securityServiceProxy.getProfileApprovalTables(n).then(function (n) {
              return n
            }).catch (function (n) {
              return n
            })
          },
          t.prototype.getSMSBankToken = function (n) {
            var t = this;
            return this.$rootScope.OTPChannel = n.OtpChannel,
            this.securityServiceProxy.getSMSBankToken(n).then(function (n) {
              return !n || n.ResultCode !== 0 || n.Error ? t.$q.reject(n)  : t.$q.when(n)
            })
          },
          t.prototype.changeContactsApplication = function (n) {
            return this.securityServiceProxy.changeContactsApplication(n).then(function (n) {
              return n
            }).catch (function (n) {
              return n
            })
          },
          t.prototype.submitTokenUpgradeApplication = function (n) {
            return this.securityServiceProxy.submitTokenUpgradeApplication(n)
          },
          t.prototype.validateBankTokenOTP = function (n) {
            var t = this;
            return this.securityServiceProxy.validateBankTokenOTP(n).then(function (n) {
              return !n || n.ResultCode !== 0 || n.Error ? t.$q.reject(n)  : t.$q.when(n)
            })
          },
          t.prototype.enquireOtp = function (n) {
            var t = this;
            return this.securityServiceProxy.enquireOtp(n).then(function (n) {
              return n.ResultCode !== 0 ? t.$q.reject(n.Error || n)  : t.$q.when(n)
            })
          },
          t.prototype.validateCardPin = function (n) {
            var t = this;
            return this.securityServiceProxy.validateCardPin(n).then(function (n) {
              return n.ResultCode !== 0 ? t.$q.reject(n.Error)  : t.$q.when(n)
            })
          },
          t.prototype.updateCardInsuranceProgram = function (n) {
            return this.securityServiceProxy.updateCardInsuranceProgram(n).then(function (n) {
              return n
            }).catch (function (n) {
              return n
            })
          },
          t.$inject = [
            '$injector',
            '$q',
            '$rootScope',
            '$timeout',
            'AppEventsService',
            'SecurityServiceProxy'
          ],
          t
        }();
        t.SecurityService = i;
        n.commonServices.service('SecurityService', i)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      var i = function () {
        function n() {
          this.data = [
          ];
          this.registeredControllers = [
          ];
          this.data.model = [
          ]
        }
        return n.prototype.SetControllerModel = function (n, t, i) {
          this.AddDestroyScopeListener(n, t);
          this.data.model[t] = i
        },
        n.prototype.GetControllerModel = function (n) {
          return this.data.model[n] ? this.data.model[n] : null
        },
        n.prototype.SetControllerData = function (n, t, i, r) {
          this.AddDestroyScopeListener(n, t);
          this.setData(t, i, r)
        },
        n.prototype.SetGlobalControllerData = function (n, t, i) {
          this.setData(n, t, i)
        },
        n.prototype.setData = function (n, t, i) {
          this.data[n] === undefined && (this.data[n] = [
          ]);
          this.data[n][t] = i
        },
        n.prototype.GetControllerData = function (n, t) {
          return this.isControllerDataExist(n, t) ? this.data[n][t] : null
        },
        n.prototype.isControllerDataExist = function (n, t) {
          return this.data[n] !== undefined && this.data[n][t] !== undefined
        },
        n.prototype.AddDestroyScopeListener = function (n, t) {
          var i = this;
          this.registeredControllers.indexOf(t) == - 1 && (n.$on('$destroy', function () {
            i.ClearControllerData(t)
          }), this.registeredControllers.push(t))
        },
        n.prototype.ClearControllerData = function (n) {
          this.data.model.slice(n);
          this.data.slice(n);
          this.registeredControllers.slice(this.registeredControllers.indexOf(n))
        },
        n
      }();
      t.SharedDataService = i;
      n.commonServices.service('SharedDataService', i)
    }) (t = n.server || (n.server = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        n[n.MyPaymentsController = 1] = 'MyPaymentsController';
        n[n.TransactionsHistoryController = 2] = 'TransactionsHistoryController';
        n[n.MyTransfersController = 3] = 'MyTransfersController';
        n[n.TransferRecurringDeleteController = 4] = 'TransferRecurringDeleteController';
        n[n.TransferLimitModalControllerCompanyAdminUser = 5] = 'TransferLimitModalControllerCompanyAdminUser';
        n[n.UserDeletion = 6] = 'UserDeletion';
        n[n.Badge = 7] = 'Badge';
        n[n.CustomUiSelectController = 8] = 'CustomUiSelectController';
        n[n.OtpStatusControllerCorporate = 9] = 'OtpStatusControllerCorporate';
        n[n.SubscriptionSearchController = 10] = 'SubscriptionSearchController';
        n[n.ApprovalTablesController = 11] = 'ApprovalTablesController';
        n[n.ConfirmContactDetailsController = 12] = 'ConfirmContactDetailsController';
        n[n.SubscriptionEditApprovalTablesController = 13] = 'SubscriptionEditApprovalTablesController';
        n[n.ApplicationSearchController = 14] = 'ApplicationSearchController';
        n[n.OtherBankAccountsOverviewController = 15] = 'OtherBankAccountsOverviewController';
        n[n.OtherBankCardsOverviewController = 16] = 'OtherBankCardsOverviewController';
        n[n.AccountsController = 17] = 'AccountsController';
        n[n.CardsController = 18] = 'CardsController';
        n[n.ProductOtherBankAddController = 19] = 'ProductOtherBankAddController';
        n[n.OtherBankProductDetailsController = 20] = 'OtherBankProductDetailsController';
        n[n.OtherBankAccountTransactionsController = 21] = 'OtherBankAccountTransactionsController';
        n[n.OtherBankCardTransactionsController = 22] = 'OtherBankCardTransactionsController'
      }) (t = n.Controllers || (n.Controllers = {
      }))
    }) (t = n.server || (n.server = {
    }))
  }(alpha || (alpha = {
  }));
  __extends = this && this.__extends || function () {
    var n = Object.setPrototypeOf || {
      __proto__: [
      ]
    }
    instanceof Array && function (n, t) {
      n.__proto__ = t
    }
    || function (n, t) {
      for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
    };
    return function (t, i) {
      function r() {
        this.constructor = t
      }
      n(t, i);
      t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
    }
  }(),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i;
        (function (t) {
          var i = function (n) {
            function t(t, i) {
              var r = n.call(this, t, i) || this;
              return r.baseUrl = 'Alpha.Mobile.Services.ISocial',
              r
            }
            return __extends(t, n),
            t.$inject = [
              '$http',
              '$q'
            ],
            t
          }(t.ProxyDispatcher);
          n.commonServices.service('SocialServiceProxy', i)
        }) (i = t.proxies || (t.proxies = {
        }))
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        var t = function () {
          function n(n) {
            this.stateService = n;
            this.guardTransitionConfig = {
              guards: [
              ],
              isInGuardTransition: !1
            };
            this.finishObservers = [
            ]
          }
          return n.prototype.registerFinishObserver = function (n) {
            this.finishObservers.push(n)
          },
          n.prototype.registerGuard = function (n, t) {
            this.guardTransitionConfig.guards.push({
              guard: n,
              valid: !1,
              guardState: t
            })
          },
          n.prototype.execute = function (n, t, i, r, u, f) {
            if (this.guardTransitionConfig.guards.every(function (n) {
              return n.valid
            })) {
              this.finishObservers.forEach(function (n) {
                n()
              });
              this.finishObservers = [
              ];
              return
            }
            if (!(f.filter(function (n) {
              return t.name === n
            }).length > 0)) {
              if (this.guardTransitionConfig.isInGuardTransition) {
                this.guardTransitionConfig.isInGuardTransition = !1;
                return
              }
              if (!n.defaultPrevented) {
                n.preventDefault();
                var e = this.guardTransitionConfig.guards.filter(function (n) {
                  return !n.valid
                });
                this.executeGuards(e, t, i, r, u)
              }
            }
          },
          n.prototype.executeGuards = function (n, t, i, r, u) {
            var f = n.shift(),
            e = this;
            f.guard(t, i, r, u, f.guardState).then(function (o) {
              f.guardState = o.newGuardState || f.guardState;
              o.action === 'redirect' ? (e.guardTransitionConfig.isInGuardTransition = !0, e.stateService.go(o.state.to, o.state.params))  : o.action === 'continue' && (f.valid = !0, n.length == 0 ? e.stateService.go(t, i)  : e.executeGuards(n, t, i, r, u))
            }, function () {
              f.valid = !0;
              n.length == 0 ? e.stateService.go(t, i)  : e.executeGuards(n, t, i, r, u)
            })
          },
          n.$inject = [
            '$state'
          ],
          n
        }();
        n.commonServices.service('StateChangeValidationService', t)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i = function () {
          function n(n) {
            this.$state = n;
            this.stateData = [
            ]
          }
          return n.prototype.go = function (n, t, i, r) {
            if (i) {
              var u = uuid.v4();
              this.stateData[u] = i;
              t || (t = {
              });
              t.key = u
            }
            this.$state.go(n, t, r)
          },
          n.prototype.getStateData = function (n) {
            var t;
            return t = n ? n : this.$state.params ? this.$state.params.key : null,
            t ? this.stateData[t] : null
          },
          n.prototype.setStateData = function (n, t) {
            this.stateData[n] = t
          },
          n.$inject = [
            '$state'
          ],
          n
        }();
        t.StateHelperService = i;
        n.commonServices.service('StateHelperService', i)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  }));
  alpha.app.service('ThrottleService', [
    '$timeout',
    function (n) {
      return function (t, i, r, u) {
        var f,
        e = 0;
        return typeof i != 'boolean' && (u = r, r = i, i = undefined),
        function () {
          var h = this,
          s = + new Date - e,
          c = arguments,
          o = function () {
            e = + new Date;
            r.apply(h, c)
          },
          l = function () {
            f = undefined
          };
          u && !f && o();
          f && n.cancel(f);
          u === undefined && s > t ? o()  : i !== !0 && (f = n(u ? l : o, u === undefined ? t - s : t))
        }
      }
    }
  ]),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        var t = function () {
          function n(n) {
            var t,
            i,
            r,
            u;
            this.$interval = n;
            this.timeElapsed = 0;
            this.timeRemaining = 0;
            this.isStarted = !1;
            t = $('meta[name=IdleTimeout]').attr('content');
            t && (i = t.replace(',', '.'), this.idleTimeout = + i * 1000, r = + $('meta[name=SessionTimeout]').attr('content').replace(',', '.'), this.sessionTimeout = + r * 1000, this.timeRemaining = this.idleTimeout, u = $('meta[name=MaxSecondsLeft]').attr('content').replace(',', '.'), this.maxServerSecondsLeft = + u * 1000)
          }
          return n.prototype.startTimer = function (n) {
            var t = this,
            i,
            r;
            this.isStarted || (i = Date.now(), r = this.$interval(function () {
              var u = Date.now() - i;
              i = Date.now();
              t.timeElapsed += u;
              t.timeRemaining -= u;
              t.timeRemaining <= 0 && (t.$interval.cancel(r), typeof n == 'function' && n())
            }, 1000), this.isStarted = !0)
          },
          n.prototype.getTotalElapsedTime = function () {
            return this.timeElapsed
          },
          n.prototype.getTimeRemaining = function () {
            return this.timeRemaining
          },
          n.prototype.refreshTimeRemaining = function () {
            this.timeRemaining > this.maxServerSecondsLeft && (this.timeRemaining = this.maxServerSecondsLeft, this.timeElapsed = this.sessionTimeout - this.timeRemaining);
            this.canRefresh() && (this.timeRemaining = this.idleTimeout)
          },
          n.prototype.canRefresh = function () {
            return this.idleTimeout + this.timeElapsed <= this.sessionTimeout
          },
          n.$inject = [
            '$interval'
          ],
          n
        }();
        n.commonServices.service('TimerService', t)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  }));
  __extends = this && this.__extends || function () {
    var n = Object.setPrototypeOf || {
      __proto__: [
      ]
    }
    instanceof Array && function (n, t) {
      n.__proto__ = t
    }
    || function (n, t) {
      for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
    };
    return function (t, i) {
      function r() {
        this.constructor = t
      }
      n(t, i);
      t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
    }
  }(),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i;
        (function (t) {
          var i = function (t) {
            function i(n, i) {
              var r = t.call(this, n, i) || this;
              return r.baseUrl = 'api/Transactions.svc',
              r
            }
            return __extends(i, t),
            i.prototype.getTransactionTemplates = function (t, i) {
              i === void 0 && (i = !1);
              var r = 'getTransactionTemplates_ID:' + (n.utils.isUndefinedOrNull(t.ID) ? '' : t.ID.toString()) + '_Type:' + (n.utils.isUndefinedOrNull(t.Type) ? '' : t.Type.toString());
              return this.getCached(this.baseUrl + '/getTransactionTemplates', t, r, i)
            },
            i.prototype.setTransactionTemplate = function (n) {
              return this.dispatch(this.baseUrl + '/setTransactionTemplate', n)
            },
            i.$inject = [
              '$http',
              '$q'
            ],
            i
          }(t.ProxyDispatcher);
          n.commonServices.service('TransactionsServiceProxy', i)
        }) (i = t.proxies || (t.proxies = {
        }))
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  }));
  __extends = this && this.__extends || function () {
    var n = Object.setPrototypeOf || {
      __proto__: [
      ]
    }
    instanceof Array && function (n, t) {
      n.__proto__ = t
    }
    || function (n, t) {
      for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
    };
    return function (t, i) {
      function r() {
        this.constructor = t
      }
      n(t, i);
      t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
    }
  }(),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i;
        (function (t) {
          var i = function (t) {
            function i(n, i) {
              var r = t.call(this, n, i) || this;
              return r.baseUrl = 'api/Transfers.svc',
              r
            }
            return __extends(i, t),
            i.prototype.executeTransfer = function (t) {
              var i = n.utils.getTransferTypeQueryString(t.TransferType);
              return this.dispatch(this.baseUrl + '/executeTransfer?q=' + i, t)
            },
            i.prototype.executeImportsPrequery = function (n) {
              return this.dispatch(this.baseUrl + '/executeImportsPrequery', n)
            },
            i.prototype.getEUImportsSwift = function (n) {
              return this.dispatch(this.baseUrl + '/getEUImportsSwift', n)
            },
            i.prototype.transferExpenses = function (n) {
              return this.dispatch(this.baseUrl + '/transferExpenses', n)
            },
            i.prototype.checkFTSPayment = function (n) {
              return this.dispatch(this.baseUrl + '/checkFTSPayment', n)
            },
            i.prototype.cancelTransaction = function (n) {
              return this.dispatch(this.baseUrl + '/cancelTransaction', n)
            },
            i.prototype.modifyStandingOrders = function (n) {
              return this.dispatch(this.baseUrl + '/modifyStandingOrders', n)
            },
            i.prototype.amountAnalysis = function (n) {
              return this.dispatch(this.baseUrl + '/amountAnalysis', n)
            },
            i.prototype.abortTransaction = function (n) {
              return this.dispatch(this.baseUrl + '/abortTransaction', n)
            },
            i.prototype.updateTransferExpenses = function (n) {
              return this.dispatch(this.baseUrl + '/updateTransferExpenses', n)
            },
            i.prototype.getAndUpdateTransferExpenses = function (n) {
              return this.dispatch(this.baseUrl + '/getAndUpdateTransferExpenses', n)
            },
            i.prototype.executeP2PTransfer = function (n) {
              return this.dispatch(this.baseUrl + '/executeP2PTransfer', n)
            },
            i.prototype.executeReverseTransfer = function (n) {
              return this.dispatch(this.baseUrl + '/executeReverseTransfer', n)
            },
            i.prototype.updateP2PTransferImage = function (n) {
              return this.dispatch(this.baseUrl + '/updateP2PTransferImage', n)
            },
            i.prototype.getP2PTransferImage = function (n) {
              return this.dispatch(this.baseUrl + '/getP2PTransferImage', n)
            },
            i.$inject = [
              '$http',
              '$q'
            ],
            i
          }(t.ProxyDispatcher);
          n.commonServices.service('TransfersServiceProxy', i)
        }) (i = t.proxies || (t.proxies = {
        }))
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  }));
  __assign = this && this.__assign || Object.assign || function (n) {
    for (var t, r, i = 1, u = arguments.length; i < u; i++) {
      t = arguments[i];
      for (r in t) Object.prototype.hasOwnProperty.call(t, r) && (n[r] = t[r])
    }
    return n
  },
  function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        var t = function () {
          function n(n) {
            this.transfersServiceProxy = n;
            this.baseUrl = 'api/Transfers.svc/'
          }
          return n.prototype.preExecute = function (n, t) {
            t.DebitProductID = n.DebitProductID;
            t.CreditProductID = n.CreditProductID
          },
          n.prototype.ExecuteAlphaProfileAccountTransfer = function (n, t) {
            var i = this.TransformAlphaProfileAccountTransferRequest(n, t);
            return this.transfersServiceProxy.executeTransfer(i)
          },
          n.prototype.TransformAlphaProfileAccountTransferRequest = function (n) {
            var t = __assign({
            }, n);
            return t.AmountCurrency = n.DebitProductCurrency,
            t.Block || delete t.Block,
            t.TransferDate || delete t.TransferDate,
            t.TransferCategory || delete t.TransferCategory,
            t.TransferDetails && t.TransferDetails.length !== 0 || delete t.TransferDetails,
            this.preExecute(n, t),
            t
          },
          n.prototype.ExecuteAlphaAccountTransfer = function (n, t) {
            var i = this.TransformAlphaAccountTransferRequest(n, t);
            return this.transfersServiceProxy.executeTransfer(i)
          },
          n.prototype.TransformAlphaAccountTransferRequest = function (n) {
            var t = __assign({
            }, n);
            return t.AmountCurrency = n.DebitProductCurrency,
            n.TransferCategory || delete t.TransferCategory,
            n.Block || delete t.Block,
            n.TransferDetails && n.TransferDetails.length !== 0 || delete t.TransferDetails,
            n.TransferDate || delete t.TransferDate,
            n.FeeType || delete t.FeeType,
            n.Fees || delete t.Fees,
            t.MyBankReferenceID || delete t.MyBankReferenceID,
            t.IRISAuthorisationReqID || delete t.IRISAuthorisationReqID,
            this.preExecute(n, t),
            t
          },
          n.prototype.ExecuteAlphaAccountTransferInternational = function (n) {
            var t = __assign({
            }, n);
            return this.preExecute(n, t),
            this.transfersServiceProxy.executeTransfer(t)
          },
          n.prototype.ExecuteBonusPointsTransfer = function (n) {
            return this.transfersServiceProxy.executeTransfer(n)
          },
          n.prototype.GetTransferExpenses = function (n) {
            return this.transfersServiceProxy.transferExpenses(n)
          },
          n.prototype.CheckFTSPayment = function (n, t, i, r, u, f, e, o, s) {
            var h = {
              Amount: n,
              Currency: t,
              BeneficiaryAccount: i,
              BeneficiaryAddress: r,
              BeneficiaryName: u,
              BICCode: f,
              Country: e,
              RemittanceInfo: o,
              DIAS_B2B_Online: s
            };
            return this.transfersServiceProxy.checkFTSPayment(h)
          },
          n.prototype.CancelTransaction = function (n, t) {
            var i = {
            };
            return i.TransactionUN = n,
            i.Type = t,
            this.transfersServiceProxy.cancelTransaction(i)
          },
          n.prototype.ModifyStandingOrders = function (n) {
            return this.transfersServiceProxy.modifyStandingOrders(n)
          },
          n.prototype.AmountAnalysis = function (n) {
            return this.transfersServiceProxy.amountAnalysis(n)
          },
          n.prototype.AbortTransaction = function (n) {
            return this.transfersServiceProxy.abortTransaction(n)
          },
          n.prototype.ExecuteSimpleImportsPreQuery = function (n) {
            return this.transfersServiceProxy.executeImportsPrequery(n)
          },
          n.prototype.UpdateTransferExpenses = function (n) {
            return this.transfersServiceProxy.updateTransferExpenses(n)
          },
          n.prototype.GetAndUpdateTransferExpenses = function (n) {
            return this.transfersServiceProxy.getAndUpdateTransferExpenses(n)
          },
          n.$inject = [
            'TransfersServiceProxy'
          ],
          n
        }();
        n.commonServices.service('TransfersService', t)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var f = function () {
          function n() {
          }
          return n.sessionStorageKey = 'versionFilters',
          n
        }(),
        i,
        r,
        u;
        t.VersionFilterConstants = f;
        i = function () {
          function n(n) {
            this.httpService = n;
            this.versionPromise = null
          }
          return n.prototype.GetVersionFilters = function () {
            return this.getAll()
          },
          n.prototype.IsInVersions = function (n) {
            return this.getAll().then(function (t) {
              return t.filter(function (t) {
                return t == n
              }).length > 0
            })
          },
          n.prototype.getAll = function () {
            return null == this.versionPromise && (this.versionPromise = this.httpService.post('versionfilter/filters/', {
            })),
            this.versionPromise
          },
          n.$inject = [
            '$http'
          ],
          n
        }();
        n.commonServices.service('VersionFilterService', i);
        r = function () {
          function t(n, t) {
            this.qService = n;
            this.windowService = t
          }
          return t.prototype.GetVersionFilters = function () {
            var t = this.windowService.sessionStorage.getItem(n.common.services.VersionFilterConstants.sessionStorageKey),
            i = null != t ? t.split(';')  : [
            ];
            return this.qService.when(i)
          },
          t.prototype.IsInVersions = function (n) {
            return this.GetVersionFilters().then(function (t) {
              return t.indexOf(n) > - 1
            })
          },
          t.$inject = [
            '$q',
            '$window'
          ],
          t
        }();
        n.commonServices.service('SessionStorageVersionFilterService', r);
        u = function () {
          function t(n) {
            for (var i = [
            ], t = 1; t < arguments.length; t++) i[t - 1] = arguments[t];
            this.qService = n;
            this.services = null;
            this.services = i
          }
          return t.prototype.GetVersionFilters = function () {
            var t = this.services.map(function (n) {
              return n.GetVersionFilters()
            });
            return this.qService.all(t).then(function (t) {
              return n.utils.Distinct(n.utils.Union(t))
            })
          },
          t.prototype.IsInVersions = function (n) {
            return this.GetVersionFilters().then(function (t) {
              return t.indexOf(n) > - 1
            })
          },
          t
        }();
        t.CompositeVersionFilterService = u
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i = function () {
          function n() {
            this.CurrentStepIndex = null;
            this.CurrentStepHelpKey = null
          }
          return n.prototype.setCurrentStepIndex = function (n) {
            this.CurrentStepIndex = n
          },
          n.prototype.resetCurrentStepIndex = function () {
            this.CurrentStepIndex = null
          },
          n.prototype.setCurrentStepHelpKey = function (n) {
            this.CurrentStepHelpKey = n ? n : null
          },
          n.prototype.resetCurrentStepHelpKey = function () {
            this.CurrentStepHelpKey = null
          },
          n
        }();
        t.WizardStepIndexService = i;
        n.commonServices.service('WizardStepIndexService', i)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        n.commonServices.service('WrapRequestService', function () {
          return function (n) {
            return typeof n == 'undefined' && (n = {
            }),
            typeof n.ActivityDateTime == 'undefined' && (n.ActivityDateTime = (new Date).toISOString()),
            typeof n.UniqueIdentifier == 'undefined' && (n.UniqueIdentifier = uuid.v4()),
            n
          }
        })
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  }));
  __extends = this && this.__extends || function () {
    var n = Object.setPrototypeOf || {
      __proto__: [
      ]
    }
    instanceof Array && function (n, t) {
      n.__proto__ = t
    }
    || function (n, t) {
      for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
    };
    return function (t, i) {
      function r() {
        this.constructor = t
      }
      n(t, i);
      t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
    }
  }(),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i;
        (function (t) {
          var i = function (n) {
            function t(t, i) {
              var r = n.call(this, t, i) || this;
              return r.baseUrl = 'api/channels/eBanking/Corporate/CashManagement.svc',
              r
            }
            return __extends(t, n),
            t.prototype.statusOfQueryMT920 = function (n) {
              return this.dispatch(this.baseUrl + '/statusOfQueryMT920', n)
            },
            t.prototype.performRequestForUpdateAccounts = function (n) {
              return this.dispatch(this.baseUrl + '/performRequestForUpdateAccounts', n)
            },
            t.prototype.getAccountCMEStatements = function (n) {
              return this.dispatch(this.baseUrl + '/getAccountCMEStatements', n)
            },
            t.prototype.getCMAccountBalance = function (n) {
              return this.dispatch(this.baseUrl + '/getCMAccountBalance', n)
            },
            t.$inject = [
              '$http',
              '$q'
            ],
            t
          }(t.ProxyDispatcher);
          n.commonServices.service('CashManagementServiceProxy', i)
        }) (i = t.proxies || (t.proxies = {
        }))
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  }));
  __extends = this && this.__extends || function () {
    var n = Object.setPrototypeOf || {
      __proto__: [
      ]
    }
    instanceof Array && function (n, t) {
      n.__proto__ = t
    }
    || function (n, t) {
      for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
    };
    return function (t, i) {
      function r() {
        this.constructor = t
      }
      n(t, i);
      t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
    }
  }(),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i;
        (function (t) {
          var i = function (n) {
            function t(t, i) {
              var r = n.call(this, t, i) || this;
              return r.baseUrl = 'api/channels/eBanking/Corporate/files.svc',
              r
            }
            return __extends(t, n),
            t.prototype.fileSet = function (n) {
              return this.dispatch(this.baseUrl + '/fileSet', n)
            },
            t.prototype.fileList = function (n) {
              return this.dispatch(this.baseUrl + '/fileList', n)
            },
            t.prototype.fileGet = function (n) {
              return this.dispatch(this.baseUrl + '/fileGet', n)
            },
            t.$inject = [
              '$http',
              '$q'
            ],
            t
          }(t.ProxyDispatcher);
          n.commonServices.service('FilesServiceProxy', i)
        }) (i = t.proxies || (t.proxies = {
        }))
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  }));
  __extends = this && this.__extends || function () {
    var n = Object.setPrototypeOf || {
      __proto__: [
      ]
    }
    instanceof Array && function (n, t) {
      n.__proto__ = t
    }
    || function (n, t) {
      for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
    };
    return function (t, i) {
      function r() {
        this.constructor = t
      }
      n(t, i);
      t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
    }
  }(),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i;
        (function (t) {
          var i = function (n) {
            function t(t, i) {
              var r = n.call(this, t, i) || this;
              return r.baseUrl = 'api/channels/eBanking/Corporate/inquiry.svc',
              r
            }
            return __extends(t, n),
            t.prototype.getJobs = function (n) {
              return this.dispatch(this.baseUrl + '/getJobs', n)
            },
            t.prototype.getProviders = function (n) {
              return this.dispatch(this.baseUrl + '/getProviders', n)
            },
            t.prototype.getJobDetails = function (n) {
              return this.dispatch(this.baseUrl + '/getJobDetails', n)
            },
            t.prototype.getsimpleImportsInfo = function (n) {
              return this.dispatch(this.baseUrl + '/getsimpleImportsInfo', n)
            },
            t.$inject = [
              '$http',
              '$q'
            ],
            t
          }(t.ProxyDispatcher);
          n.commonServices.service('InquiryServiceProxy', i)
        }) (i = t.proxies || (t.proxies = {
        }))
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  }));
  __extends = this && this.__extends || function () {
    var n = Object.setPrototypeOf || {
      __proto__: [
      ]
    }
    instanceof Array && function (n, t) {
      n.__proto__ = t
    }
    || function (n, t) {
      for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
    };
    return function (t, i) {
      function r() {
        this.constructor = t
      }
      n(t, i);
      t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
    }
  }(),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i;
        (function (t) {
          var i = function (n) {
            function t(t, i) {
              var r = n.call(this, t, i) || this;
              return r.baseUrl = 'api/channels/eBanking/Corporate/jobs.svc',
              r
            }
            return __extends(t, n),
            t.prototype.submitPaymentJob = function (n) {
              return this.dispatch(this.baseUrl + '/submitPaymentJob', n)
            },
            t.prototype.submitTransferJob = function (n) {
              return this.dispatch(this.baseUrl + '/submitTransferJob', n)
            },
            t.prototype.submitReverseTransferJob = function (n) {
              return this.dispatch(this.baseUrl + '/submitReverseTransferJob', n)
            },
            t.prototype.submitMultiTransferJob = function (n) {
              return this.dispatch(this.baseUrl + '/submitMultiTransferJob', n)
            },
            t.prototype.submitMultiPaymentJob = function (n) {
              return this.dispatch(this.baseUrl + '/submitMultiPaymentJob', n)
            },
            t.prototype.getMultiJobExpenses = function (n) {
              return this.dispatch(this.baseUrl + '/getMultiJobExpenses', n)
            },
            t.prototype.editJobTransfers = function (n) {
              return this.dispatch(this.baseUrl + '/editJobTransfers', n)
            },
            t.prototype.cancelJob = function (n) {
              return this.dispatch(this.baseUrl + '/cancelJob', n)
            },
            t.prototype.executeJob = function (n) {
              return this.dispatch(this.baseUrl + '/executeJob', n)
            },
            t.$inject = [
              '$http',
              '$q'
            ],
            t
          }(t.ProxyDispatcher);
          n.commonServices.service('JobsServiceProxy', i)
        }) (i = t.proxies || (t.proxies = {
        }))
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  }));
  __extends = this && this.__extends || function () {
    var n = Object.setPrototypeOf || {
      __proto__: [
      ]
    }
    instanceof Array && function (n, t) {
      n.__proto__ = t
    }
    || function (n, t) {
      for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
    };
    return function (t, i) {
      function r() {
        this.constructor = t
      }
      n(t, i);
      t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
    }
  }(),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i;
        (function (t) {
          var i = function (n) {
            function t(t, i) {
              var r = n.call(this, t, i) || this;
              return r.baseUrl = 'api/channels/eBanking/Corporate/users.svc',
              r
            }
            return __extends(t, n),
            t.prototype.addUser = function (n) {
              return this.dispatch(this.baseUrl + '/addUser', n)
            },
            t.prototype.deleteUsers = function (n) {
              return this.dispatch(this.baseUrl + '/deleteUsers', n)
            },
            t.prototype.setCorporateLimits = function (n) {
              return this.dispatch(this.baseUrl + '/setCorporateLimits', n)
            },
            t.prototype.setUserRights = function (n) {
              return this.dispatch(this.baseUrl + '/setUserRights', n)
            },
            t.prototype.setSimpleUserChannel = function (n) {
              return this.dispatch(this.baseUrl + '/setSimpleUserChannel', n)
            },
            t.prototype.deactivateUser = function (n) {
              return this.dispatch(this.baseUrl + '/deactivateUser', n)
            },
            t.prototype.resetSimpleUserPin = function (n) {
              return this.dispatch(this.baseUrl + '/resetSimpleUserPin', n)
            },
            t.prototype.getCounselorInfo = function (n, t) {
              t === void 0 && (t = !1);
              return this.getCached(this.baseUrl + '/getCounselorInfo', n, 'getCounselorInfo', t)
            },
            t.$inject = [
              '$http',
              '$q'
            ],
            t
          }(t.ProxyDispatcher);
          n.commonServices.service('UsersServiceProxy', i)
        }) (i = t.proxies || (t.proxies = {
        }))
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        var t = function () {
          function t(t) {
            var i = this,
            r;
            this.appeventsService = t;
            this.productsCache = [
            ];
            this.cachedUserInfo = !0;
            this.setUserInfoCache = function (n) {
              i.cachedUserInfo = n
            };
            this.getUserInfoCache = function () {
              return i.cachedUserInfo
            };
            this.addToCache = function (t, r, u, f) {
              t.Products.forEach(function (t) {
                var o,
                e;
                r && r.length > 0 && (o = n.utilities.getProductWithCode(r, t.Code), t = i.enrichCachedProduct(t, o, f));
                t.Code && (i.productsCache[u].products[t.Code] ? (e = JSON.parse(JSON.stringify(i.productsCache[u].products[t.Code].Uses)), $.extend(i.productsCache[u].products[t.Code], t), e.length > 0 && (i.productsCache[u].products[t.Code].Uses = e))  : i.productsCache[u].products[t.Code] = t, i.productsCache[u].products[t.Code].CachedProductRequestType ? i.productsCache[u].products[t.Code].CachedProductRequestType.push(f)  : i.productsCache[u].products[t.Code].CachedProductRequestType = [
                  f
                ], i.productsCache[u].products[t.Code].HasDetailedInfo || (i.productsCache[u].products[t.Code].HasDetailedInfo = t.Currency ? !0 : !1))
              })
            };
            this.enrichCachedProduct = function (n, t) {
              return t && (t.Title && (n.Title = t.Title), t.TypeID && (n.TypeID = t.TypeID), t.Color > 0 && (n.Color = t.Color), t.Uses && t.Uses.length > 0 && (n.Uses = t.Uses), t.BankProduct && t.BankProduct.ProductID && (n.ProductID = t.BankProduct.ProductID)),
              n
            };
            this.getCachedProducts = function (n) {
              return i.productsCache[n].products
            };
            this.getCachedProductWithBase64Id = function (n, t) {
              var f,
              r,
              u;
              if (n) {
                f = window.atob(n.toString());
                r = i.getCachedProducts(t);
                for (u in r) if (r[u].ProductID.toString() == f) return r[u]
              }
              return null
            };
            this.getCachedProductById = function (n, t) {
              var r = i.getCachedProducts(t) || [
              ];
              for (var u in r) if (r[u].ProductID === n) return r[u];
              return null
            };
            this.getCachedAndNonCachedProfileProducts = function (t, r, u) {
              var e = {
                Cached: [
                ],
                NonCached: [
                ]
              },
              o,
              s,
              f;
              for (o in t) {
                s = !1;
                for (f in i.productsCache[r].products) if (t[o].Code == i.productsCache[r].products[f].Code && i.productsCache[r].products[f].HasDetailedInfo) {
                  i.updateCachedProductCachedRequestType(i.productsCache[r].products[f].CachedProductRequestType, u);
                  e.Cached.push(new n.model.ProductBase(i.productsCache[r].products[f]));
                  s = !0;
                  break
                }
                s || e.NonCached.push(new n.model.ProductBase(t[o]))
              }
              return e
            };
            this.invalidateCache = function (n) {
              i.productsCache[n] = {
                products: {
                }
              }
            };
            this.invalidateCachedProduct = function (n, t) {
              delete i.productsCache[n].products[t]
            };
            for (r in n.server.CategoryGroupType) typeof n.server.CategoryGroupType[r] == 'string' && this.productsCache.push({
              products: {
              }
            });
            t.subscribe(n.common.services.AppEventsService.InvalidateCustomUiSelectProduct, function (t, r) {
              i.invalidateCachedProduct(n.server.CategoryGroupType.ACCOUNT, r)
            });
            t.subscribe(n.common.services.AppEventsService.InvalidateCustomUiSelectCategoryGroup, function (n, t) {
              i.invalidateCache(t)
            })
          }
          return t.prototype.updateCachedProductCachedRequestType = function (n, t) {
            var i = !1;
            for (var r in n) if (n[r] == t) {
              i = !0;
              break
            }
            i || n.push(t)
          },
          t.$inject = [
            'AppEventsService'
          ],
          t
        }();
        n.commonServices.service('CachingService', t)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        var t = function () {
          function n(n, t, i, r) {
            this.qService = t;
            this.roleService = i;
            this.inquiryServiceProxy = r;
            this.basePath = 'api/channels/eBanking/Corporate/inquiry.svc/';
            this.getJobsPromiseBehavior = {
            };
            this.getJobsPromiseBehavior.transfersApprovals = null;
            this.getJobsPromiseBehavior.paymentsApprovals = null
          }
          return n.prototype.getJobs = function (n) {
            if (this.roleService.IsRetail()) {
              var t = this.qService.defer();
              return t.resolve({
                Jobs: [
                ],
                Totals: [
                ],
                ResultCode: 0
              }),
              t.promise
            }
            return this.inquiryServiceProxy.getJobs(n)
          },
          n.$inject = [
            'AppEventsService',
            '$q',
            'RoleService',
            'InquiryServiceProxy'
          ],
          n
        }();
        n.commonServices.service('ApprovalsService', t)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        var t = function () {
          function t(n) {
            this.stringService = n
          }
          return t.prototype.updateCurrencyInfo = function (t, i, r, u, f) {
            this.populateRatesDetails(t, r);
            var e = (new n.transfers.ExchangeRate).build(this.stringService, t.Details, i, n.model.Currency[u], f[0].value, f[1].value);
            t.DifferentCurrencyInfo.AmountCurrency = u;
            t.DifferentCurrencyInfo.DebitMessage = f[0].value == u ? n.utils.formatString('{0} {1} ({2})', [
              n.utils.toGreekLocale(i),
              n.model.Currency[f[0].value],
              r.TransferAmountDescription
            ])  : n.utils.formatString('{0} {1} ({2})', [
              n.utils.toGreekLocale(r.AmountInCurrency),
              n.model.Currency[f[0].value],
              r.AmountInCurrencyDescription
            ]);
            t.DifferentCurrencyInfo.DebitAmount = e.debitMessage;
            t.DifferentCurrencyInfo.CreditMessage = f[0].value == u ? n.utils.formatString('{0} {1} ({2})', [
              n.utils.toGreekLocale(r.AmountInCurrency),
              n.model.Currency[f[1].value],
              r.AmountInCurrencyDescription
            ])  : n.utils.formatString('{0} {1} ({2})', [
              n.utils.toGreekLocale(i),
              n.model.Currency[f[1].value],
              r.TransferAmountDescription
            ]);
            t.DifferentCurrencyInfo.CreditAmount = e.creditMessage;
            t.DifferentCurrencyInfo.BuyRate = e.buyRate;
            t.DifferentCurrencyInfo.BuyRateMessage = e.buyRateMessage;
            t.DifferentCurrencyInfo.SellRate = e.sellRate;
            t.DifferentCurrencyInfo.SellRateMessage = e.sellRateMessage
          },
          t.prototype.populateRatesDetails = function (t, i) {
            t.Details = [
            ];
            t.Details.push({
              Name: n.server.DetailName.DebitCurrencyAmount,
              DataType: 2,
              Value: n.utils.toGreekLocale(i.AmountInCurrency)
            });
            t.Details.push({
              Name: n.server.DetailName.AmountInEUR,
              DataType: 2,
              Value: n.utils.toGreekLocale(i.AmountInEUR)
            });
            t.Details.push({
              Name: n.server.DetailName.AmountInUSD,
              DataType: 2,
              Value: n.utils.toGreekLocale(i.AmountInUSD)
            });
            t.Details.push({
              Name: n.server.DetailName.BuyRate_IN,
              DataType: 2,
              Value: n.utils.toGreekLocale(i.BuyRate)
            });
            t.Details.push({
              Name: n.server.DetailName.SellRate_OUT,
              DataType: 2,
              Value: n.utils.toGreekLocale(i.SellRate)
            })
          },
          t.$inject = [
            'STRINGS'
          ],
          t
        }();
        n.commonServices.service('CrossCurrencyModelDecorator', t)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        var t = function () {
          function t(t, i, r, u) {
            var f = this;
            this.qService = i;
            this.queriesServiceProxy = r;
            this.securityServiceProxy = u;
            this.getETimeDepositBonusRatesPromise = null;
            this.getETimeDepositBonusInfoPromiseBehavior = {
            };
            this.getETimeDepositBonusInfoPromiseBehavior[1] = null;
            this.getETimeDepositBonusInfoPromiseBehavior[0] = null;
            t.subscribe(n.common.services.AppEventsService.InvalidateActiveEtimeDepositInfo_Event, function () {
              f.getETimeDepositBonusInfoPromiseBehavior[1] = null
            });
            t.subscribe(n.common.services.AppEventsService.InvalidateAllEtimeDepositInfo_Event, function () {
              f.getETimeDepositBonusInfoPromiseBehavior[0] = null
            })
          }
          return t.prototype.getETimeDepositBonusRates = function (n) {
            if (null == this.getETimeDepositBonusRatesPromise) {
              var i = {
                HasEmailAndMobile: n,
                IsBonus: !0
              },
              t = this;
              this.getETimeDepositBonusRatesPromise = this.queriesServiceProxy.getETimeDepositRates(i);
              this.getETimeDepositBonusRatesPromise.then(function (n) {
                n.ResultCode == 1 && (t.getETimeDepositBonusRatesPromise = null)
              }).catch (function () {
                t.getETimeDepositBonusRatesPromise = null
              })
            }
            return this.getETimeDepositBonusRatesPromise
          },
          t.prototype.getETimeDepositBonusInfo = function (n) {
            var t = this;
            return this.getETimeDepositBonusInfoPromiseBehavior.hasOwnProperty(n.RequestOption) ? (null == this.getETimeDepositBonusInfoPromiseBehavior[n.RequestOption] && (this.getETimeDepositBonusInfoPromiseBehavior[n.RequestOption] = this.queriesServiceProxy.getETimeDepositInfo(n, !0)), this.getETimeDepositBonusInfoPromiseBehavior[n.RequestOption].then(function (i) {
              i.ResultCode == 1 && (t.getETimeDepositBonusInfoPromiseBehavior[n.RequestOption] = null)
            }).catch (function () {
              t.getETimeDepositBonusInfoPromiseBehavior[n.RequestOption] = null
            }), this.getETimeDepositBonusInfoPromiseBehavior[n.RequestOption])  : this.queriesServiceProxy.getETimeDepositInfo(n, !0)
          },
          t.prototype.getETimeDepositBonusInfoDetails = function (n, t, i) {
            t === void 0 && (t = null);
            i === void 0 && (i = !1);
            var r = {
              ApplicationID: n
            };
            return r.TimeDepositProductCode = t,
            r.IsETimeDeposit = i,
            this.queriesServiceProxy.getETimeDepositInfoDetails(r)
          },
          t.prototype.checkNewETimeDepositBonus = function (n) {
            return this.securityServiceProxy.checkNewETimeDeposit(n)
          },
          t.prototype.createNewETimeDepositBonus = function (n) {
            return this.securityServiceProxy.createNewETimeDeposit(n)
          },
          t.prototype.cancelETimeDepositBonus = function (n) {
            var t = {
              ApplicationID: n
            };
            return this.securityServiceProxy.cancelETimeDeposit(t)
          },
          t.prototype.editETimeDepositBonus = function (n, t, i, r, u, f, e) {
            var o = {
            };
            return o.CreditAccountNumber = r || null,
            o.NewCardProductID = u || 0,
            o.NewCardNumber = f || null,
            o.NewCardNumberTypeID = e || 0,
            o.Option = n,
            o.TimeDepAccountNumber = t,
            o.TimeDepAccountTypeID = i,
            this.securityServiceProxy.editETimeDeposit(o).then(function (n) {
              return n
            })
          },
          t.prototype.discountingETimeDepositBonus = function (n, t, i, r) {
            var u = {
            };
            return u.CreditAccountNumber = r || null,
            u.Option = n,
            u.TimeDepAccountNumber = t,
            u.TimeDepAccountTypeID = i,
            this.securityServiceProxy.discountingETimeDeposit(u)
          },
          t.$inject = [
            'AppEventsService',
            '$q',
            'QueriesServiceProxy',
            'SecurityServiceProxy'
          ],
          t
        }();
        n.commonServices.service('ETimeDepositBonusService', t)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        var t = function () {
          function t(t, i, r, u) {
            var f = this;
            this.queriesServiceProxy = t;
            this.securityServiceProxy = i;
            this.qService = u;
            this.getETimeDepositRatesPromise = null;
            this.getETimeDepositInfoPromiseBehavior = {
            };
            this.getETimeDepositInfoPromiseBehavior[1] = null;
            this.getETimeDepositInfoPromiseBehavior[0] = null;
            r.subscribe(n.common.services.AppEventsService.InvalidateActiveEtimeDepositInfo_Event, function () {
              f.getETimeDepositInfoPromiseBehavior[1] = null
            });
            r.subscribe(n.common.services.AppEventsService.InvalidateAllEtimeDepositInfo_Event, function () {
              f.getETimeDepositInfoPromiseBehavior[0] = null
            })
          }
          return t.prototype.getETimeDepositRates = function (n) {
            var t = {
              HasEmailAndMobile: n
            };
            return this.queriesServiceProxy.getETimeDepositRates(t, !1)
          },
          t.prototype.getETimeDepositInfo = function (n) {
            var t = this;
            return this.getETimeDepositInfoPromiseBehavior.hasOwnProperty(n.RequestOption) ? (null == this.getETimeDepositInfoPromiseBehavior[n.RequestOption] && (this.getETimeDepositInfoPromiseBehavior[n.RequestOption] = this.queriesServiceProxy.getETimeDepositInfo(n, !0)), this.getETimeDepositInfoPromiseBehavior[n.RequestOption].then(function (i) {
              i.ResultCode == 1 && (t.getETimeDepositInfoPromiseBehavior[n.RequestOption] = null)
            }).catch (function () {
              t.getETimeDepositInfoPromiseBehavior[n.RequestOption] = null
            }), this.getETimeDepositInfoPromiseBehavior[n.RequestOption])  : this.queriesServiceProxy.getETimeDepositInfo(n, !0)
          },
          t.prototype.getETimeDepositInfoDetails = function (n, t, i) {
            t === void 0 && (t = null);
            i === void 0 && (i = !1);
            var r = {
              ApplicationID: n,
              TimeDepositProductCode: t,
              IsETimeDeposit: i
            };
            return this.queriesServiceProxy.getETimeDepositInfoDetails(r)
          },
          t.prototype.checkNewETimeDeposit = function (n) {
            return this.securityServiceProxy.checkNewETimeDeposit(n)
          },
          t.prototype.createNewETimeDeposit = function (n) {
            return this.securityServiceProxy.createNewETimeDeposit(n)
          },
          t.prototype.cancelETimeDeposit = function (n) {
            var t = {
              ApplicationID: n
            };
            return this.securityServiceProxy.cancelETimeDeposit(t)
          },
          t.prototype.editETimeDeposit = function (n, t, i, r) {
            var u = {
              CreditAccountNumber: r || null,
              Option: n,
              TimeDepAccountNumber: t,
              TimeDepAccountTypeID: i
            };
            return this.securityServiceProxy.editETimeDeposit(u)
          },
          t.prototype.discountingETimeDeposit = function (n, t, i, r) {
            var u = {
              CreditAccountNumber: r || null,
              Option: n,
              TimeDepAccountNumber: t,
              TimeDepAccountTypeID: i
            };
            return this.securityServiceProxy.discountingETimeDeposit(u)
          },
          t.$inject = [
            'QueriesServiceProxy',
            'SecurityServiceProxy',
            'AppEventsService',
            '$q'
          ],
          t
        }();
        n.commonServices.service('ETimeDepositService', t)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i = function () {
          function n() {
          }
          return n.prototype.ConvertBalanceTo = function (n, t, i, r) {
            return this.rates = r,
            this.calculateExchange(this.getRate(i), this.getRate(t), n)
          },
          n.prototype.EURTo = function (n, t, i) {
            return this.rates = i,
            this.calculateExchange(this.getRate(t), this.getRate('EUR'), n)
          },
          n.prototype.getRate = function (n) {
            return this.rates.filter(function (t) {
              return t.CurrencyName == n
            }) [0]
          },
          n.prototype.calculateExchange = function (n, t, i) {
            return (n.CurrencyBuy / t.CurrencySell * i).toFixed(2)
          },
          n
        }();
        t.exchangeService = i;
        n.commonServices.service('ExchangeService', i)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i = function () {
          function i(n, i, r, u, f, e, o, s) {
            this.productsServiceProxy = n;
            this.queriesServiceProxy = i;
            this.paymentsServiceProxy = r;
            this.$q = u;
            this.appEvents = f;
            this.STRINGS = e;
            this.profileProductsService = o;
            this.roleService = s;
            this.baseUrl = 'api/products.svc/';
            this.cache = {
            };
            this.dynamicPaymentFooterConfig = {
              entryStepPrefix: 'payments.dynamic.footer.entryStep.',
              entryStepFallback: 'payments.dynamic.footer.entryStep.fallback',
              finalStepPrefix: 'payments.dynamic.footer.finalStep.',
              finalStepFallback: 'payments.dynamic.footer.finalStep.fallback'
            };
            this.m_MyBankTransactionSearchItem = null;
            this.m_IrisTransactionSearchItem = null;
            var h = this;
            h.timeZones = [
              {
                Title: 'GMT-12:00',
                Description: 'International Date Line West'
              },
              {
                Title: 'GMT-11:00',
                Description: 'Midway Island, Samoa'
              },
              {
                Title: 'GMT-10:00',
                Description: 'Hawaii'
              },
              {
                Title: 'GMT-09:00',
                Description: 'Alaska'
              },
              {
                Title: 'GMT-08:00',
                Description: 'Pacific Time (US & Canada), Tijuana'
              },
              {
                Title: 'GMT-07:00',
                Description: 'Arizona'
              },
              {
                Title: 'GMT-07:00',
                Description: 'Chihuahua, La Paz, Mazatlan'
              },
              {
                Title: 'GMT-07:00',
                Description: 'Mountain Time (US & Canada)'
              },
              {
                Title: 'GMT-06:00',
                Description: 'Central America'
              },
              {
                Title: 'GMT-06:00',
                Description: 'Central Time (US & Canada)'
              },
              {
                Title: 'GMT-06:00',
                Description: 'Guadalajara, Mexico City, Monterrey'
              },
              {
                Title: 'GMT-06:00',
                Description: 'Saskatchewan'
              },
              {
                Title: 'GMT-05:00',
                Description: 'Bogota, Lima, Quito'
              },
              {
                Title: 'GMT-05:00',
                Description: 'Eastern Time (US & Canada)'
              },
              {
                Title: 'GMT-05:00',
                Description: 'Indiana (East)'
              },
              {
                Title: 'GMT-04:00',
                Description: 'Atlantic Time (Canada)'
              },
              {
                Title: 'GMT-04:00',
                Description: 'Caracas, La Paz'
              },
              {
                Title: 'GMT-04:00',
                Description: 'Santiago'
              },
              {
                Title: 'GMT-03:00',
                Description: 'Newfoundland'
              },
              {
                Title: 'GMT-03:00',
                Description: 'Brasilia'
              },
              {
                Title: 'GMT-03:00',
                Description: 'Buenos Aires, Georgetown'
              },
              {
                Title: 'GMT-03:00',
                Description: 'Greenland'
              },
              {
                Title: 'GMT-02:00',
                Description: 'Mid-Atlantic'
              },
              {
                Title: 'GMT-01:00',
                Description: 'Azores'
              },
              {
                Title: 'GMT-01:00',
                Description: 'Cape Verde Is.'
              },
              {
                Title: 'GMT',
                Description: 'Casablanca, Monrovia'
              },
              {
                Title: 'GMT',
                Description: 'Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London'
              },
              {
                Title: 'GMT+01:00',
                Description: 'Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna'
              },
              {
                Title: 'GMT+01:00',
                Description: 'Belgrade, Bratislava, Budapest, Ljubljana, Prague'
              },
              {
                Title: 'GMT+01:00',
                Description: 'Brussels, Copenhagen, Madrid, Paris'
              },
              {
                Title: 'GMT+01:00',
                Description: 'Sarajevo, Skopje, Warsaw, Zagreb'
              },
              {
                Title: 'GMT+01:00',
                Description: 'West Central Africa'
              },
              {
                Title: 'GMT+02:00',
                Description: 'Athens, Beirut, Istanbul, Minsk'
              },
              {
                Title: 'GMT+02:00',
                Description: 'Bucharest'
              },
              {
                Title: 'GMT+02:00',
                Description: 'Cairo'
              },
              {
                Title: 'GMT+02:00',
                Description: 'Harare, Pretoria'
              },
              {
                Title: 'GMT+02:00',
                Description: 'Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius'
              },
              {
                Title: 'GMT+02:00',
                Description: 'Jerusalem'
              },
              {
                Title: 'GMT+03:00',
                Description: 'Baghdad'
              },
              {
                Title: 'GMT+03:00',
                Description: 'Kuwait, Riyadh'
              },
              {
                Title: 'GMT+03:00',
                Description: 'Moscow, St. Petersburg, Volgograd'
              },
              {
                Title: 'GMT+03:00',
                Description: 'Nairobi'
              },
              {
                Title: 'GMT+03:30',
                Description: 'Tehran'
              },
              {
                Title: 'GMT+04:00',
                Description: 'Abu Dhabi, Muscat'
              },
              {
                Title: 'GMT+04:00',
                Description: 'Baku, Tbilisi, Yerevan'
              },
              {
                Title: 'GMT+04:30',
                Description: 'Kabul'
              },
              {
                Title: 'GMT+05:00',
                Description: 'Ekaterinburg'
              },
              {
                Title: 'GMT+05:00',
                Description: 'Islamabad, Karachi, Tashkent'
              },
              {
                Title: 'GMT+05:30',
                Description: 'Chennai, Kolkata, Mumbai, New Delhi'
              },
              {
                Title: 'GMT+05:45',
                Description: 'Kathmandu'
              },
              {
                Title: 'GMT+06:00',
                Description: 'Almaty, Novosibirsk'
              },
              {
                Title: 'GMT+06:00',
                Description: 'Astana, Dhaka'
              },
              {
                Title: 'GMT+06:00',
                Description: 'Sri Jayawardenepura'
              },
              {
                Title: 'GMT+06:30',
                Description: 'Rangoon'
              },
              {
                Title: 'GMT+07:00',
                Description: 'Bangkok, Hanoi, Jakarta'
              },
              {
                Title: 'GMT+07:00',
                Description: 'Krasnoyarsk'
              },
              {
                Title: 'GMT+08:00',
                Description: 'Beijing, Chongqing, Hong Kong, Urumqi'
              },
              {
                Title: 'GMT+08:00',
                Description: 'Irkutsk, Ulaan Bataar'
              },
              {
                Title: 'GMT+08:00',
                Description: 'Kuala Lumpur, Singapore'
              },
              {
                Title: 'GMT+08:00',
                Description: 'Perth'
              },
              {
                Title: 'GMT+08:00',
                Description: 'Taipei'
              },
              {
                Title: 'GMT+09:00',
                Description: 'Osaka, Sapporo, Tokyo'
              },
              {
                Title: 'GMT+09:00',
                Description: 'Seoul'
              },
              {
                Title: 'GMT+09:00',
                Description: 'Yakutsk'
              },
              {
                Title: 'GMT+09:30',
                Description: 'Adelaide'
              },
              {
                Title: 'GMT+09:30',
                Description: 'Darwin'
              },
              {
                Title: 'GMT+10:00',
                Description: 'Brisbane'
              },
              {
                Title: 'GMT+10:00',
                Description: 'Canberra, Melbourne, Sydney'
              },
              {
                Title: 'GMT+10:00',
                Description: 'Guam, Port Moresby'
              },
              {
                Title: 'GMT+10:00',
                Description: 'Hobart'
              },
              {
                Title: 'GMT+10:00',
                Description: 'Vladivostok'
              },
              {
                Title: 'GMT+11:00',
                Description: 'Magadan, Solomon Is., New Caledonia'
              },
              {
                Title: 'GMT+12:00',
                Description: 'Auckland, Wellington'
              },
              {
                Title: 'GMT+12:00',
                Description: 'Fiji, Kamchatka, Marshall Is.'
              },
              {
                Title: 'GMT+13:00',
                Description: 'Nuku\'alofa'
              },
              {
                Title: 'GMT+13:00',
                Description: 'Samoa'
              },
              {
                Title: 'GMT+14:00',
                Description: 'Kiritimati Island'
              }
            ];
            h.reasons = [
              {
                Group: e['transferReason.investments'],
                Title: e['transferReason.directInvestments'],
                Id: '460',
                Code: '926'
              },
              {
                Group: e['transferReason.investments'],
                Title: e['transferReason.securitiesInvestment'],
                Id: '470',
                Code: '926'
              },
              {
                Group: e['transferReason.investments'],
                Title: e['transferReason.loans'],
                Id: '480',
                Code: '926'
              },
              {
                Group: e['transferReason.investments'],
                Title: e['transferReason.deposits'],
                Id: '490',
                Code: '926'
              },
              {
                Group: e['transferReason.services'],
                Title: e['transferReason.travelServices'],
                Id: '500',
                Code: '924'
              },
              {
                Group: e['transferReason.services'],
                Title: e['transferReason.mailAndTelecommunications'],
                Id: '510',
                Code: '924'
              },
              {
                Group: e['transferReason.services'],
                Title: e['transferReason.transportServices'],
                Id: '520',
                Code: '924'
              },
              {
                Group: e['transferReason.services'],
                Title: e['transferReason.entertainementServicesAndCulture'],
                Id: '530',
                Code: '924'
              },
              {
                Group: e['transferReason.payments'],
                Title: e['transferReason.insurance'],
                Id: '540',
                Code: '924'
              },
              {
                Group: e['transferReason.payments'],
                Title: e['transferReason.dividentsAndCapitalGains'],
                Id: '550',
                Code: '924'
              },
              {
                Group: e['transferReason.payments'],
                Title: e['transferReason.rentsForResidentsAbroad'],
                Id: '560',
                Code: '924'
              },
              {
                Group: e['transferReason.payments'],
                Title: e['transferReason.scholarships'],
                Id: '570',
                Code: '924'
              },
              {
                Group: e['transferReason.payments'],
                Title: e['transferReason.creditCards'],
                Id: '580',
                Code: '924'
              }
            ];
            h.transferCategories = [
              {
                Title: e.transferCategory1,
                Value: 1
              },
              {
                Title: e.transferCategory2,
                Value: 2
              },
              {
                Title: e.transferCategory3,
                Value: 3
              },
              {
                Title: e.transferCategory4,
                Value: 0
              }
            ];
            h.channels = {
              0: '',
              1: e['channels.ALPHAPHONE_IVR'],
              2: e['channels.ALPHALINE'],
              3: e['channels.ALPHA_WEBBANKING'],
              4: e['channels.ALPHA_MOBILEBANKING'],
              5: e['channels.ALPHAPHONE_CALLCENTER'],
              6: e['channels.INTERNET'],
              7: e['channels.IO_CONTROL'],
              8: e['channels.BRANCH']
            };
            h.languagesArray = [
              {
                Key: 'el',
                Title: e['Languages.Greek']
              },
              {
                Key: 'en',
                Title: e['Languages.English']
              }
            ];
            h.queryTypesForPayments = [
              {
                Name: e['TransationQueryType.All_Payments'],
                TransferType: 2
              },
              {
                Name: e['TransationQueryType.Immediate_Payment'],
                TransferType: 4
              },
              {
                Name: e['TransationQueryType.Ordered_Payment'],
                TransferType: 6
              },
              {
                Name: e['TransationQueryType.DIAS_Payment'],
                TransferType: 8
              },
              {
                Name: e['TransationQueryType.Labor_Ticket'],
                TransferType: 11
              }
            ];
            h.queryTypesForTransfers = [
              {
                Name: e['TransationQueryType.All_Transfers'],
                TransferType: 1
              },
              {
                Name: e['TransationQueryType.Immediate_Transfer'],
                TransferType: 3
              },
              {
                Name: e['TransationQueryType.Ordered_Transfer'],
                TransferType: 5
              },
              {
                Name: e['TransationQueryType.DIAS_Transfer'],
                TransferType: 7
              },
              {
                Name: e['TransationQueryType.CashAdvance'],
                TransferType: 9
              },
              {
                Name: e['TransationQueryType.Loan'],
                TransferType: 10
              }
            ];
            h.queryTypesForTransfers = s.IsRetail() ? h.queryTypesForTransfers.concat([{
              Name: e['TransationQueryType.Instant_Payment'],
              TransferType: 15
            }
            ])  : h.queryTypesForTransfers.concat([{
              Name: e['TransationQueryType.Simple_Import'],
              TransferType: 16
            }
            ]);
            h.appEvents.subscribe(t.AppEventsService.InvalidateLookups_Event, function (n, t) {
              t && t.forEach(function (n) {
                h.clearCache(n)
              })
            })
          }
          return i.prototype.getProductTypesCachedData = function (n, t, i) {
            var u = this,
            r = {
              RequestType: t,
              ReturnBalances: !0
            };
            return this.productsServiceProxy.getProductTypes(r, i).then(function (n) {
              return n.ProductTypes
            })
          },
          i.prototype.clearCache = function (n) {
            var t = this,
            i;
            if (n) t.cache[n] = null;
             else for (i in t.cache) t.cache.hasOwnProperty(i) && (t.cache[i] = null)
          },
          i.prototype.getDynamicPaymentFooterInfo = function (n) {
            var t = this.dynamicPaymentFooterConfig.entryStepPrefix + n,
            r = this.STRINGS[t] ? this.STRINGS[t] : this.STRINGS[this.dynamicPaymentFooterConfig.entryStepFallback],
            i = this.dynamicPaymentFooterConfig.finalStepPrefix + n,
            u = this.STRINGS[i] ? this.STRINGS[i] : this.STRINGS[this.dynamicPaymentFooterConfig.finalStepFallback];
            return {
              entry: r,
              end: u
            }
          },
          i.prototype.getLoanTypes = function (t) {
            var r = this;
            return r.getProductTypesCachedData(i.LoanTypes_CacheKey, n.server.ProductRequestType.AllLoans, t)
          },
          i.prototype.getBanksForCards = function (t) {
            var r = this;
            return r.getProductTypesCachedData(i.BanksForCards_CacheKey, n.server.ProductRequestType.Banks_For_Cards, t)
          },
          i.prototype.getPersonalConsumerLoans = function () {
            return this.profileProductsService.getLoans().then(function (t) {
              return t.filter(function (t) {
                return t.TypeID === n.constants.general.consumerLoanProductTypeId
              }).map(function (t) {
                return new n.model.AccountProduct(t.BankProduct)
              })
            })
          },
          i.prototype.getBanks = function (t) {
            var r = this;
            return r.getProductTypesCachedData(i.Banks_CacheKey, n.server.ProductRequestType.Banks, t)
          },
          i.prototype.getCountries = function (n) {
            var t = this;
            return this.queriesServiceProxy.getCountries({
            }, n).then(function (n) {
              return n.Countries
            })
          },
          i.prototype.getCurrencies = function (n) {
            var t = this;
            return this.queriesServiceProxy.getCurrencies({
            }, n).then(function (n) {
              return n.Items
            })
          },
          i.prototype.getCurrenciesForQueries = function () {
            var t = this,
            n = t.$q.defer();
            return t.getCurrencies().then(function (t) {
              if (t) {
                var i = t.filter(function (n) {
                  return n.UseForQueries
                });
                n.resolve(i)
              } else n.resolve([])
            }, function (t) {
              n.reject(t)
            }),
            n.promise
          },
          i.prototype.getCurrenciesForTransfers = function () {
            var t = this,
            n = t.$q.defer();
            return t.getCurrencies().then(function (t) {
              if (t) {
                var i = t.filter(function (n) {
                  return n.UseForTransfers
                });
                n.resolve(i)
              } else n.resolve([])
            }, function (t) {
              n.reject(t)
            }),
            n.promise
          },
          i.prototype.getTransferReasons = function () {
            var n = this,
            t = n.$q.defer();
            return t.resolve(n.reasons),
            t.promise
          },
          i.prototype.getTransferCategory = function () {
            var n = this,
            t = n.$q.defer();
            return t.resolve(n.transferCategories),
            t.promise
          },
          i.prototype.getTimeZones = function () {
            var n = this,
            t = n.$q.defer();
            return t.resolve(n.timeZones),
            t.promise
          },
          i.prototype.getLanguages = function () {
            var n = this,
            t = n.$q.defer();
            return t.resolve(n.languagesArray),
            t.promise
          },
          i.prototype.getChannels = function () {
            var n = this,
            t = n.$q.defer();
            return t.resolve(n.channels),
            t.promise
          },
          i.prototype.getQueryTypesForPayments = function () {
            var n = this,
            t = n.$q.defer();
            return t.resolve(n.queryTypesForPayments),
            t.promise
          },
          i.prototype.getQueryTypesForTransfers = function () {
            var n = this,
            t = n.$q.defer();
            return t.resolve(n.queryTypesForTransfers),
            t.promise
          },
          i.prototype.getPaymentTypes = function (t) {
            var r = this,
            i = {
            };
            return i.PageNumber = 0,
            i.ResultsPerPage = 1000,
            i.SearchValue = '',
            i.CreateGroups = !0,
            i.IncludeChildPayments = !0,
            i.PaymentProductType = 0,
            i.OnlyForCurrentChannel = !1,
            this.paymentsServiceProxy.getPaymentTypes(i, t).then(function (t) {
              return t.Items.map(n.model.PaymentMenuItem.PaymentTypeSearchResultMap)
            })
          },
          i.prototype.getStandingPaymentTypes = function (t) {
            var r = this,
            i = {
            };
            return i.PageNumber = 0,
            i.ResultsPerPage = 1000,
            i.SearchValue = '',
            i.CreateGroups = !1,
            i.PaymentProductType = 1,
            i.OnlyForCurrentChannel = !1,
            this.paymentsServiceProxy.getPaymentTypes(i, t).then(function (t) {
              return t.Items.map(n.model.PaymentMenuItem.PaymentTypeSearchResultMap).filter(function (n) {
                return n.Item.IsActive
              })
            })
          },
          i.prototype.getPaymentTypesByGroup = function (n, t) {
            var r = this,
            i = {
            };
            return i.GroupId = n,
            this.paymentsServiceProxy.getPaymentTypesByGroup(i, t).then(function (n) {
              return n
            })
          },
          i.prototype.getPaymentMenuItemsForGroup = function (t) {
            var u = this,
            i = {
              GroupName: '',
              Items: [
              ]
            },
            r = u.$q.defer();
            return u.getPaymentTypes().then(function (u) {
              var f = u.filter(function (n) {
                return n.IsGroup && n.GroupId == t
              }) [0];
              i.GroupName = f.Item.DisplayName;
              i.Items = u.filter(function (n) {
                return n.Item && n.Item.GroupId == t && n.Item.IsActive
              }).sort(n.utils.dynamicSort('title'));
              r.resolve(i)
            }, function (n) {
              r.reject(n)
            }),
            r.promise
          },
          i.prototype.getPaymentType = function (n, t) {
            return this.getPaymentTypeByProductTypeId(n, t)
          },
          i.prototype.getPaymentTypeByProductTypeId = function (n, t) {
            var r = this,
            i = {
            };
            return i.PaymentTypeId = n,
            this.paymentsServiceProxy.getPaymentType(i, t).then(function (n) {
              return n.PaymentType.Fields.forEach(function (n) {
                n.Regex && (n.RegExpression = new RegExp(n.Regex))
              }),
              n.PaymentType
            })
          },
          i.prototype.getPredefinedCodesForPaymentType = function (t, i) {
            var f = this,
            r = {
            },
            u;
            return r.RequestType = n.server.ProductRequestType.Specific_ProductTypeIDs,
            r.ProductTypeIDs = [
            ],
            r.ProductTypeIDs.push(t),
            r.ReturnBalances = !1,
            r.ReturnDetails = !0,
            r.OperationalGroups = [
            ],
            r.ProductCategories = [
            ],
            r.MaxRecords = 1000,
            r.LastPageIndex = '',
            u = 'PredefinedCodesForPaymentType_' + t.toString(),
            this.productsServiceProxy.getProfileProducts(r, i).then(function (t) {
              return t.Products ? t.Products.map(function (t) {
                return new n.model.AccountProduct(t)
              })  : null
            })
          },
          i.prototype.getPaymentTemplates = function () {
            var t = this,
            n = t.$q.defer();
            return n.resolve([]),
            n.promise
          },
          i.prototype.getTransferTemplates = function (n) {
            var t = this;
            return this.queriesServiceProxy.getTransactionTemplates({
              Type: 0,
              MaxRecords: 1000,
              LastPageIndex: ''
            }, n).then(function (n) {
              return n.Templates ? n.Templates : null
            })
          },
          i.prototype.getLaborTicketSecurityServices = function () {
            var n = this.STRINGS;
            return this.queriesServiceProxy.getSocialSecurityTree({
            }).then(function (t) {
              var i = t.Items.map(function (n) {
                return {
                  key: n.Key,
                  text: n.Text,
                  items: n.Items.map(function (n) {
                    return {
                      key: n.Key,
                      text: n.Text
                    }
                  })
                }
              });
              return {
                items: i,
                socialSecurityPrompt: n['payments.laborTicket.socialSecurity.prompt'],
                socialSecurityServicePrompt: n['payments.laborTicket.socialSecurityService.prompt']
              }
            })
          },
          i.prototype.getEVoucherData = function (n, t, i) {
            var r = {
              ForeasID: n,
              CategoryID: t,
              TypeID: i
            };
            return this.paymentsServiceProxy.geteParavoloData(r, !1).then(function (n) {
              return n.EParavoloData
            })
          },
          i.prototype.getRetailCitibank = function () {
            return {
              TypeID: 20038,
              TypeName: this.STRINGS.Citibank_Retail_Name
            }
          },
          i.prototype.getDateAndAmountForPayment = function (n, t) {
            var i = {
              ProductCode: n,
              ProductType: t
            };
            return this.paymentsServiceProxy.getDateAndAmountForPayment(i)
          },
          i.prototype.getMyBankTransactionSearchItem = function () {
            return null == this.m_MyBankTransactionSearchItem && (this.m_MyBankTransactionSearchItem = {
              title: this.STRINGS.myBankPaymentTitle,
              searchTerms: this.STRINGS.myBankPaymentTitle,
              value: n.constants.payments.myBank_productTypeId
            }),
            this.m_MyBankTransactionSearchItem
          },
          i.prototype.getIrisTransactionSearchItem = function () {
            return this.m_IrisTransactionSearchItem || (this.m_IrisTransactionSearchItem = {
              title: this.STRINGS.IrisPayment,
              searchTerms: this.STRINGS.IrisPayment,
              value: n.constants.payments.iris_productTypeId
            }),
            this.m_IrisTransactionSearchItem
          },
          i.prototype.getBoG = function () {
            return {
              TypeID: 20042,
              TypeName: this.STRINGS.BoG_Name
            }
          },
          i.$inject = [
            'ProductsServiceProxy',
            'QueriesServiceProxy',
            'PaymentsServiceProxy',
            '$q',
            'AppEventsService',
            'STRINGS',
            'ProfileProductsService',
            'RoleService'
          ],
          i.DebitAccounts_CacheKey = 'DebitAccounts',
          i.DebitAccountsForOrderedTransfer_CacheKey = 'DebitAccountsForOrderedTransfer',
          i.DebitAccountsForStandingOrders_CacheKey = 'DebitAccountsForStandingOrders',
          i.DebitAccountsForPayment_CacheKey = 'DebitAccountsForPayment',
          i.CardsForCashAdvance_CacheKey = 'CardsForCashAdvance',
          i.LoansForCashAdvance_CacheKey = 'LoansForCashAdvance',
          i.CardsForPayment_CacheKey = 'CardsForPayment',
          i.LoansForPayment_CacheKey = 'LoansForPayment',
          i.CreditAccounts_CacheKey = 'CreditAccounts',
          i.CreditAccountsForOrderedTransfer_CacheKey = 'CreditAccountsForOrderedTransfer',
          i.InterbankCreditAccounts_CacheKey = 'InterbankCreditAccounts',
          i.InternationalCreditAccounts_CacheKey = 'InternationalCreditAccounts',
          i.CreditLoans_CacheKey = 'CreditLoans',
          i.PaymentTemplates_CacheKey = 'PaymentTemplates',
          i.TransferTemplates_CacheKey = 'TransferTemplates',
          i.PaymentTypes_CacheKey = 'PaymentTypes',
          i.StandingPaymentTypes_CacheKey = 'StandingPaymentTypes',
          i.LoanTypes_CacheKey = 'LoanTypes',
          i.InterbankCards_CacheKey = 'InterbankCards',
          i.BanksForCards_CacheKey = 'BanksForCards',
          i.Banks_CacheKey = 'Banks',
          i.Countries_CacheKey = 'Countries',
          i.Currencies_CacheKey = 'Currencies',
          i.QueryTypeOptions_CacheKey = 'QueryTypeOptions',
          i.QuerySortOptions_CacheKey = 'TransactionsSortOptions',
          i.eVoucherConfigData_CacheKey = 'eVoucherConfigData',
          i
        }();
        t.LookupsService = i;
        n.services.service('LookupsService', i)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        var t = function () {
          function t(n, t, i) {
            this.securityService = n;
            this.roleService = t;
            this.qService = i
          }
          return t.prototype.filter = function (n) {
            var t = this;
            return this.qService.all([this.roleService.getPermissionsPromise(),
            this.securityService.getUserSessionInfo()]).then(function (i) {
              return t.permissions = i[0],
              t.excludeForbiddenMenu(i[1].UserInfo, n)
            })
          },
          t.prototype.restructure = function (t) {
            var r = this,
            i,
            u;
            return t.children && (i = t.children.filter(function (t) {
              return (n.utils.isUndefinedOrNull(t.isDisabled) || t.isDisabled == !1) && (n.utils.isUndefinedOrNull(t.inMenu) || t.inMenu)
            }) [0], i && !i.isPreviousCopy && i.level && i.level > 1 && (i.isPreviousCopy = !0, t.state = $.trim(i.state), t.children.forEach(function (n) {
              n.state != i.state && (n.isPreviousCopy = !1)
            }), t.isPreviousCopy && r.propagateState(t, t.state)), u = t, t.children.forEach(function (n) {
              n.ParentMenu = u;
              r.restructure(n)
            })),
            this.qService.when(t)
          },
          t.prototype.propagateState = function (n, t) {
            n.ParentMenu && (n.ParentMenu.state = t);
            n.isPreviousCopy && this.propagateState(n.ParentMenu, t)
          },
          t.prototype.excludeForbiddenMenu = function (t, i) {
            var u = this,
            r;
            return t != null && i.children && i.children.length && (r = [
            ], i.children.some(function (t) {
              var i;
              return (t.childrenOrdering && (i = t.childrenOrdering), i && i.permissions && i.permissions.length > 0 && i.orderings && i.orderings.length > 0 && !n.utils.Intersect([u.permissions,
              i.permissions]).length) ? (t.children.sort(function (n, t) {
                var r = i.orderings.indexOf(n.index) + 1,
                u = i.orderings.indexOf(t.index) + 1;
                return r > u ? 1 : u > r ? - 1 : (console.warn('Ordering indexes must be unique!'), 0)
              }), !0)  : !1
            }), i.children.forEach(function (i) {
              i.hideStateForRoles && i.hideStateForRoles.length > 0 && i.hideStateForRoles.indexOf($('meta[name=Role]').attr('content')) > - 1 || (i.permissions && i.permissions.length && !n.utils.Intersect([u.permissions,
              i.permissions]).length ? n.utils.Intersect([t.Features,
              i.permissions]).length ? (i = u.excludeForbiddenMenu(t, i), r.push(i))  : i.level == 1 ? i.permissions.indexOf('CashManagement') == - 1 && (i.isDisabled = !0, r.push(i))  : (i.inMenu = !1, i.isDisabled = !0, r.push(i))  : (i = u.excludeForbiddenMenu(t, i), r.push(i)))
            }), i.children = r),
            i
          },
          t.$inject = [
            'SecurityService',
            'RoleService',
            '$q'
          ],
          t
        }();
        n.commonServices.service('MenuFilterService', t)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        var t = function () {
          function n(n) {
            this.otherBankProductsServiceProxy = n;
            this.baseUrl = 'api/OtherBankProducts.svc'
          }
          return n.prototype.getAllOrSpecifiedProducts = function (n, t, i) {
            var r = {
            };
            return r.OtherBank = n,
            r.OtherBankProductType = t,
            r.RequestedOtherBankProducts = i,
            this.otherBankProductsServiceProxy.getAllOrSpecifiedProducts(r)
          },
          n.prototype.saveOAuthCallbackState = function (n) {
            var t = {
            };
            return t.State = n,
            this.otherBankProductsServiceProxy.saveOAuthCallbackState(t)
          },
          n.prototype.getOtherBanks = function (n) {
            var t = {
            };
            return t.RequestType = n,
            this.otherBankProductsServiceProxy.getOtherBanks(t).then(function (n) {
              return n.OtherBanks
            })
          },
          n.prototype.getProductBalance = function (n, t, i, r, u) {
            var f = {
            };
            return this.FillCommonProperties(f, n, t, i, r, u),
            this.otherBankProductsServiceProxy.getProductBalance(f)
          },
          n.prototype.getProductDetails = function (n, t, i, r, u, f) {
            var e = {
            };
            return this.FillCommonProperties(e, n, t, r, u, f),
            e.RequestedServiceType = i,
            this.otherBankProductsServiceProxy.getProductDetails(e)
          },
          n.prototype.finishOtherBankMultipleProductsAddition = function (n, t, i) {
            var r = {
            };
            return r.OtherBank = n,
            r.OtherBankProductType = t,
            r.Products = i,
            this.otherBankProductsServiceProxy.finishOtherBankMultipleProductsAddition(r)
          },
          n.prototype.getProductTransactions = function (n, t, i, r, u, f) {
            var e = {
            };
            return this.FillCommonProperties(e, n, t, i, r, u),
            e.OtherBankProductTransactionsFilter = f,
            this.otherBankProductsServiceProxy.getProductTransactions(e)
          },
          n.prototype.FillCommonProperties = function (n, t, i, r, u, f) {
            n.OtherBank = t;
            n.OtherBankProductType = i;
            n.OtherBankProductCode = r;
            n.OtherBankProductId = u;
            n.OtherBankProductIdentifier = f
          },
          n.$inject = [
            'OtherBankProductsServiceProxy'
          ],
          n
        }();
        n.commonServices.service('OtherBankProductsService', t)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  }));
  __assign = this && this.__assign || Object.assign || function (n) {
    for (var t, r, i = 1, u = arguments.length; i < u; i++) {
      t = arguments[i];
      for (r in t) Object.prototype.hasOwnProperty.call(t, r) && (n[r] = t[r])
    }
    return n
  },
  function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        function c(n) {
          return String(n)
        }
        function l(n) {
          var t = (n || {
            ResultCode: 0
          }).Cards || [
          ];
          return t.map(a)
        }
        function a(t) {
          var i = new n.model.CardProduct(t);
          return i.CategoryGroupType = n.server.CategoryGroupType.CARD,
          i
        }
        function e(n) {
          return {
            hints: __assign({
            }, n.hints || {
            }),
            payloadFn: o(n),
            uiContext: n.uiContext ? __assign({
            }, n.uiContext)  : undefined,
            selfValidate: n.selfValidate
          }
        }
        function o(n) {
          return n = n || {
          },
          n.payloadFn || v(n.payload)
        }
        function v(n) {
          var t = n ? __assign({
          }, n)  : n;
          return function () {
            return t
          }
        }
        var i = n.interfaces.services.OtpStatus,
        h = function () {
          function n(n, t, i, r) {
            this.requirement = n;
            this.availableMethods = i;
            this._methods = (t || [
            ]).slice();
            this._dynamicLinkCode = r || null
          }
          return Object.defineProperty(n.prototype, 'baseMethod', {
            get: function () {
              return this._methods.length > 0 ? this._methods[0] : 0
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(n.prototype, 'auxilliaryMethod', {
            get: function () {
              return this._methods.length > 1 ? this._methods[1] : 0
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(n.prototype, 'required', {
            get: function () {
              return this.requirement === 2 || this.requirement === 3
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(n.prototype, 'dynamicLinkCode', {
            get: function () {
              return this._dynamicLinkCode
            },
            enumerable: !0,
            configurable: !0
          }),
          n
        }(),
        r = function () {
          function n(n, t, i, r, u, f) {
            this.$modal = n;
            this.$parse = t;
            this.$q = i;
            this.securityService = r;
            this.roleService = u;
            this.productsService = f;
            this.otpHandlerByCaller = {
            };
            this._current = null
          }
          return Object.defineProperty(n.prototype, 'current', {
            get: function () {
              return this._current
            },
            enumerable: !0,
            configurable: !0
          }),
          n.prototype.retrieveHandler = function (n, t) {
            return t === void 0 && (t = null),
            typeof t == 'string' && (t = {
              hints: {
                OtpEnforce: t
              },
              uiContext: {
                isNewScreen: !0
              }
            }),
            this.getHandler(n, t) || this.createHandler(n, t)
          },
          n.prototype.activatedHandler = function (n, t, i) {
            var u = this,
            r;
            return t === void 0 && (t = null),
            i === void 0 && (i = !1),
            typeof t == 'boolean' && (i = t, t = null),
            r = this.retrieveHandler(n, t),
            r.enquire().then(function () {
              return u.$q.when(r)
            }).catch (function (n) {
              return i ? u.$q.when(r)  : u.$q.reject(n)
            })
          },
          n.prototype.clearHandler = function (n) {
            return this.removeHandler(this.getHandler(n))
          },
          n.prototype.createHandler = function (n, t) {
            var r = this,
            i = new u(this.$modal, this.$parse, this.$q, this.securityService, this.roleService, this.productsService, n, t, function (n) {
              return r.buildManagementInterface(n)
            });
            return this.otpHandlerByCaller[n] = i,
            i
          },
          n.prototype.buildManagementInterface = function (n) {
            return {
              unregister: this.buildUnregisterFn(n),
              markCurrent: this.buildMarkCurrentFn(n)
            }
          },
          n.prototype.buildUnregisterFn = function (n) {
            var t = this;
            if (!n) throw {
              Message: 'No handler specified for unregister function builder'
            };
            return function () {
              var r = t.getHandler(n.caller),
              i = n === r;
              return i && t.removeHandler(n),
              i
            }
          },
          n.prototype.buildMarkCurrentFn = function (n) {
            var t = this;
            if (!n) throw {
              Message: 'No handler specified for unregister function builder'
            };
            return function () {
              return t._current = n,
              function () {
                var i = t.current === n;
                return i && (t._current = null),
                i
              }
            }
          },
          n.prototype.getHandler = function (n, t) {
            t === void 0 && (t = null);
            var i = this.otpHandlerByCaller[c(n)] || null;
            return i && t && i.reset(t),
            i
          },
          n.prototype.removeHandler = function (n) {
            return n && this.current === n && (this._current = null),
            n
          },
          n.$inject = [
            '$modal',
            '$parse',
            '$q',
            'SecurityService',
            'RoleService',
            'ProductsService'
          ],
          n
        }(),
        u,
        f,
        s;
        t.OtpHandlerService = r;
        n.services.service('OtpHandlerService', r);
        u = function () {
          function t(n, t, i, r, u, e, o, s, h) {
            this.$modal = n;
            this.$parse = t;
            this.$q = i;
            this.securityService = r;
            this.roleService = u;
            this.productsService = e;
            this._caller = o;
            this._otpUserCancellation = {
              userCancel: !0,
              reason: 'otp-user-cancel',
              Message: 'User cancelled the otp process'
            };
            this._autoComplete = !1;
            this.requiredMethods = [
            ];
            this._alphaPhoneValidated = !1;
            this.management = h(this);
            this.reset(s || f)
          }
          return Object.defineProperty(t.prototype, 'caller', {
            get: function () {
              return this._caller
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(t.prototype, 'context', {
            get: function () {
              return e(this._context)
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(t.prototype, 'isEnforceContext', {
            get: function () {
              return Boolean(this._context.hints.OtpEnforce)
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(t.prototype, 'isDefaultContext', {
            get: function () {
              return !this.isEnforceContext
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(t.prototype, 'payload', {
            get: function () {
              return this._context.payloadFn()
            },
            enumerable: !0,
            configurable: !0
          }),
          t.prototype.refreshPayload = function (n) {
            return n && (this._context.payloadFn = o({
              payload: n
            })),
            this._context.payloadFn()
          },
          Object.defineProperty(t.prototype, 'selfValidate', {
            get: function () {
              return Boolean(this._context.selfValidate)
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(t.prototype, 'uiContext', {
            get: function () {
              return this._context.uiContext || {
              }
            },
            enumerable: !0,
            configurable: !0
          }),
          t.prototype.updateUiContext = function (n) {
            return n && (this._context.uiContext = __assign({
            }, this.uiContext, n)),
            this.uiContext
          },
          t.prototype.setAutoComplete = function (n) {
            return this._autoComplete = n,
            this
          },
          Object.defineProperty(t.prototype, 'model', {
            get: function () {
              return this._result.model
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(t.prototype, 'method', {
            get: function () {
              return this._result.method
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(t.prototype, 'status', {
            get: function () {
              return this._status
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(t.prototype, 'cards', {
            get: function () {
              return this._cards
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(t.prototype, 'showNoCardsWarning', {
            get: function () {
              return this._showNoCardsWarning
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(t.prototype, 'userHasOtp', {
            get: function () {
              return this._userOtpStatus === 1 || this._userOtpStatus === 0
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(t.prototype, 'alphaPhoneValidated', {
            get: function () {
              return this._alphaPhoneValidated
            },
            set: function (n) {
              this._alphaPhoneValidated = n
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(t.prototype, 'skipNoOtpValidation', {
            get: function () {
              return this.uiContext.skipNoOtpValidation
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(t.prototype, 'isMyBank', {
            get: function () {
              return this.uiContext.isMyBank
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(t.prototype, 'isIris', {
            get: function () {
              return this.uiContext.isIris
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(t.prototype, 'redirectUrl', {
            get: function () {
              return this.uiContext.redirectUrl
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(t.prototype, 'isNewScreen', {
            get: function () {
              return this.uiContext.isNewScreen
            },
            set: function (n) {
              this.updateUiContext({
                isNewScreen: n
              })
            },
            enumerable: !0,
            configurable: !0
          }),
          t.prototype.checkNewScreen = function () {
            var n = this.isNewScreen;
            return this.isNewScreen = !1,
            n
          },
          t.prototype.resetData = function () {
            this.enquiryInfoPromise = null;
            this.deferredResults = [
            ];
            this._userOtpStatus = 2;
            this._status = i.Inactive;
            this._showNoCardsWarning = !1;
            this._cards = [
            ];
            this._result = {
              requirement: 0,
              method: 0,
              availableMethods: [
              ],
              model: {
                value: null,
                cardNumber: null,
                cardPin: null,
                mobileToken: null,
                emailToken: null
              }
            };
            this.requiredMethods = [
            ]
          },
          t.prototype.updateModel = function (n) {
            if (n) {
              var t = this.model;
              t.value = n.value;
              t.cardPin = n.cardPin;
              t.mobileToken = n.mobileToken;
              t.emailToken = n.emailToken
            }
          },
          t.prototype.enquire = function (n) {
            var t = this,
            r = this._autoComplete;
            return this.ensureEnquire().then(function (i) {
              return t.evaluateEnquiry(i, n)
            }).then(function (n) {
              return t.validateExtraInfo(n)
            }).then(function (n) {
              return t._status = n.required ? i.Required : i.NotRequired,
              t._result.requirement = n.requirement,
              n
            }).then(function (n) {
              return t.handleAlphaPhone(n)
            }).then(function (n) {
              return (!n.required || r || t.isAlphaPhone) && t.doMarkComplete(),
              n
            })
          },
          t.prototype.ensureEnquire = function () {
            var n = this;
            return this.enquiryInfoPromise || (this._status = i.Enquire, this.enquiryInfoPromise = this.serverEnquire().then(function (t) {
              return n.validateEnquiryInfo(t)
            }).then(function (t) {
              n._result.availableMethods = (t.availableMethods || [
              ]).slice();
              var i = (t.requiredMethods || [
              ]).slice();
              return n.requiredMethods = i,
              n._result.method = i.length > 0 ? i[0] : 0,
              t
            }).then(function (t) {
              return n.updateExtraInfo(t)
            })),
            this.enquiryInfoPromise
          },
          t.prototype.evaluateEnquiry = function (n, t) {
            return new h(n.requirementFn(this.refreshPayload(t)), n.requiredMethods, (n.availableMethods || [
            ]).slice(), n.dynamicLinkCode)
          },
          t.prototype.validateExtraInfo = function (n) {
            if (this._showNoCardsWarning = !1, n.requirement !== 3 && n.required && (this.isCardBasedOtp && this.cards.length === 0 || this.isUserBasedOtp && !this.userHasOtp) && (n.requirement = 3), n.requirement === 3) if (this.isCardBasedOtp) {
              this._showNoCardsWarning = !0;
              throw this.markError('No cards found for Card/Pin verification', i.Unfulfillable);
            } else if (this.isUserBasedOtp && !this.skipNoOtpValidation) {
              this.displayNoOtpModal();
              throw this.markError(this._otpUserCancellation, i.Unfulfillable);
            }
            return n
          },
          t.prototype.handleAlphaPhone = function (n) {
            var t = this;
            return n.required && n.baseMethod === 5 && !this.alphaPhoneValidated ? this.$modal.open(s).result.then(function () {
              return t.alphaPhoneValidated = !0,
              n
            })  : this.$q.when(n)
          },
          Object.defineProperty(t.prototype, 'isRequired', {
            get: function () {
              var n = this._result.requirement;
              return n === 2 || n === 3
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(t.prototype, 'isAlphaPhone', {
            get: function () {
              return this._result.method === 5
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(t.prototype, 'isEnabled', {
            get: function () {
              return this.isRequired && !this.isAlphaPhone && !this.isError && this.status !== i.Unfulfillable
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(t.prototype, 'isError', {
            get: function () {
              return this.status === i.Error
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(t.prototype, 'canContinue', {
            get: function () {
              var n = this.status;
              return n === i.Inactive || n === i.NotRequired || n === i.Resolved
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(t.prototype, 'isBlocked', {
            get: function () {
              return !this.canContinue
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(t.prototype, 'hasPendingResults', {
            get: function () {
              return this.deferredResults.length > 0
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(t.prototype, 'isCardBasedOtp', {
            get: function () {
              return this.requiredMethods.length > 0 && this.requiredMethods[0] === 2
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(t.prototype, 'isUserBasedOtp', {
            get: function () {
              return this.requiredMethods.length > 0 && this.requiredMethods[0] === 1
            },
            enumerable: !0,
            configurable: !0
          }),
          t.prototype.result = function (n) {
            var i = this,
            t;
            if (this.caller === 9999) throw {
              Message: 'Calling @result@ on an \'ENQUIRE_METHODS\' OtpHandler is not supported.'
            };
            return t = this.$q.defer(),
            this.deferredResults.push(t),
            this.enquire(n).catch (function (n) {
              return i.$q.reject(i.markError(n))
            }),
            t.promise
          },
          t.prototype.cancelResult = function () {
            var n = this;
            this.deferredResults.forEach(function (t) {
              return t.reject(n._otpUserCancellation)
            });
            this.resetData()
          },
          t.prototype.markComplete = function (n) {
            return this.updateModel(n),
            this.doMarkComplete(),
            this
          },
          t.prototype.doMarkComplete = function () {
            var n = this,
            t = this.status;
            if (this.isError) throw {
              Message: 'Can\'t resolve an otp that is in an error state'
            };
            if (t === i.Enquire) throw {
              Message: 'Can\'t resolve an otp that is currently being enquired'
            };
            t !== i.Resolved && this.pinValidate().then(function (t) {
              var r,
              u;
              n._status = i.Resolved;
              r = n._result;
              r.model.mobileToken = t.mobileToken;
              r.model.emailToken = t.emailToken;
              n.isRequired && n.markCurrent();
              u = n.otpValue;
              n.deferredResults.forEach(function (n) {
                return n.resolve(u)
              });
              n.deferredResults = [
              ]
            }).catch (function (t) {
              return t && !t.userCancel ? t = n.markError(t)  : n.cancelResult(),
              n.$q.reject(t)
            })
          },
          t.prototype.markError = function (n, t) {
            return t === void 0 && (t = i.Error),
            typeof n == 'string' && (n = {
              Message: n
            }),
            t === i.Unfulfillable && (n = __assign({
            }, n, {
              otpNotAvailable: !0
            })),
            this._status = t,
            this.deferredResults.forEach(function (t) {
              return t.reject(__assign({
              }, n))
            }),
            this.deferredResults = [
            ],
            n
          },
          t.prototype.reset = function (n) {
            return n && (this._context = e(n)),
            this.resetData(),
            this.checkNewScreen() && (this.alphaPhoneValidated = !1),
            this
          },
          t.prototype.resetModel = function () {
            var n = this.model;
            return n.value = null,
            n.cardNumber = null,
            n.cardPin = null,
            n.mobileToken = null,
            n.emailToken = null,
            this
          },
          t.prototype.markCurrent = function () {
            return this.management.markCurrent()
          },
          t.prototype.unregister = function () {
            var n = this.management.unregister();
            return n && this.resetData(),
            n
          },
          t.prototype.validate = function () {
            return this.serverValidate()
          },
          Object.defineProperty(t.prototype, 'otpValue', {
            get: function () {
              if (!this.isEnabled) return null;
              var n = [
              ];
              return this.isUserBasedOtp && n.push(this.model.value),
              this.isCardBasedOtp && (n.push(this.model.cardNumber), n.push(this.model.cardPin)),
              this.model.mobileToken && n.push(this.model.mobileToken),
              this.model.emailToken && n.push(this.model.emailToken),
              n.join(',')
            },
            enumerable: !0,
            configurable: !0
          }),
          t.prototype.appendExtraInfoToPayload = function (n, t) {
            if (t === void 0 && (t = 'OTP'), this.isEnabled) {
              var i = typeof t == 'string' ? function (n, i) {
                i[t] = n
              }
               : t;
              i(this.otpValue, n)
            }
            return n
          },
          t.prototype.serverEnquire = function () {
            var n = this,
            t = this.context,
            i = {
              CallerType: this.caller,
              Hints: t.hints,
              Model: this.payload ? JSON.stringify(this.payload)  : undefined
            };
            return this.securityService.enquireOtp(i).then(function (t) {
              return {
                requirementFn: n.buildEnquiryFn(t),
                requiredMethods: t.RequiredMethods,
                availableMethods: t.AvailableMethods,
                dynamicLinkCode: t.DynamicLinkCode
              }
            }).catch (function (t) {
              return n.$q.reject(n.markError(t))
            })
          },
          t.prototype.buildEnquiryFn = function (n) {
            var t = this,
            r = n.Requirement,
            u = n.Context;
            if (r !== 4) return function () {
              return r
            };
            var f = this.$parse(n.RequiredFnDefinition),
            e = function (n) {
              var t = {
                context: u ? JSON.parse(u)  : {
                },
                payload: n || {
                }
              };
              return Boolean(f(t))
            };
            return function (n) {
              if (t.status === i.Inactive) throw {
                Message: 'Can\'t enquire an otp that has not been activated'
              };
              if (t.isError) throw {
                Message: 'Can\'t enquire an otp that is in an error state'
              };
              var r = e(n);
              return r ? 2 : 1
            }
          },
          t.prototype.serverValidate = function () {
            return this.selfValidate ? this.isCardBasedOtp ? this.securityService.validateCardPin({
              Otp: this.otpValue
            })  : this.markError('Can\'t independently validate standard otp')  : this.$q.when(!0)
          },
          t.prototype.validateEnquiryInfo = function (n) {
            var t = n.requiredMethods,
            i,
            r;
            if (t.length > 0) {
              if (i = t[0], i !== 1 && i !== 2 && i !== 5) throw this.markError('Unsupported otp base method');
              if (t.length > 1 && (r = t[1], r !== 3 && r !== 6)) throw this.markError('Unsupported otp auxilliary method');
            }
            return n
          },
          t.prototype.updateExtraInfo = function (n) {
            var t = this,
            i;
            return this._cards = [
            ],
            this._userOtpStatus = 2,
            i = this.isCardBasedOtp ? this.productsService.getOtpCards().then(l).then(function (n) {
              return n.map(function (n) {
                return n.BankProduct
              })
            }).then(function (n) {
              t._cards = n
            })  : this.isUserBasedOtp ? this.securityService.getUserSessionInfo().then(function (n) {
              return n && n.ResultCode === 0 ? n.OTPStatus : 2
            }).then(function (n) {
              return t._userOtpStatus = n
            })  : this.$q.when(null),
            i.then(function () {
              return n
            }, function () {
              return null
            })
          },
          t.prototype.pinValidate = function () {
            return this.isRequired && this.requiredMethods.length >= 2 && (this.requiredMethods[1] === 3 || this.requiredMethods[1] === 6) ? this.confirmInfo()  : this.$q.when({
              mobileToken: null,
              emailToken: null
            })
          },
          t.prototype.confirmInfo = function () {
            var u = this,
            t = {
            },
            i,
            r;
            if (this.requiredMethods[1] === 3) {
              if (i = this._context.uiContext.mobile, n.utils.isUndefinedOrNullorWhiteSpace(i)) return this.$q.reject({
                Error: {
                  Message: 'otp-handler.invalid-mobile-phone'
                }
              });
              t.Mobile = i
            }
            if (this.requiredMethods[1] === 6) {
              if (r = this._context.uiContext.email, n.utils.isUndefinedOrNullorWhiteSpace(r)) return this.$q.reject({
                Error: {
                  Message: 'otp-handler.invalid-email'
                }
              });
              t.Email = r
            }
            return this.securityService.getSMSBankToken(t).then(function () {
              return u.confirmInfoModal(t)
            })
          },
          t.prototype.confirmInfoModal = function (n) {
            return this.$modal.open({
              templateUrl: 'Templates/common/modals/confirmEmailMobileWithTokens',
              controller: 'ConfirmInfoWithTokensCtrl as vm',
              size: 'lg',
              windowClass: 'custom',
              backdrop: 'static',
              resolve: {
                mobile: function () {
                  return n.Mobile
                },
                email: function () {
                  return n.Email
                },
                btnDisabled: !0,
                smsInProgress: !0
              }
            }).result
          },
          t.prototype.displayNoOtpModal = function () {
            var n = this,
            t = 'Templates/common/directives/no-otp-modal';
            (n.isMyBank || n.isIris) && (t = 'Templates/common/directives/no-otp-modal-myBank');
            n.$modal.open({
              templateUrl: t,
              controller: 'NoOtpModalInstanceController as vm',
              windowClass: 'custom',
              size: 'sm',
              backdrop: !0,
              resolve: {
                redirectUrl: function () {
                  return n.redirectUrl
                }
              }
            })
          },
          t
        }();
        f = {
          hints: {
          },
          payload: {
          }
        };
        s = {
          templateUrl: 'Templates/common/directives/opt-alpha-phone-modal',
          controller: 'OptAlphaPhoneModalController as vm',
          windowClass: 'custom',
          size: 'sm',
          backdrop: 'static'
        }
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i = function () {
          function i(t, i, r, u, f, e, o) {
            var h = this,
            s;
            this.QService = t;
            this.ProductService = i;
            this.SecurityService = r;
            this.AppEventsService = u;
            this.QueriesService = f;
            this.RoleService = e;
            this.CachingService = o;
            this.availableProductCategories = 0;
            this.supportsBonusActions = !0;
            this.isDemoUser = !1;
            this._productCountAccessCache = {
            };
            this.getLargeProfileProductsWithId = function (n, t, i, r) {
              return h.ProductService.getProfileProductsNew(n, r)
            };
            this.getLargeProfileProducts = function (n, t, i, r, u) {
              return h.ProductService.getProfileProductsNew(n, u).then(function (n) {
                return r ? h.getCachedAndNonCachedProfileProducts(n, t, i)  : n
              }, function () {
                return null
              })
            };
            this.getProfileProductsNew = function (n, t) {
              return h.ProductService.getProfileProductsNew(n, t)
            };
            this.getCachedAndNonCachedProfileProducts = function (t, i, r) {
              if (!t) return null;
              var u = h.CachingService.getCachedAndNonCachedProfileProducts(t.Products, i, r),
              f = n.utils.IGetProfileProductsResponseToIPagedResponseBase(t);
              return f.Products = n.model.ProductBase.ProductBaseArrayToIproductArray(u.Cached),
              !u.NonCached || u.NonCached.length <= 0 ? f : h.getNonCachedProfileProducts(u.NonCached, f, i, r)
            };
            this.getNonCachedProfileProducts = function (t, i, r, u) {
              var f = n.utils.uniqueValues(t.map(function (n) {
                return n.BankProduct
              })),
              e = {
                RequestIDs: {
                  IDs: f.map(function (n) {
                    return n.ProductID
                  }).join(',').toString()
                },
                ReturnMode: 1,
                ResponseDetails: {
                  ReturnOperationalGroups: !0,
                  ReturnOperationalGroupsSpecified: !0,
                  ReturnProductDetails: !0,
                  ReturnProductDetailsSpecified: !0,
                  ReturnUses: !0,
                  ReturnUsesSpecified: !0
                }
              };
              return h.ProductService.getProfileProductsNew(e, !0).then(function (n) {
                return !n || !n.Products || n.Products.length <= 0 ? i : (h.CachingService.addToCache(n, f, r, u), i.Products = i.Products.concat(n.Products), i)
              }, function () {
                return i
              })
            };
            this.supportsBonusActions = this.RoleService.IsRetail();
            s = this;
            this.AppEventsService.subscribe(n.common.services.AppEventsService.InvalidateOtherBankCards_Event, function () {
              s._cardsPromise = null
            });
            this.AppEventsService.subscribe(n.common.services.AppEventsService.InvalidateOtherBankAccounts_Event, function () {
              s._accountsPromise = null
            });
            this.AppEventsService.subscribe(n.common.services.AppEventsService.InvalidateAccounts_Event, function () {
              s._accountsPromise = null
            });
            this.AppEventsService.subscribe(n.common.services.AppEventsService.InvalidateCards_Event, function () {
              s._cardsPromise = null
            });
            this.AppEventsService.subscribe(n.common.services.AppEventsService.InvalidateLoans_Event, function () {
              s._loansPromise = null
            });
            this.AppEventsService.subscribe(n.common.services.AppEventsService.InvalidateTransferTemplates_Event, function () {
              s._transferTemplatesPromise = null
            });
            this.AppEventsService.subscribe(n.common.services.AppEventsService.InvalidatePaymentTemplates_Event, function () {
              s._paymentTemplatesPromise = null
            });
            this.AppEventsService.subscribe(n.common.services.AppEventsService.InvalidateInvestments_Event, function () {
              s._investmentsPromise = null
            })
          }
          return i.prototype.getTransactionTemplates = function (n) {
            return n == 0 ? (this._transferTemplatesPromise == null && (this._transferTemplatesPromise = this.updateTransferTemplates()), this._transferTemplatesPromise)  : n == 1 ? (this._paymentTemplatesPromise == null && (this._paymentTemplatesPromise = this.updatePaymentTemplates()), this._paymentTemplatesPromise)  : void 0
          },
          Object.defineProperty(i.prototype, 'accountsPromise', {
            get: function () {
              var n = this;
              return this._accountsPromise == null && (this._accountsPromise = this.getProductCount('AccountsCount') == 0 ? this.getEmptyArrayPromise()  : this.updateAccounts().then(function (n) {
                return n
              }, function (t) {
                return n._accountsPromise = null,
                n.QService.reject(t)
              })),
              this._accountsPromise
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(i.prototype, 'ikaProductsPromise', {
            get: function () {
              var n = this;
              return this._ikaProductsPromise == null && (this._ikaProductsPromise = this.updateIkaProducts().then(function (n) {
                return n
              }, function (t) {
                return n._ikaProductsPromise = null,
                n.QService.reject(t)
              })),
              this._ikaProductsPromise
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(i.prototype, 'cashManagementPromise', {
            get: function () {
              var n = this;
              return this._cashManagementPromise == null && (this._cashManagementPromise = this.updateCashManagement().then(function (n) {
                return n
              }, function (t) {
                return n._cashManagementPromise = null,
                n.QService.reject(t)
              })),
              this._cashManagementPromise
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(i.prototype, 'cardsPromise', {
            get: function () {
              var n = this;
              return this._cardsPromise == null && (this._cardsPromise = this.getProductCount('CardsCount') == 0 ? this.getEmptyArrayPromise()  : this.updateCards().then(function (n) {
                return n
              }, function (t) {
                return n._cardsPromise = null,
                n.QService.reject(t)
              })),
              this._cardsPromise
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(i.prototype, 'loansPromise', {
            get: function () {
              var n = this;
              return this._loansPromise == null && (this._loansPromise = this.getProductCount('LoansCount') == 0 ? this.getEmptyArrayPromise()  : this.updateLoans().then(function (n) {
                return n
              }, function (t) {
                return n._loansPromise = null,
                n.QService.reject(t)
              })),
              this._loansPromise
            },
            enumerable: !0,
            configurable: !0
          }),
          Object.defineProperty(i.prototype, 'investmentsPromise', {
            get: function () {
              var n = this;
              return this._investmentsPromise == null && (this._investmentsPromise = this.getProductCount('InvestmentsCount') == 0 ? this.getEmptyArrayPromise()  : this.updateInvestments().then(function (n) {
                return n
              }, function (t) {
                return n._investmentsPromise = null,
                n.QService.reject(t)
              })),
              this._investmentsPromise
            },
            enumerable: !0,
            configurable: !0
          }),
          i.prototype.getArrayLength = function (n) {
            return n.length
          },
          i.prototype.updateTransferTemplates = function () {
            return this.QueriesService.getTransactionTemplates(this.QueriesService.getTransactionTemplatesRequest(0, 0, 1000)).then(function (n) {
              return n
            }, function (n) {
              return n
            })
          },
          i.prototype.updatePaymentTemplates = function () {
            return this.QueriesService.getTransactionTemplates(this.QueriesService.getTransactionTemplatesRequest(0, 1, 1000)).then(function (n) {
              return n
            }, function (n) {
              return n
            })
          },
          i.prototype.getProductByTypeAndCode = function (n, t) {
            return this.getAllProductPromises([this.getAccountsByRequestType(n, t),
            this.cardsPromise,
            this.loansPromise,
            this.investmentsPromise], t)
          },
          i.prototype.getProductByCode = function (n) {
            return this.getAllProductPromises([this.accountsPromise,
            this.cardsPromise,
            this.loansPromise,
            this.investmentsPromise], n)
          },
          i.prototype.getAllProductPromises = function (n, t) {
            return this.QService.all(n).then(function (n) {
              var i = [
              ],
              r;
              return (i = i.concat.apply(i, n), r = i.filter(function (n) {
                return n.Code == t
              }), r.length == 0) ? null : r[0]
            })
          },
          i.prototype.getPreferredProductsCount = function (t) {
            return t == n.server.CategoryGroupType.ACCOUNT ? this.getAccounts(!0).then(this.getArrayLength)  : t == n.server.CategoryGroupType.CARD ? this.getCards(!0).then(this.getArrayLength)  : t == n.server.CategoryGroupType.LOAN ? this.getLoans(!0).then(this.getArrayLength)  : t == n.server.CategoryGroupType.INVESTMENT ? this.getInvestments(!0).then(this.getArrayLength)  : void 0
          },
          i.prototype.getCashManagementProducts = function (n) {
            return n === void 0 && (n = !1),
            this.productPreferred(this.cashManagementPromise, n)
          },
          i.prototype.getIkaProducts = function (n) {
            return n === void 0 && (n = !1),
            this.productPreferred(this.ikaProductsPromise, n)
          },
          i.prototype.getAccounts = function (n, t) {
            return n === void 0 && (n = !1),
            t === void 0 && (t = !1),
            t && (this._accountsPromise = null),
            this.productPreferred(this.accountsPromise, n)
          },
          i.prototype.getCards = function (n) {
            return n === void 0 && (n = !1),
            this.productPreferred(this.cardsPromise, n)
          },
          i.prototype.getLoans = function (n) {
            return n === void 0 && (n = !1),
            this.productPreferred(this.loansPromise, n)
          },
          i.prototype.getInvestments = function (n) {
            return n === void 0 && (n = !1),
            this.productPreferred(this.investmentsPromise, n)
          },
          i.prototype.getSelectedOtherBankAccounts = function () {
            return this.accountsPromise.then(function (t) {
              return t ? t.filter(function (t) {
                return t.BankProduct && t.BankProduct.Details ? t.BankProduct.Details.some(function (t) {
                  return t.Name === n.server.DetailName.IS_OTHER_BANK_PRODUCT && t.Value === 'true'
                })  : !1
              })  : [
              ]
            })
          },
          i.prototype.getEnquiryAccounts = function () {
            return this.accountsPromise.then(function (t) {
              return t ? t.filter(function (t) {
                var i = !1;
                return t.BankProduct && t.BankProduct.Details && t.BankProduct.Details.some(function (t) {
                  return t.Name === n.server.DetailName.IS_OTHER_BANK_PRODUCT && t.Value === 'true'
                }) && (i = !0),
                t.HasEnquiry && !i
              })  : [
              ]
            })
          },
          i.prototype.getDebitAccounts = function () {
            return this.accountsPromise.then(function (n) {
              return n.filter(function (n) {
                return n.BankProduct.Uses.indexOf(2) != - 1 && n.IsAlphaBankProduct
              })
            })
          },
          i.prototype.getDomesticCurrencyDebitAccounts = function () {
            return this.accountsPromise.then(function (n) {
              return n.filter(function (n) {
                return n.BankProduct.Uses.indexOf(2) != - 1 && n.IsAlphaBankProduct && n.BankProduct.Currency == 1
              })
            })
          },
          i.prototype.getSelectedOtherBankCards = function () {
            return this.cardsPromise.then(function (t) {
              return t ? t.filter(function (t) {
                return t.BankProduct && t.BankProduct.Details ? t.BankProduct.Details.some(function (t) {
                  return t.Name === n.server.DetailName.IS_OTHER_BANK_PRODUCT && t.Value === 'true'
                })  : !1
              })  : [
              ]
            })
          },
          i.prototype.getEnquiryCards = function () {
            return this.cardsPromise.then(function (n) {
              return n.filter(function (n) {
                return n.HasEnquiry
              })
            })
          },
          i.prototype.getDebitCardsForBonusTransfer = function () {
            return this.getCards().then(function (n) {
              return n.filter(function (n) {
                return n.HasLoyalty && n.LoyaltyScheme == 1 && ( - 1 != n.BankProduct.Uses.indexOf(2) || n.HasEnquiry && n.IsDebit)
              })
            })
          },
          i.prototype.getCreditCardsForBonusTransfer = function () {
            return this.getCards().then(function (n) {
              return n.filter(function (n) {
                return n.HasLoyalty && n.LoyaltyScheme == 1 && ( - 1 != n.BankProduct.Uses.indexOf(4) || n.HasEnquiry && n.IsDebit)
              })
            })
          },
          i.prototype.getEnquiryLoans = function () {
            return this.loansPromise.then(function (n) {
              return n.filter(function (n) {
                return n.HasEnquiry
              })
            })
          },
          i.prototype.getAvailableProductCategories = function () {
            return this.availableProductCategories
          },
          i.prototype.getAccountsByRequestType = function (t, i) {
            var r;
            return i === void 0 && (i = undefined),
            this.RoleService.IsRetail() ? this.accountsPromise.then(function (n) {
              return n.filter(function (n) {
                return n.BankProduct.RequestTypes.indexOf(t) != - 1
              })
            })  : (r = i ? {
              ReturnMode: 1,
              RequestCriteria: {
                MaxRecords: 1,
                MaxRecordsSpecified: !0,
                ProductTypes: [
                  t
                ],
                SearchStringInfo: {
                  SearchTerm: i,
                  SearchField: 2,
                  SearchFieldSpecified: !0
                }
              },
              ResponseDetails: {
                ReturnUses: !0,
                ReturnUsesSpecified: !0,
                ReturnProductDetails: !0,
                ReturnProductDetailsSpecified: !0
              }
            }
             : {
              ReturnMode: 2,
              RequestCriteria: {
                MaxRecords: 1,
                MaxRecordsSpecified: !0,
                ProductTypes: [
                  t
                ],
                SearchStringInfo: {
                  SearchTerm: '',
                  SearchField: 2,
                  SearchFieldSpecified: !0
                },
                UseTypes: [
                  3
                ]
              }
            }, this.getProfileProductsNew(r, !0).then(function (t) {
              return t.Products && t.Products.length > 0 ? [
                new n.model.AccountProduct(t.Products[0])
              ] : [
              ]
            }))
          },
          i.prototype.getCardsByRequestType = function (n, t) {
            var i = this;
            return this.cardsPromise.then(function (t) {
              return t.filter(function (t) {
                return t.BankProduct.RequestTypes.indexOf(n) != - 1
              })
            }, function (n) {
              return t ? [
              ] : i.QService.reject(n)
            })
          },
          i.prototype.getLoansByRequestType = function (n) {
            return this.loansPromise.then(function (t) {
              return t.filter(function (t) {
                return t.BankProduct.RequestTypes.indexOf(n) != - 1
              })
            })
          },
          i.prototype.getAlphaLoansForPayment = function () {
            return this.loansPromise.then(function (t) {
              return t.filter(function (t) {
                return t.BankProduct.RequestTypes.indexOf(n.server.ProductRequestType.LoansForPayment) != - 1 && t.BankProduct.TypeID != n.constants.general.consumerLoanProductTypeId && t.BankProduct.RequestTypes.indexOf(n.server.ProductRequestType.MortgageEnterpriseLoansForPayment) < 0
              })
            })
          },
          i.prototype.getAccount = function (n) {
            return this.getAccounts().then(function (t) {
              return t.filter(function (t) {
                return t.id == n
              }) [0]
            })
          },
          i.prototype.getCard = function (n) {
            return this.getCards().then(function (t) {
              return t.filter(function (t) {
                return t.id == n
              }) [0]
            })
          },
          i.prototype.getLoan = function (n) {
            return this.getLoans().then(function (t) {
              return t.filter(function (t) {
                return t.id == n
              }) [0]
            })
          },
          i.prototype.getInvestment = function (n) {
            return this.getInvestments().then(function (t) {
              return t.filter(function (t) {
                return t.id == n
              }) [0]
            })
          },
          i.prototype.getAccountByCode = function (n) {
            return this.getAccounts().then(function (t) {
              return t.filter(function (t) {
                return t.Code == n
              }) [0]
            })
          },
          i.prototype.getCardByCode = function (n) {
            return this.getCards().then(function (t) {
              return t.filter(function (t) {
                return t.Code == n
              }) [0]
            })
          },
          i.prototype.getLoanByCode = function (n) {
            return this.getLoans().then(function (t) {
              return t.filter(function (t) {
                return t.Code == n
              }) [0]
            })
          },
          i.prototype.removeProduct = function (n) {
            var t = this.buildModifyProductModel(n, 2, 2);
            return this.modeifyProductInternal(t)
          },
          i.prototype.updateProductPreferences = function (n) {
            var t = this.buildModifyProductModel(n, 1, 0);
            return this.modeifyProductInternal(t)
          },
          i.prototype.updateProduct = function (n, t) {
            var i = this.buildModifyProductModel(n, 1, 2);
            return this.modeifyProductInternal(i, t)
          },
          i.prototype.buildUpdateProductModel = function (n, t) {
            return t === void 0 && (t = undefined),
            t === undefined && (t = this.getModifyProductMode(n)),
            this.buildModifyProductModel(n, 1, t)
          },
          i.prototype.reorderProducts = function (n, t) {
            var u = {
            },
            r = {
            },
            i;
            return r.product = n.BankProduct,
            r.action = 1,
            r.mode = 0,
            i = {
            },
            i.product = t.BankProduct,
            i.action = 1,
            i.mode = 0,
            u.Products = [
              r,
              i
            ],
            this.SecurityService.modifyProfileProducts(u)
          },
          i.prototype.addProduct = function (n, t, i) {
            i === void 0 && (i = !1);
            var r = this.buildAddProductModel(n, i);
            return this.modeifyProductInternal(r, t)
          },
          i.prototype.buildAddProductModel = function (n, t) {
            return t === void 0 && (t = !1),
            this.buildModifyProductModel(n, 0, this.getModifyProductMode(n, t))
          },
          i.prototype.buildModifyProductModel = function (n, t, i) {
            var r = n.BankProduct;
            return r.CategoryGroup = n.CategoryGroupType,
            {
              Products: [
                {
                  product: r,
                  action: t,
                  mode: i
                }
              ]
            }
          },
          i.prototype.getModifyProductMode = function (n, t) {
            return t === void 0 && (t = !1),
            t ? 3 : n.IsAlphaBankProduct ? 2 : 1
          },
          i.prototype.modeifyProductInternal = function (t, i) {
            var r = this,
            e = t.Products[0],
            o = e.product,
            s = e.action,
            u,
            f;
            return t.OTP = i,
            u = r.SecurityService.modifyProfileProducts(t),
            s == 2 ? (f = e.product.CategoryGroup, u = u.then(function (t) {
              if (!n.utils.isUndefinedOrNull(t.Products) && t.Products.length > 0 && t.Products[0].Code == 1) {
                var i = {
                  promise: {
                  }
                };
                f == n.server.CategoryGroupType.ACCOUNT ? i.promise = r._accountsPromise : f == n.server.CategoryGroupType.CARD ? i.promise = r._cardsPromise : f == n.server.CategoryGroupType.LOAN ? i.promise = r._loansPromise : (f == n.server.CategoryGroupType.INVESTMENT || n.server.CategoryGroupType.TIME_DEPOSITE) && (i.promise = r._investmentsPromise);
                i.promise = i.promise.then(function (n) {
                  var t = n.map(function (n) {
                    return n.Code
                  }).indexOf(o.Code);
                  return n.splice(t, 1),
                  n
                })
              }
              return t
            }))  : s == 0 && (u = u.then(function (t) {
              return !n.utils.isUndefinedOrNull(t.Products) && t.Products.length > 0 && t.Products[0].Code == 1 && r.updatePromises(o),
              t
            })),
            u
          },
          i.prototype.addProducts = function (t, i) {
            var f = this,
            r = {
            },
            u;
            return r.Products = [
            ],
            t.forEach(function (n) {
              r.Products.push({
                product: n.BankProduct,
                action: 0,
                mode: 1
              })
            }),
            i == '' || n.utils.isUndefinedOrNull(i) || (r.OTP = i),
            u = f.SecurityService.modifyProfileProducts(r),
            u.then(function (t) {
              !n.utils.isUndefinedOrNull(t.Products) && t.Products.length > 0 && t.Products[0].Code == 1
            }),
            u
          },
          i.prototype.updateAccounts = function () {
            var t = this;
            return this.RoleService.getRoleType() == n.server.RoleType.Corporate ? this.updateCorporateAccounts()  : this.updateRetailAccounts()
          },
          i.prototype.updateCorporateAccounts = function () {
            var t = this,
            i = this;
            return this.getProfileProductsNew({
              ReturnMode: 2,
              RequestCriteria: {
                MaxRecords: 10000,
                MaxRecordsSpecified: !0,
                ProductTypes: [
                  n.server.ProductRequestType.AllAccounts
                ],
                SearchStringInfo: {
                  SearchTerm: '',
                  SearchField: 2,
                  SearchFieldSpecified: !0
                },
                UseTypes: [
                  3
                ]
              }
            }, !0).then(function (r) {
              if (r && r.Products && r.Products.length > 0) {
                t.CachingService.addToCache(r, null, n.server.CategoryGroupType.ACCOUNT, n.server.ProductRequestType.AllAccounts);
                var f = r.Products.filter(function (n) {
                  return n.IsPreferred
                }),
                u = f.map(function (n) {
                  return n.ProductID
                }).join(',').toString();
                return u != '' ? t.getProfileProductsNew({
                  RequestIDs: {
                    IDs: u
                  },
                  ReturnMode: 1,
                  ResponseDetails: {
                    ReturnOperationalGroups: !0,
                    ReturnOperationalGroupsSpecified: !0,
                    ReturnProductDetails: !0,
                    ReturnProductDetailsSpecified: !0,
                    ReturnUses: !0,
                    ReturnUsesSpecified: !0
                  }
                }, !0).then(function (r) {
                  if (n.utils.isUndefinedOrNull(r) || n.utils.isUndefinedOrNull(r.Products)) return [];
                  var u = r.Products.map(function (t) {
                    var i = new n.model.AccountProduct(t);
                    return i.CategoryGroupType = n.server.CategoryGroupType.ACCOUNT,
                    i
                  }).sort(n.model.ProductBase.listComparer);
                  return t.CachingService.addToCache(r, u, n.server.CategoryGroupType.ACCOUNT, n.server.ProductRequestType.AllAccounts),
                  i.hasOverviewProducts(u) && i.availableProductCategories++,
                  u
                })  : [
                ]
              }
            })
          },
          i.prototype.updateRetailAccounts = function () {
            var t = this;
            return this.ProductService.getProfileProducts({
              ReturnBalances: !0,
              MaxRecords: 10000,
              RequestType: n.server.ProductRequestType.AllAccounts,
              LastPageIndex: null,
              PreferredOnly: !1,
              ReturnDetails: !0
            }, !0).then(function (i) {
              if (n.utils.isUndefinedOrNull(i) || n.utils.isUndefinedOrNull(i.Products)) return [];
              var r = i.Products.map(function (t) {
                var i = new n.model.AccountProduct(t);
                return i.CategoryGroupType = n.server.CategoryGroupType.ACCOUNT,
                i
              }).sort(n.model.ProductBase.listComparer);
              return t.hasOverviewProducts(r) && t.availableProductCategories++,
              r
            })
          },
          i.prototype.updateIkaProducts = function () {
            var t = this;
            return this.ProductService.getProfileProducts({
              ReturnBalances: !0,
              MaxRecords: 300,
              RequestType: n.server.ProductRequestType.IkaProduct,
              LastPageIndex: null,
              PreferredOnly: !1,
              ReturnDetails: !0,
              ProductTypeIDs: [
                10010
              ]
            }, !0).then(function (i) {
              if (n.utils.isUndefinedOrNull(i) || n.utils.isUndefinedOrNull(i.Products)) return [];
              var r = i.Products.map(function (t) {
                var i = new n.model.IkaProduct(t);
                return i.CategoryGroupType = n.server.CategoryGroupType.NONE,
                i
              }).sort(n.model.ProductBase.listComparer);
              return t.hasOverviewProducts(r) && t.availableProductCategories++,
              r
            })
          },
          i.prototype.updateCashManagement = function () {
            var t = this;
            return this.ProductService.getCMProfileProducts({
              ReturnBalances: !0,
              MaxRecords: 100,
              RequestType: n.server.ProductRequestType.AllAccounts,
              LastPageIndex: null,
              PreferredOnly: !1,
              ReturnDetails: !0
            }).then(function (i) {
              if (n.utils.isUndefinedOrNull(i) || n.utils.isUndefinedOrNull(i.Products)) return [];
              var r = i.Products.map(function (t) {
                var i = new n.model.CMAccountProduct(t);
                return i.CategoryGroupType = n.server.CategoryGroupType.ACCOUNT,
                i
              }).sort(n.model.ProductBase.listComparer);
              return t.hasOverviewProducts(r) && t.availableProductCategories++,
              r
            })
          },
          i.prototype.updateCards = function () {
            var t = this;
            return this.ProductService.getProfileProducts({
              ReturnBalances: !0,
              MaxRecords: 1000,
              RequestType: n.server.ProductRequestType.AllCards,
              LastPageIndex: null,
              PreferredOnly: !1,
              ReturnDetails: !0
            }, !0).then(function (i) {
              if (n.utils.isUndefinedOrNull(i) || n.utils.isUndefinedOrNull(i.Products)) return [];
              var r = i.Products.map(function (i) {
                var r = new n.model.CardProduct(i, t.supportsBonusActions);
                return r.CategoryGroupType = n.server.CategoryGroupType.CARD,
                r
              }).sort(n.model.ProductBase.listComparer);
              return t.hasOverviewProducts(r) && t.availableProductCategories++,
              r
            })
          },
          i.prototype.updateLoans = function () {
            var t = this;
            return this.ProductService.getProfileProducts({
              ReturnBalances: !0,
              MaxRecords: 1000,
              RequestType: n.server.ProductRequestType.AllLoans,
              LastPageIndex: null,
              PreferredOnly: !1,
              ReturnDetails: !0
            }, !0).then(function (i) {
              if (n.utils.isUndefinedOrNull(i) || n.utils.isUndefinedOrNull(i.Products)) return [];
              var r = i.Products.map(function (t) {
                var i = new n.model.LoanProduct(t);
                return i.CategoryGroupType = n.server.CategoryGroupType.LOAN,
                i
              }).sort(n.model.ProductBase.listComparer);
              return t.hasOverviewProducts(r) && t.availableProductCategories++,
              r
            })
          },
          i.prototype.updateInvestments = function () {
            var t = this;
            return this.ProductService.getProfileProducts({
              ReturnBalances: !0,
              MaxRecords: 1000,
              RequestType: n.server.ProductRequestType.AllInvestments,
              LastPageIndex: null,
              PreferredOnly: !1,
              ReturnDetails: !0
            }, !0).then(function (i) {
              if (n.utils.isUndefinedOrNull(i) || n.utils.isUndefinedOrNull(i.Products)) return [];
              var r = i.Products.map(function (t) {
                var i = new n.model.InvestmentProduct(t);
                return i.CategoryGroupType = n.server.CategoryGroupType.INVESTMENT,
                i
              }).sort(n.model.ProductBase.listComparer);
              return t.hasOverviewProducts(r) && t.availableProductCategories++,
              r
            })
          },
          i.prototype.getProductCount = function (n) {
            var t = angular.element('meta[name=' + n + ']');
            return t && !this._productCountAccessCache.hasOwnProperty(n) ? (this._productCountAccessCache[n] = 1, parseInt(t.attr('content')))  : 1
          },
          i.prototype.getEmptyArrayPromise = function () {
            var n = this.QService.defer();
            return n.resolve(),
            n.promise.then(function () {
              return []
            })
          },
          i.prototype.filterPrefered = function (t) {
            return n.utils.isUndefinedOrNull(t) ? [
            ] : t.filter(function (t) {
              return n.utils.isUndefinedOrNull(t) ? !1 : t.IsPreferred == !0
            }).sort(n.model.ProductBase.overviewComparer)
          },
          i.prototype.filterBy = function (t, i) {
            return n.utils.isUndefinedOrNull(t) ? [
            ] : t.filter(function (n) {
              return n.CategoryGroup == i
            })
          },
          i.prototype.hasOverviewProducts = function (n) {
            return this.filterPrefered(n).length > 0
          },
          i.prototype.productPreferred = function (n, t) {
            return t ? n.then(this.filterPrefered)  : n
          },
          i.prototype.updatePromises = function (i) {
            i instanceof n.model.AccountProduct ? (this.AppEventsService.publish(t.AppEventsService.InvalidateAccounts_Event), this.AppEventsService.publish(t.AppEventsService.InvalidateOtherBankAccounts_Event))  : i instanceof n.model.CardProduct ? (this.AppEventsService.publish(t.AppEventsService.InvalidateCards_Event), this.AppEventsService.publish(t.AppEventsService.InvalidateOtherBankCards_Event))  : i instanceof n.model.LoanProduct && this.AppEventsService.publish(t.AppEventsService.InvalidateLoans_Event)
          },
          i.prototype.getCachedCardBalance = function (t) {
            if (!t.IsMainCard && !t.IsCorporateDebit && !t.IsCorporateCredit) return this.QService.when(t);
            if (n.utils.isUndefinedOrNull(t.Balance)) {
              var i = this;
              return this.ProductService.getCardBalance({
                ProductCode: t.Code,
                ProductTypeID: t.TypeID,
                ProductID: t.BankProduct.ProductID
              }).then(function (r) {
                if (r.ResultCode == 0) return t.Balance = r.Balance,
                (t.Description == '' || n.utils.isUndefinedOrNull(t.Description)) && !n.utils.isUndefinedOrNull(t.Balance) && (n.utils.isUndefinedOrNull(t.Balance.AvailableAmount) && (t.Balance.AvailableAmount = 0), n.utils.isUndefinedOrNull(t.Balance.TotalAuths) && (t.Balance.TotalAuths = 0), n.utils.isUndefinedOrNull(t.Balance.LastPaymentAmount) && (t.Balance.LastPaymentAmount = 0), n.utils.isUndefinedOrNull(t.Balance.CreditLimit) && (t.Balance.CreditLimit = 0), n.utils.isUndefinedOrNull(t.Balance.CurrentBalance) && (t.Balance.CurrentBalance = 0, t.Balance.CurrentBalanceSign = ''), n.utils.isUndefinedOrNull(t.Balance.SpendingLimit) && (t.Balance.SpendingLimit = 0), n.utils.isUndefinedOrNull(t.Balance.LastStatementBalance) && (t.Balance.LastStatementBalance = 0, t.Balance.LastStatementBalanceSign = ''), n.utils.isUndefinedOrNull(t.Balance.MinPaymentAmount) && (t.Balance.MinPaymentAmount = 0)),
                i.QService.when(t);
                var u = !n.utils.isUndefinedOrNull(r.Error) && !n.utils.isUndefinedOrNull(r.Error.Message) ? r.Error.Message : 'System error';
                return i.QService.reject(u)
              }, function (n) {
                console.log(n)
              })
            }
            return this.QService.when(t)
          },
          i.$inject = [
            '$q',
            'ProductsService',
            'SecurityService',
            'AppEventsService',
            'QueriesService',
            'RoleService',
            'CachingService'
          ],
          i
        }();
        t.ProfileProductsService = i;
        n.services.service('ProfileProductsService', i)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        var t = function () {
          function t() {
            this.m_patternContainer = null;
            this.m_patternContainer = {
            };
            for (var t in n.constants.regularPatterns) this.m_patternContainer[t] = n.constants.regularPatterns[t]
          }
          return t.prototype.getPattern = function (n) {
            return this.m_patternContainer[n]
          },
          t
        }();
        n.services.service('RegularExpressionService', t)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        var t = function () {
          function t(t, i, r, u) {
            var f = this;
            this.qService = i;
            this.queriesServiceProxy = r;
            this.securityServiceProxy = u;
            this.queriesBasePath = 'api/queries.svc/';
            this.securityBasePath = 'api/Security.svc/';
            this.getSaveSmartInterestRatesPromise = null;
            this.getSaveSmartInfoList = {
            };
            this.getSaveSmartInfoList[0] = null;
            t.subscribe(n.common.services.AppEventsService.InvalidateAllSaveSmartInfo_Event, function () {
              f.getSaveSmartInfoList[0] = null
            })
          }
          return t.prototype.getSaveSmartInterestRates = function () {
            if (null == this.getSaveSmartInterestRatesPromise) {
              var n = this;
              this.getSaveSmartInterestRatesPromise = this.queriesServiceProxy.getRatesForSmartOnlineApp({
              });
              this.getSaveSmartInterestRatesPromise.then(function (t) {
                t.ResultCode == 1 && (n.getSaveSmartInterestRatesPromise = null)
              }).catch (function () {
                n.getSaveSmartInterestRatesPromise = null
              })
            }
            return this.getSaveSmartInterestRatesPromise
          },
          t.prototype.getSaveSmartRequestInfo = function (n) {
            return this.getSaveSmartInfoList.hasOwnProperty(n.RequestOption) ? (null == this.getSaveSmartInfoList[n.RequestOption] && (this.getSaveSmartInfoList[n.RequestOption] = this.queriesServiceProxy.getSmartOnlineApplicationInfo(n)), this.getSaveSmartInfoList[n.RequestOption])  : this.queriesServiceProxy.getSmartOnlineApplicationInfo(n)
          },
          t.prototype.getSaveSmartRequestInfoDetails = function (n) {
            var t = {
              ApplicationID: n
            };
            return this.queriesServiceProxy.getSmartOnlineApplicationInfoDetails(t)
          },
          t.prototype.getKYCInfo = function () {
            return this.securityServiceProxy.isKYCAuthorized({
            })
          },
          t.prototype.getUserCDIInfo = function (n) {
            return this.securityServiceProxy.getUserCDIInfo(n)
          },
          t.prototype.createNewSaveSmartReq = function (n) {
            return this.securityServiceProxy.createNewSmartOnlineApplication(n)
          },
          t.$inject = [
            'AppEventsService',
            '$q',
            'QueriesServiceProxy',
            'SecurityServiceProxy'
          ],
          t
        }();
        n.commonServices.service('SaveSmartService', t)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        var t = function () {
          function t(t, i, r, u) {
            var f = this;
            this.customerServiceProxy = t;
            this.queriesServiceProxy = i;
            this.qService = u;
            this.getCustomerDetailsTaxEntriesList = {
            };
            this.getCustomerDetailsTaxEntriesList[0] = null;
            r.subscribe(n.common.services.AppEventsService.InvalidateAllCustomerDetailsTaxEntries_Event, function () {
              f.getCustomerDetailsTaxEntriesList[0] = null
            })
          }
          return t.prototype.getCustomerDetailsTaxEntries = function (n, t) {
            return this.getCustomerDetailsTaxEntriesList.hasOwnProperty(t) ? (null == this.getCustomerDetailsTaxEntriesList[t] && (this.getCustomerDetailsTaxEntriesList[t] = this.customerServiceProxy.getDetails(n)), this.getCustomerDetailsTaxEntriesList[t])  : this.customerServiceProxy.getDetails(n)
          },
          t.prototype.getTaxFreeStatements = function (n) {
            return this.queriesServiceProxy.getTaxFreeEntries(n)
          },
          t.$inject = [
            'CustomerServiceProxy',
            'QueriesServiceProxy',
            'AppEventsService',
            '$q'
          ],
          t
        }();
        n.commonServices.service('TaxFreeService', t)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var s = function () {
          function n() {
          }
          return n.prototype.decorateTransactionViewModel = function () {
          },
          n.prototype.decorateTransactionTemplateViewModel = function () {
          },
          n
        }(),
        o = function () {
          function t(n, t, u, f, e, o, s, h, c, l, a) {
            this.m_PaymentTransactionService = null;
            this.m_TransferTransactionService = null;
            this.m_TransferTransactionService = new i(n, t, u, a);
            this.m_PaymentTransactionService = new r(n, t, f, e, o, s, h, c, l, a)
          }
          return t.prototype.decorateTransactionViewModel = function (n, t, i) {
            n.Item.IsTransfer ? this.m_TransferTransactionService.decorateTransactionViewModel(n, t, i)  : this.m_PaymentTransactionService.decorateTransactionViewModel(n, t, i)
          },
          t.prototype.decorateTransactionTemplateViewModel = function (t, i) {
            t instanceof n.model.MyTransferTemplatesBase ? this.m_TransferTransactionService.decorateTransactionTemplateViewModel(t, i)  : this.m_PaymentTransactionService.decorateTransactionTemplateViewModel(t, i)
          },
          t
        }(),
        i,
        r,
        u,
        f,
        e;
        t.CompositeTransactionActionsService = o;
        i = function () {
          function t(t, i, r, u) {
            this.profileProductsService = t;
            this.STRINGS = i;
            this.lookupService = r;
            this.MenuItemsService = u;
            this.transactionTypeMappings = {
            };
            this.citibankRetailConfig = {
              newTransactionState: n.constants.stateNames.newCitiRetailTransferState,
              addTemplateState: n.constants.stateNames.transfersHistoryAsInterbankTemplate,
              detailsState: n.constants.stateNames.citibankDetails,
              title: this.STRINGS['Interbank.Details.Title'],
              debitProductLabel: this.STRINGS['Interbank.Details.DebitProductLabel'],
              statusConfig: {
                0: {
                  cssClass: ''
                },
                1: {
                  cssClass: 'statuspending',
                  details: !0,
                  detailsMenuTitleKey: 'root.transfers.history.pending-details',
                  cancel: !0,
                  saveAsTemplate: !0,
                  execute: !1
                },
                2: {
                  cssClass: 'statuspending',
                  details: !0,
                  saveAsTemplate: !0,
                  execute: !1
                },
                3: {
                  cssClass: 'statuspositive',
                  swift: !1,
                  details: !0,
                  saveAsTemplate: !0,
                  execute: !0
                },
                4: {
                  cssClass: 'statusnegative',
                  details: !0,
                  execute: !0,
                  saveAsTemplate: !0
                },
                5: {
                  cssClass: 'statusnegative',
                  details: !0,
                  execute: !0,
                  saveAsTemplate: !0
                },
                6: {
                  cssClass: ''
                },
                7: {
                  cssClass: 'statuspending',
                  details: !0,
                  detailsMenuTitleKey: 'root.transfers.history.pending-details',
                  cancel: !0,
                  saveAsTemplate: !0,
                  execute: !1
                },
                8: {
                  cssClass: 'statuspositive',
                  details: !0,
                  saveAsTemplate: !0,
                  execute: !0
                },
                9: {
                  cssClass: ''
                },
                10: {
                  cssClass: ''
                },
                11: {
                  cssClass: 'statuspositive',
                  details: !0,
                  execute: !0,
                  saveAsTemplate: !0
                },
                12: {
                  cssClass: 'statusnegative',
                  details: !0,
                  execute: !0,
                  saveAsTemplate: !0
                },
                13: {
                  cssClass: 'statusnegative',
                  details: !0,
                  execute: !1,
                  saveAsTemplate: !0
                }
              }
            };
            this.initializeTransactionTypeMappings()
          }
          return t.prototype.initializeTransactionTypeMappings = function () {
            this.transactionTypeMappings = {
              1: {
                title: this.STRINGS['Intrabank.Details.Title'],
                newTransactionState: n.constants.stateNames.newIntraBankTransferState,
                addTemplateState: n.constants.stateNames.transfersHistoryAsIntrabankTemplate,
                detailsState: n.constants.stateNames.intrabankDetails,
                stateParams: {
                  type: 0,
                  immediate: 1
                },
                transferTypeTitle: this.STRINGS['Intrabank.Details.TransferType'],
                debitProductLabel: this.STRINGS['Intrabank.Details.DebitProductLabel'],
                showDebitProductType: !1,
                statusConfig: {
                  0: {
                    cssClass: ''
                  },
                  1: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  2: {
                    cssClass: 'statuspending',
                    details: !1,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  3: {
                    cssClass: 'statuspositive',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  4: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  5: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  6: {
                    cssClass: ''
                  },
                  7: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  8: {
                    cssClass: 'statuspositive',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  9: {
                    cssClass: ''
                  },
                  10: {
                    cssClass: ''
                  },
                  11: {
                    cssClass: 'statuspositive',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  12: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  13: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !1,
                    saveAsTemplate: !0
                  }
                }
              },
              2: {
                newTransactionState: n.constants.stateNames.newIntraBankTransferState,
                addTemplateState: n.constants.stateNames.transfersHistoryAsIntrabankTemplate,
                detailsState: n.constants.stateNames.intrabankDetails,
                stateParams: {
                  type: 0,
                  immediate: 0
                },
                title: this.STRINGS['Intrabank.Details.Title'],
                transferTypeTitle: this.STRINGS['Intrabank.Details.TransferType'],
                debitProductLabel: this.STRINGS['Intrabank.Details.DebitProductLabel'],
                showDebitProductType: !1,
                statusConfig: {
                  0: {
                    cssClass: ''
                  },
                  1: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  2: {
                    cssClass: 'statuspending',
                    details: !1,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  3: {
                    cssClass: 'statuspositive',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  4: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  5: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  6: {
                    cssClass: ''
                  },
                  7: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  8: {
                    cssClass: 'statuspositive',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  9: {
                    cssClass: ''
                  },
                  10: {
                    cssClass: ''
                  },
                  11: {
                    cssClass: 'statuspositive',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  12: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  13: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !1,
                    saveAsTemplate: !0
                  }
                }
              },
              3: {
                newTransactionState: n.constants.stateNames.newIntraBankTransferState,
                addTemplateState: n.constants.stateNames.transfersHistoryAsIntrabankTemplate,
                detailsState: n.constants.stateNames.transactionDetails,
                stateParams: {
                  type: 0,
                  immediate: 1
                },
                title: this.STRINGS['Transfer.Details.Title'],
                transferTypeTitle: this.STRINGS['Intrabank.Details.TransferType'],
                debitProductLabel: this.STRINGS['Intrabank.Details.DebitProductLabel'],
                showDebitProductType: !1,
                statusConfig: {
                  0: {
                    cssClass: ''
                  },
                  1: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  2: {
                    cssClass: 'statuspending',
                    details: !1,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  3: {
                    cssClass: 'statuspositive',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  4: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  5: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  6: {
                    cssClass: ''
                  },
                  7: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  8: {
                    cssClass: 'statuspositive',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  9: {
                    cssClass: ''
                  },
                  10: {
                    cssClass: ''
                  },
                  11: {
                    cssClass: 'statuspositive',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  12: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  13: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !1,
                    saveAsTemplate: !0
                  }
                }
              },
              7: {
                newTransactionState: n.constants.stateNames.newIntraBankTransferState,
                addTemplateState: n.constants.stateNames.transfersHistoryAsIntrabankTemplate,
                detailsState: n.constants.stateNames.transactionDetails,
                stateParams: {
                  type: 0,
                  immediate: 0
                },
                title: this.STRINGS['Transfer.Details.Title'],
                transferTypeTitle: this.STRINGS['Intrabank.Details.TransferType'],
                debitProductLabel: this.STRINGS['Intrabank.Details.DebitProductLabel'],
                showDebitProductType: !1,
                statusConfig: {
                  0: {
                    cssClass: ''
                  },
                  1: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  2: {
                    cssClass: 'statuspending',
                    details: !1,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  3: {
                    cssClass: 'statuspositive',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  4: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  5: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  6: {
                    cssClass: ''
                  },
                  7: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  8: {
                    cssClass: 'statuspositive',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  9: {
                    cssClass: ''
                  },
                  10: {
                    cssClass: ''
                  },
                  11: {
                    cssClass: 'statuspositive',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  12: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  13: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !1,
                    saveAsTemplate: !0
                  }
                }
              },
              6: {
                detailsState: n.constants.stateNames.intrabankDetails,
                stateParams: {
                  type: 6,
                  immidiate: 1
                },
                title: this.STRINGS['Transfer.Details.Title'],
                transferTypeTitle: this.STRINGS['Intrabank.Details.TransferType'],
                debitProductLabel: this.STRINGS['Intrabank.Details.DebitProductLabel'],
                showDebitProductType: !1,
                statusConfig: {
                  3: {
                    cssClass: 'statusnegative',
                    details: !0,
                    saveAsTemplate: !1,
                    execute: !1
                  }
                }
              },
              25: {
                newTransactionState: n.constants.stateNames.newIntraBankTransferState,
                addTemplateState: n.constants.stateNames.transfersHistoryAsIntrabankTemplate,
                detailsState: n.constants.stateNames.instantPaymentDetails,
                stateParams: {
                  type: 0,
                  immediate: 0
                },
                title: this.STRINGS['Transfer.Details.Title.PayNow'],
                transferTypeTitle: this.STRINGS['Intrabank.Details.TransferType'],
                debitProductLabel: this.STRINGS['Intrabank.Details.DebitProductLabel'],
                showDebitProductType: !1,
                statusConfig: {
                  0: {
                    cssClass: ''
                  },
                  1: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  2: {
                    cssClass: 'statuspending',
                    details: !1
                  },
                  3: {
                    cssClass: 'statuspositive',
                    details: !0
                  },
                  4: {
                    cssClass: 'statusnegative',
                    details: !0
                  },
                  5: {
                    cssClass: 'statusnegative',
                    details: !0
                  },
                  6: {
                    cssClass: ''
                  },
                  7: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  8: {
                    cssClass: 'statuspositive',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  9: {
                    cssClass: ''
                  },
                  10: {
                    cssClass: ''
                  },
                  11: {
                    cssClass: 'statuspositive',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  12: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  13: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !1,
                    saveAsTemplate: !0
                  }
                }
              },
              26: {
                newTransactionState: n.constants.stateNames.newIntraBankTransferState,
                addTemplateState: n.constants.stateNames.transfersHistoryAsIntrabankTemplate,
                detailsState: n.constants.stateNames.instantPaymentDetails,
                stateParams: {
                  type: 0,
                  immediate: 0
                },
                title: this.STRINGS['Transfer.Details.Title.PayNow'],
                transferTypeTitle: this.STRINGS['Intrabank.Details.TransferType'],
                debitProductLabel: this.STRINGS['Intrabank.Details.DebitProductLabel'],
                showDebitProductType: !1,
                statusConfig: {
                  0: {
                    cssClass: ''
                  },
                  1: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  2: {
                    cssClass: 'statuspending',
                    details: !1
                  },
                  3: {
                    cssClass: 'statuspositive',
                    details: !0
                  },
                  4: {
                    cssClass: 'statusnegative',
                    details: !0
                  },
                  5: {
                    cssClass: 'statusnegative',
                    details: !0
                  },
                  6: {
                    cssClass: ''
                  },
                  7: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  8: {
                    cssClass: 'statuspositive',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  9: {
                    cssClass: ''
                  },
                  10: {
                    cssClass: ''
                  },
                  11: {
                    cssClass: 'statuspositive',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  12: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  13: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !1,
                    saveAsTemplate: !0
                  }
                }
              },
              17: {
                newTransactionState: n.constants.stateNames.newIntraBankTransferState,
                addTemplateState: n.constants.stateNames.transfersHistoryAsIntrabankTemplate,
                detailsState: n.constants.stateNames.transactionDetails,
                stateParams: {
                  type: 0,
                  immediate: 0
                },
                title: this.STRINGS['Transfer.Details.Title'],
                transferTypeTitle: this.STRINGS['Intrabank.Details.TransferType'],
                debitProductLabel: this.STRINGS['Intrabank.Details.DebitProductLabel'],
                showDebitProductType: !1,
                statusConfig: {
                  0: {
                    cssClass: ''
                  },
                  1: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  2: {
                    cssClass: 'statuspending',
                    details: !1,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  3: {
                    cssClass: 'statuspositive',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  4: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  5: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  6: {
                    cssClass: ''
                  },
                  7: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  8: {
                    cssClass: 'statuspositive',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  9: {
                    cssClass: ''
                  },
                  10: {
                    cssClass: ''
                  },
                  11: {
                    cssClass: 'statuspositive',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  12: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  13: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !1,
                    saveAsTemplate: !0
                  }
                }
              },
              8: {
                newTransactionState: n.constants.stateNames.newIntraBankTransferState,
                addTemplateState: n.constants.stateNames.transfersHistoryAsIntrabankTemplate,
                detailsState: n.constants.stateNames.transactionDetails,
                stateParams: {
                  type: 0,
                  immediate: 0
                },
                title: this.STRINGS['Transfer.Details.Title'],
                transferTypeTitle: this.STRINGS['Intrabank.Details.TransferType'],
                debitProductLabel: this.STRINGS['Intrabank.Details.DebitProductLabel'],
                showDebitProductType: !1,
                statusConfig: {
                  0: {
                    cssClass: ''
                  },
                  1: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  2: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  3: {
                    cssClass: 'statuspositive',
                    swift: !1,
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  4: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  5: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  6: {
                    cssClass: ''
                  },
                  7: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  8: {
                    cssClass: 'statuspositive',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  9: {
                    cssClass: ''
                  },
                  10: {
                    cssClass: ''
                  },
                  11: {
                    cssClass: 'statuspositive',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  12: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  13: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !1,
                    saveAsTemplate: !0
                  }
                }
              },
              11: {
                newTransactionState: n.constants.stateNames.newIntraBankTransferState,
                addTemplateState: n.constants.stateNames.transfersHistoryAsIntrabankTemplate,
                detailsState: n.constants.stateNames.intrabankDetails,
                stateParams: {
                  type: 1,
                  immediate: 0
                },
                title: this.STRINGS['Intrabank.Details.Title'],
                transferTypeTitle: this.STRINGS['Intrabank.Details.CardTransferType'],
                debitProductLabel: this.STRINGS['Intrabank.Details.CardDebitProductLabel'],
                debitProductTypeLabel: this.STRINGS['Intrabank.Details.CardDebitProductTypeLabel'],
                showDebitProductType: !0,
                statusConfig: {
                  0: {
                    cssClass: ''
                  },
                  1: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  2: {
                    cssClass: 'statuspending',
                    details: !1,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  3: {
                    cssClass: 'statuspositive',
                    swift: !1,
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  4: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  5: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  6: {
                    cssClass: ''
                  },
                  7: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  8: {
                    cssClass: 'statuspositive',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  9: {
                    cssClass: ''
                  },
                  10: {
                    cssClass: ''
                  },
                  11: {
                    cssClass: 'statuspositive',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  12: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  13: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !1,
                    saveAsTemplate: !0
                  }
                }
              },
              14: {
                newTransactionState: n.constants.stateNames.newIntraBankTransferState,
                addTemplateState: n.constants.stateNames.transfersHistoryAsIntrabankTemplate,
                detailsState: n.constants.stateNames.intrabankDetails,
                stateParams: {
                  type: 2,
                  immediate: 0
                },
                title: this.STRINGS['Intrabank.Details.Title'],
                transferTypeTitle: this.STRINGS['Intrabank.Details.LoanTransferType'],
                debitProductLabel: this.STRINGS['Intrabank.Details.LoanDebitProductLabel'],
                debitProductTypeLabel: this.STRINGS['Intrabank.Details.LoanDebitProductTypeLabel'],
                showDebitProductType: !0,
                statusConfig: {
                  0: {
                    cssClass: ''
                  },
                  1: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  2: {
                    cssClass: 'statuspending',
                    details: !1,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  3: {
                    cssClass: 'statuspositive',
                    swift: !1,
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  4: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  5: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  6: {
                    cssClass: ''
                  },
                  7: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  8: {
                    cssClass: 'statuspositive',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  9: {
                    cssClass: ''
                  },
                  10: {
                    cssClass: ''
                  },
                  11: {
                    cssClass: 'statuspositive',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  12: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  13: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !1,
                    saveAsTemplate: !0
                  }
                }
              },
              4: {
                newTransactionState: n.constants.stateNames.newInterBankTransferState,
                addTemplateState: n.constants.stateNames.transfersHistoryAsInterbankTemplate,
                detailsState: n.constants.stateNames.interbankDetails,
                title: this.STRINGS['Interbank.Details.Title'],
                debitProductLabel: this.STRINGS['Interbank.Details.DebitProductLabel'],
                statusConfig: {
                  0: {
                    cssClass: ''
                  },
                  1: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  2: {
                    cssClass: 'statuspending',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  3: {
                    cssClass: 'statuspositive',
                    swift: !1,
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  4: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  5: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  6: {
                    cssClass: ''
                  },
                  7: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  8: {
                    cssClass: 'statuspositive',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  9: {
                    cssClass: ''
                  },
                  10: {
                    cssClass: ''
                  },
                  11: {
                    cssClass: 'statuspositive',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  12: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  13: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !1,
                    saveAsTemplate: !0
                  }
                }
              },
              22: {
                newTransactionState: n.constants.stateNames.newCitiRetailTransferState,
                addTemplateState: n.constants.stateNames.transfersHistoryAsInterbankTemplate,
                detailsState: n.constants.stateNames.interbankDetails,
                title: this.STRINGS['Interbank.Details.Title'],
                debitProductLabel: this.STRINGS['Interbank.Details.DebitProductLabel'],
                statusConfig: {
                  0: {
                    cssClass: ''
                  },
                  1: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  2: {
                    cssClass: 'statuspending',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  3: {
                    cssClass: 'statuspositive',
                    swift: !1,
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  4: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  5: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  6: {
                    cssClass: ''
                  },
                  7: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  8: {
                    cssClass: 'statuspositive',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  9: {
                    cssClass: ''
                  },
                  10: {
                    cssClass: ''
                  },
                  11: {
                    cssClass: 'statuspositive',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  12: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  13: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !1,
                    saveAsTemplate: !0
                  }
                }
              },
              10: {
                newTransactionState: n.constants.stateNames.newInternationalTransferState,
                addTemplateState: n.constants.stateNames.transfersHistoryAsInternationalTemplate,
                detailsState: n.constants.stateNames.internationalDetails,
                swiftState: n.constants.stateNames.internationalSwift,
                title: this.STRINGS['International.Details.Title'],
                debitProductLabel: this.STRINGS['International.Details.DebitProductLabel'],
                statusConfig: {
                  0: {
                    cssClass: ''
                  },
                  1: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  2: {
                    cssClass: 'statuspending',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  3: {
                    cssClass: 'statuspositive',
                    swift: !0,
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  4: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  5: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  6: {
                    cssClass: ''
                  },
                  7: {
                    cssClass: 'statuspending',
                    swift: !1,
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  8: {
                    cssClass: 'statuspositive',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  9: {
                    cssClass: ''
                  },
                  10: {
                    cssClass: ''
                  },
                  11: {
                    cssClass: 'statuspositive',
                    swift: !0,
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  12: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  13: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !1,
                    saveAsTemplate: !0
                  }
                }
              },
              23: {
                newTransactionState: n.constants.stateNames.newInterBankTransferState,
                addTemplateState: n.constants.stateNames.transfersHistoryAsInterbankTemplate,
                detailsState: n.constants.stateNames.interbankDetails,
                title: this.STRINGS['Interbank.Details.Title'],
                debitProductLabel: this.STRINGS['Interbank.Details.DebitProductLabel'],
                statusConfig: {
                  0: {
                    cssClass: ''
                  },
                  1: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  2: {
                    cssClass: 'statuspending',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  3: {
                    cssClass: 'statuspositive',
                    swift: !0,
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  4: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  5: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  6: {
                    cssClass: ''
                  },
                  7: {
                    cssClass: 'statuspending',
                    swift: !1,
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  8: {
                    cssClass: 'statuspositive',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  9: {
                    cssClass: ''
                  },
                  10: {
                    cssClass: ''
                  },
                  11: {
                    cssClass: 'statuspositive',
                    swift: !1,
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  12: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  13: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !1,
                    saveAsTemplate: !0
                  }
                }
              },
              12: {
                newTransactionState: n.constants.stateNames.newEUTransferState,
                addTemplateState: n.constants.stateNames.transfersHistoryAsEUImportsTemplate,
                detailsState: n.constants.stateNames.euimportsDetails,
                swiftState: n.constants.stateNames.internationalSwift,
                swiftMTState: n.constants.stateNames.internationalSwiftMT103,
                title: this.STRINGS['EUImports.Details.Title'],
                debitProductLabel: this.STRINGS['International.Details.DebitProductLabel'],
                statusConfig: {
                  0: {
                    cssClass: ''
                  },
                  1: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  2: {
                    cssClass: 'statuspending',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  3: {
                    cssClass: 'statuspositive',
                    swift: !0,
                    swiftMT103: !0,
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  4: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  5: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  6: {
                    cssClass: ''
                  },
                  7: {
                    cssClass: 'statuspending',
                    swift: !1,
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  8: {
                    cssClass: 'statuspositive',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  9: {
                    cssClass: ''
                  },
                  10: {
                    cssClass: ''
                  },
                  11: {
                    cssClass: 'statuspositive',
                    swift: !0,
                    swiftMT103: !0,
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  12: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  13: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !1,
                    saveAsTemplate: !0
                  }
                }
              },
              15: {
                newTransactionState: n.constants.stateNames.newBoGTransferState,
                addTemplateState: n.constants.stateNames.newBoGTransferState,
                detailsState: n.constants.stateNames.interbankDetails,
                stateParams: {
                  type: 0,
                  immediate: 0
                },
                title: this.STRINGS['Transfer.Details.Title'],
                transferTypeTitle: this.STRINGS['Intrabank.Details.TransferType'],
                debitProductLabel: this.STRINGS['Intrabank.Details.DebitProductLabel'],
                showDebitProductType: !1,
                statusConfig: {
                  0: {
                    cssClass: ''
                  },
                  1: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !1,
                    execute: !1
                  },
                  2: {
                    cssClass: 'statuspending',
                    details: !1,
                    saveAsTemplate: !1,
                    execute: !1
                  },
                  3: {
                    cssClass: 'statuspositive',
                    details: !0,
                    saveAsTemplate: !1,
                    execute: !0
                  },
                  4: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !1
                  },
                  5: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !1
                  },
                  6: {
                    cssClass: ''
                  },
                  7: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !1,
                    execute: !1
                  },
                  8: {
                    cssClass: 'statuspositive',
                    details: !0,
                    saveAsTemplate: !1,
                    execute: !0
                  },
                  9: {
                    cssClass: ''
                  },
                  10: {
                    cssClass: ''
                  },
                  11: {
                    cssClass: 'statuspositive',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !1
                  },
                  12: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !1
                  },
                  13: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !1,
                    saveAsTemplate: !1
                  }
                }
              }
            }
          },
          t.prototype.decorateTransactionViewModel = function (n, t, i) {
            var u,
            r;
            n.Actions = this.getActionsForTransaction(t, i);
            u = this.getTransactionStatusConfig(t);
            n.StatusClass = u ? u.cssClass : '';
            r = this.getTransactionConfig(n.Item);
            null != r && (n.DetailsTitle = r.title, n.DetailsTransferType = r.transferTypeTitle, n.DebitProductLabel = r.debitProductLabel, n.ShowDebitProductType = r.showDebitProductType, n.DebitProductTypeLabel = r.debitProductTypeLabel)
          },
          t.prototype.decorateTransactionTemplateViewModel = function (t, i) {
            var r = [
            ];
            (t.Actions = r, this.getActionForReExecute(r, i), i) && (i.TransactionType == 1 || i.TransactionType == 2 || i.TransactionType == 11 || i.TransactionType == 14 ? r.push(new n.model.MenuAction('root.transfers.myTransfers.edit.intrabank', {
              id: i.ID
            }))  : i.TransactionType == 4 || i.TransactionType == 23 ? r.push(new n.model.MenuAction('root.transfers.myTransfers.edit.interbank', {
              id: i.ID
            }))  : i.TransactionType == 10 ? r.push(new n.model.MenuAction('root.transfers.myTransfers.edit.international', {
              id: i.ID
            }))  : i.TransactionType == 12 && r.push(new n.model.MenuAction('root.transfers.myTransfers.edit.simpleImport', {
              id: i.ID
            })), r.push(new n.model.MenuAction('root.transfers.myTransfers.list.delete', {
              id: i.ID
            })), t.Actions = r)
          },
          t.prototype.getActionForReExecute = function (t, i) {
            var r = this.getTransactionConfigForTemplates(i);
            r && t.push(new n.model.MenuAction(r.newTransactionState, r.stateParams, i, 'burger.ReExecuteTransfer'))
          },
          t.prototype.getTransactionStatusConfig = function (n) {
            var t = this.getTransactionConfig(n);
            return t && t.statusConfig ? t.statusConfig[n.Status] : null
          },
          t.prototype.getTransactionConfigForTemplates = function (n) {
            return n.Transaction.CreditProductTypeID == this.lookupService.getRetailCitibank().TypeID ? this.citibankRetailConfig : this.transactionTypeMappings[n.TransactionType]
          },
          t.prototype.getTransactionConfig = function (t) {
            var i,
            u = t.CreditProductTypeID == this.lookupService.getRetailCitibank().TypeID ? this.citibankRetailConfig : this.transactionTypeMappings[t.Type],
            f,
            r;
            return t.Type == 12 && (f = t.Details.filter(function (t) {
              return t.Name == n.server.DetailName.SICOM_TRANSFER_TYPE
            }) [0], f.Value != 'SIMPLE_IMPORTS_WITHIN_EU') ? (i = i ? i : angular.copy(u), r = i.statusConfig[t.Status], r.swift && (r.swift = !1, r.swiftMT103 = !1), i)  : u
          },
          t.prototype.getActionsForTransaction = function (t, i) {
            var u = [
            ],
            e = {
              id: t.TransactionUN,
              language: 'NA'
            },
            r,
            f,
            o,
            s;
            return t ? (r = this.getTransactionConfig(t), !r) ? u : (r && r.statusConfig && (f = r.statusConfig[t.Status]), i.indexOf('root.cash.transfer') != - 1 && (i = 'root.transfers.history'), o = i + n.constants.stateNames.transactionCancel, f.cancel && !this.MenuItemsService.isStateDisable(o) && u.push(new n.model.MenuAction(o, e)), f.execute && !this.MenuItemsService.isStateDisable(r.newTransactionState) && u.push(new n.model.MenuAction(r.newTransactionState, r.stateParams, t, 'burger.ReExecuteTransfer')), f.details && !this.MenuItemsService.isStateDisable(i + r.detailsState) && u.push(new n.model.MenuAction(i + r.detailsState, e, t, f.detailsMenuTitleKey ? f.detailsMenuTitleKey : 'root.transfers.history.details')), f.swift && !this.MenuItemsService.isStateDisable(i + r.swiftState) && u.push(new n.model.MenuAction(i + r.swiftState, e, t, 'root.transfers.history.swift')), f.swiftMT103 && !this.MenuItemsService.isStateDisable(i + r.swiftMTState) && u.push(new n.model.MenuAction(i + r.swiftMTState, e, t, 'root.transfers.history.swiftMT103')), s = n.utils.CheckAlphaIban(t.DebitProduct).valid, f.saveAsTemplate && !this.MenuItemsService.isStateDisable(r.addTemplateState) && s && u.push(new n.model.MenuAction(r.addTemplateState, r.stateParams, t, 'burger.AddTemplate')), u)  : u
          },
          t
        }();
        t.TransferTransactionActionsService = i;
        n.services.service('TransferTransactionActionsService', i);
        r = function () {
          function t(n, t, i, r, u, f, e, o, s, h) {
            this.profileProductsService = n;
            this.STRINGS = t;
            this.paymentTypes = i;
            this.cards = r;
            this.interbankCards = u;
            this.alphaLoans = f;
            this.consumerLoans = e;
            this.mortgageEnterpriseLoans = o;
            this.productMatchingService = s;
            this.menuItemsService = h;
            this.transactionTypeMappings = {
            };
            this.initializeTransactionTypeMappings()
          }
          return t.prototype.addTemplateStateResolver = function () {
            return 'lalalala.state'
          },
          t.prototype.initializeTransactionTypeMappings = function () {
            this.transactionTypeMappings = {
              3: {
                title: this.STRINGS['Payment.Details.Title'],
                transferTypeTitle: this.STRINGS['Intrabank.Details.TransferType'],
                debitProductLabel: this.STRINGS['Intrabank.Details.DebitProductLabel'],
                showDebitProductType: !1,
                statusConfig: {
                  0: {
                    cssClass: ''
                  },
                  1: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  2: {
                    cssClass: 'statuspending',
                    details: !1,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  3: {
                    cssClass: 'statuspositive',
                    swift: !1,
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  4: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  5: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  6: {
                    cssClass: ''
                  },
                  7: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  8: {
                    cssClass: 'statuspositive',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  9: {
                    cssClass: ''
                  },
                  10: {
                    cssClass: ''
                  },
                  11: {
                    cssClass: 'statuspositive',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  12: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  13: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !1,
                    saveAsTemplate: !0
                  }
                }
              },
              7: {
                title: this.STRINGS['Payment.Details.Title'],
                transferTypeTitle: this.STRINGS['Intrabank.Details.TransferType'],
                debitProductLabel: this.STRINGS['Intrabank.Details.DebitProductLabel'],
                showDebitProductType: !1,
                statusConfig: {
                  0: {
                    cssClass: ''
                  },
                  1: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  2: {
                    cssClass: 'statuspending',
                    details: !1,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  3: {
                    cssClass: 'statuspositive',
                    swift: !1,
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  4: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  5: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  6: {
                    cssClass: ''
                  },
                  7: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  8: {
                    cssClass: 'statuspositive',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  9: {
                    cssClass: ''
                  },
                  10: {
                    cssClass: ''
                  },
                  11: {
                    cssClass: 'statuspositive',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  12: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  13: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !1,
                    saveAsTemplate: !0
                  }
                }
              },
              17: {
                title: this.STRINGS['Payment.Details.Title'],
                transferTypeTitle: this.STRINGS['Intrabank.Details.TransferType'],
                debitProductLabel: this.STRINGS['Intrabank.Details.DebitProductLabel'],
                showDebitProductType: !1,
                statusConfig: {
                  0: {
                    cssClass: ''
                  },
                  1: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  2: {
                    cssClass: 'statuspending',
                    details: !1,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  3: {
                    cssClass: 'statuspositive',
                    swift: !1,
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  4: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  5: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  6: {
                    cssClass: ''
                  },
                  7: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  8: {
                    cssClass: 'statuspositive',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  9: {
                    cssClass: ''
                  },
                  10: {
                    cssClass: ''
                  },
                  11: {
                    cssClass: 'statuspositive',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  12: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  13: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !1,
                    saveAsTemplate: !0
                  }
                }
              },
              8: {
                title: this.STRINGS['Payment.Details.Title'],
                transferTypeTitle: this.STRINGS['Intrabank.Details.TransferType'],
                debitProductLabel: this.STRINGS['Intrabank.Details.DebitProductLabel'],
                showDebitProductType: !1,
                statusConfig: {
                  0: {
                    cssClass: ''
                  },
                  1: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  2: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  3: {
                    cssClass: 'statuspositive',
                    swift: !1,
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  4: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  5: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  6: {
                    cssClass: ''
                  },
                  7: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  8: {
                    cssClass: 'statuspositive',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  9: {
                    cssClass: ''
                  },
                  10: {
                    cssClass: ''
                  },
                  11: {
                    cssClass: 'statuspositive',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  12: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  13: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !1,
                    saveAsTemplate: !0
                  }
                }
              },
              11: {
                title: this.STRINGS['Payment.Details.Title'],
                transferTypeTitle: this.STRINGS['Intrabank.Details.CardTransferType'],
                debitProductLabel: this.STRINGS['Intrabank.Details.CardDebitProductLabel'],
                debitProductTypeLabel: this.STRINGS['Intrabank.Details.CardDebitProductTypeLabel'],
                showDebitProductType: !0,
                statusConfig: {
                  0: {
                    cssClass: ''
                  },
                  1: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  2: {
                    cssClass: 'statuspending',
                    details: !1,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  3: {
                    cssClass: 'statuspositive',
                    swift: !1,
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  4: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  5: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  6: {
                    cssClass: ''
                  },
                  7: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  8: {
                    cssClass: 'statuspositive',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  9: {
                    cssClass: ''
                  },
                  10: {
                    cssClass: ''
                  },
                  11: {
                    cssClass: 'statuspositive',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  12: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  13: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !1,
                    saveAsTemplate: !0
                  }
                }
              },
              14: {
                title: this.STRINGS['Payment.Details.Title'],
                transferTypeTitle: this.STRINGS['Intrabank.Details.LoanTransferType'],
                debitProductLabel: this.STRINGS['Intrabank.Details.LoanDebitProductLabel'],
                debitProductTypeLabel: this.STRINGS['Intrabank.Details.LoanDebitProductTypeLabel'],
                showDebitProductType: !0,
                statusConfig: {
                  0: {
                    cssClass: ''
                  },
                  1: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  2: {
                    cssClass: 'statuspending',
                    details: !1,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  3: {
                    cssClass: 'statuspositive',
                    swift: !1,
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  4: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  5: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  6: {
                    cssClass: ''
                  },
                  7: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  8: {
                    cssClass: 'statuspositive',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  9: {
                    cssClass: ''
                  },
                  10: {
                    cssClass: ''
                  },
                  11: {
                    cssClass: 'statuspositive',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  12: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  13: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !1,
                    saveAsTemplate: !0
                  }
                }
              },
              4: {
                title: this.STRINGS['Payment.Details.Title'],
                debitProductLabel: this.STRINGS['Interbank.Details.DebitProductLabel'],
                statusConfig: {
                  0: {
                    cssClass: ''
                  },
                  1: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  2: {
                    cssClass: 'statuspending',
                    details: !1,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  3: {
                    cssClass: 'statuspositive',
                    swift: !1,
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  4: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  5: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  6: {
                    cssClass: ''
                  },
                  7: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  8: {
                    cssClass: 'statuspositive',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  9: {
                    cssClass: ''
                  },
                  10: {
                    cssClass: ''
                  },
                  11: {
                    cssClass: 'statuspositive',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  12: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  13: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !1,
                    saveAsTemplate: !0
                  }
                }
              },
              10: {
                title: this.STRINGS['Payment.Details.Title'],
                debitProductLabel: this.STRINGS['International.Details.DebitProductLabel'],
                statusConfig: {
                  0: {
                    cssClass: ''
                  },
                  1: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  2: {
                    cssClass: 'statuspending',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  3: {
                    cssClass: 'statuspositive',
                    swift: !0,
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  4: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  5: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  6: {
                    cssClass: ''
                  },
                  7: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  8: {
                    cssClass: 'statuspositive',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  9: {
                    cssClass: ''
                  },
                  10: {
                    cssClass: ''
                  },
                  11: {
                    cssClass: 'statuspositive',
                    swift: !0,
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  12: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  13: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !1,
                    saveAsTemplate: !0
                  }
                }
              },
              16: {
                title: this.STRINGS['Payment.Details.Title'],
                debitProductLabel: this.STRINGS['International.Details.DebitProductLabel'],
                statusConfig: {
                  0: {
                    cssClass: ''
                  },
                  1: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  2: {
                    cssClass: 'statuspending',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  3: {
                    cssClass: 'statuspositive',
                    swift: !1,
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  4: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  5: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  6: {
                    cssClass: ''
                  },
                  7: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  8: {
                    cssClass: 'statuspositive',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  9: {
                    cssClass: ''
                  },
                  10: {
                    cssClass: ''
                  },
                  11: {
                    cssClass: 'statuspositive',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  12: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  13: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !1,
                    saveAsTemplate: !0
                  }
                }
              },
              18: {
                title: this.STRINGS['Payment.Details.Title'],
                debitProductLabel: this.STRINGS['International.Details.DebitProductLabel'],
                statusConfig: {
                  0: {
                    cssClass: ''
                  },
                  1: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  2: {
                    cssClass: 'statuspending',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  3: {
                    cssClass: 'statuspositive',
                    swift: !1,
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  4: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  5: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  6: {
                    cssClass: ''
                  },
                  7: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  8: {
                    cssClass: 'statuspositive',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  9: {
                    cssClass: ''
                  },
                  10: {
                    cssClass: ''
                  },
                  11: {
                    cssClass: 'statuspositive',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  12: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  13: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !1,
                    saveAsTemplate: !0
                  }
                }
              },
              19: {
                title: this.STRINGS['Payment.Details.Title'],
                debitProductLabel: this.STRINGS['International.Details.DebitProductLabel'],
                statusConfig: {
                  0: {
                    cssClass: ''
                  },
                  1: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  2: {
                    cssClass: 'statuspending',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  3: {
                    cssClass: 'statuspositive',
                    swift: !1,
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  4: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  5: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  6: {
                    cssClass: ''
                  },
                  7: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  8: {
                    cssClass: 'statuspositive',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  9: {
                    cssClass: ''
                  },
                  10: {
                    cssClass: ''
                  },
                  11: {
                    cssClass: 'statuspositive',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  12: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  13: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !1,
                    saveAsTemplate: !0
                  }
                }
              },
              13: {
                title: this.STRINGS['Payment.Details.Title'],
                debitProductLabel: this.STRINGS['International.Details.DebitProductLabel'],
                statusConfig: {
                  0: {
                    cssClass: ''
                  },
                  1: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  2: {
                    cssClass: 'statuspending',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  3: {
                    cssClass: 'statuspositive',
                    swift: !1,
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  4: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  5: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  6: {
                    cssClass: ''
                  },
                  7: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  8: {
                    cssClass: 'statuspositive',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  9: {
                    cssClass: ''
                  },
                  10: {
                    cssClass: ''
                  },
                  11: {
                    cssClass: 'statuspositive',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  12: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  13: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !1,
                    saveAsTemplate: !0
                  }
                }
              },
              24: {
                title: this.STRINGS['Payment.Details.Title'],
                transferTypeTitle: this.STRINGS['Intrabank.Details.TransferType'],
                debitProductLabel: this.STRINGS['Intrabank.Details.DebitProductLabel'],
                showDebitProductType: !1,
                statusConfig: {
                  3: {
                    cssClass: 'statuspositive',
                    swift: !1,
                    details: !0,
                    detailState: '.mybank-details',
                    saveAsTemplate: !1,
                    execute: !1
                  },
                  11: {
                    cssClass: 'statuspositive',
                    details: !0,
                    detailState: '.mybank-details',
                    saveAsTemplate: !1,
                    execute: !1
                  }
                }
              },
              28: {
                title: this.STRINGS['Payment.Details.Title'],
                debitProductLabel: this.STRINGS['International.Details.DebitProductLabel'],
                statusConfig: {
                  0: {
                    cssClass: ''
                  },
                  1: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  2: {
                    cssClass: 'statuspending',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  3: {
                    cssClass: 'statuspositive',
                    swift: !1,
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  4: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  5: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  6: {
                    cssClass: ''
                  },
                  7: {
                    cssClass: 'statuspending',
                    details: !0,
                    detailsMenuTitleKey: 'root.transfers.history.pending-details',
                    cancel: !0,
                    saveAsTemplate: !0,
                    execute: !1
                  },
                  8: {
                    cssClass: 'statuspositive',
                    details: !0,
                    saveAsTemplate: !0,
                    execute: !0
                  },
                  9: {
                    cssClass: ''
                  },
                  10: {
                    cssClass: ''
                  },
                  11: {
                    cssClass: 'statuspositive',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  12: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  },
                  13: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !1,
                    saveAsTemplate: !0
                  }
                }
              },
              30: {
                title: this.STRINGS['Payment.Details.Title'],
                transferTypeTitle: this.STRINGS['Intrabank.Details.TransferType'],
                debitProductLabel: this.STRINGS['Intrabank.Details.DebitProductLabel'],
                showDebitProductType: !1,
                statusConfig: {
                  3: {
                    cssClass: 'statuspositive',
                    swift: !1,
                    details: !0,
                    detailState: '.iris-details',
                    saveAsTemplate: !1,
                    execute: !1
                  },
                  11: {
                    cssClass: 'statuspositive',
                    details: !0,
                    detailState: '.iris-details',
                    saveAsTemplate: !1,
                    execute: !1
                  },
                  13: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !1,
                    saveAsTemplate: !0
                  },
                  12: {
                    cssClass: 'statusnegative',
                    details: !0,
                    execute: !0,
                    saveAsTemplate: !0
                  }
                }
              }
            }
          },
          t.prototype.decorateTransactionViewModel = function (n, t, i) {
            var u,
            r;
            t.Type == 13 && (t.CreditProductTypeID = 10179);
            n.Actions = this.getActionsForTransaction(t, i);
            u = this.getTransactionStatusConfig(t);
            n.StatusClass = u ? u.cssClass : '';
            r = this.transactionTypeMappings[n.Item.Type];
            null != r && (n.DetailsTitle = r.title, n.DetailsTransferType = r.transferTypeTitle, n.DebitProductLabel = r.debitProductLabel, n.ShowDebitProductType = r.showDebitProductType, n.DebitProductTypeLabel = r.debitProductTypeLabel)
          },
          t.prototype.getActionForReExecute = function (t, i) {
            var r = this.transactionTypeMappings[i.TransactionType];
            r && t.push(new n.model.MenuAction(r.newTransactionState, r.stateParams, i.Transaction, 'burger.ReExecutePayment'))
          },
          t.prototype.getTransactionStatusConfig = function (n) {
            var t = this.transactionTypeMappings[n.Type];
            return t && t.statusConfig ? t.statusConfig[n.Status] : null
          },
          t.prototype.getActionsForTransaction = function (t, i) {
            var u = [
            ],
            c = {
              id: t.TransactionUN,
              productTypeId: t.CreditProductTypeID
            },
            o,
            r,
            f,
            s,
            l,
            h,
            e;
            return t ? (o = this.transactionTypeMappings[t.Type], !o) ? u : (r = this.getPaymentStates(t), o && o.statusConfig && (f = o.statusConfig[t.Status]), s = i + n.constants.stateNames.transactionCancel, f.cancel && !this.menuItemsService.isStateDisable(s) && u.push(new n.model.MenuAction(s, c, null, 'burger.root.payments.recurring.cancel', null, n.model.MenuActionDescriptor.Cancel)), l = this.cards.concat(this.interbankCards).concat(this.mortgageEnterpriseLoans).concat(this.alphaLoans).concat(this.consumerLoans), h = this.productMatchingService.match(l, t.CreditProduct, t.CreditProductID), f.execute && r.newPaymentState && !this.menuItemsService.isStateDisable(r.newPaymentState) && (n.utils.isUndefinedOrNull(t.CreditProductTypeID) || h ? u.push(new n.model.MenuAction(r.newPaymentState, r.newPaymentStateParams, t, 'burger.ReExecutePayment', null, n.model.MenuActionDescriptor.Execute))  : (e = this.paymentTypes.filter(function (n) {
              return n.Item.ProductTypeId == t.CreditProductTypeID
            }) [0], e && e.IsVisible && u.push(new n.model.MenuAction(r.newPaymentState, r.newPaymentStateParams, t, 'burger.ReExecutePayment', null, n.model.MenuActionDescriptor.Execute)))), f.details && !this.menuItemsService.isStateDisable(i + (f.detailState || '.details')) && u.push(new n.model.MenuAction(i + (f.detailState || '.details'), c, t, f.detailsMenuTitleKey ? f.detailsMenuTitleKey : 'root.payments.history.details', null, n.model.MenuActionDescriptor.Details)), f.saveAsTemplate && r.addTemplateState && !this.menuItemsService.isStateDisable(r.addTemplateState) && (n.utils.isUndefinedOrNull(t.CreditProductTypeID) || h ? u.push(new n.model.MenuAction(r.addTemplateState, r.addTemplateStateParams, t, 'burger.AddPaymentTemplate', null, n.model.MenuActionDescriptor.SaveAsTemplate))  : (e = this.paymentTypes.filter(function (n) {
              return n.Item.ProductTypeId == t.CreditProductTypeID
            }) [0], e && e.IsVisible && u.push(new n.model.MenuAction(r.addTemplateState, r.addTemplateStateParams, t, 'burger.AddPaymentTemplate', null, n.model.MenuActionDescriptor.SaveAsTemplate)))), u)  : u
          },
          t.prototype.getPaymentStates = function (t) {
            var i = {
              addTemplateState: null,
              addTemplateStateParams: null,
              newPaymentState: null,
              newPaymentStateParams: null
            },
            f = [
              {
                source: this.cards,
                state: n.constants.stateNames.newCardPaymentState,
                editState: 'root.payments.mypayments.add-card'
              },
              {
                source: this.interbankCards,
                state: n.constants.stateNames.newInterbankCardPaymentState,
                editState: 'root.payments.mypayments.add-card'
              },
              {
                source: this.mortgageEnterpriseLoans,
                state: n.constants.stateNames.newHousingLoanPaymentState,
                editState: 'root.payments.mypayments.add-loan'
              },
              {
                source: this.alphaLoans,
                state: n.constants.stateNames.newAlphaLoanPaymentState,
                editState: 'root.payments.mypayments.add-loan'
              },
              {
                source: this.consumerLoans,
                state: n.constants.stateNames.newLoanPaymentState,
                editState: 'root.payments.mypayments.add-loan'
              }
            ],
            u = this.paymentTypes.filter(function (n) {
              return n.Item.ProductTypeId == t.CreditProductTypeID
            }),
            r,
            e;
            if (u.length > 0 && u[0].hasOwnProperty('Item')) t.CreditProductType = u[0].title,
            i.newPaymentState = u[0].state,
            i.newPaymentStateParams = u[0].stateParams,
            u[0].Item.FixedCodePayment ? (i.addTemplateState = 'root.payments.mypayments.add-dynamic-withFixCode', i.addTemplateStateParams = {
            })  : (i.addTemplateState = 'root.payments.mypayments.add-dynamic-withoutFixCode', i.addTemplateStateParams = {
            });
             else for (r = 0; r < f.length; r++) if (f[r].source && (e = this.productMatchingService.match(f[r].source, t.CreditProduct, t.CreditProductID), e)) {
              i.newPaymentState = f[r].state;
              i.newPaymentStateParams = {
                id: e.id
              };
              i.addTemplateState = f[r].editState;
              i.addTemplateStateParams = {
              };
              break
            }
            return i
          },
          t.prototype.decorateTransactionTemplateViewModel = function (t) {
            var i = [
            ],
            r,
            f = [
              {
                source: this.cards,
                state: n.constants.stateNames.newCardPaymentState,
                editState: 'root.payments.mypayments.edit.card'
              },
              {
                source: this.interbankCards,
                state: n.constants.stateNames.newInterbankCardPaymentState,
                editState: 'root.payments.mypayments.edit.card'
              },
              {
                source: this.mortgageEnterpriseLoans,
                state: n.constants.stateNames.newHousingLoanPaymentState,
                editState: 'root.payments.mypayments.add-loan'
              },
              {
                source: this.alphaLoans,
                state: n.constants.stateNames.newAlphaLoanPaymentState,
                editState: 'root.payments.mypayments.edit.loan'
              },
              {
                source: this.consumerLoans,
                state: n.constants.stateNames.newLoanPaymentState,
                editState: 'root.payments.mypayments.edit.loan'
              }
            ],
            e,
            u,
            o;
            if (t.Template.TransactionType == 13 && (t.Template.Transaction.CreditProductTypeID = 10179), r = this.paymentTypes.filter(function (n) {
              return n.Item.ProductTypeId == t.Template.Transaction.CreditProductTypeID
            }).shift(), !n.utils.isUndefinedOrNull(r) && r.hasOwnProperty('Item')) {
              if (t.Template.Transaction.CreditProductType = r.title, !r.IsVisible && r.Item.ProductTypeId != 10046) {
                i.push(new n.model.MenuAction('root.payments.mypayments.list.delete', {
                  id: t.Template.ID
                }));
                t.Actions = i;
                return
              }
              t.Template.Transaction.Type == 13 && (t.Template.Transaction.CreditProductType = r.title);
              r.Item.ProductTypeId == 10046 ? (e = this.productMatchingService.match(this.consumerLoans, t.Template.Transaction.CreditProduct, t.Template.Transaction.CreditProductID), n.utils.isUndefinedOrNull(e) || i.push(new n.model.MenuAction('root.payments.loans', {
                id: e.id
              }, t.Template, 'burger.ReExecutePayment')), i.push(new n.model.MenuAction('root.payments.mypayments.edit.loan', {
                id: t.Template.ID
              }, null, 'burger.Edit')))  : (i.push(new n.model.MenuAction(r.state, r.stateParams, t.Template, 'burger.ReExecutePayment')), r.Item.FixedCodePayment ? i.push(new n.model.MenuAction('root.payments.mypayments.edit.dynamic-with-code', {
                id: t.Template.ID
              }, null, 'burger.Edit'))  : i.push(new n.model.MenuAction('root.payments.mypayments.edit.dynamic-without-code', {
                id: t.Template.ID
              }, null, 'burger.Edit')))
            } else for (u = 0; u < f.length; u++) if (!n.utils.isUndefinedOrNull(f[u].source) && (o = this.productMatchingService.match(f[u].source, t.Template.Transaction.CreditProduct, t.Template.Transaction.CreditProductID), !n.utils.isUndefinedOrNull(o))) {
              i.push(new n.model.MenuAction(f[u].state, {
                id: o.id
              }, t.Template, 'burger.ReExecutePayment'));
              i.push(new n.model.MenuAction(f[u].editState, {
                id: t.Template.ID
              }, null, 'burger.Edit'));
              break
            }
            i.push(new n.model.MenuAction('root.payments.mypayments.list.delete', {
              id: t.Template.ID
            }));
            t.Actions = i
          },
          t.$inject = [
            'ProfileProductsService',
            'STRINGS',
            'paymentTypes',
            'cards',
            'interbankCards',
            'alphaLoans',
            'consumerLoans',
            'mortgageEnterpriseLoans',
            'ProductMatchingService',
          ],
          t
        }();
        t.PaymentTransactionActionsService = r;
        n.services.service('PaymentTransactionActionsService', r);
        u = function () {
          function t(n, t, i) {
            this.STRINGS = n;
            this.fromDate = t;
            this.toDate = i
          }
          return t.prototype.createSortOptions = function () {
            return [{
              Name: null,
              Sorting: 0
            }
            ]
          },
          t.prototype.createDateRanges = function () {
            return {
            }
          },
          t.prototype.createSearchHeader = function () {
            return n.utils.formatString(this.STRINGS.failedTransactionsHistoryHeader, [
              this.fromDate
            ])
          },
          t.$inject = [
            'STRINGS',
            'fromDate',
            'toDate'
          ],
          t
        }();
        t.FailedTransactionSearchHelper = u;
        f = function () {
          function t(n) {
            this.STRINGS = n
          }
          return t.prototype.createSortOptions = function () {
            return [{
              Name: this.STRINGS['transactions.history.payments.bySubmissionDate'],
              Sorting: 0
            },
            {
              Name: this.STRINGS['transactions.history.payments.byPaymentDate'],
              Sorting: 1
            }
            ]
          },
          t.prototype.createDateRanges = function (n) {
            return 0 == n ? {
              fromDate: new Date(Date.now()).addDays( - 30),
              toDate: new Date(Date.now())
            }
             : {
              fromDate: new Date(Date.now()),
              toDate: new Date(Date.now()).addDays(1)
            }
          },
          t.prototype.createSearchHeader = function (t, i, r) {
            return n.utils.formatString(this.STRINGS.paymentsHistoryHeader, [
              0 == r ? this.STRINGS.submitted : this.STRINGS.executed,
              t,
              i
            ])
          },
          t.$inject = [
            'STRINGS'
          ],
          t
        }();
        t.PaymentTranscationSearchHelper = f;
        e = function () {
          function t(n) {
            this.STRINGS = n
          }
          return t.prototype.createSortOptions = function () {
            return [{
              Name: this.STRINGS['transactions.history.transfers.bySubmissionDate'],
              Sorting: 0
            },
            {
              Name: this.STRINGS['transactions.history.transfers.byTransferDate'],
              Sorting: 1
            }
            ]
          },
          t.prototype.createDateRanges = function (n) {
            return 0 == n ? {
              fromDate: new Date(Date.now()).addDays( - 30),
              toDate: new Date(Date.now())
            }
             : {
              fromDate: new Date(Date.now()),
              toDate: new Date(Date.now()).addDays(30)
            }
          },
          t.prototype.createSearchHeader = function (t, i, r) {
            return n.utils.formatString(this.STRINGS.createSearchHeader, [
              0 == r.Sorting ? this.STRINGS.createSearchHeaderOption1 : this.STRINGS.createSearchHeaderOption2,
              t,
              i
            ])
          },
          t.$inject = [
            'STRINGS'
          ],
          t
        }();
        t.TransferTranscationSearchHelper = e
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        var t = function () {
          function t() {
          }
          return t.prototype.buildIrisPayload = function (t) {
            return {
              DebitProductCode: t.DebitProduct ? t.DebitProduct.Code : null,
              DebitProductType: t.DebitProduct ? t.DebitProduct.TypeID : - 1,
              DebitProductCurrency: t.DebitProduct ? t.DebitProduct.CurrencyEnum : undefined,
              CreditProductCode: t.info.CreditorIBAN,
              CreditProductType: t.info.CreditAccountType,
              Amount: t.info.Amount,
              TransferCategory: 0,
              Block: !1,
              FeeType: 0,
              Fees: t.Fees,
              TransferType: 25,
              IRISAuthorisationReqID: t.info.AuthorisationID,
              CreditReason: t.info.OrderDescription,
              TransferDetails: [
                {
                  DataType: 0,
                  Name: n.server.DetailName.ADDRESS,
                  Value: ''
                }
              ]
            }
          },
          t.prototype.buildMyBankPayload = function (t) {
            return {
              DebitProductCode: t.DebitProduct ? t.DebitProduct.Code : null,
              DebitProductType: t.DebitProduct ? t.DebitProduct.TypeID : - 1,
              DebitProductCurrency: t.DebitProduct ? t.DebitProduct.CurrencyEnum : undefined,
              CreditProductCode: t.info.CreditAccount,
              CreditProductType: t.info.CreditProductType,
              Amount: t.info.Amount,
              TransferCategory: 0,
              Block: !1,
              FeeType: 0,
              Fees: t.Fees,
              TransferType: 7,
              MyBankReferenceID: t.info.AuthorisationID,
              CreditReason: t.info.PaymentDescription,
              TransferDetails: [
                {
                  DataType: 0,
                  Name: n.server.DetailName.ADDRESS,
                  Value: ''
                }
              ]
            }
          },
          t
        }();
        n.commonServices.service('TransferUtilityService', t)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        var t = function () {
          function t() {
            this.mapper = {
              etimedeposit: function () {
                return {
                  path: n.constants.stateNames.eTimeDepositNew,
                  params: {
                    uid: uuid.v4()
                  }
                }
              },
              etimedepositbonus: function () {
                return {
                  path: n.constants.stateNames.eTimeDepositBonusNew,
                  params: {
                    uid: uuid.v4(),
                    referer: null,
                    applicationNo: null
                  }
                }
              },
              vehicletax: function () {
                return {
                  path: n.constants.stateNames.paymentsVehicleTaxState,
                  params: {
                    id: 10228
                  }
                }
              },
              assessedtaxdues: function () {
                return {
                  path: n.constants.stateNames.newDynamicPaymentState,
                  params: {
                    id: 10227
                  }
                }
              },
              debitcard: function () {
                return {
                  path: n.constants.stateNames.debitCardNew,
                  params: {
                    uid: uuid.v4(),
                    referer: null
                  }
                }
              },
              prepaidcard: function () {
                return {
                  path: n.constants.stateNames.prepaidCardNew
                }
              }
            }
          }
          return t.prototype.get = function (t) {
            return t in this.mapper ? this.mapper[t]()  : t in n.constants.stateNames ? {
              path: n.constants.stateNames[t],
              params: {
              }
            }
             : null
          },
          t
        }();
        n.commonServices.service('WhiteListPathProvider', t)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        var t = function () {
          function t(n, t, i, r, u) {
            this.STRINGS = n;
            this.securityService = t;
            this.SecurityServiceProxy = i;
            this.$q = r;
            this.languageService = u;
            this.MapRightIDToMessageResources = {
              1: 'IsolatedMessagesForLogin',
              2: 'MultiMessagesForLogin',
              44: 'Endotrapezikes_Metafores_Kai_PagiesStatherouPosou',
              45: 'Diatrapezikes_Metafores_Esoterikou',
              46: 'Diatrapezikes_Metafores_Eksoterikou',
              47: 'Aples_Eisagoges',
              48: 'Pliromes_Dimosiou_Tamiou',
              49: 'Ypoloipes_pliromes_Kai_Anathesis_Ameson_Xreoseon',
              50: 'Misthodosia_Arxio',
              51: 'Pliromes_promitheuton_Arxio',
              52: 'Lipes_pliromes_Arxio',
              53: 'Cash_Management_Synallages',
              86: 'Pollaples_Pliromes_Ika_oaee'
            }
          }
          return t.prototype.hasApprovalTableModified = function () {
            var t = this,
            i = this.$q.defer();
            return this.SecurityServiceProxy.getLoginAlerts({
            }).then(function (r) {
              t.securityService.getUserSessionInfo().then(function (u) {
                var f = '';
                r.ModifiedApprovalTables && r.ModifiedApprovalTables.forEach(function (i) {
                  n.utils.parseDateString(i.ModifiedDate, 'el', !0) > n.utils.parseDateString(u.LastSignOn, t.languageService.getLanguage(), !0) && (f !== '' && (f += '/'), f += t.STRINGS[t.MapRightIDToMessageResources[i.rightID]])
                });
                f && (f = f.indexOf('/') === - 1 ? t.STRINGS.ModifiedApprovalTableSingluarMessage.replace('{0}', f)  : t.STRINGS.ModifiedApprovalTablePluralMessage.replace('{0}', f));
                i.resolve(f)
              })
            }),
            i.promise
          },
          t.$inject = [
            'STRINGS',
            'SecurityService',
            'SecurityServiceProxy',
            '$q',
            'LanguageService'
          ],
          t
        }();
        n.services.service('ApprovalTableUtilsService', t)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i = function () {
          function n() {
          }
          return n.prototype.getDistinctUsernames = function (n, t) {
            var u = [
            ],
            r = [
            ],
            i,
            f;
            if (t.Jobs != null && t.Jobs.length > 0) {
              for (i = 0; i <= t.Jobs.length - 1; i++) f = r.filter(function (n) {
                return n == t.Jobs[i].UserNameOpened
              }),
              f.length == 0 && r.push(t.Jobs[i].UserNameOpened);
              return n.forEach(function (n) {
                var t = !1;
                t = n.UserNames.some(function (n) {
                  return r.filter(function (t) {
                    return t == n.Username
                  }).length > 0
                });
                t && u.push(n)
              }),
              u
            }
            return n
          },
          n.prototype.getFullNames = function (n, t) {
            var i,
            u,
            r;
            if (t.Jobs != null && t.Jobs.length > 0) for (i = 0; i <= t.Jobs.length - 1; i++) u = t.Jobs[i].UserNameOpened,
            r = n.filter(function (n) {
              return n.UserNames.some(function (n) {
                return n.Username.toLowerCase() == u.toLowerCase()
              })
            }),
            t.Jobs[i].FullName = r.length > 0 ? r[0].Name + ' ' + r[0].Surname : u;
            return t.Jobs
          },
          n
        }();
        t.JobCreatorFullNameService = i;
        n.commonServices.service('JobCreatorFullNameService', i)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i = function () {
          function i(t, i, r, u, f, e, o, s, h) {
            this.qService = t;
            this.transferService = i;
            this.queriesService = r;
            this.profileProductsService = u;
            this.productMatchingService = f;
            this.lookupService = e;
            this.crossCurrencyService = o;
            this.stringService = s;
            this.securityService = h;
            this.approvalMapping = [
              function (t) {
                return t.ApprovalDetails.Type === 1 && t.ApprovalDetails.TransferInfo.Type === 2 && JobInfoUtils.isFirstApproval(t) ? {
                  expenses: new n.common.services.InternationalJobExpensesService(this.qService, this.transferService, this.queriesService, this.profileProductsService, this.productMatchingService),
                  model: new n.model.InternationalJobExecutionInfo,
                  views: [
                    'Templates/Features/jobs/PendingApprovals/international-step1',
                    'Templates/Features/jobs/PendingApprovals/international-step2'
                  ]
                }
                 : null
              },
              function (n) {
                return n.ApprovalDetails.Type === 1 && n.ApprovalDetails.TransferInfo.Type === 2 ? {
                }
                 : null
              },
              function (t) {
                return t.ApprovalDetails.Type === 1 && t.ApprovalDetails.TransferInfo.Type == 6 ? {
                  expenses: new n.common.services.InterbankOnlineJobExpensesService(this.qService, this.transferService),
                  validation: new n.common.services.InterbankOnlineJobValidationService(this.transferService, this.securityService, this.stringService, this.profileProductsService, this.qService)
                }
                 : null
              },
              function (t) {
                return t.ApprovalDetails.Type === 1 && t.ApprovalDetails.TransferInfo.Type == 1 ? {
                  expenses: new n.common.services.InterbankJobExpensesService(this.qService, this.transferService)
                }
                 : null
              },
              function (t) {
                return t.ApprovalDetails.Type === 1 && [
                  10,
                  11
                ].some(function (n) {
                  return n === t.ApprovalDetails.TransferInfo.Type
                }) ? {
                  expenses: new n.common.services.SimpleImportsExpensesService(this.qService, this.transferService, this.lookupService),
                  model: new n.model.SimpleImportsExecutionInfo(t),
                  views: [
                    'Templates/Features/jobs/PendingApprovals/simple-imports-step1',
                    'Templates/Features/jobs/PendingApprovals/default-step2'
                  ]
                }
                 : null
              },
              function (t) {
                return t.ApprovalDetails.Type === 1 && t.ApprovalDetails.TransferInfo.Type === 0 && t.ApprovalDetails.TransferInfo.IsCrossCurrency ? {
                  expenses: new n.common.services.CrossCurrencyExpensesService(this.qService, this.queriesService, this.crossCurrencyService),
                  model: new n.model.CrossCurrencyJobExecutionInfo,
                  views: [
                    'Templates/Features/jobs/PendingApprovals/cross-currency-step1',
                    'Templates/Features/jobs/PendingApprovals/cross-currency-step2'
                  ]
                }
                 : null
              }
            ]
          }
          return i.prototype.getExpensesService = function (n, t) {
            return this.getConfig(n, t).expenses
          },
          i.prototype.getModel = function (n, t) {
            return this.getConfig(n, t).model
          },
          i.prototype.getViews = function (n, t) {
            return this.getConfig(n, t).views
          },
          i.prototype.getValidationService = function (n, t) {
            return this.getConfig(n, t).validation
          },
          i.prototype.get = function (n, t) {
            return this.getConfig(n, t)
          },
          i.prototype.getConfig = function (i, r) {
            var e = {
              expenses: new t.SpecialCaseJobExpensesService(this.qService),
              model: new n.model.JobExecutionInfo,
              views: [
                'Templates/Features/jobs/PendingApprovals/default-step1',
                'Templates/Features/jobs/PendingApprovals/default-step2'
              ],
              validation: new t.BaseJobValidationService(this.securityService, this.stringService, this.profileProductsService, this.qService)
            },
            u = null,
            f = 0,
            o = this.approvalMapping.length;
            do u = this.approvalMapping[f].apply(this, [
              i,
              r
            ]),
            f++;
            while (null == u && f < o);
            return n.utils.merge(e, u || {
            })
          },
          i.$inject = [
            '$q',
            'TransfersService',
            'QueriesService',
            'ProfileProductsService',
            'ProductMatchingService',
            'LookupsService',
            'CrossCurrencyModelDecorator',
            'STRINGS',
            'SecurityService'
          ],
          i
        }();
        n.commonServices.service('JobExecutionAbstractFactory', i)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  }));
  JobInfoUtils = function () {
    function n() {
    }
    return n.isFirstApproval = function (n) {
      return n.ApprovalLevel === n.PendingApprovals
    },
    n
  }(),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var o = function () {
          function t(n, t) {
            this.qService = n;
            this.transferService = t
          }
          return t.prototype.set = function (t, i) {
            var r = this,
            u = {
              Amount: t.TotalAmount.Value,
              Currency: t.TotalAmount.Currency,
              ExpensesServiceType: 12,
              FeeType: i.FeeType,
              CreditAccountNumber: t.Transactions[0].CreditProduct,
              CreditAccountType: t.Transactions[0].CreditProductTypeID,
              DebitAccountNumber: t.Transactions[0].DebitProduct,
              DebitAccountType: t.Transactions[0].DebitProductType,
              AUN: t.Transactions[0].TransactionAUN,
              Country: 'GR',
              BICCode: t.Transactions[0].Details.filter(function (t) {
                return t.Name == n.server.DetailName.BIC_CODE
              }) [0].Value
            };
            return this.transferService.GetAndUpdateTransferExpenses(u).then(function (n) {
              return 0 === n.ResultCode ? (i.FinalFees = n.Fees, !0)  : r.qService.reject(n.Error.Message)
            })
          },
          t
        }(),
        i,
        r,
        u,
        f,
        e;
        t.InterbankOnlineJobExpensesService = o;
        i = function () {
          function n(n, t) {
            this.qService = n;
            this.transferService = t
          }
          return n.prototype.set = function (n, t) {
            var i = this,
            r = {
              Amount: n.TotalAmount.Value,
              Currency: n.TotalAmount.Currency,
              ExpensesServiceType: 2,
              FeeType: t.FeeType,
              CreditAccountNumber: n.Transactions[0].CreditProduct,
              CreditAccountType: n.Transactions[0].CreditProductTypeID,
              DebitAccountNumber: n.Transactions[0].DebitProduct,
              DebitAccountType: n.Transactions[0].DebitProductType,
              AUN: n.Transactions[0].TransactionAUN
            };
            return this.transferService.GetAndUpdateTransferExpenses(r).then(function (n) {
              return 0 === n.ResultCode ? (t.HasErrors = !1, t.FinalFees = n.Fees, !0)  : (t.HasErrors = !0, t.ErrorMessage = n.Error.Message, i.qService.reject(n.Error.Message))
            })
          },
          n
        }();
        t.InterbankJobExpensesService = i;
        r = function () {
          function t(n, t, i) {
            this.qService = n;
            this.transferService = t;
            this.lookupService = i
          }
          return t.prototype.set = function (t, i) {
            var r = this,
            f = t.Transactions[0].Details.filter(function (t) {
              return t.Name === n.server.DetailName.BIC_CODE
            }) [0],
            u = t.Transactions[0].Details.filter(function (t) {
              return t.Name === n.server.DetailName.SICOM_MERCH_COUNTRY
            }) [0],
            e = t.Transactions[0].Details.filter(function (t) {
              return t.Name === n.server.DetailName.SICOM_URGENT_FLAG
            }) [0],
            o = '1' === e.Value ? !0 : !1,
            s = i.InAlpha ? 10 : 9;
            return this.lookupService.getCountries().then(function (n) {
              return n.filter(function (n) {
                return n.CountryIso === u.Value || n.Name === u.Value
              }) [0]
            }).then(function (n) {
              var u = {
                DebitAccountNumber: t.Transactions[0].DebitProduct,
                DebitAccountType: t.Transactions[0].DebitProductType,
                ExpensesServiceType: s,
                CreditAccountNumber: t.Transactions[0].CreditProduct,
                CreditAccountType: 0,
                Amount: t.TotalAmount.Value,
                Currency: t.TotalAmount.Currency,
                FeeType: i.FeeType,
                Urgent: o,
                Country: n.CountryIso,
                AUN: t.Transactions[0].TransactionAUN,
                BICCode: f.Value
              };
              return r.transferService.GetAndUpdateTransferExpenses(u)
            }).then(function (n) {
              return 0 === n.ResultCode ? (i.FinalFees = n.Fees, !0)  : r.qService.reject(n.Error.Message)
            }).catch (function (n) {
              return r.qService.reject(n.Error.Message)
            })
          },
          t
        }();
        t.SimpleImportsExpensesService = r;
        u = function () {
          function t(n, t, i) {
            this.qService = n;
            this.queriesService = t;
            this.crossCurrencyService = i
          }
          return t.prototype.set = function (t, i) {
            var r = this,
            u = {
              InCurrency: t.Transactions[0].DebitProductCurrency,
              OutCurrency: t.Transactions[0].CreditProductCurrency,
              Amount: t.TotalAmount.Value,
              AmountPosition: t.Transactions[0].DebitProductCurrency === t.TotalAmount.Currency ? 1 : 0
            };
            return this.queriesService.getRates(u).then(function (u) {
              var f = [
                {
                  text: n.server.Currency[t.Transactions[0].DebitProductCurrency],
                  value: t.Transactions[0].DebitProductCurrency
                },
                {
                  text: n.server.Currency[t.Transactions[0].CreditProductCurrency],
                  value: t.Transactions[0].CreditProductCurrency
                }
              ];
              return r.crossCurrencyService.updateCurrencyInfo(i, t.TotalAmount.Value, u, t.TotalAmount.Currency, f),
              r.qService.when(!0)
            })
          },
          t
        }();
        t.CrossCurrencyExpensesService = u;
        f = function () {
          function t(n, t, i, r, u) {
            this.qService = n;
            this.transferService = t;
            this.queriesService = i;
            this.profileProductsService = r;
            this.productMatchingService = u
          }
          return t.prototype.set = function (t, i) {
            var r = this;
            return i.FeeType = 0,
            this.profileProductsService.getLocalProductByProductId(t.Transactions[0].DebitProductID, n.server.CategoryGroupType.ACCOUNT, n.server.ProductRequestType.DebitAccounts, !0).then(function (u) {
              i.DebitProduct = u;
              var f = r.queriesService.getRates({
                InCurrency: null != u ? u.CurrencyEnum : t.TotalAmount.Currency,
                OutCurrency: t.TotalAmount.Currency,
                Amount: t.TotalAmount.Value
              }),
              e = {
                Amount: t.TotalAmount.Value,
                Currency: t.TotalAmount.Currency,
                ExpensesServiceType: 8,
                FeeType: 0,
                CreditAccountNumber: t.Transactions[0].CreditProduct,
                CreditAccountType: t.Transactions[0].CreditProductTypeID,
                DebitAccountNumber: t.Transactions[0].DebitProduct,
                DebitAccountType: t.Transactions[0].DebitProductType,
                AUN: t.Transactions[0].TransactionAUN,
                Country: t.Transactions[0].Details.filter(function (t) {
                  return t.Name == n.server.DetailName.CountryISOCode
                }) [0].Value,
                BICCode: t.Transactions[0].Details.filter(function (t) {
                  return t.Name == n.server.DetailName.BIC_CODE
                }) [0].Value
              },
              o = r.transferService.GetAndUpdateTransferExpenses(e);
              return r.qService.all({
                rates: f,
                expenses: o
              })
            }).then(function (n) {
              i.FinalFees = n.expenses.Fees;
              i.Rates = n.rates;
              var u = {
                BuyRate_IN: n.rates.BuyRate,
                DebiCurrencyAmount: n.rates.AmountInCurrency,
                DebitAccountCurrency: i.DebitProduct.CurrencyEnum,
                Fees: n.expenses.Fees,
                MTFRate_IN: n.rates.BaseRate,
                OrderAmount: t.TotalAmount.Value,
                OrderAmountCurrency: t.TotalAmount.Currency,
                SellRate_OUT: n.rates.SellRate
              };
              return r.transferService.AmountAnalysis(u)
            }).then(function (n) {
              return i.AmountAnalysis = n,
              !0
            }).catch (function (n) {
              return r.qService.reject(n.Error.Message)
            })
          },
          t
        }();
        t.InternationalJobExpensesService = f;
        e = function () {
          function n(n) {
            this.qService = n
          }
          return n.prototype.set = function () {
            return this.qService.when(!0)
          },
          n
        }();
        t.SpecialCaseJobExpensesService = e
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  }));
  __extends = this && this.__extends || function () {
    var n = Object.setPrototypeOf || {
      __proto__: [
      ]
    }
    instanceof Array && function (n, t) {
      n.__proto__ = t
    }
    || function (n, t) {
      for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
    };
    return function (t, i) {
      function r() {
        this.constructor = t
      }
      n(t, i);
      t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
    }
  }(),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var u = function () {
          function n(n) {
            this.qService = n
          }
          return n.prototype.validate = function () {
            var n = this.qService.defer();
            return n.resolve(),
            n.promise
          },
          n
        }(),
        i,
        r;
        t.SpecialCaseJobValidationService = u;
        i = function () {
          function t(n, t, i, r) {
            this.securityService = n;
            this.stringService = t;
            this.profileProductsService = i;
            this.qService = r;
            this.isDeclared = !1
          }
          return t.prototype.validate = function (t, i) {
            var r = this,
            u = t.Transactions[0].CreditProduct;
            return this.securityService.getUserSessionInfo().then(function (f) {
              var e = f.UserInfo.Role === 5 && [
                8
              ].indexOf(t.Category) >= 0 && [
                16
              ].indexOf(t.SubCategory) >= 0 ? r.profileProductsService.getProductByTypeAndCode(n.server.ProductRequestType.AllCards, u)  : r.qService.when(null);
              return e.then(function (n) {
                var u = f.OTPStatus === 2 && (t.ApprovalDetails.ApprovalBehavior.SubmitOtp || t.ApprovalLevel - t.PendingApprovals == 0 && [
                  11,
                  400,
                  4001
                ].indexOf(t.SubCategory) >= 0 || f.UserInfo.Role === 5 && [
                  8
                ].indexOf(t.Category) >= 0 && [
                  16
                ].indexOf(t.SubCategory) >= 0 && n == null);
                u && (i.HasErrors = i.InitializationErrors = !0, i.ErrorMessage = r.stringService.noOtpMessage);
                return
              })
            })
          },
          t
        }();
        t.BaseJobValidationService = i;
        r = function (t) {
          function i(n, i, r, u, f) {
            var e = t.call(this, i, r, u, f) || this;
            return e.transferService = n,
            e
          }
          return __extends(i, t),
          i.prototype.validate = function (i, r) {
            var u = this;
            return t.prototype.validate.call(this, i, r).then(function () {
              var t = i.Transactions[0].Details.filter(function (t) {
                return t.Name === n.server.DetailName.BENEFICIARY_NAME
              }) [0].Value,
              f = i.Transactions[0].Details.filter(function (t) {
                return t.Name === n.server.DetailName.BIC_CODE
              }) [0].Value;
              return u.transferService.CheckFTSPayment(i.TotalAmount.Value, i.TotalAmount.Currency, i.Transactions[0].CreditProduct, '', t, f, 'GR', '', !0).then(function (n) {
                1 === n.ResultCode && (r.HasErrors = r.InitializationErrors = !0, r.ErrorMessage = n.Error.Message);
                return
              })
            })
          },
          i
        }(i);
        t.InterbankOnlineJobValidationService = r
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        var t = function () {
          function t() {
            this.mapping = {
              0: function (t) {
                return new n.model.AccountProduct(t)
              },
              1: function (t) {
                return new n.model.CardProduct(t)
              },
              2: function (t) {
                return new n.model.LoanProduct(t)
              }
            }
          }
          return t.prototype.convert = function (t, i) {
            var u = [
              n.server.CategoryGroupType.MUTUAL,
              n.server.CategoryGroupType.TIME_DEPOSITE,
              n.server.CategoryGroupType.STOCK,
              n.server.CategoryGroupType.PRIME_PRIVATE,
              n.server.CategoryGroupType.INVESTMENT
            ],
            r = u.indexOf(i) >= 0 ? new n.model.InvestmentProduct(t)  : this.mapping[i](t);
            return r.CategoryGroupType = i,
            r
          },
          t
        }();
        n.services.service('LocalProductBaseFactory', t)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = function () {
          function n(n, t) {
            this.baseFactory = n;
            this.isOnline = t
          }
          return n.prototype.getModel = function (n, t) {
            var i = this.baseFactory.getModel(n, t);
            return this.updateModel(i),
            i
          },
          n.prototype.getExpensesService = function (n, t) {
            return this.baseFactory.getExpensesService(n, t)
          },
          n.prototype.getViews = function (n, t) {
            return this.baseFactory.getViews(n, t)
          },
          n.prototype.getValidationService = function (n, t) {
            return this.baseFactory.getValidationService(n, t)
          },
          n.prototype.get = function (n, t) {
            var i = this.baseFactory.get(n, t);
            return this.updateModel(i.model),
            i
          },
          n.prototype.updateModel = function (n) {
            !this.isOnline && n && (n.CanBlockAmount = n.BlockAmount = !1)
          },
          n
        }();
        n.OnlineJobExecutionFactoryDecorator = t
      }) (t = n.services || (n.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        var t = function () {
          function t(n) {
            this.profileProductsService = n
          }
          return t.prototype.match = function (t, i, r) {
            var u = t.filter(function (t) {
              return n.utils.isUndefinedOrNullorWhiteSpace(r) ? t.Code === i : t.BankProduct.ProductID === r
            });
            return u.length ? u[0] : null
          },
          t.$inject = [
            'ProfileProductsService'
          ],
          t
        }();
        n.commonServices.service('ProductMatchingService', t)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  }));
  __extends = this && this.__extends || function () {
    var n = Object.setPrototypeOf || {
      __proto__: [
      ]
    }
    instanceof Array && function (n, t) {
      n.__proto__ = t
    }
    || function (n, t) {
      for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
    };
    return function (t, i) {
      function r() {
        this.constructor = t
      }
      n(t, i);
      t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
    }
  }(),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        var t = function (t) {
          function i(n, i, r, u, f, e, o, s) {
            var h = t.call(this, n, i, r, u, f, e, o) || this;
            return h.QService = n,
            h.localProductFactory = s,
            h
          }
          return __extends(i, t),
          i.prototype.getCachedFilteredProductsByRequestType = function (t, i, r) {
            var u = this.getProductsByProductRequestType(this.CachingService.getCachedProducts(i), r),
            e = [
            ],
            f;
            if (n.utils.isUndefinedOrNullorWhiteSpace(t)) e = u;
             else if (u) for (f in u) u[f].CachedProductRequestType && u[f].CachedProductRequestType.indexOf(r) != - 1 && (u[f].Code.toLowerCase().indexOf(t.toLowerCase()) != - 1 || u[f].Title.toLowerCase().indexOf(t.toLowerCase()) != - 1) && e.push(u[f]);
            return e
          },
          i.prototype.getFilteredProducts = function (t, i) {
            var r = this.CachingService.getCachedProducts(i),
            f = [
            ],
            u;
            if (n.utils.isUndefinedOrNullorWhiteSpace(t)) f = r;
             else if (r) for (u in r) (r[u].Code.toLowerCase().indexOf(t.toLowerCase()) != - 1 || r[u].Title.toLowerCase().indexOf(t.toLowerCase()) != - 1) && f.push(r[u]);
            return f
          },
          i.prototype.getProductsByProductRequestType = function (n, t) {
            var r,
            i;
            if (n) {
              r = [
              ];
              for (i in n) n[i].CachedProductRequestType && n[i].CachedProductRequestType.indexOf(t) != - 1 && r.push(n[i]);
              return r
            }
            return []
          },
          i.prototype.getProductWithProductId = function (t, i, r, u) {
            var e = this,
            f = this.CachingService.getCachedProductById(t, i);
            return f && (!u || u && !n.utils.isUndefinedOrNull(f.Currency)) ? this.QService.when(f)  : this.getLargeProfileProductsWithId({
              RequestIDs: {
                IDs: t.toString()
              },
              ResponseDetails: {
                ReturnOperationalGroups: !0,
                ReturnOperationalGroupsSpecified: !0,
                ReturnProductDetails: !0,
                ReturnProductDetailsSpecified: !0,
                ReturnUses: !0,
                ReturnUsesSpecified: !0
              },
              ReturnMode: 1
            }, i, r, !1).then(function (n) {
              return n.Products && n.Products.length == 1 ? (e.CachingService.addToCache(n, null, i, r), n.Products[0])  : null
            })
          },
          i.prototype.getLocalProductByProductId = function (t, i, r, u) {
            var f = this;
            return this.getProductWithProductId(t, i, r, u).then(function (t) {
              return n.utils.isUndefinedOrNull(t) ? null : f.localProductFactory.convert(t, i)
            })
          },
          i.prototype.getAccountsByIDs = function (t) {
            var i = {
              RequestIDs: {
                IDs: t.filter(function (t) {
                  return !n.utils.isUndefinedOrNull(t)
                }).join(',').toString()
              },
              ReturnMode: 1,
              ResponseDetails: {
                ReturnOperationalGroups: !0,
                ReturnOperationalGroupsSpecified: !0,
                ReturnProductDetails: !0,
                ReturnProductDetailsSpecified: !0,
                ReturnUses: !0,
                ReturnUsesSpecified: !0
              }
            };
            return this.ProductService.getProfileProductsNew(i, !0).then(function (t) {
              var r = [
              ],
              i;
              if (!n.utils.isUndefinedOrNull(t.Products)) for (i = 0; i < t.Products.length; ++i) r[i] = new n.model.AccountProduct(t.Products[i]);
              return r
            })
          },
          i.prototype.getAccountByCodeCorporate = function (t, i) {
            var r = {
              ReturnMode: 1,
              RequestCriteria: {
                MaxRecords: 1,
                MaxRecordsSpecified: !0,
                ProductTypes: [
                  i
                ],
                SearchStringInfo: {
                  SearchTerm: t,
                  SearchField: 2,
                  SearchFieldSpecified: !0
                }
              },
              ResponseDetails: {
                ReturnUses: !0,
                ReturnUsesSpecified: !0
              }
            };
            return this.getLargeProfileProducts(r, n.server.CategoryGroupType.ACCOUNT, i, !0, !1)
          },
          i.$inject = [
            '$q',
            'ProductsService',
            'SecurityService',
            'AppEventsService',
            'QueriesService',
            'RoleService',
            'CachingService',
            'LocalProductBaseFactory'
          ],
          i
        }(n.common.services.ProfileProductsService);
        n.services.service('ProfileProductsService', t)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      var i;
      (function () {
        var t = function () {
          function n(n) {
            this.documentUploadServiceProxy = n;
            this.baseUrl = 'api/DocumentUpload.svc'
          }
          return n.prototype.GetConfirmContactDetailStatus = function () {
            return this.documentUploadServiceProxy.confirmContactDetailStatus({
            })
          },
          n.prototype.GetUserDocumentApplications = function () {
            return this.documentUploadServiceProxy.getUserDocumentApplications({
            })
          },
          n.prototype.DocUploadActionsTypesRelations = function () {
            return this.documentUploadServiceProxy.docUploadActionsTypesRelations({
            })
          },
          n.prototype.GetCDICustomerData = function () {
            return this.documentUploadServiceProxy.getCDICustomerData({
            })
          },
          n.prototype.DocUploadCustomerInformation = function () {
            return this.documentUploadServiceProxy.docUploadCustomerInformation({
            })
          },
          n.$inject = [
            'DocumentUploadServiceProxy'
          ],
          n
        }();
        n.commonServices.service('DocumentUploadService', t)
      }) (i = t.services || (t.services = {
      }))
    }) (t = n.common || (n.common = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      'use strict';
      t.mainModule = angular.module('alpha.accounts', [
        'alpha',
        'alpha.services'
      ]);
      t.mainModule.config(['$stateProvider',
      '$urlRouterProvider',
      function (t, i) {
        i.when('/accounts/details/:id', '/accounts/details/:id/');
        i.when('/accounts/chequebooks', '/accounts/chequebooks/');
        t.state('root.accounts', {
          abstract: !0,
          url: '/accounts',
          template: '<div data-ui-view=""></div>',
          resolve: {
            products: [
              'ProfileProductsService',
              function (n) {
                return n.getEnquiryAccounts()
              }
            ],
            otherBankProducts: [
              'ProfileProductsService',
              function (n) {
                return n.getSelectedOtherBankAccounts()
              }
            ]
          }
        }).state(n.constants.stateNames.accountListState, {
          url: '?isOauthCallbackRedirect',
          templateUrl: 'Templates/Features/Accounts/accounts',
          controller: 'AccountsController as vm'
        }).state(n.constants.stateNames.otherBankAccountDetailsState, {
          templateUrl: 'Templates/Features/Accounts/otherBankAccountDetails',
          controller: 'OtherBankProductDetailsController as vm',
          url: '/otherBank/details/:id?isOauthCallbackRedirect',
          resolve: {
            product: [
              'ProductsService',
              '$stateParams',
              'ProfileProductsService',
              '$q',
              function (n, t, i, r) {
                var u = t.id;
                return i.getAccount(u).then(function (n) {
                  return n ? r.when(n)  : r.reject('ProductNotFound')
                }, function (n) {
                  console.log(n)
                })
              }
            ]
          }
        }).state(n.constants.stateNames.otherBankAccountTransactionsState, {
          templateUrl: 'Templates/common/otherBankDetailsTransactions',
          controller: 'OtherBankAccountTransactionsController as vm',
          url: '/',
          resolve: {
            statementsResponse: [
              '$q',
              'OtherBankProductsService',
              '$stateParams',
              'product',
              function (t, i, r, u) {
                if (u) {
                  var f = n.utils.SubtractMonths(new Date, 3).addDays(1),
                  e = (new Date).toISOString().split('T') [0],
                  o = f.toISOString().split('T') [0],
                  s = {
                    FromDate: o,
                    ToDate: e,
                    PageSize: 10
                  };
                  return i.getProductTransactions(u.OtherBankTypeId, 1, u.Code, u.OtherBankProductId, u.OtherBankProductIdentifier, s)
                }
                return t.reject('ProductNotFound')
              }
            ]
          }
        }).state('root.accounts.details.transactions', {
          templateUrl: 'Templates/Features/Accounts/detailsTransactions',
          controller: 'AccountsTransactionsController as vm',
          url: '/',
          resolve: {
            statementsResponse: [
              '$q',
              'ProductsService',
              '$stateParams',
              'product',
              function (n, t, i, r) {
                return r ? t.getAccountStatements(r.Code, r.TypeID, 10, !0)  : n.reject('ProductNotFound')
              }
            ]
          }
        }).state('root.accounts.details.statements', {
          templateUrl: 'Templates/Features/Accounts/detailsEStatements',
          controller: 'AccountEStatementsController as vm',
          url: '/statements',
          resolve: {
            estatementsResponse: [
              'ProductsService',
              '$stateParams',
              'product',
              function (n, t, i) {
                return n.getAccountEStatements({
                  ProductCode: i.Code,
                  ProductTypeID: i.TypeID
                })
              }
            ]
          }
        }).state('root.accounts.details.cheques', {
          templateUrl: 'Templates/Features/Accounts/detailsCheques',
          controller: 'AccountsChequesController as vm',
          url: '/cheques',
          resolve: {
            cheques: [
              'ProductsService',
              '$stateParams',
              'product',
              function (n, t, i) {
                return n.getChequeStatus({
                  ProductCode: i.Code,
                  ProductTypeID: i.TypeID,
                  MaxRecords: 10,
                  ReturnChequeBooksInfo: !0
                })
              }
            ]
          }
        }).state('root.accounts.details.incomingOrders', {
          templateUrl: 'Templates/Features/Accounts/detailsIncomingOrders',
          controller: 'AccountsIncomingOrdersController as vm',
          url: '/incomingOrders',
          resolve: {
            incomingOrders: [
              'ProductsService',
              '$stateParams',
              'product',
              function (n, t, i) {
                return n.getIncomingOrders(i.Code, i.TypeID, 10)
              }
            ],
            currenciesLookup: [
              'LookupsService',
              function (n) {
                return n.getCurrenciesForQueries()
              }
            ],
            appLocale: [
              '$document',
              'LanguageService',
              function (n, t) {
                return t.getLanguage()
              }
            ]
          }
        }).state('root.accounts.details.blocks', {
          templateUrl: 'Templates/Features/Accounts/detailsBlocks',
          controller: 'AccountsBlocksController as vm',
          url: '/blocks',
          resolve: {
            blocksResponse: [
              'QueriesService',
              '$stateParams',
              'product',
              function (n, t, i) {
                return n.getProductBlocks({
                  DebitProductCode: i.Code,
                  DebitProductType: i.TypeID,
                  MaxRecords: 10
                })
              }
            ]
          }
        }).state('root.accounts.unblock', {
          url: '/unblock',
          templateUrl: 'Templates/Features/Accounts/r_AlphaPhone/block-unblock-account-wrapper',
          controller: 'BlockAccountController as vm',
          resolve: {
            debitAccounts: [
              'ProfileProductsService',
              function (t) {
                return t.getAccountsByRequestType(n.server.ProductRequestType.DebitAccounts)
              }
            ],
            otpHandler: [
              'OtpHandlerService',
              'RoleService',
              function (n) {
                return n.retrieveHandler(35, {
                  payload: null,
                  uiContext: {
                    isNewScreen: !0
                  }
                })
              }
            ]
          }
        }).state('root.accounts.details.withheld', {
          templateUrl: 'Templates/Features/Accounts/detailsHolds',
          controller: 'AccountsHoldsController as vm',
          url: '/holds',
          resolve: {
            holdsResponse: [
              'QueriesService',
              '$stateParams',
              'product',
              function (n, t, i) {
                return n.getProductHolds({
                  DebitProductCode: i.Code,
                  DebitProductType: i.TypeID,
                  MaxRecords: 10
                })
              }
            ]
          }
        }).state('root.accounts.details.unclear', {
          templateUrl: 'Templates/Features/Accounts/detailsUnclears',
          controller: 'AccountsUnclearController as vm',
          url: '/unclear',
          resolve: {
            unclearsResponse: [
              'QueriesService',
              '$stateParams',
              'product',
              function (n, t, i) {
                return n.getProductUnclears({
                  DebitProductCode: i.Code,
                  DebitProductType: i.TypeID,
                  MaxRecords: 10
                })
              }
            ]
          }
        }).state(n.constants.stateNames.settingsAddAccountOtherBankInOtherBankAccountsState, {
          url: '/add/{productTypeFamily}/otherbank?isOauthCallbackRedirect',
          templateUrl: 'Templates/Features/Profile/Product-otherbank-add/add-wrapper',
          controller: 'ProductOtherBankAddController as vm',
          resolve: {
            product: [
              function () {
                var t = new n.model.AccountProduct({
                });
                return t.CategoryGroupType = n.server.CategoryGroupType.ACCOUNT,
                t.BankProduct.Uses = [
                ],
                t.BankProduct.Details = [
                ],
                t
              }
            ],
            productTypeFamily: [
              '$stateParams',
              function (t) {
                var i = t.productTypeFamily;
                return n.server.ProductTypeFamily[i[0].toUpperCase() + i.substring(1)]
              }
            ],
            otherBanks: [
              'OtherBankProductsService',
              function (t) {
                return t.getOtherBanks(n.server.ProductRequestType.Banks)
              }
            ],
            userSessionInfo: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ],
            userProfileAccounts: [
              'ProfileProductsService',
              function (n) {
                return n.getAccounts()
              }
            ],
            userProfileCards: [
              'ProfileProductsService',
              function (n) {
                return n.getCards()
              }
            ]
          }
        }).state(n.constants.stateNames.settingsAddAccountInAccountsState, {
          url: '/add/{productTypeFamily}/{productTypeScope}/{key}',
          templateUrl: 'Templates/Features/Profile/Product-add/add-wrapper',
          controller: 'ProductAddController as vm',
          resolve: {
            product: [
              function () {
                var t = new n.model.AccountProduct({
                });
                return t.CategoryGroupType = n.server.CategoryGroupType.ACCOUNT,
                t.BankProduct.Uses = [
                ],
                t.BankProduct.Details = [
                ],
                t
              }
            ],
            productTypeFamily: [
              '$stateParams',
              function (t) {
                var i = t.productTypeFamily;
                return n.server.ProductTypeFamily[i[0].toUpperCase() + i.substring(1)]
              }
            ],
            productTypeScope: [
              '$stateParams',
              function (t) {
                var i = t.productTypeScope;
                return n.server.ProductTypeScope[i[0].toUpperCase() + i.substring(1)]
              }
            ],
            greekBanks: [
              'LookupsService',
              function (n) {
                return n.getBanks()
              }
            ],
            loanTypes: function () {
              return null
            },
            countries: [
              'LookupsService',
              function (n) {
                return n.getCountries()
              }
            ],
            userSessionInfo: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ],
            otpHandler: [
              'OtpHandlerService',
              'ProfileProductsService',
              'product',
              'productTypeScope',
              'RoleService',
              function (t, i, r, u, f) {
                var e = {
                  payload: i.buildAddProductModel(r),
                  uiContext: {
                    isNewScreen: !0
                  }
                };
                return u === (f.IsRetail() && n.server.ProductTypeScope.Local) ? t.retrieveHandler(4, e)  : t.activatedHandler(4, e)
              }
            ]
          }
        }).state('root.accounts.chequebook', {
          url: '/chequebooks',
          templateUrl: 'Templates/Features/Accounts/Chequebooks/chequebook-wrapper'
        }).state('root.accounts.block', {
          url: '/block',
          templateUrl: 'Templates/Features/Accounts/r_AlphaPhone/block-unblock-account-wrapper',
          controller: 'BlockAccountController as vm',
          resolve: {
            debitAccounts: [
              'ProfileProductsService',
              function (t) {
                return t.getAccountsByRequestType(n.server.ProductRequestType.DebitAccounts)
              }
            ],
            otpHandler: [
              'OtpHandlerService',
              'RoleService',
              function (n) {
                return n.retrieveHandler(34, {
                  payload: null,
                  uiContext: {
                    isNewScreen: !0
                  }
                })
              }
            ]
          }
        }).state('root.accounts.chequebook.list', {
          url: '/',
          templateUrl: 'Templates/Features/Accounts/Chequebooks/chequebooks-list',
          controller: 'ChequebookController as vm',
          resolve: {
            chequebooksResponse: [
              'ProductsService',
              function (n) {
                return n.getChequebooks().then(function (n) {
                  return n
                })
              }
            ]
          }
        }).state('root.accounts.chequebook.new', {
          url: '/order-new',
          templateUrl: 'Templates/Features/Accounts/Chequebooks/new-chequebook-wrapper',
          controller: 'OrderChequebookController as vm',
          resolve: {
            debitAccounts: [
              'ProfileProductsService',
              function (t) {
                return t.getAccountsByRequestType(n.server.ProductRequestType.AccountsForChequeBooks)
              }
            ]
          }
        })
      }
      ])
    }) (t = n.accounts || (n.accounts = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      'use strict';
      t.mainModule = angular.module('alpha.cards', [
        'alpha',
        'alpha.services'
      ]);
      t.mainModule.config(['$stateProvider',
      '$urlRouterProvider',
      function (i, r) {
        r.when('/cards/details/:id', '/cards/details/:id/');
        r.when('/cards/alpha-bonus', '/cards/alpha-bonus/cards');
        r.when('/cards/prepaid', [
          '$state',
          function (n) {
            n.go('root.cards.prepaid.load')
          }
        ]);
        i.state('root.cards', {
          abstract: !0,
          url: '/cards',
          template: '<div data-ui-view=""></div>',
          resolve: {
            otherBankProducts: [
              'ProfileProductsService',
              'RoleService',
              function (n, t) {
                return n.getSelectedOtherBankCards().then(function (n) {
                  return t.IsRetail() || n.forEach(function (n) {
                    n.Actions = n.Actions.filter(function (n) {
                      return n.stateName != 'root.transfers.new.intrabank'
                    })
                  }),
                  n
                })
              }
            ]
          }
        }).state('root.cards.list', {
          url: '?isOauthCallbackRedirect',
          templateUrl: 'Templates/Features/Cards/cards',
          controller: 'CardsController as vm',
          resolve: {
            products: [
              'ProfileProductsService',
              'RoleService',
              function (n, t) {
                return n.getEnquiryCards().then(function (n) {
                  return t.IsRetail() || n.forEach(function (n) {
                    n.Actions = n.Actions.filter(function (n) {
                      return n.stateName != 'root.transfers.new.intrabank'
                    })
                  }),
                  n
                })
              }
            ]
          }
        }).state(n.constants.stateNames.otherBankCardDetailsState, {
          templateUrl: 'Templates/Features/Cards/otherBankCardDetails',
          controller: 'OtherBankProductDetailsController as vm',
          url: '/otherBank/details/:id?isOauthCallbackRedirect',
          resolve: {
            product: [
              'ProductsService',
              '$stateParams',
              'ProfileProductsService',
              '$q',
              function (n, t, i, r) {
                var u = t.id;
                return i.getCard(u).then(function (n) {
                  return n ? r.when(n)  : r.reject('ProductNotFound')
                }, function (n) {
                  console.log(n)
                })
              }
            ]
          }
        }).state(n.constants.stateNames.otherBankCardTransactionsState, {
          templateUrl: 'Templates/common/otherBankDetailsTransactions',
          controller: 'OtherBankCardTransactionsController as vm',
          url: '/',
          resolve: {
            statementsResponse: [
              '$q',
              'OtherBankProductsService',
              'product',
              function (t, i, r) {
                if (r) {
                  var u = n.utils.SubtractMonths(new Date, 3).addDays(1),
                  f = (new Date).toISOString().split('T') [0],
                  e = u.toISOString().split('T') [0],
                  o = {
                    FromDate: e,
                    ToDate: f,
                    PageSize: 10
                  };
                  return i.getProductTransactions(r.OtherBankTypeId, 2, r.Code, r.OtherBankProductId, r.OtherBankProductIdentifier, o)
                }
                return t.reject('ProductNotFound')
              }
            ]
          }
        }).state('root.cards.details', {
          url: '/details/:id',
          templateUrl: 'Templates/Features/Cards/carddetails',
          controller: 'ProductDetailsController as vm',
          resolve: {
            products: [
              'ProfileProductsService',
              function (n) {
                return n.getEnquiryCards()
              }
            ],
            cdiNumber: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo().then(function (n) {
                  return n.CDINumber
                })
              }
            ],
            myBonus: [
              'ProductsServiceProxy',
              'cdiNumber',
              function (n, t) {
                return n.getCardBonusSecure({
                  CDI: t
                }).then(function (n) {
                  return n
                }, function () {
                  return null
                })
              }
            ],
            product: [
              'products',
              '$stateParams',
              'ProductsService',
              'ProfileProductsService',
              '$q',
              'RoleService',
              'myBonus',
              function (t, i, r, u, f, e, o) {
                var s = i.id;
                return u.getCard(s).then(function (t) {
                  var i,
                  r;
                  return t.LoyaltyScheme == 1 && (!n.utils.isUndefinedOrNull(o) && o.AccountCards.length > 0 ? (i = o.AccountCards.filter(function (n) {
                    return n.CardsName == t.Code
                  }), !n.utils.isUndefinedOrNull(i) && i.length > 0 ? (r = parseInt(o.TotalPoints), isNaN(r) || (t.LoyaltyPoints = r))  : t.LoyaltyPoints = - 1)  : t.LoyaltyPoints = - 1),
                  e.IsRetail() || (t.Actions = t.Actions.filter(function (n) {
                    return n.stateName != 'root.transfers.new.intrabank'
                  })),
                  t ? u.getCachedCardBalance(t)  : f.reject('ProductNotFound')
                }, function (n) {
                  console.log(n)
                })
              }
            ]
          },
          data: {
          }
        }).state('root.cards.details.transactions', {
          templateUrl: 'Templates/Features/Cards/detailsTransactions',
          controller: 'CardsTransactionsController as vm',
          url: '/',
          resolve: {
            statementsResponse: [
              'product',
              'ProductsService',
              function (n, t) {
                return t.getCardStatements({
                  ProductCode: n.Code,
                  ProductTypeID: n.TypeID,
                  ProductID: n.BankProduct.ProductID
                }).then(function (t) {
                  return n.IsMainCard || (n.Balance = n.Balance || {
                  }, n.Balance.FirstName = t.FirstName, n.Balance.LastName = t.LastName),
                  t
                })
              }
            ]
          }
        }).state('root.cards.details.statements', {
          templateUrl: 'Templates/Features/Cards/detailsEStatements',
          controller: 'CardsEStatementsController as vm',
          url: '/statements',
          resolve: {
            estatementsResponse: [
              'ProductsService',
              '$stateParams',
              'product',
              function (n, t, i) {
                return i.BankProduct.IsCorporateCard && !i.BankProduct.IsMainCard ? n.getCardEStatements({
                  ProductCode: i.Code,
                  ProductTypeID: i.TypeID,
                  ProductID: i.BankProduct.ProductID
                }).then(function (n) {
                  return n
                })  : n.getCardStatements({
                  ProductCode: i.Code,
                  ProductTypeID: i.TypeID,
                  ProductID: i.BankProduct.ProductID,
                  GetOldStatements: !0
                }).then(function (n) {
                  return n
                })
              }
            ]
          }
        }).state('root.cards.add', {
          url: '/add/{productTypeFamily}/{productTypeScope}/{key}',
          templateUrl: 'Templates/Features/Profile/Product-add/add-wrapper',
          controller: 'ProductAddController as vm',
          resolve: {
            product: function () {
              var t = new n.model.CardProduct({
              });
              return t.CategoryGroupType = n.server.CategoryGroupType.CARD,
              t.BankProduct.Uses = [
              ],
              t.BankProduct.Details = [
              ],
              t
            },
            productTypeFamily: [
              '$stateParams',
              function (t) {
                var i = t.productTypeFamily;
                return n.server.ProductTypeFamily[i[0].toUpperCase() + i.substring(1)]
              }
            ],
            productTypeScope: [
              '$stateParams',
              function (t) {
                var i = t.productTypeScope;
                return n.server.ProductTypeScope[i[0].toUpperCase() + i.substring(1)]
              }
            ],
            greekBanks: [
              'LookupsService',
              function (n) {
                return n.getBanksForCards()
              }
            ],
            loanTypes: function () {
              return null
            },
            countries: [
              'LookupsService',
              function (n) {
                return n.getCountries()
              }
            ],
            userSessionInfo: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ],
            otpHandler: [
              'OtpHandlerService',
              'ProfileProductsService',
              'product',
              'productTypeScope',
              'RoleService',
              function (t, i, r, u, f) {
                var e = {
                  payload: i.buildAddProductModel(r),
                  uiContext: {
                    isNewScreen: !0
                  }
                };
                return u === (f.IsRetail() && n.server.ProductTypeScope.Local) ? t.retrieveHandler(4, e)  : t.activatedHandler(4, e)
              }
            ]
          }
        }).state(n.constants.stateNames.settingsAddCardOtherBankInOtherBankCardsState, {
          url: '/add/{productTypeFamily}/otherbank?isOauthCallbackRedirect',
          templateUrl: 'Templates/Features/Profile/Product-otherbank-add/add-wrapper',
          controller: 'ProductOtherBankAddController as vm',
          resolve: {
            product: function () {
              var t = new n.model.CardProduct({
              });
              return t.CategoryGroupType = n.server.CategoryGroupType.CARD,
              t.BankProduct.Uses = [
              ],
              t.BankProduct.Details = [
              ],
              t
            },
            productTypeFamily: [
              '$stateParams',
              function (t) {
                var i = t.productTypeFamily;
                return n.server.ProductTypeFamily[i[0].toUpperCase() + i.substring(1)]
              }
            ],
            otherBanks: [
              'OtherBankProductsService',
              function (t) {
                return t.getOtherBanks(n.server.ProductRequestType.Banks_For_Cards)
              }
            ],
            userSessionInfo: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ],
            userProfileAccounts: [
              'ProfileProductsService',
              function (n) {
                return n.getAccounts()
              }
            ],
            userProfileCards: [
              'ProfileProductsService',
              function (n) {
                return n.getCards()
              }
            ]
          }
        }).state('root.cards.prepaid', {
          url: '/prepaid',
          templateUrl: 'Templates/Features/Cards/prepaid/prepaid-wrapper',
          controller: 'PrepaidCardController as vm',
          resolve: {
            isInVersion: [
              'VersionFilterService',
              function (t) {
                return t.IsInVersions(n.constants.versionFilters.BONUS).then(function (n) {
                  return n
                })
              }
            ],
            isApplInVersion: [
              'VersionFilterService',
              function (t) {
                return t.IsInVersions(n.constants.versionFilters.PREPAID_CARD_APPLICATION).then(function (n) {
                  return n
                })
              }
            ],
            isPINBySMSInVersion: [
              'VersionFilterService',
              function (t) {
                return t.IsInVersions(n.constants.versionFilters.PIN_BY_SMS)
              }
            ],
            userInfo: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ]
          }
        }).state('root.cards.prepaid.load', {
          url: '/load/:id',
          templateUrl: 'Templates/Features/Cards/prepaid/load-wrapper',
          controller: 'LoadPrepaidCardController as vm',
          resolve: {
            debitAccounts: [
              'ProfileProductsService',
              function (t) {
                return t.getDebitAccounts().then(function (t) {
                  return t.filter(function (t) {
                    return t.CurrencyEnum == n.server.Currency.EUR
                  })
                })
              }
            ],
            prepaidCards: [
              'ProfileProductsService',
              function (n) {
                return n.getCards().then(function (n) {
                  return n.length > 0 ? n.filter(function (n) {
                    return n.CategoryType == 104 && n.Uses.indexOf(1) != - 1
                  })  : n
                })
              }
            ],
            selectedCard: [
              'prepaidCards',
              '$stateParams',
              'ProfileProductsService',
              function (t, i, r) {
                return n.utils.isUndefinedOrNullorWhiteSpace(i.id) ? undefined : r.getCard(i.id)
              }
            ],
            Model: [
              'QueriesService',
              function (t) {
                var i = new n.model.PaymentInfo;
                return i.PaymentType = 0,
                t.getDatesAndOnLineStatus().then(function (n) {
                  var t = n;
                  return i.setDatesAndOnlineStatus(t),
                  i
                }, function () {
                  return i.HasErrors = !0,
                  i.ErrorMessage = 'Could not get online status and calendar information.',
                  i
                })
              }
            ],
            userInfo: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ]
          }
        }).state(n.constants.stateNames.prepaidCardNew, {
          url: '/new-request',
          templateUrl: 'Templates/Features/Cards/prepaid/wizard-wrapper',
          controller: 'PrepaidCardApplNewRequestController as vm',
          resolve: {
            userInfo: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ],
            kycInfo: [
              'DebitCardApplicationService',
              function (n) {
                return n.getKYCInfo()
              }
            ],
            onlineStatus: [
              'QueriesService',
              function (n) {
                return n.getDatesAndOnLineStatus().then(function (n) {
                  return n.OnLine
                })
              }
            ],
            Model: [
              'kycInfo',
              'STRINGS',
              'userInfo',
              'DebitCardApplicationService',
              function (t, i, r, u) {
                var f = new n.model.DebitCardApplicationNewReqViewModel,
                e;
                return (f.UserEmailAddress = r.Email, f.IsEmailInProfile = !n.utils.isUndefinedOrNullorWhiteSpace(r.Email), f.UserMobilePhone = r.MobilePhone, f.IsMobileInProfile = !n.utils.isUndefinedOrNullorWhiteSpace(r.MobilePhone), f.Application = {
                }, !t.Authorized) ? (f.HasFatalErrors = f.HasErrors = !0, f.ErrorMessage = i['prepaidCardApplication.noKYC'], f)  : !f.IsEmailInProfile || !f.IsMobileInProfile ? (f.HasFatalErrors = f.HasErrors = !0, f.ErrorMessage = i['prepaidCardApplication.noEmailOrMobileInProfile'], f)  : (f.IsBusy = !0, e = {
                  IsDebit: !1
                }, u.getUserCDIInfo(e).then(function (n) {
                  0 == n.ResultCode ? (f.IsBusy = !1, f.Occupations = n.Occupations, f.Application.AlphaEmployee = n.AlphaEmployee, f.Application.CDINumber = n.CDINumber, f.Application.Name = n.Name, f.Application.Name_Latin = n.Name_Latin, f.Application.LastName = n.Surname, f.Application.Surname_Latin = n.Surname_Latin, f.Application.FatherName = n.FatherName, f.Application.FatherName_Latin = n.FatherName_Latin, f.Application.Gender = n.Gender, f.Application.MaritalStatus = n.MaritalStatus, f.Application.CertificateNo = n.CertificateNo, f.Application.CertificateIssuer = n.CertificateIssuer, f.Application.CertificateType = n.CertificateType, f.Application.Afm = n.AFM, f.Application.Doy = n.Doy, f.Application.DOB = n.DOB, f.Application.Landline = n.HomePhone, f.Application.Mobile = n.MobilePhone, f.Application.Email = n.Email, f.Application.MailAddressStreet = n.MailAddressStreet, f.Application.MailAddressNo = n.MailAddressNo, f.Application.MailAddressTown = n.MailAddressTown, f.Application.MailAddressZip = n.MailAddressZip, f.Application.Nationality = n.Nationality)  : (f.IsBusy = !1, f.HasFatalErrors = f.HasErrors = !0, f.ErrorMessage = n.Error.Message)
                }).catch (function (n) {
                  f.IsBusy = !1;
                  f.HasFatalErrors = f.HasErrors = !0;
                  f.ErrorMessage = n.Error.Message
                }), f)
              }
            ],
            otpHandler: [
              'OtpHandlerService',
              function (n) {
                return n.activatedHandler(13, 'awb.card.prepaid.new')
              }
            ]
          }
        }).state(n.constants.stateNames.prepaidCardManagement, {
          url: '/manage-request',
          templateUrl: 'Templates/Features/Cards/prepaid/manage-requests',
          controller: 'DebitCardApplicationInfoListController as vm',
          resolve: {
            Model: [
              'DebitCardApplicationService',
              function (t) {
                var i = new n.model.DebitCardApplicationInfoListViewModel;
                return t.getDebitCardApplicationInfo({
                  RequestOption: 0
                }).then(function (t) {
                  return 0 == t.ResultCode ? i.Applications = n.utils.isUndefinedOrNull(t.DebitCardApplicationInfos) ? [
                  ] : t.DebitCardApplicationInfos.filter(function (n) {
                    return n.ProductCode == 2917.toString()
                  })  : (i.Error = t.Error.Message, i.HasError = !0),
                  i
                })
              }
            ],
            actionDecorator: function () {
              return new t.AllDebitCardApplictionListActionDecorator
            }
          }
        }).state(n.constants.stateNames.prepaidCardView, {
          url: '/detail/:id',
          templateUrl: 'Templates/Features/Cards/prepaid/wizard-wrapper',
          controller: 'PrepaidCardApplDetailsController as vm',
          resolve: {
            Model: [
              '$stateParams',
              'DebitCardApplicationService',
              function (n, t) {
                var i = {
                  HasErrors: !1,
                  ErrorMessage: '',
                  Item: null
                },
                r = n.id;
                return t.getDebitCardApplicationInfoDetails(r).then(function (n) {
                  return i.Item = n,
                  i
                })
              }
            ]
          }
        }).state('root.cards.prepaid.virtual', {
          url: '/virtual',
          templateUrl: 'Templates/Features/Cards/prepaid/virtual-wrapper',
          controller: 'PrepaidCardController as vm',
          resolve: {
          }
        }).state('root.cards.bonus', {
          url: '/alpha-bonus',
          templateUrl: 'Templates/Features/Cards/bonus/bonus-wrapper',
          resolve: {
            isInVersion: [
              'VersionFilterService',
              function (t) {
                return t.IsInVersions(n.constants.versionFilters.BONUS).then(function (n) {
                  return n
                })
              }
            ]
          }
        }).state('root.cards.bonus.cards', {
          url: '/cards',
          templateUrl: 'Templates/Features/Cards/bonus/bonus-cards',
          controller: 'BonusController as vm',
          resolve: {
            cdiNumber: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo().then(function (n) {
                  return n.CDINumber
                })
              }
            ],
            myBonus: [
              'ProductsServiceProxy',
              'cdiNumber',
              function (n, t) {
                return n.getCardBonusSecure({
                  CDI: t
                }).then(function (n) {
                  return n
                }, function () {
                  return null
                })
              }
            ]
          }
        }).state(n.constants.stateNames.debitCard, {
          url: '/debit',
          templateUrl: 'Templates/Features/Cards/debit/wrapper',
          controller: 'DebitCardApplicationController as vm',
          resolve: {
            isInVersion: [
              'VersionFilterService',
              function (t) {
                return t.IsInVersions(n.constants.versionFilters.DEBIT_CARD_APPLICATION)
              }
            ],
            isPINBySMSInVersion: [
              'VersionFilterService',
              function (t) {
                return t.IsInVersions(n.constants.versionFilters.PIN_BY_SMS)
              }
            ],
            applicationInfos: [
              'DebitCardApplicationService',
              function (t) {
                return t.getDebitCardApplicationInfo({
                  RequestOption: 0
                }).then(function (t) {
                  var i = [
                  ];
                  return 0 == t.ResultCode && (n.utils.isUndefinedOrNull(t.DebitCardApplicationInfos) || (i = t.DebitCardApplicationInfos.filter(function (n) {
                    return n.ProductCode != 2917.toString()
                  }))),
                  i
                })
              }
            ],
            parentState: function () {
              return n.constants.stateNames.debitCard
            }
          }
        }).state(n.constants.stateNames.debitCardManagement, {
          url: '/manage-request',
          templateUrl: 'Templates/Features/Cards/debit/manage-requests',
          controller: 'DebitCardApplicationInfoListController as vm',
          data: {
            menuItem: {
              inMenu: !1,
              parent: n.constants.stateNames.debitCard
            }
          },
          resolve: {
            Model: [
              'DebitCardApplicationService',
              function (t) {
                var i = new n.model.DebitCardApplicationInfoListViewModel;
                return t.getDebitCardApplicationInfo({
                  RequestOption: 0
                }).then(function (t) {
                  return 0 == t.ResultCode ? i.Applications = n.utils.isUndefinedOrNull(t.DebitCardApplicationInfos) ? [
                  ] : t.DebitCardApplicationInfos.filter(function (n) {
                    return n.ProductCode != 2917.toString()
                  })  : (i.Error = t.Error.Message, i.HasError = !0),
                  i
                })
              }
            ],
            actionDecorator: function () {
              return new t.AllDebitCardApplictionListActionDecorator
            }
          }
        }).state(n.constants.stateNames.debitCardNew, {
          url: '/new-request/:uid/:referer',
          templateUrl: 'Templates/Features/Cards/debit/wizard-wrapper',
          controller: 'DebitCardApplicationNewRequestController as vm',
          data: {
            menuItem: {
              inMenu: !1,
              parent: n.constants.stateNames.debitCard
            }
          },
          resolve: {
            userInfo: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ],
            accounts: [
              'ProfileProductsService',
              function (n) {
                return n.getDomesticCurrencyDebitAccounts().then(function (n) {
                  return n.filter(function (n) {
                    return n.TypeID != 3
                  })
                })
              }
            ],
            selectedCard: [
              '$stateParams',
              function (t) {
                var i = t.referer;
                return !n.utils.isUndefinedOrNull(i) && i.indexOf('termDepositBonusApplication') == 0 ? 2901 : null
              }
            ],
            isKYCAuthorized: [
              'DebitCardApplicationService',
              function (n) {
                return n.getKYCInfo().then(function (n) {
                  return n.Authorized
                })
              }
            ],
            onlineStatus: [
              'QueriesService',
              function (n) {
                return n.getDatesAndOnLineStatus().then(function (n) {
                  return n.OnLine
                })
              }
            ],
            Model: [
              'isKYCAuthorized',
              'selectedCard',
              'STRINGS',
              'userInfo',
              'DebitCardApplicationService',
              function (t, i, r, u, f) {
                var e = new n.model.DebitCardApplicationNewReqViewModel,
                o;
                return (e.UserEmailAddress = u.Email, e.IsEmailInProfile = !n.utils.isUndefinedOrNullorWhiteSpace(u.Email), e.UserMobilePhone = u.MobilePhone, e.IsMobileInProfile = !n.utils.isUndefinedOrNullorWhiteSpace(u.MobilePhone), e.Application = {
                }, n.utils.isUndefinedOrNull(i) || (e.Application.HasTermDeposit = !0), !t) ? (e.HasFatalErrors = e.HasErrors = !0, e.ErrorMessage = r['debitCardApplication.noKYC'], e)  : !e.IsEmailInProfile || !e.IsMobileInProfile ? (e.HasFatalErrors = e.HasErrors = !0, e.ErrorMessage = r['debitCardApplication.noEmailOrMobileInProfile'], e)  : (e.IsBusy = !0, o = {
                  IsDebit: !0
                }, f.getUserCDIInfo(o).then(function (n) {
                  0 == n.ResultCode ? (e.IsBusy = !1, e.Occupations = n.Occupations, e.Application.AlphaEmployee = n.AlphaEmployee, e.Application.CDINumber = n.CDINumber, e.Application.Name = n.Name, e.Application.Name_Latin = n.Name_Latin, e.Application.LastName = n.Surname, e.Application.Surname_Latin = n.Surname_Latin, e.Application.FatherName = n.FatherName, e.Application.FatherName_Latin = n.FatherName_Latin, e.Application.Gender = n.Gender, e.Application.MaritalStatus = n.MaritalStatus, e.Application.CertificateNo = n.CertificateNo, e.Application.CertificateIssuer = n.CertificateIssuer, e.Application.CertificateType = n.CertificateType, e.Application.Afm = n.AFM, e.Application.Doy = n.Doy, e.Application.DOB = n.DOB, e.Application.Landline = n.HomePhone, e.Application.Mobile = n.MobilePhone, e.Application.Email = n.Email, e.Application.MailAddressStreet = n.MailAddressStreet, e.Application.MailAddressNo = n.MailAddressNo, e.Application.MailAddressTown = n.MailAddressTown, e.Application.MailAddressZip = n.MailAddressZip, e.Application.Nationality = n.Nationality)  : (e.IsBusy = !1, e.HasFatalErrors = e.HasErrors = !0, e.ErrorMessage = n.Error.Message)
                }).catch (function (n) {
                  e.IsBusy = !1;
                  e.HasFatalErrors = e.HasErrors = !0;
                  e.ErrorMessage = n.Error.Message
                }), e)
              }
            ],
            otpHandler: [
              'OtpHandlerService',
              function (n) {
                return n.activatedHandler(13, 'awb.card.debit.new')
              }
            ]
          }
        }).state(n.constants.stateNames.debitCardView, {
          url: '/detail/:id',
          templateUrl: 'Templates/Features/Cards/debit/wizard-wrapper',
          controller: 'DebitCardApplicationDetailsController as vm',
          data: {
            menuItem: {
              inMenu: !1,
              parent: n.constants.stateNames.debitCard
            }
          },
          resolve: {
            Model: [
              '$stateParams',
              'DebitCardApplicationService',
              function (n, t) {
                var i = {
                  HasErrors: !1,
                  ErrorMessage: '',
                  Item: null
                },
                r = n.id;
                return t.getDebitCardApplicationInfoDetails(r).then(function (n) {
                  return i.Item = n,
                  i
                })
              }
            ]
          }
        })
      }
      ])
    }) (t = n.cards || (n.cards = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (n) {
      n.module = angular.module('alpha.cash', [
        'alpha',
        'alpha.services'
      ])
    }) (t = n.cashManagement || (n.cashManagement = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      'use strict';
      t.mainModule = angular.module('alpha.investments', [
        'alpha',
        'alpha.services'
      ]);
      t.mainModule.config(['$stateProvider',
      '$urlRouterProvider',
      function (i, r) {
        r.when('/investments/alpha-prime/:id', '/investments/alpha-prime/:id/details');
        r.when('/investments/alpha-private/:id', '/investments/alpha-private/:id/details');
        i.state('root.investments', {
          abstract: !0,
          url: '/investments',
          template: '<div data-ui-view=""></div>',
          resolve: {
            products: [
              'ProfileProductsService',
              function (n) {
                return n.getInvestments()
              }
            ]
          }
        }).state('root.investments.list', {
          url: '',
          templateUrl: 'Templates/Features/Investments/investments',
          controller: 'InvestmentsController as vm',
          resolve: {
            products: [
              'ProfileProductsService',
              function (n) {
                return n.getInvestments()
              }
            ]
          }
        }).state(n.constants.stateNames.timedepositDetailsState, {
          templateUrl: 'Templates/Features/Investments/timedeposits',
          controller: 'ProductDetailsController as vm',
          url: '/timedeposits-details/:id',
          resolve: {
            product: [
              'products',
              'ProductsService',
              '$stateParams',
              'ProfileProductsService',
              'ETimeDepositService',
              'SecurityService',
              '$q',
              function (t, i, r, u, f, e, o) {
                var s = r.id;
                return u.getInvestment(s).then(function (n) {
                  if (!n) return o.reject('ProductNotFound');
                  var t = {
                    ProductCode: n.Code,
                    RequestOption: 2
                  };
                  return f.getETimeDepositInfo(t).then(function (t) {
                    if (null != t.DepositInfos && t.DepositInfos.length > 0) n.isETimeDeposit = !0,
                    n.eTimeDeposit = t.DepositInfos[0];
                     else if (t.ResultCode === 1) throw 'System error';
                    return n
                  })
                }).then(function (n) {
                  if (n.isETimeDeposit) return f.getETimeDepositInfoDetails(n.eTimeDeposit.ApplicationID, n.Code, !0).then(function (t) {
                    return n.eTimeDeposit = t,
                    n
                  });
                  var t = o.defer();
                  return t.resolve(n),
                  t.promise
                }).then(function (n) {
                  if (n.isETimeDeposit) return e.getUserSessionInfo().then(function (t) {
                    return n.eTimeDeposit.EMail = t.Email,
                    n.eTimeDeposit.Mobile = t.MobilePhone,
                    n
                  });
                  var t = o.defer();
                  return t.resolve(n),
                  t.promise
                }).then(function (t) {
                  return t.isETimeDeposit ? o.when(t)  : i.getTimeDeposit({
                    ProductCode: t.Code
                  }).then(function (i) {
                    return t.timeDeposit = new n.model.TimeDepositInfo(i),
                    n.utils.isUndefinedOrNull(t.timeDeposit.Amount) && (t.timeDeposit.Amount = 0),
                    n.utils.isUndefinedOrNull(t.timeDeposit.Interest_Amount) && (t.timeDeposit.Interest_Amount = 0),
                    n.utils.isUndefinedOrNull(t.timeDeposit.Header_Tax) && (t.timeDeposit.Header_Tax = 0),
                    t
                  })
                })
              }
            ],
            products: [
              'products',
              function (n) {
                return n.filter(function (n) {
                  return n.IsTimeDeposit
                })
              }
            ]
          }
        }).state(n.constants.stateNames.alphaMutualDetailsState, {
          templateUrl: 'Templates/Features/Investments/alphaMutuals',
          controller: 'ProductDetailsController as vm',
          url: '/alpha-mutuals-details/:id',
          resolve: {
            product: [
              '$q',
              'products',
              'ProductsService',
              '$stateParams',
              'ProfileProductsService',
              function (n, t, i, r, u) {
                var f = r.id;
                return u.getInvestment(f).then(function (t) {
                  return t ? i.getMutualInfo({
                    ProductCode: t.Code,
                    ProductTypeID: t.TypeID
                  }).then(function (n) {
                    return t.alphaMutual = n,
                    t
                  })  : n.reject('ProductNotFound')
                })
              }
            ],
            products: [
              'products',
              function (n) {
                return n.filter(function (n) {
                  return n.IsMutual
                })
              }
            ]
          }
        }).state(n.constants.stateNames.alphaPrimeDetailsState, {
          templateUrl: 'Templates/Features/Investments/alphaPrimeWrapper',
          controller: 'ProductDetailsController as vm',
          url: '/alpha-prime/:id',
          resolve: {
            product: [
              'products',
              'ProductsService',
              '$stateParams',
              'ProfileProductsService',
              function (n, t, i, r) {
                var u = i.id;
                return r.getInvestment(u)
              }
            ],
            products: [
              'products',
              function (n) {
                return n.filter(function (n) {
                  return n.IsAlphaPrime
                })
              }
            ]
          }
        }).state('root.investments.alphaprime.details', {
          templateUrl: 'Templates/Features/Investments/alphaPrimeDetails',
          controller: 'AlphaPrimePrivateDetailsController as vm',
          url: '/details',
          resolve: {
            product: [
              '$q',
              'product',
              'ProductsService',
              '$stateParams',
              'ProfileProductsService',
              function (t, i, r) {
                return i ? r.getAlphaPrimePrivateInfo({
                  Type: 0,
                  ProductCode: i.Code,
                  ProductTypeID: i.TypeID
                }).then(function (t) {
                  return i.alphaPrimePrivate = new n.model.AlphaPrimePrivate(t.HTMLData),
                  t.Error && (i.alphaPrimePrivate.Error = t.Error),
                  i
                })  : t.reject('ProductNotFound')
              }
            ]
          }
        }).state('root.investments.alphaprime.statements', {
          templateUrl: 'Templates/Features/Investments/alphaPrimeStatements',
          controller: 'AlphaPrimePrivateStatementsController as vm',
          url: '/statements',
          resolve: {
            product: [
              'product',
              'ProductsService',
              '$stateParams',
              'ProfileProductsService',
              function (t, i) {
                var r = new n.model.MonthlyData(0, 0);
                return i.getAlphaPrimePrivateInfo({
                  Type: 0,
                  ProductCode: t.Code,
                  ProductTypeID: t.TypeID,
                  MonthlyData: r
                }).then(function (n) {
                  return t.alphaPrimePrivate.MonthlyData = n.MonthlyData,
                  t
                })
              }
            ]
          }
        }).state('root.investments.alphaprime.e-statements', {
          templateUrl: 'Templates/Features/Investments/alphaPrimeEStatements',
          controller: 'AlphaPrimePrivateEStatementsController as vm',
          url: '/e-statements',
          resolve: {
            eStatementsResponse: [
              'product',
              'ProductsService',
              '$stateParams',
              'ProfileProductsService',
              function (n, t) {
                return t.getAccountEStatements({
                  ProductCode: n.Code,
                  ProductTypeID: n.TypeID
                }).then(function (n) {
                  return n
                })
              }
            ]
          }
        }).state(n.constants.stateNames.alphaPrivateDetailsState, {
          templateUrl: 'Templates/Features/Investments/alphaPrivateWrapper',
          controller: 'ProductDetailsController as vm',
          url: '/alpha-private/:id',
          resolve: {
            product: [
              'products',
              'ProductsService',
              '$stateParams',
              'ProfileProductsService',
              function (n, t, i, r) {
                var u = i.id;
                return r.getInvestment(u)
              }
            ],
            products: [
              'products',
              function (n) {
                return n.filter(function (n) {
                  return n.IsAlphaPrivate
                })
              }
            ]
          }
        }).state('root.investments.alphaprivate.details', {
          templateUrl: 'Templates/Features/Investments/alphaPrivateDetails',
          controller: 'AlphaPrimePrivateDetailsController as vm',
          url: '/details',
          resolve: {
            product: [
              '$q',
              'product',
              'ProductsService',
              '$stateParams',
              'ProfileProductsService',
              function (t, i, r) {
                return i ? r.getAlphaPrimePrivateInfo({
                  Type: 1,
                  ProductCode: i.Code,
                  ProductTypeID: i.TypeID
                }).then(function (t) {
                  return i.alphaPrimePrivate = new n.model.AlphaPrimePrivate(t.HTMLData),
                  t.Error && (i.alphaPrimePrivate.Error = t.Error),
                  i
                })  : t.reject('ProductNotFound')
              }
            ]
          }
        }).state('root.investments.alphaprivate.statements', {
          templateUrl: 'Templates/Features/Investments/alphaPrivateStatements',
          controller: 'AlphaPrimePrivateStatementsController as vm',
          url: '/statements',
          resolve: {
            product: [
              'product',
              'ProductsService',
              '$stateParams',
              'ProfileProductsService',
              function (t, i) {
                var r = new n.model.MonthlyData(0, 0);
                return i.getAlphaPrimePrivateInfo({
                  Type: 1,
                  ProductCode: t.Code,
                  ProductTypeID: t.TypeID,
                  MonthlyData: r
                }).then(function (n) {
                  return t.alphaPrimePrivate.MonthlyData = n.MonthlyData,
                  t
                })
              }
            ]
          }
        }).state('root.investments.alphaprivate.e-statements', {
          templateUrl: 'Templates/Features/Investments/alphaPrivateEStatements',
          controller: 'AlphaPrimePrivateEStatementsController as vm',
          url: '/e-statements',
          resolve: {
            eStatementsResponse: [
              'product',
              'ProductsService',
              '$stateParams',
              'ProfileProductsService',
              function (n, t) {
                return t.getAccountEStatements({
                  ProductCode: n.Code,
                  ProductTypeID: n.TypeID
                })
              }
            ]
          }
        }).state(n.constants.stateNames.alphaFinanceDetailsState, {
          templateUrl: 'Templates/Features/Investments/alphaFinance',
          controller: 'ProductDetailsController as vm',
          url: '/alpha-finance-details/:id',
          resolve: {
            product: [
              'products',
              '$stateParams',
              'ProfileProductsService',
              function (n, t, i) {
                return i.getInvestment(t.id)
              }
            ],
            products: [
              'products',
              function (n) {
                return n.filter(function (n) {
                  return n.IsAlphaFinance
                })
              }
            ]
          }
        }).state(n.constants.stateNames.eTimeDeposit, {
          url: '/e-timedeposit',
          templateUrl: 'Templates/Features/Investments/e-timedeposit/wrapper',
          controller: 'ETimeDepositController as vm',
          resolve: {
            isInVersion: [
              'VersionFilterService',
              function (t) {
                return t.IsInVersions(n.constants.versionFilters.ONLINE_DEPOSIT)
              }
            ],
            depositInfos: [
              'ETimeDepositService',
              function (n) {
                return n.getETimeDepositInfo({
                  RequestOption: 0
                }).then(function (n) {
                  return n.DepositInfos
                })
              }
            ],
            parentState: function () {
              return n.constants.stateNames.eTimeDeposit
            }
          }
        }).state(n.constants.stateNames.eTimeDepositBonus, {
          url: '/e-timedeposit-bonus',
          templateUrl: 'Templates/Features/Investments/e-timedeposit-bonus/wrapper',
          controller: 'ETimeDepositBonusController as vm',
          resolve: {
            isInVersion: [
              'VersionFilterService',
              function (t) {
                return t.IsInVersions(n.constants.versionFilters.ONLINE_DEPOSIT)
              }
            ],
            depositInfos: [
              'ETimeDepositBonusService',
              function (n) {
                return n.getETimeDepositBonusInfo({
                  RequestOption: 0,
                  IsBonus: !0
                }).then(function (n) {
                  return n.DepositInfos
                })
              }
            ],
            parentState: function () {
              return n.constants.stateNames.eTimeDepositBonus
            }
          }
        }).state(n.constants.stateNames.eTimeDepositManagement, {
          url: '/manage-request',
          templateUrl: 'Templates/Features/Investments/e-timedeposit/manage-requests',
          controller: 'ETimeDepositInfoListController as vm',
          resolve: {
            Model: [
              'ETimeDepositService',
              function (t) {
                var i = new n.model.ETimeDepositInfoListViewModel;
                return t.getETimeDepositInfo({
                  RequestOption: 0
                }).then(function (t) {
                  return 0 == t.ResultCode ? i.Deposits = t.DepositInfos : (i.Error = n.utils.isUndefinedOrNull(t.Error) ? 'System Error' : t.Error.Message, i.HasError = !0),
                  i
                })
              }
            ],
            actionDecorator: function () {
              return new t.AllDepositListActionDecorator
            },
            gridMode: function () {
              return 0
            }
          }
        }).state(n.constants.stateNames.eTimeDepositBonusManagement, {
          url: '/manage-request',
          templateUrl: 'Templates/Features/Investments/e-timedeposit-bonus/manage-requests',
          controller: 'ETimeDepositBonusInfoListController as vm',
          resolve: {
            Model: [
              'ETimeDepositBonusService',
              function (t) {
                var i = new n.model.ETimeDepositInfoListViewModel;
                return t.getETimeDepositBonusInfo({
                  RequestOption: 0,
                  IsBonus: !0
                }).then(function (t) {
                  return 0 == t.ResultCode ? i.Deposits = t.DepositInfos : (i.Error = n.utils.isUndefinedOrNull(t.Error) ? 'System Error' : t.Error.Message, i.HasError = !0),
                  i
                })
              }
            ],
            actionDecorator: function () {
              return new t.AllDepositBonusListActionDecorator
            },
            gridMode: function () {
              return 0
            }
          }
        }).state(n.constants.stateNames.eTimeDepositModification, {
          url: '/modify-request',
          templateUrl: 'Templates/Features/Investments/e-timedeposit/manage-requests',
          controller: 'ETimeDepositInfoListController as vm',
          resolve: {
            Model: [
              'products',
              'ETimeDepositService',
              function (t, i) {
                return i.getETimeDepositInfo({
                  RequestOption: 1
                }).then(function (i) {
                  var r = new n.model.ETimeDepositInfoListViewModel;
                  return 0 == i.ResultCode ? null != i.DepositInfos && (r.Deposits = i.DepositInfos.map(function (n) {
                    var i = t.filter(function (t) {
                      return t.IsTimeDeposit && t.Code == n.AccountNumber
                    }) [0];
                    return n.Id = i.id,
                    n
                  }))  : (r.Error = i.Error.Message, r.HasError = !0),
                  r
                })
              }
            ],
            actionDecorator: function () {
              return new t.ActiveDepositListActionDecorator
            },
            gridMode: function () {
              return 1
            }
          }
        }).state(n.constants.stateNames.eTimeDepositBonusModification, {
          url: '/modify-request',
          templateUrl: 'Templates/Features/Investments/e-timedeposit-bonus/manage-requests',
          controller: 'ETimeDepositBonusInfoListController as vm',
          resolve: {
            Model: [
              'products',
              'ETimeDepositBonusService',
              function (t, i) {
                return i.getETimeDepositBonusInfo({
                  RequestOption: 1,
                  IsBonus: !0
                }).then(function (i) {
                  var r = new n.model.ETimeDepositInfoListViewModel;
                  return 0 == i.ResultCode ? null != i.DepositInfos && (r.Deposits = i.DepositInfos.map(function (n) {
                    var i = t.filter(function (t) {
                      return t.IsTimeDeposit && t.Code == n.AccountNumber
                    }) [0];
                    return n.Id = i.id,
                    n
                  }))  : (r.Error = i.Error.Message, r.HasError = !0),
                  r
                })
              }
            ],
            actionDecorator: function () {
              return new t.ActiveDepositBonusListActionDecorator
            },
            gridMode: function () {
              return 1
            }
          }
        }).state(n.constants.stateNames.eTimeDepositNew, {
          url: '/new-request/:uid/',
          templateUrl: 'Templates/Features/Investments/e-timedeposit/wizard-wrapper',
          controller: 'NewETimeDepositRequestController as vm',
          resolve: {
            userInfo: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ],
            accounts: [
              'ProfileProductsService',
              function (t) {
                return t.getAccountsByRequestType(n.server.ProductRequestType.AccountsForETimeDeposits)
              }
            ],
            isKYCAuthorized: [
              'DebitCardApplicationService',
              function (n) {
                return n.getKYCInfo().then(function (n) {
                  return n.Authorized
                })
              }
            ],
            depositRatesResponse: [
              'userInfo',
              'ETimeDepositService',
              function (n, t) {
                var i = null != n.Email && null != n.MobilePhone;
                return t.getETimeDepositRates(i)
              }
            ],
            onlineStatus: [
              'QueriesService',
              function (n) {
                return n.getDatesAndOnLineStatus().then(function (n) {
                  return n.OnLine
                })
              }
            ],
            Model: [
              'onlineStatus',
              'depositRatesResponse',
              'isKYCAuthorized',
              'STRINGS',
              'userInfo',
              function (t, i, r, u, f) {
                var e = new n.model.NewETimeDepositViewModel;
                return (e.UserEmailAddress = f.Email, e.IsEmailInProfile = !n.utils.isUndefinedOrNullorWhiteSpace(f.Email), e.UserMobilePhone = f.MobilePhone, e.IsMobileInProfile = !n.utils.isUndefinedOrNullorWhiteSpace(f.MobilePhone), e.IsAmountBlocked = t, null == i || 1 == i.ResultCode) ? (e.HasFatalErrors = e.HasErrors = !0, e.ErrorMessage = null == i ? u.depositRatesMessage : i.Error.Message, e)  : r ? !e.IsEmailInProfile || !e.IsMobileInProfile ? (e.HasFatalErrors = e.HasErrors = !0, e.ErrorMessage = u['eTimeDeposit.noEmailOrMobileInProfile'], e)  : e : (e.HasFatalErrors = e.HasErrors = !0, e.ErrorMessage = u['eTimeDeposit.noKYC'], e)
              }
            ]
          }
        }).state(n.constants.stateNames.eTimeDepositBonusNew, {
          url: '/new-request/:uid/:referer/:applicationNo',
          templateUrl: 'Templates/Features/Investments/e-timedeposit-bonus/wizard-wrapper',
          controller: 'NewETimeDepositBonusRequestController as vm',
          resolve: {
            userInfo: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ],
            debitCardApplicationNo: [
              '$stateParams',
              function (t) {
                var i = t.referer;
                return !n.utils.isUndefinedOrNull(i) && i.indexOf('debitCardApplication') == 0 ? t.applicationNo : null
              }
            ],
            accounts: [
              'ProfileProductsService',
              function (t) {
                return t.getAccountsByRequestType(n.server.ProductRequestType.AccountsForETimeDeposits)
              }
            ],
            cards: [
              'ProfileProductsService',
              function (n) {
                return n.getDebitCardsForBonusTransfer().then(function (t) {
                  return n.getCreditCardsForBonusTransfer().then(function (n) {
                    return n.forEach(function (n) {
                      t.indexOf(n) < 0 && t.push(n)
                    }),
                    t
                  })
                })
              }
            ],
            isKYCAuthorized: [
              'DebitCardApplicationService',
              function (n) {
                return n.getKYCInfo().then(function (n) {
                  return n.Authorized
                })
              }
            ],
            depositRatesResponse: [
              'userInfo',
              'ETimeDepositBonusService',
              function (n, t) {
                var i = null != n.Email && null != n.MobilePhone;
                return t.getETimeDepositBonusRates(i).then(function (n) {
                  return n
                }, function () {
                  return null
                })
              }
            ],
            onlineStatus: [
              'QueriesService',
              function (n) {
                return n.getDatesAndOnLineStatus().then(function (n) {
                  return n.OnLine
                })
              }
            ],
            Model: [
              'onlineStatus',
              'depositRatesResponse',
              'isKYCAuthorized',
              'STRINGS',
              'userInfo',
              function (t, i, r, u, f) {
                var e = new n.model.NewETimeDepositBonusViewModel;
                return (e.UserEmailAddress = f.Email, e.IsEmailInProfile = !n.utils.isUndefinedOrNullorWhiteSpace(f.Email), e.UserMobilePhone = f.MobilePhone, e.IsMobileInProfile = !n.utils.isUndefinedOrNullorWhiteSpace(f.MobilePhone), e.IsAmountBlocked = t, null == i || 1 == i.ResultCode) ? (e.HasFatalErrors = e.HasErrors = !0, e.ErrorMessage = null == i ? u.depositRatesMessage : i.Error.Message, e)  : r ? !e.IsEmailInProfile || !e.IsMobileInProfile ? (e.HasFatalErrors = e.HasErrors = !0, e.ErrorMessage = u['eTimeDepositBonus.noEmailOrMobileInProfile'], e)  : e : (e.HasFatalErrors = e.HasErrors = !0, e.ErrorMessage = u['eTimeDepositBonus.noKYC'], e)
              }
            ]
          }
        }).state(n.constants.stateNames.eTimeDepositView, {
          url: '/detail/:id/:mode',
          templateUrl: 'Templates/Features/Investments/e-timedeposit/wizard-wrapper',
          controller: 'DetailETimeDepositInfoController as vm',
          resolve: {
            Model: [
              '$q',
              '$stateParams',
              'ETimeDepositService',
              function (n, t, i) {
                var r = {
                  HasErrors: !1,
                  ErrorMessage: '',
                  Item: null
                },
                u = t.id;
                return i.getETimeDepositInfoDetails(u).then(function (t) {
                  return t ? (r.Item = t, r)  : n.reject('ProductNotFound')
                })
              }
            ],
            mode: [
              '$stateParams',
              function (n) {
                return n.mode
              }
            ]
          }
        }).state(n.constants.stateNames.eTimeDepositBonusView, {
          url: '/detail/:id/:mode',
          templateUrl: 'Templates/Features/Investments/e-timedeposit-bonus/wizard-wrapper',
          controller: 'DetailETimeDepositBonusInfoController as vm',
          resolve: {
            Model: [
              '$stateParams',
              'ETimeDepositBonusService',
              function (n, t) {
                var i = {
                  HasErrors: !1,
                  ErrorMessage: '',
                  Item: null
                },
                r = n.id;
                return t.getETimeDepositBonusInfoDetails(r).then(function (n) {
                  return i.Item = n,
                  i
                })
              }
            ],
            mode: [
              '$stateParams',
              function (n) {
                return n.mode
              }
            ]
          }
        }).state(n.constants.stateNames.eTimeDepositEdit, {
          url: '/edit/:uuid',
          templateUrl: 'Templates/Features/Investments/e-timedeposit/wizard-wrapper',
          controller: 'EditETimeDepositInfoController as vm',
          resolve: {
            userInfo: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ],
            Model: [
              'products',
              'userInfo',
              'ETimeDepositService',
              '$stateParams',
              function (t, i, r, u) {
                var o = u.uuid,
                e = t.filter(function (n) {
                  return n.IsTimeDeposit && n.id == o
                }) [0],
                f = new n.model.EditETimeDepositViewModel;
                return r.editETimeDeposit(0, e.Code, 0).then(function (n) {
                  return 0 == n.ResultCode ? (f.ETimeAccountNumber = e.Code, f.ApplicationDate = n.ApplicationDate, f.Rate = n.Rate, f.Amount = n.Amount, f.StartDate = n.StartDate, f.EndDate = n.EndDate, f.CreditAccount = n.CreditAccount, f.Owners = n.Owners, f.Duration = n.Duration, f.DurationType = n.DurationType, f.DurationTypeDescription = n.DurationText, f.TransactionNumber = n.UN, f.UserEmail = i.Email, f.UserMobile = i.MobilePhone, f)  : (f.ErrorMessage = n.Error.Message, f.HasErrors = f.HasFatalErrors = !0, f)
                })
              }
            ],
            accounts: [
              'ProfileProductsService',
              'Model',
              function (t, i) {
                return t.getAccountsByRequestType(n.server.ProductRequestType.AccountsForETimeDeposits).then(function (n) {
                  return null == n || 0 == n.length ? (i.ErrorMessage = 'Unable to retrieve accounts for e time deposit', i.HasErrors = i.HasFatalErrors = !0, [
                  ])  : n.filter(function (n) {
                    return n.Code != i.CreditAccount
                  })
                })
              }
            ]
          }
        }).state(n.constants.stateNames.eTimeDepositBonusEdit, {
          url: '/edit/:uuid',
          templateUrl: 'Templates/Features/Investments/e-timedeposit-bonus/wizard-wrapper',
          controller: 'EditETimeDepositBonusInfoController as vm',
          resolve: {
            userInfo: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ],
            activeDepositInfoCollection: [
              'ETimeDepositBonusService',
              function (n) {
                return n.getETimeDepositBonusInfo({
                  RequestOption: 1,
                  IsBonus: !0
                }).then(function (n) {
                  return n.DepositInfos
                })
              }
            ],
            Model: [
              'activeDepositInfoCollection',
              'products',
              'userInfo',
              'ETimeDepositBonusService',
              '$stateParams',
              function (t, i, r, u, f) {
                var s = f.uuid,
                o = i.filter(function (n) {
                  return n.IsTimeDeposit && n.id == s
                }) [0],
                h = t.filter(function (n) {
                  return n.Id == o.id
                }) [0],
                e = new n.model.EditETimeDepositBonusViewModel;
                return u.editETimeDepositBonus(0, o.Code, 0).then(function (n) {
                  return 0 == n.ResultCode ? (e.ETimeAccountNumber = o.Code, e.ApplicationDate = n.ApplicationDate, e.Rate = n.Rate, e.Amount = n.Amount, e.StartDate = n.StartDate, e.EndDate = n.EndDate, e.CreditAccount = n.CreditAccount, e.CreditCardNumber = n.CreditCardNumber, e.Owners = n.Owners, e.Duration = n.Duration, e.DurationType = n.DurationType, e.DurationTypeDescription = n.DurationText, e.TransactionNumber = n.UN, e.UserEmail = r.Email, e.UserMobile = r.MobilePhone, e.Bonus = h.Bonus, e)  : (e.ErrorMessage = n.Error.Message, e.HasErrors = e.HasFatalErrors = !0, e)
                })
              }
            ],
            accounts: [
              'ProfileProductsService',
              'Model',
              function (t, i) {
                return t.getAccountsByRequestType(n.server.ProductRequestType.AccountsForETimeDeposits).then(function (n) {
                  return i.HasErrors ? [
                  ] : null == n || 0 == n.length ? (i.HasErrors = i.HasFatalErrors = !0, i.ResourceErrorMsg = 'noPredefinedDepositAccs', [
                  ])  : n.filter(function (n) {
                    return n.Code != i.CreditAccount
                  })
                })
              }
            ],
            cards: [
              'ProfileProductsService',
              'Model',
              function (n, t) {
                return n.getDebitCardsForBonusTransfer().then(function (i) {
                  return n.getCreditCardsForBonusTransfer().then(function (n) {
                    return n.forEach(function (n) {
                      i.indexOf(n) < 0 && i.push(n)
                    }),
                    null == i || 0 == i.length ? [
                    ] : i.filter(function (n) {
                      return n.Code != t.CreditCardNumber
                    })
                  })
                })
              }
            ]
          }
        }).state(n.constants.stateNames.eTimeDepositWithdraw, {
          url: '/withdraw/:uuid',
          templateUrl: 'Templates/Features/Investments/e-timedeposit/wizard-wrapper',
          controller: 'DiscountingETimeDepositInfoController as vm',
          resolve: {
            Model: [
              'products',
              'ETimeDepositService',
              '$stateParams',
              function (t, i, r) {
                var e = r.uuid,
                f = t.filter(function (n) {
                  return n.IsTimeDeposit && n.id == e
                }) [0],
                u = new n.model.DiscountingETimeDepositViewModel;
                return i.discountingETimeDeposit(0, f.Code, 0).then(function (n) {
                  return 0 == n.ResultCode ? (u.ApplicationDate = n.ApplicationDate, u.Rate = n.Rate, u.StartDate = n.StartDate, u.Amount = n.Amount, u.TotalInterest = n.TotalInterest, u.NotPaidCreditInterest = n.NotPaidCreditInterest, u.DiscountInterestToEnd = n.DiscountInterestToEnd, u.DiscountRate = n.DiscountRate, u.AdditionalInterestPaid = n.AdditionalInterestPaid, u.Tax = n.Tax, u.DiscountInterestReturned = n.DiscountInterestReturned, u.CapitalRatesTotal = n.CapitalRatesTotal, u.DebitAccount = n.DebitAccount, u.CreditAccount = n.CreditAccount, u.Owners = n.Owners, u.ETimeAccountNumber = f.Code)  : (u.ErrorMessage = n.Error.Message, u.HasFatalErrors = u.HasErrors = !0),
                  u
                })
              }
            ]
          }
        }).state(n.constants.stateNames.eTimeDepositBonusWithdraw, {
          url: '/withdraw/:uuid',
          templateUrl: 'Templates/Features/Investments/e-timedeposit-bonus/wizard-wrapper',
          controller: 'DiscountingETimeDepositBonusInfoController as vm',
          resolve: {
            Model: [
              'products',
              'ETimeDepositBonusService',
              '$stateParams',
              function (t, i, r) {
                var e = r.uuid,
                f = t.filter(function (n) {
                  return n.IsTimeDeposit && n.id == e
                }) [0],
                u = new n.model.DiscountingETimeDepositViewModel;
                return i.discountingETimeDepositBonus(0, f.Code, 0).then(function (n) {
                  return 0 == n.ResultCode ? (u.ApplicationDate = n.ApplicationDate, u.Rate = n.Rate, u.StartDate = n.StartDate, u.Amount = n.Amount, u.TotalInterest = n.TotalInterest, u.NotPaidCreditInterest = n.NotPaidCreditInterest, u.DiscountInterestToEnd = n.DiscountInterestToEnd, u.DiscountRate = n.DiscountRate, u.AdditionalInterestPaid = n.AdditionalInterestPaid, u.Tax = n.Tax, u.DiscountInterestReturned = n.DiscountInterestReturned, u.CapitalRatesTotal = n.CapitalRatesTotal, u.DebitAccount = n.DebitAccount, u.CreditAccount = n.CreditAccount, u.Owners = n.Owners, u.ETimeAccountNumber = f.Code, u.GivenPoints = n.GivenPoints, u.RestPoints = n.RestPoints)  : (u.ErrorMessage = n.Error.Message, u.HasFatalErrors = u.HasErrors = !0),
                  u
                })
              }
            ]
          }
        }).state(n.constants.stateNames.settingsAddInvestmentInInvestmentsState, {
          url: '/add/{productTypeFamily}/{productTypeScope}',
          templateUrl: 'Templates/Features/Profile/Product-add/add-wrapper',
          controller: 'ProductAddController as vm',
          resolve: {
            product: function () {
              var t = new n.model.AccountProduct({
              });
              return t.CategoryGroupType = n.server.CategoryGroupType.ACCOUNT,
              t.BankProduct.Uses = [
              ],
              t.BankProduct.Details = [
              ],
              t
            },
            productTypeFamily: [
              '$stateParams',
              function (t) {
                var i = t.productTypeFamily;
                return n.server.ProductTypeFamily[i[0].toUpperCase() + i.substring(1)]
              }
            ],
            productTypeScope: [
              '$stateParams',
              function (t) {
                var i = t.productTypeScope;
                return n.server.ProductTypeScope[i[0].toUpperCase() + i.substring(1)]
              }
            ],
            greekBanks: [
              'LookupsService',
              function (n) {
                return n.getBanks()
              }
            ],
            loanTypes: function () {
              return null
            },
            countries: [
              'LookupsService',
              function (n) {
                return n.getCountries()
              }
            ],
            userSessionInfo: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ],
            otpHandler: [
              'OtpHandlerService',
              function (n) {
                return n.retrieveHandler(4, {
                  uiContext: {
                    isNewScreen: !0
                  }
                })
              }
            ]
          }
        })
      }
      ])
    }) (t = n.investments || (n.investments = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      t.mainModule = angular.module('alpha.iris', [
        'alpha'
      ]);
      t.mainModule.config(['$stateProvider',
      '$urlRouterProvider',
      function (t) {
        t.state(n.constants.stateNames.irisState, {
          url: '/iris',
          templateUrl: 'Templates/Features/Iris/WizardWrapper',
          controller: 'IrisTransferWizard as vm',
          resolve: {
            userInfo: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ],
            irisPaymentInfoWrapper: [
              'QueriesService',
              'userInfo',
              '$parse',
              'STRINGS',
              '$q',
              function (n, t, i, r, u) {
                return t.PasswordValidityStatus != 0 ? u.when({
                  irisPaymentInfo: null,
                  error: r['mybank.password.expiration']
                })  : n.getIRISPaymentInfo({
                  AuthorisationID: t.IrisReferenceID
                }).then(function (n) {
                  return n.ResultCode == 0 ? {
                    irisPaymentInfo: n,
                    error: null
                  }
                   : {
                    irisPaymentInfo: null,
                    error: i('Error.Message') (n) || r['systemΕrror']
                  }
                }).catch (function (n) {
                  return {
                    irisPaymentInfo: null,
                    error: i('Error.Message') (n) || r.systemError
                  }
                })
              }
            ],
            Model: [
              'irisPaymentInfoWrapper',
              function (t) {
                var i = new n.model.IRISTransferInfo(t.irisPaymentInfo);
                return null != t.error && (i.ErrorMessage = t.error, i.HasErrors = !0),
                i
              }
            ],
            debitAccounts: [
              'ProfileProductsService',
              function (t) {
                return t.getAccountsByRequestType(n.server.ProductRequestType.DebitAccounts).then(function (t) {
                  return t.filter(function (t) {
                    return t.CurrencyEnum === n.server.Currency.EUR
                  })
                })
              }
            ],
            debitAccountsForOrderedTransfer: [
              'ProfileProductsService',
              function () {
                return []
              }
            ],
            otpHandler: [
              'OtpHandlerService',
              'TransferUtilityService',
              'Model',
              function (n, t, i) {
                var r = {
                  payload: t.buildIrisPayload(i),
                  uiContext: {
                    isIris: !0,
                    isNewScreen: !0,
                    redirectUrl: i.RedirectUrl || ''
                  }
                };
                return n.activatedHandler(36, r)
              }
            ]
          },
          menuItem: {
            parent: 'root',
            inMenu: !1
          }
        })
      }
      ])
    }) (t = n.iris || (n.iris = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (n) {
      'use strict';
      n.mainModule = angular.module('alpha.jobs', [
        'alpha',
        'alpha.services',
        'alpha.jobs',
        'ngSanitize'
      ])
    }) (t = n.jobs || (n.jobs = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      'use strict';
      t.mainModule = angular.module('alpha.loans', [
        'alpha',
        'alpha.services'
      ]);
      t.mainModule.config(['$stateProvider',
      '$urlRouterProvider',
      function (t, i) {
        i.when('/loans/details/:id', '/loans/details/:id/');
        t.state('root.loans', {
          abstract: !0,
          url: '/loans',
          template: '<div data-ui-view=""></div>',
          resolve: {
            products: [
              'ProfileProductsService',
              function (n) {
                return n.getEnquiryLoans()
              }
            ]
          }
        }).state('root.loans.list', {
          url: '',
          templateUrl: 'Templates/Features/Loans/loans',
          controller: 'LoansController as vm'
        }).state('root.loans.details', {
          url: '/details/:id',
          templateUrl: 'Templates/Features/Loans/loandetails',
          controller: 'ProductDetailsController as vm',
          resolve: {
            product: [
              'products',
              'ProductsService',
              '$stateParams',
              'ProfileProductsService',
              '$q',
              function (t, i, r, u, f) {
                var e = r.id;
                return u.getLoan(e).then(function (t) {
                  return t ? i.getLoanBalance({
                    ProductCode: t.Code,
                    ProductTypeID: t.TypeID
                  }).then(function (i) {
                    if (t.LoanType = i.LoanType, i.HostBalance && (t.HostBalance = i.HostBalance, t.hasError || (n.utils.isUndefinedOrNull(t.HostBalance.Plafon) && (t.HostBalance.Plafon = 0), n.utils.isUndefinedOrNull(t.HostBalance.Blocks) && (t.HostBalance.Blocks = 0), n.utils.isUndefinedOrNull(t.HostBalance.UnclearAmount) && (t.HostBalance.UnclearAmount = 0), n.utils.isUndefinedOrNull(t.HostBalance.Holds) && (t.HostBalance.Holds = 0), n.utils.isUndefinedOrNull(t.HostBalance.DebitLimit) && (t.HostBalance.DebitLimit = 0), n.utils.isUndefinedOrNull(t.HostBalance.WithdrawAmount) && (t.HostBalance.WithdrawAmount = 0), n.utils.isUndefinedOrNull(t.HostBalance.NetBalance) && (t.HostBalance.NetBalance = 0))), i.FDHBalance && (t.FDHBalance = i.FDHBalance, t.hasError || (n.utils.isUndefinedOrNull(t.FDHBalance.CreditLimit) && (t.FDHBalance.CreditLimit = 0), n.utils.isUndefinedOrNull(t.FDHBalance.CurrentBalance) && (t.FDHBalance.CurrentBalance = 0), n.utils.isUndefinedOrNull(t.FDHBalance.AvailableAmount) && (t.FDHBalance.AvailableAmount = 0), n.utils.isUndefinedOrNull(t.FDHBalance.LastStatementBalance) && (t.FDHBalance.LastStatementBalance = 0), n.utils.isUndefinedOrNull(t.FDHBalance.LastClearanceAmount) && (t.FDHBalance.LastClearanceAmount = 0), n.utils.isUndefinedOrNull(t.FDHBalance.LastPaymentAmount) && (t.FDHBalance.LastPaymentAmount = 0), n.utils.isUndefinedOrNull(t.FDHBalance.MinPaymentAmount) && (t.FDHBalance.MinPaymentAmount = 0))), i.LMSBalance) {
                      if (t.LMSBalance = i.LMSBalance, !n.utils.isUndefinedOrNull(t.LMSBalance.Details != null)) {
                        var r = t.LMSBalance.Details.filter(function (t) {
                          return t.Name === n.server.DetailName.LMS_LiteralStatement
                        });
                        r && r.length > 0 && (t.LMSLoanType = r[0].Value)
                      }
                      t.hasError || (n.utils.isUndefinedOrNull(t.LMSBalance.LastStatementStartingBalance) && (t.LMSBalance.LastStatementStartingBalance = 0), n.utils.isUndefinedOrNull(t.LMSBalance.CurrentBalance) && (t.LMSBalance.CurrentBalance = 0), n.utils.isUndefinedOrNull(t.LMSBalance.LastStatementDueAmount) && (t.LMSBalance.LastStatementDueAmount = 0), n.utils.isUndefinedOrNull(t.LMSBalance.LastStatementDueAmountML) && (t.LMSBalance.LastStatementDueAmountML = 0), n.utils.isUndefinedOrNull(t.LMSBalance.LastStatementEndingBalance) && (t.LMSBalance.LastStatementEndingBalance = 0), n.utils.isUndefinedOrNull(t.LMSBalance.CurrentInstalmentAmount) && (t.LMSBalance.CurrentInstalmentAmount = 0), n.utils.isUndefinedOrNull(t.LMSBalance.LastStatementAmountOutstanding) && (t.LMSBalance.LastStatementAmountOutstanding = 0), n.utils.isUndefinedOrNull(t.LMSBalance.LastBillingCapitalBalance) && (t.LMSBalance.LastBillingCapitalBalance = 0), n.utils.isUndefinedOrNull(t.LMSBalance.LastBillingDueAmount) && (t.LMSBalance.LastBillingDueAmount = 0), n.utils.isUndefinedOrNull(t.LMSBalance.LastBillingAmountOutstanding) && (t.LMSBalance.LastBillingAmountOutstanding = 0), n.utils.isUndefinedOrNull(t.LMSBalance.CurrentNomimalInterest) && (t.LMSBalance.CurrentNomimalInterest = 0), n.utils.isUndefinedOrNull(t.LMSBalance.CurrentBalance) && (t.LMSBalance.CurrentBalance = 0), n.utils.isUndefinedOrNull(t.LMSBalance.CurrentBucket) && (t.LMSBalance.CurrentBucket = 0), n.utils.isUndefinedOrNull(t.LMSBalance.LastBillingInstallmentNumber) && (t.LMSBalance.LastBillingInstallmentNumber = 0), n.utils.isUndefinedOrNull(t.LMSBalance.LastBillingDueAmountML) && (t.LMSBalance.LastBillingDueAmountML = 0))
                    }
                    return f.when(t)
                  }, function (n) {
                    console.log(n)
                  })  : f.reject('ProductNotFound')
                }, function (n) {
                  console.log(n)
                })
              }
            ]
          }
        }).state('root.loans.details.transactions', {
          templateUrl: 'Templates/Features/Loans/detailsTransactions',
          controller: 'LoansTransactionsController as vm',
          url: '/',
          resolve: {
            statementsResponse: [
              'ProductsService',
              '$stateParams',
              'product',
              function (n, t, i) {
                return n.getLoanStatements({
                  ProductCode: i.Code,
                  ProductTypeID: i.TypeID,
                  MaxRecords: 10,
                  LastPageIndex: ''
                }).then(function (n) {
                  return n
                })
              }
            ]
          }
        }).state('root.loans.details.statements', {
          templateUrl: 'Templates/Features/Loans/detailsEStatements',
          controller: 'LoanEstatementsController as vm',
          url: '/statements',
          resolve: {
            estatementsResponse: [
              'ProductsService',
              '$stateParams',
              'product',
              '$q',
              function (n, t, i, r) {
                var u = i.HasFDHBalance || i.IsSigloConsumerLoan ? r.when({
                  ResultCode: 0,
                  EStatements: [
                  ]
                })  : n.getAccountEStatements({
                  ProductCode: i.Code,
                  ProductTypeID: i.TypeID
                });
                return u.then(function (n) {
                  return n
                })
              }
            ],
            cardstatementsResponse: [
              'ProductsService',
              '$stateParams',
              'product',
              '$q',
              function (n, t, i, r) {
                var u = i.HasFDHBalance ? n.getCardStatements({
                  ProductCode: i.Code,
                  ProductTypeID: i.TypeID,
                  ProductID: i.BankProduct.ProductID,
                  GetOldStatements: !0
                })  : r.when({
                  ResultCode: 0,
                  Statements: [
                  ]
                });
                return u.then(function (n) {
                  return n
                })
              }
            ]
          }
        }).state('root.loans.details.cheques', {
          templateUrl: 'Templates/Features/Loans/detailsCheques',
          controller: 'ChequesController as vm',
          url: '/cheques',
          resolve: {
            cheques: [
              'ProductsService',
              '$stateParams',
              'product',
              function (n, t, i) {
                return n.getChequeStatus({
                  ProductCode: i.Code,
                  ProductTypeID: i.TypeID,
                  MaxRecords: 10,
                  ReturnChequeBooksInfo: !1
                })
              }
            ]
          }
        }).state('root.loans.add', {
          url: '/add/{productTypeFamily}/{productTypeScope}/{key}',
          templateUrl: 'Templates/Features/Profile/Product-add/add-wrapper',
          controller: 'ProductAddController as vm',
          resolve: {
            product: function () {
              var t = new n.model.LoanProduct({
              });
              return t.CategoryGroupType = n.server.CategoryGroupType.LOAN,
              t.BankProduct.Uses = [
              ],
              t.BankProduct.Details = [
              ],
              t
            },
            productTypeFamily: [
              '$stateParams',
              function (t) {
                var i = t.productTypeFamily;
                return n.server.ProductTypeFamily[i[0].toUpperCase() + i.substring(1)]
              }
            ],
            productTypeScope: [
              '$stateParams',
              function (t) {
                var i = t.productTypeScope;
                return n.server.ProductTypeScope[i[0].toUpperCase() + i.substring(1)]
              }
            ],
            greekBanks: function () {
              return null
            },
            loanTypes: [
              'LookupsService',
              function (n) {
                return n.getLoanTypes()
              }
            ],
            countries: function () {
              return null
            },
            userSessionInfo: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ],
            otpHandler: [
              'OtpHandlerService',
              'ProfileProductsService',
              'product',
              'productTypeScope',
              'RoleService',
              function (t, i, r, u, f) {
                var e = {
                  payload: i.buildAddProductModel(r),
                  uiContext: {
                    isNewScreen: !0
                  }
                };
                return u === (f.IsRetail() && n.server.ProductTypeScope.Local) ? t.retrieveHandler(4, e)  : t.activatedHandler(4, e)
              }
            ]
          }
        })
      }
      ])
    }) (t = n.loans || (n.loans = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      t.mainModule = angular.module('alpha.misc', [
        'alpha'
      ]);
      t.mainModule.config(['$stateProvider',
      '$urlRouterProvider',
      function (t) {
        t.state('root.failedTrans', {
          url: '/failed-transactions',
          templateUrl: 'Templates/Features/Misc/failedTransactions',
          controller: 'TransactionsHistoryController as vm',
          resolve: {
            transactionSearchHelper: [
              'STRINGS',
              'SecurityService',
              '$filter',
              'LanguageService',
              function (t, i, r, u) {
                return i.getUserSessionInfo().then(function (i) {
                  return new n.common.services.FailedTransactionSearchHelper(t, r('date') (n.utils.parseDateString(i.LastSignOn, u.getLanguage(), !0), 'dd/MM/yyyy hh:mm a'), null)
                })
              }
            ],
            queryTypes: [
              'LookupsService',
              function (n) {
                return n.getQueryTypesForPayments()
              }
            ],
            channels: [
              'LookupsService',
              function (n) {
                return n.getChannels()
              }
            ],
            countries: [
              'LookupsService',
              function (n) {
                return n.getCountries()
              }
            ],
            paymentTypes: [
              'LookupsService',
              function (n) {
                return n.getPaymentTypes()
              }
            ],
            cards: [
              'ProfileProductsService',
              function (t) {
                return t.getCardsByRequestType(n.server.ProductRequestType.CardsForPayment)
              }
            ],
            interbankCards: [
              'ProfileProductsService',
              function (t) {
                return t.getCardsByRequestType(n.server.ProductRequestType.INTERBANK_CARDS)
              }
            ],
            alphaLoans: [
              'ProfileProductsService',
              function (n) {
                return n.getAlphaLoansForPayment()
              }
            ],
            consumerLoans: [
              'LookupsService',
              function (n) {
                return n.getPersonalConsumerLoans()
              }
            ],
            mortgageEnterpriseLoans: [
              'ProfileProductsService',
              function (t) {
                return t.getLoansByRequestType(n.server.ProductRequestType.MortgageEnterpriseLoansForPayment)
              }
            ],
            TransactionActionsService: [
              'ProfileProductsService',
              'STRINGS',
              'paymentTypes',
              'cards',
              'interbankCards',
              'alphaLoans',
              'consumerLoans',
              'mortgageEnterpriseLoans',
              'LookupsService',
              'ProductMatchingService',
              'MenuItemsService',
              function (t, i, r, u, f, e, o, s, h, c, l) {
                return new n.common.services.CompositeTransactionActionsService(t, i, h, r, u, f, e, o, s, c, l)
              }
            ],
            transactionTypes: [
              'paymentTypes',
              function () {
                return []
              }
            ],
            failedBehavior: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo().then(function (n) {
                  return {
                    Option: 1,
                    LastSignOnDateTime: n.LastSignOn
                  }
                })
              }
            ]
          },
          menuItem: {
            inMenu: !1
          }
        }).state('root.transError', {
          url: '/transition-error/:id',
          templateUrl: 'Templates/common/transition-error',
          controller: 'TransitionErrorController as vm',
          resolve: {
            errorCode: [
              '$stateParams',
              function (n) {
                return n.id
              }
            ]
          }
        })
      }
      ])
    }) (t = n.misc || (n.misc = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      t.mainModule = angular.module('alpha.myBank', [
        'alpha'
      ]);
      t.mainModule.config(['$stateProvider',
      '$urlRouterProvider',
      function (t) {
        t.state('root.myBank', {
          url: '/my-bank',
          templateUrl: 'Templates/Features/MyBank/WizardWrapper',
          controller: 'MyBankTransferWizard as vm',
          resolve: {
            userInfo: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ],
            mybankInfoWrapper: [
              'QueriesService',
              'userInfo',
              '$parse',
              'STRINGS',
              '$q',
              function (n, t, i, r, u) {
                return t.PasswordValidityStatus != 0 ? u.when({
                  myBankInfo: null,
                  error: r['mybank.password.expiration']
                })  : n.getMyBankInfo({
                  AuthorisationID: t.MyBankReferenceID
                }).then(function (n) {
                  return n.ResultCode == 0 ? {
                    myBankInfo: n,
                    error: null
                  }
                   : {
                    myBankInfo: null,
                    error: i('Error.Message') (n) || r['systemΕrror']
                  }
                }).catch (function (n) {
                  return {
                    myBankInfo: null,
                    error: i('Error.Message') (n) || r.systemError
                  }
                })
              }
            ],
            Model: [
              'mybankInfoWrapper',
              function (t) {
                var i = new n.model.MyBankTransferInfo(t.myBankInfo);
                return null != t.error && (i.ErrorMessage = t.error, i.HasErrors = !0),
                i
              }
            ],
            debitAccounts: [
              'ProfileProductsService',
              function (t) {
                return t.getAccountsByRequestType(n.server.ProductRequestType.DebitAccounts).then(function (t) {
                  return t.filter(function (t) {
                    return t.CurrencyEnum === n.server.Currency.EUR
                  })
                })
              }
            ],
            debitAccountsForOrderedTransfer: [
              'ProfileProductsService',
              function () {
                return []
              }
            ],
            otpHandler: [
              'OtpHandlerService',
              'TransferUtilityService',
              'Model',
              function (n, t, i) {
                var r = {
                  payload: t.buildMyBankPayload(i),
                  uiContext: {
                    isMyBnak: !0,
                    isNewScreen: !0,
                    redirectUrl: i.RedirectUrl || ''
                  }
                };
                return n.activatedHandler(36, r)
              }
            ]
          },
          menuItem: {
            parent: 'root',
            inMenu: !1
          }
        })
      }
      ])
    }) (t = n.myBank || (n.myBank = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      t.mainModule = angular.module('alpha.oAuth', [
        'alpha',
        'alpha.services'
      ]);
      t.mainModule.config(['$stateProvider',
      '$urlRouterProvider',
      function (t) {
        t.state('root.oauth', {
          abstract: !0,
          url: '/oauth/begin/:key',
          template: '<div data-ui-view=""></div>',
          resolve: {
          }
        }).state(n.constants.stateNames.oAuthDanceBeginState, {
          url: '',
          templateUrl: 'Templates/Features/OAuth/BeginOAuthDance',
          controller: 'OAuthBeginController as vm',
          resolve: {
            callingState: [
              '$state',
              function (n) {
                return {
                  Name: n.current.name,
                  Params: n.params,
                  URL: n.href(n.current.name, n.params)
                }
              }
            ],
            oAuthData: [
              '$stateParams',
              'StateHelperService',
              function (n, t) {
                var i = n.key;
                return t.getStateData(i)
              }
            ]
          }
        })
      }
      ])
    }) (t = n.oAuth || (n.oAuth = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      'use strict';
      t.mainModule = angular.module('alpha.payments', [
        'alpha',
        'alpha.services',
        'alpha.transactions',
        'ngSanitize'
      ]);
      t.mainModule.config(['$stateProvider',
      '$urlRouterProvider',
      function (t) {
        function i(n) {
          return n.AddProductToProfile = n.AddProductFromTemplateToProfile,
          n.TemplateType = 1,
          n.Template.TemplateType = n.TemplateType,
          n.Template.TransactionType = n.Template.Transaction.Type,
          n
        }
        function r(n, t, i, r, u) {
          var f = {
            payload: u.buildTransactionTemplateModel(0, t.Template, t.AddProductFromTemplateToProfile),
            uiContext: {
              isNewScreen: !0
            }
          };
          return i.activatedHandler(31, f)
        }
        t.state('root.payments', {
          url: '/payments',
          template: '<div data-ui-view=""></div>',
          abstract: !0,
          resolve: {
            userInfo: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ],
            isJob: function () {
              return !1
            },
            otpHandler: [
              'OtpHandlerService',
              function (n) {
                return n.retrieveHandler(2, {
                  payload: null,
                  uiContext: {
                    isNewScreen: !0
                  }
                })
              }
            ]
          }
        }).state(n.constants.stateNames.paymentsSearch, {
          url: '/search',
          templateUrl: 'Templates/Features/Payments/searchpayment',
          controller: 'SearchPaymentsController as vm',
          resolve: {
            paymentTypes: [
              'LookupsService',
              function (n) {
                return n.getPaymentTypes().then(function (n) {
                  return n.filter(function (n) {
                    return !n.Item.ParentProductTypeId
                  })
                })
              }
            ],
            paymentTemplates: [
              'LookupsService',
              function (n) {
                return n.getPaymentTemplates()
              }
            ],
            footerKey: function () {
              return null
            }
          }
        }).state(n.constants.stateNames.newDynamicPaymentState, {
          url: '/new/{id}/{key}',
          controller: 'DynamicPaymentWizardController as vm',
          templateUrl: 'Templates/Features/Payments/PaymentWizard',
          resolve: n.payments.getDynamicPaymentResolve({
            Model: [
              'QueriesService',
              function (t) {
                var i = new n.model.DynamicPaymentInfo;
                return t.getDatesAndOnLineStatus().then(function (n) {
                  var t = n;
                  return i.setDatesAndOnlineStatus(t),
                  i
                }, function () {
                  return i.HasErrors = !0,
                  i.ErrorMessage = 'Could not get online status and calendar information.',
                  i
                })
              }
            ],
            otpHandler: [
              'Model',
              'OtpHandlerService',
              'paymentType',
              function (n, t, i) {
                var r = {
                  Amount: 0,
                  Block: n.IsAmountBlocked,
                  PaymentDetails: n.Details,
                  CreditProductCode: n.PaymentCode,
                  CreditProductType: i.ProductTypeId,
                  PaymentType: n.SupportsDct ? 8 : n.PaymentType,
                  NumberOfInstalments: n.WantsInstallments ? n.Installments : 1,
                  IsParentPayment: i.IsParent || !1
                };
                return t.activatedHandler(2, {
                  payload: r,
                  uiContext: {
                    isNewScreen: !0
                  }
                })
              }
            ]
          })
        }).state('root.payments.evoucherpay', {
          url: '/evoucherpay/{id}/{key}',
          controller: 'EVoucherPaymentWizardController as vm',
          templateUrl: 'Templates/Features/Payments/PaymentWizard',
          resolve: n.payments.getDynamicPaymentResolve({
            Model: [
              'QueriesService',
              function (t) {
                var i = new n.model.DynamicPaymentInfo;
                return t.getDatesAndOnLineStatus().then(function (n) {
                  var t = n;
                  return i.setDatesAndOnlineStatus(t),
                  i
                }, function () {
                  return i.HasErrors = !0,
                  i.ErrorMessage = 'Could not get online status and calendar information.',
                  i
                })
              }
            ]
          })
        }).state(n.constants.stateNames.newDonationPaymentState, {
          url: '/new-donation/{id}/{key}',
          controller: 'DonationPaymentWizardController as vm',
          templateUrl: 'Templates/Features/Payments/PaymentWizard',
          resolve: n.payments.getDynamicPaymentResolve({
            Model: [
              'QueriesService',
              'userInfo',
              function (t, i) {
                var r = new n.model.DonationPaymentInfo;
                return r.FirstName = i.Name,
                r.LastName = i.SurName,
                t.getDatesAndOnLineStatus().then(function (n) {
                  var t = n;
                  return r.setDatesAndOnlineStatus(t),
                  r
                }, function () {
                  return r.HasErrors = !0,
                  r.ErrorMessage = 'Could not get online status and calendar information.',
                  r
                })
              }
            ]
          })
        }).state(n.constants.stateNames.newDonationWithCodePaymentState, {
          url: '/new-donation-with-code/{id}/{key}',
          controller: 'DonationWithCodePaymentWizardController as vm',
          templateUrl: 'Templates/Features/Payments/PaymentWizard',
          resolve: n.payments.getDynamicPaymentResolve({
            Model: [
              'QueriesService',
              'userInfo',
              function (t) {
                var i = new n.model.DynamicPaymentInfo;
                return t.getDatesAndOnLineStatus().then(function (n) {
                  var t = n;
                  return i.setDatesAndOnlineStatus(t),
                  i
                }, function () {
                  return i.HasErrors = !0,
                  i.ErrorMessage = 'Could not get online status and calendar information.',
                  i
                })
              }
            ]
          })
        }).state(n.constants.stateNames.newCustomPaymentState, {
          url: '/new-custom/{id}',
          controller: 'CustomPaymentWizardController as vm',
          templateUrl: 'Templates/Features/Payments/PaymentWizard',
          resolve: n.payments.getDynamicPaymentResolve({
            Model: [
              'QueriesService',
              'userInfo',
              function (t) {
                var i = new n.model.CustomPaymentInfo;
                return t.getDatesAndOnLineStatus().then(function (n) {
                  var t = n;
                  return i.setDatesAndOnlineStatus(t),
                  i
                }, function () {
                  return i.HasErrors = !0,
                  i.ErrorMessage = 'Could not get online status and calendar information.',
                  i
                })
              }
            ]
          })
        }).state(n.constants.stateNames.newDynamicGroupPaymentState, {
          url: '/new-group/{id}',
          controller: 'GroupDynamicPaymentWizardController as vm',
          templateUrl: 'Templates/Features/Payments/PaymentWizard',
          resolve: n.payments.getGroupPaymentResolve({
            Model: [
              'QueriesService',
              function (t) {
                var i = new n.model.DynamicPaymentInfo;
                return t.getDatesAndOnLineStatus().then(function (n) {
                  var t = n;
                  return i.setDatesAndOnlineStatus(t),
                  i
                }, function () {
                  return i.HasErrors = !0,
                  i.ErrorMessage = 'Could not get online status and calendar information.',
                  i
                })
              }
            ],
            userInfo: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ]
          })
        }).state(n.constants.stateNames.newCardPaymentState, {
          url: '/card/:id/:key',
          controller: 'CardPaymentWizardController as vm',
          templateUrl: 'Templates/Features/Payments/PaymentWizard',
          resolve: n.payments.getAlphaCardPaymentResolve({
            Model: [
              'QueriesService',
              function (t) {
                var i = new n.model.AlphaCardPaymentInfo;
                return t.getDatesAndOnLineStatus().then(function (n) {
                  var t = n;
                  return i.setDatesAndOnlineStatus(t),
                  i
                }, function () {
                  return i.HasErrors = !0,
                  i.ErrorMessage = 'Could not get online status and calendar information.',
                  i
                })
              }
            ]
          })
        }).state(n.constants.stateNames.newInterbankCardPaymentState, {
          url: '/interbank-card/:id/:key',
          controller: 'InterbankCardWizardPaymentController as vm',
          templateUrl: 'Templates/Features/Payments/PaymentWizard',
          resolve: n.payments.getInterCardPaymentResolve({
            Model: [
              'QueriesService',
              'banks',
              function (t, i) {
                var r = new n.model.InterbankCardPaymentInfo;
                return r.Banks = i,
                t.getDatesAndOnLineStatus().then(function (n) {
                  var t = n;
                  return r.setDatesAndOnlineStatus(t),
                  r
                }, function () {
                  return r.HasErrors = !0,
                  r.ErrorMessage = 'Could not get online status and calendar information.',
                  r
                })
              }
            ],
            otpHandler: [
              'OtpHandlerService',
              'RoleService',
              function (n, t) {
                var i = 'awb.' + (t.IsRetail() ? 'retail' : 'corporate') + '.payment.card.interbank';
                return n.activatedHandler(2, i)
              }
            ]
          })
        }).state(n.constants.stateNames.newLoanPaymentState, {
          url: '/loan/:id/:key',
          controller: 'LoanPaymentWizardController as vm',
          templateUrl: 'Templates/Features/Payments/PaymentWizard',
          resolve: n.payments.getLoanPaymentResolve({
            Model: [
              'QueriesService',
              function (t) {
                var i = new n.model.LoanPaymentInfo;
                return t.getDatesAndOnLineStatus().then(function (n) {
                  var t = n;
                  return i.setDatesAndOnlineStatus(t),
                  i
                }, function () {
                  return i.HasErrors = !0,
                  i.ErrorMessage = 'Could not get online status and calendar information.',
                  i
                })
              }
            ],
            otpHandler: [
              'OtpHandlerService',
              function (n) {
                return n.activatedHandler(2, 'awb.payment.loan.nonAlpha')
              }
            ]
          })
        }).state(n.constants.stateNames.newHousingLoanPaymentState, {
          url: '/housing-loan/:id/:key',
          controller: 'HousingLoanPaymentWizardController as vm',
          templateUrl: 'Templates/Features/Payments/PaymentWizard',
          resolve: {
            userInfo: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ],
            debitAccounts: [
              'ProfileProductsService',
              function (t) {
                return t.getAccountsByRequestType(n.server.ProductRequestType.DebitAccountsForPayment)
              }
            ],
            loans: [
              'ProfileProductsService',
              function (t) {
                return t.getLoansByRequestType(n.server.ProductRequestType.MortgageEnterpriseLoansForPayment)
              }
            ],
            requestFactory: function () {
              return new n.payments.LoanExecuteRequestFactory
            },
            Model: [
              'QueriesService',
              function (t) {
                var i = new n.model.HousingLoanPaymentInfo;
                return t.getDatesAndOnLineStatus().then(function (n) {
                  var t = n;
                  return i.setDatesAndOnlineStatus(t),
                  i
                }, function () {
                  return i.HasErrors = !0,
                  i.ErrorMessage = 'Could not get online status and calendar information.',
                  i
                })
              }
            ],
            otpHandler: [
              'OtpHandlerService',
              function (n) {
                return n.activatedHandler(2, 'awb.payment.loan.house')
              }
            ]
          }
        }).state(n.constants.stateNames.newAlphaLoanPaymentState, {
          url: '/alpha-loan/:id/:key',
          controller: 'AlphaLoanPaymentWizardController as vm',
          templateUrl: 'Templates/Features/Payments/PaymentWizard',
          resolve: n.payments.getAlphaLoanPaymentResolve({
            Model: [
              'QueriesService',
              function (t) {
                var i = new n.model.LoanPaymentInfo;
                return t.getDatesAndOnLineStatus().then(function (n) {
                  var t = n;
                  return i.setDatesAndOnlineStatus(t),
                  i
                }, function () {
                  return i.HasErrors = !0,
                  i.ErrorMessage = 'Could not get online status and calendar information.',
                  i
                })
              }
            ],
            otpHandler: [
              'OtpHandlerService',
              function (n) {
                return n.retrieveHandler(2, {
                  uiContext: {
                    isNewScreen: !0
                  }
                })
              }
            ]
          })
        }).state(n.constants.stateNames.eVoucherIssue, {
          url: '/e-voucher-issue/:id/:key',
          controller: 'eVoucherIssueAndPayment as vm',
          templateUrl: 'Templates/Features/Payments/PaymentWizard',
          resolve: {
            userInfo: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ],
            eVoucherConfigTree: [
              'LookupsService',
              function (n) {
                return n.getEVoucherData()
              }
            ],
            debitAccounts: [
              'ProfileProductsService',
              'StateHelperService',
              '$stateParams',
              function (t, i, r) {
                var f = r.key;
                if (f) var u = i.getStateData(f),
                e = u.Transaction ? u.Transaction : u,
                o = e.DebitProduct;
                return t.getAccountsByRequestType(n.server.ProductRequestType.LaborTicketDebitAccounts, o)
              }
            ],
            Model: [
              'QueriesService',
              '$stateParams',
              'StateHelperService',
              function (t, i, r) {
                var u = new n.model.eVoucherIssueInfo,
                f = t.getDatesAndOnLineStatus().then(function (n) {
                  var t = n;
                  return u.setDatesAndOnlineStatus(t),
                  u
                }, function () {
                  return u.HasErrors = !0,
                  u.ErrorMessage = 'Could not get online status and calendar information.',
                  u
                });
                return f.then(function (n) {
                  var f = i.key,
                  u;
                  return f && (u = r.getStateData(f), u && u.Transaction) ? t.getTransactionTemplates(t.getTransactionTemplatesRequest(u.ID, 1)).then(function (t) {
                    var i = t.Templates[0];
                    return r.setStateData(f, i),
                    n
                  })  : n
                })
              }
            ],
            paymentType: [
              '$stateParams',
              'LookupsService',
              function (n, t) {
                var i = parseInt(n.id);
                return t.getPaymentTypeByProductTypeId(i)
              }
            ]
          }
        }).state(n.constants.stateNames.paymentsLaborTicketState, {
          url: '/labor-ticket/:id/:key',
          controller: 'LaborTicketPaymentController as vm',
          templateUrl: 'Templates/Features/Payments/PaymentWizard',
          resolve: n.payments.getLaborTicketResolve({
            Model: [
              'QueriesService',
              '$stateParams',
              'StateHelperService',
              function (t, i, r) {
                var u = new n.model.LaborTicketPaymentInfo,
                f = t.getDatesAndOnLineStatus().then(function (n) {
                  var t = n;
                  return u.setDatesAndOnlineStatus(t),
                  u
                }, function () {
                  return u.HasErrors = !0,
                  u.ErrorMessage = 'Could not get online status and calendar information.',
                  u
                });
                return f.then(function (u) {
                  var e = i.key,
                  f;
                  return e && (f = r.getStateData(e), f && f.Transaction) ? (u.isTemplate = !0, t.getTransactionTemplates(t.getTransactionTemplatesRequest(f.ID, 1)).then(function (t) {
                    var i = !n.utils.isUndefinedOrNull(t.Templates[0]) && !n.utils.isUndefinedOrNull(t.Templates[0].Transaction) ? t.Templates[0].Transaction : t.Templates[0];
                    return r.setStateData(e, i),
                    u
                  }))  : u
                })
              }
            ]
          })
        }).state(n.constants.stateNames.paymentsVehicleTaxState, {
          url: '/vehicle-tax/:id',
          controller: 'VehicleTaxPaymentController as vm',
          templateUrl: 'Templates/Features/Payments/PaymentWizard',
          resolve: n.payments.getVehicleTaxPaymentResolve({
            Model: [
              'QueriesService',
              'paymentType',
              function (t) {
                var i = new n.model.VehicleTaxPaymentInfo;
                return t.getDatesAndOnLineStatus().then(function (n) {
                  var t = n;
                  return i.setDatesAndOnlineStatus(t),
                  i
                }, function () {
                  return i.HasErrors = !0,
                  i.ErrorMessage = 'Could not get online status and calendar information.',
                  i
                })
              }
            ]
          })
        }).state(n.constants.stateNames.hellenicAmericanFoundationPayment, {
          url: '/hellenic-american/:id',
          controller: 'HellenicAmericanPaymentController as vm',
          templateUrl: 'Templates/Features/Payments/PaymentWizard',
          resolve: n.payments.getDynamicPaymentResolve({
            Model: [
              'QueriesService',
              'paymentType',
              function (t) {
                var i = new n.model.DynamicPaymentInfo;
                return t.getDatesAndOnLineStatus().then(function (n) {
                  var t = n;
                  return i.setDatesAndOnlineStatus(t),
                  i
                }, function () {
                  return i.HasErrors = !0,
                  i.ErrorMessage = 'Could not get online status and calendar information.',
                  i
                })
              }
            ]
          })
        }).state(n.constants.stateNames.eydapProfiledPayment, {
          url: '/eydap-profile/:id',
          controller: 'ProfiledEydapPaymentController as vm',
          templateUrl: 'Templates/Features/Payments/PaymentWizard',
          resolve: {
            debitAccounts: [
              'ProfileProductsService',
              function (t) {
                return t.getAccountsByRequestType(n.server.ProductRequestType.DebitAccountsForPayment)
              }
            ],
            Model: [
              'QueriesService',
              'paymentType',
              function (t) {
                var i = new n.model.DynamicPaymentInfo;
                return i.TransferMethodImmediate = !1,
                i.TransferSource = 0,
                t.getDatesAndOnLineStatus().then(function (n) {
                  var t = n;
                  return i.setDatesAndOnlineStatus(t),
                  i.TransactionDate = null,
                  i
                }, function () {
                  return i.HasErrors = !0,
                  i.ErrorMessage = 'Could not get online status and calendar information.',
                  i
                })
              }
            ],
            paymentType: [
              '$stateParams',
              'LookupsService',
              function (n, t) {
                var i = parseInt(n.id);
                return t.getPaymentTypeByProductTypeId(i)
              }
            ],
            savedPaymentCodes: [
              '$stateParams',
              'LookupsService',
              function (n, t) {
                var i = parseInt(n.id);
                return t.getPredefinedCodesForPaymentType(i)
              }
            ]
          }
        }).state(n.constants.stateNames.myPayments, {
          url: '/myPayments',
          abstract: !0,
          template: '<div ui-view=""></div>',
          resolve: {
            paymentTypes: [
              'LookupsService',
              function (n) {
                return n.getPaymentTypes()
              }
            ],
            cards: [
              'ProfileProductsService',
              function (t) {
                return t.getCardsByRequestType(n.server.ProductRequestType.CardsForPayment, !0).then(function (n) {
                  return n.length > 0 ? n.filter(function (n) {
                    return n.CategoryType != 104
                  })  : n
                })
              }
            ],
            interbankCards: [
              'ProfileProductsService',
              function (t) {
                return t.getCardsByRequestType(n.server.ProductRequestType.INTERBANK_CARDS, !0)
              }
            ],
            alphaLoans: [
              'ProfileProductsService',
              function (n) {
                return n.getAlphaLoansForPayment()
              }
            ],
            consumerLoans: [
              'LookupsService',
              function (n) {
                return n.getPersonalConsumerLoans()
              }
            ],
            mortgageEnterpriseLoans: [
              'ProfileProductsService',
              function (t) {
                return t.getLoansByRequestType(n.server.ProductRequestType.MortgageEnterpriseLoansForPayment)
              }
            ],
            TransactionActionsService: [
              'ProfileProductsService',
              'STRINGS',
              'paymentTypes',
              'cards',
              'interbankCards',
              'alphaLoans',
              'consumerLoans',
              'mortgageEnterpriseLoans',
              'ProductMatchingService',
              'MenuItemsService',
              function (t, i, r, u, f, e, o, s, h, c) {
                return new n.common.services.PaymentTransactionActionsService(t, i, r, u, f, e, o, s, h, c)
              }
            ]
          }
        }).state('root.payments.mypayments.list', {
          url: '/list',
          controller: 'MyPaymentsController as vm',
          templateUrl: 'Templates/Features/Payments/MyPayments/myPayments'
        }).state('root.payments.mypayments.list.delete', {
          url: '/delete/:id',
          templateUrl: 'Templates/Features/Payments/MyPayments/deleteMyPayment',
          controller: 'MyPaymentsDeleteController as vm',
          successState: 'root.payments.mypayments.list',
          modal: !0,
          modalSize: 'lg'
        }).state('root.payments.mypayments.add-dynamic-withFixCode', {
          url: '/add-dynamic-withFixCode/:key',
          controller: 'MyPaymentsAddController as vm',
          templateUrl: 'Templates/Features/Payments/MyPayments/addMyPaymentDynamic',
          resolve: {
            transactionTemplates: [
              'ProfileProductsService',
              function (n) {
                return n.getTransactionTemplates(1).then(function (n) {
                  return n.ResultCode == 0 ? n.Templates : [
                  ]
                })
              }
            ],
            fixCode: [
              function () {
                return !0
              }
            ],
            Model: [
              'LookupsService',
              'StateHelperService',
              '$stateParams',
              '$q',
              function (t, r, u, f) {
                var e = new n.model.AddMyPaymentsTemplateViewModel,
                h = u.key,
                s = r.getStateData(h),
                o;
                return s && (e.Template.Transaction = s),
                o = f.defer(),
                t.getPredefinedCodesForPaymentType(e.Template.Transaction.CreditProductTypeID).then(function (n) {
                  n && n.length && n.forEach(function (n) {
                    n.Code == e.Template.Transaction.CreditProduct && (e.Template.Transaction.IsProfileProduct = !0, e.AddProductFromTemplateToProfile = null)
                  })
                }).finally (function () {
                  o.resolve(i(e))
                }),
                o.promise
              }
            ],
            otpHandler: [
              '$q',
              'Model',
              'OtpHandlerService',
              'ProfileProductsService',
              'QueriesService',
              r
            ]
          }
        }).state('root.payments.mypayments.add-dynamic-withoutFixCode', {
          url: '/add-dynamic-withoutFixCode/:key',
          controller: 'MyPaymentsAddController as vm',
          templateUrl: 'Templates/Features/Payments/MyPayments/addMyPaymentDynamicWithoutFixCode',
          resolve: {
            transactionTemplates: [
              'ProfileProductsService',
              function (n) {
                return n.getTransactionTemplates(1).then(function (n) {
                  return n.ResultCode == 0 ? n.Templates : [
                  ]
                })
              }
            ],
            fixCode: [
              function () {
                return !1
              }
            ],
            Model: [
              'StateHelperService',
              '$stateParams',
              function (t, r) {
                var u = new n.model.AddMyPaymentsTemplateViewModel,
                e = r.key,
                f = t.getStateData(e);
                return f && (u.Template.Transaction = f),
                u.AddProductFromTemplateToProfile = null,
                i(u)
              }
            ],
            otpHandler: [
              '$q',
              'Model',
              'OtpHandlerService',
              'ProfileProductsService',
              'QueriesService',
              r
            ]
          }
        }).state('root.payments.mypayments.add-card', {
          url: '/add-card/:key',
          controller: 'MyPaymentsAddController as vm',
          templateUrl: 'Templates/Features/Payments/MyPayments/addMyPaymentCard',
          resolve: {
            transactionTemplates: [
              function () {
                return []
              }
            ],
            fixCode: [
              function () {
                return !1
              }
            ],
            Model: [
              'StateHelperService',
              'interbankCards',
              'cards',
              '$stateParams',
              function (t, r, u, f) {
                var e = new n.model.AddMyPaymentsTemplateViewModel,
                c = f.key,
                s = t.getStateData(c),
                o,
                h;
                return s && (e.Template.Transaction = s),
                o = [
                ],
                o = o.concat.apply(o, [
                  r,
                  u
                ]),
                h = function (n) {
                  var t = n.filter(function (n) {
                    return n.Code == e.Template.Transaction.CreditProduct
                  });
                  return t.length > 0 ? !0 : !1
                },
                h(o) ? (e.Template.Transaction.IsProfileProduct = !0, e.AddProductFromTemplateToProfile = null)  : e.Template.Transaction.IsProfileProduct = !1,
                i(e)
              }
            ],
            otpHandler: [
              '$q',
              'Model',
              'OtpHandlerService',
              'ProfileProductsService',
              'QueriesService',
              r
            ]
          }
        }).state('root.payments.mypayments.add-loan', {
          url: '/add-loan/:key',
          controller: 'MyPaymentsAddController as vm',
          templateUrl: 'Templates/Features/Payments/MyPayments/addMyPaymentLoan',
          resolve: {
            transactionTemplates: [
              function () {
                return []
              }
            ],
            fixCode: [
              function () {
                return !1
              }
            ],
            Model: [
              'StateHelperService',
              'alphaLoans',
              'consumerLoans',
              'mortgageEnterpriseLoans',
              '$stateParams',
              function (t, r, u, f, e) {
                var o = new n.model.AddMyPaymentsTemplateViewModel,
                l = e.key,
                h = t.getStateData(l),
                s,
                c;
                return h && (o.Template.Transaction = h),
                s = [
                ],
                s = s.concat.apply(s, [
                  r,
                  u,
                  f
                ]),
                c = function (n) {
                  var t = n.filter(function (n) {
                    return n.Code == o.Template.Transaction.CreditProduct
                  });
                  return t.length > 0 ? !0 : !1
                },
                c(s) ? (o.Template.Transaction.IsProfileProduct = !0, o.AddProductFromTemplateToProfile = null)  : o.Template.Transaction.IsProfileProduct = !1,
                i(o)
              }
            ],
            otpHandler: [
              '$q',
              'Model',
              'OtpHandlerService',
              'ProfileProductsService',
              'QueriesService',
              r
            ]
          }
        }).state('root.payments.mypayments.edit', {
          template: '<div data-ui-view=""></div>',
          controller: 'MyPaymentsEditController as vm',
          abstract: !0,
          url: '/edit/:id',
          resolve: {
            Model: [
              'QueriesService',
              '$stateParams',
              'paymentTypes',
              'cards',
              'interbankCards',
              'alphaLoans',
              'consumerLoans',
              'TransactionActionsService',
              function (t, i, r, u, f, e, o, s) {
                var c = i.id,
                h = new n.model.MyPaymentsTemplatesBase;
                return t.getTransactionTemplates({
                  ID: c,
                  Type: 1
                }).then(function (t) {
                  var i = new n.model.MyPaymentsTemplatesBase(t.Templates[0], r, u, f, e, o);
                  return s.decorateTransactionTemplateViewModel(i),
                  h = i
                }, function () {
                  return h.HasErrors = !0,
                  h.ErrorMessage = 'Could not get the details of the requested payment template.',
                  h
                })
              }
            ]
          }
        }).state('root.payments.mypayments.edit.dynamic-with-code', {
          url: '/dynamic-with-code',
          templateUrl: 'Templates/Features/Payments/MyPayments/editMyPaymentWithSavedCode'
        }).state('root.payments.mypayments.edit.dynamic-without-code', {
          url: '/dynamic-without-code',
          templateUrl: 'Templates/Features/Payments/MyPayments/editMyPaymentNoCode'
        }).state('root.payments.mypayments.edit.card', {
          url: '/card',
          templateUrl: 'Templates/Features/Payments/MyPayments/editMyPaymentCard'
        }).state('root.payments.mypayments.edit.loan', {
          url: '/loan',
          templateUrl: 'Templates/Features/Payments/MyPayments/editMyPaymentLoan'
        }).state(n.constants.stateNames.paymentsHistory, {
          url: '/history',
          templateUrl: 'Templates/Features/payments/history',
          controller: 'TransactionsHistoryController as vm',
          resolve: {
            transactionSearchHelper: [
              'STRINGS',
              function (t) {
                return new n.common.services.PaymentTranscationSearchHelper(t)
              }
            ],
            queryTypes: [
              'LookupsService',
              function (n) {
                return n.getQueryTypesForPayments()
              }
            ],
            channels: [
              'LookupsService',
              function (n) {
                return n.getChannels()
              }
            ],
            countries: [
              'LookupsService',
              function (n) {
                return n.getCountries()
              }
            ],
            paymentTypes: [
              'LookupsService',
              function (n) {
                return n.getPaymentTypes()
              }
            ],
            cards: [
              'ProfileProductsService',
              function (t) {
                return t.getCardsByRequestType(n.server.ProductRequestType.CardsForPayment, !0).then(function (n) {
                  return n.length > 0 ? n.filter(function (n) {
                    return n.CategoryType != 104
                  })  : n
                })
              }
            ],
            interbankCards: [
              'ProfileProductsService',
              function (t) {
                return t.getCardsByRequestType(n.server.ProductRequestType.INTERBANK_CARDS, !0)
              }
            ],
            alphaLoans: [
              'ProfileProductsService',
              function (n) {
                return n.getAlphaLoansForPayment()
              }
            ],
            consumerLoans: [
              'LookupsService',
              function (n) {
                return n.getPersonalConsumerLoans()
              }
            ],
            mortgageEnterpriseLoans: [
              'ProfileProductsService',
              function (t) {
                return t.getLoansByRequestType(n.server.ProductRequestType.MortgageEnterpriseLoansForPayment)
              }
            ],
            TransactionActionsService: [
              'ProfileProductsService',
              'STRINGS',
              'paymentTypes',
              'cards',
              'interbankCards',
              'alphaLoans',
              'consumerLoans',
              'mortgageEnterpriseLoans',
              'ProductMatchingService',
              'MenuItemsService',
              function (t, i, r, u, f, e, o, s, h, c) {
                return new n.common.services.PaymentTransactionActionsService(t, i, r, u, f, e, o, s, h, c)
              }
            ],
            transactionTypes: [
              'paymentTypes',
              'VersionFilterService',
              'LookupsService',
              function (t, i, r) {
                return i.IsInVersions(n.constants.versionFilters.MY_BANK).then(function (n) {
                  var i = t.filter(function (n) {
                    return !n.Item.ParentProductTypeId && !n.Item.IsGroup && n.Item.IsActive
                  }).map(function (n) {
                    return {
                      title: n.title,
                      searchTerms: n.searchTerms,
                      value: n.Item.ProductTypeId
                    }
                  });
                  return n && i.push(r.getMyBankTransactionSearchItem()),
                  i.push(r.getIrisTransactionSearchItem()),
                  i
                })
              }
            ],
            failedBehavior: function () {
              return null
            }
          }
        }).state(n.constants.stateNames.paymentsHistory + '.mybank-details', {
          url: '/mybank-details/{id}/{productTypeId}',
          controllerProvider: [
            '$stateParams',
            function () {
              return (new n.payments.PaymentDetailAbstractFactory).getController(n.constants.payments.myBank_productTypeId) + ' as vm'
            }
          ],
          templateUrl: function () {
            return (new n.payments.PaymentDetailAbstractFactory).getTemplate(n.constants.payments.myBank_productTypeId)
          },
          modal: !0,
          modalClass: 'custom'
        }).state(n.constants.stateNames.paymentsHistory + '.iris-details', {
          url: '/iris-details/{id}/{productTypeId}',
          controllerProvider: [
            '$stateParams',
            function () {
              return (new n.payments.PaymentDetailAbstractFactory).getController(n.constants.payments.iris_productTypeId) + ' as vm'
            }
          ],
          templateUrl: function () {
            return (new n.payments.PaymentDetailAbstractFactory).getTemplate(n.constants.payments.myBank_productTypeId)
          },
          modal: !0,
          modalClass: 'custom'
        }).state(n.constants.stateNames.paymentsHistory + n.constants.stateNames.transactionDetails, {
          url: '/details/{id}/{productTypeId}/',
          controllerProvider: [
            '$stateParams',
            function (t) {
              return (new n.payments.PaymentDetailAbstractFactory).getController(t.productTypeId) + ' as vm'
            }
          ],
          templateUrl: function (t) {
            return (new n.payments.PaymentDetailAbstractFactory).getTemplate(t.productTypeId)
          },
          resolve: {
            securityServiceConfig: [
              '$stateParams',
              'LookupsService',
              function (n, t) {
                return n.productTypeId == '10179' ? t.getLaborTicketSecurityServices()  : [
                ]
              }
            ]
          },
          modal: !0,
          modalClass: 'custom'
        }).state(n.constants.stateNames.paymentsHistory + n.constants.stateNames.transactionCancel, {
          url: '/cancel/{id}/{productTypeId}',
          controller: 'TransactionDetailsController as vm',
          templateUrl: 'Templates/Features/Payments/Transaction/cancel',
          modal: !0,
          modalClass: 'custom'
        }).state(n.constants.stateNames.paymentsPending, {
          url: '/pending',
          templateUrl: 'Templates/Features/Payments/history',
          controller: 'PendingTransactionsController as vm',
          resolve: {
            transactionSearchHelper: [
              'STRINGS',
              function (t) {
                return new n.common.services.PaymentTranscationSearchHelper(t)
              }
            ],
            queryTypes: [
              'LookupsService',
              function (n) {
                return n.getQueryTypesForPayments()
              }
            ],
            channels: [
              'LookupsService',
              function (n) {
                return n.getChannels()
              }
            ],
            countries: [
              'LookupsService',
              function (n) {
                return n.getCountries()
              }
            ],
            paymentTypes: [
              'LookupsService',
              function (n) {
                return n.getPaymentTypes()
              }
            ],
            cards: [
              'ProfileProductsService',
              function (t) {
                return t.getCardsByRequestType(n.server.ProductRequestType.CardsForPayment, !0).then(function (n) {
                  return n.length > 0 ? n.filter(function (n) {
                    return n.CategoryType != 104
                  })  : n
                })
              }
            ],
            interbankCards: [
              'ProfileProductsService',
              function (t) {
                return t.getCardsByRequestType(n.server.ProductRequestType.INTERBANK_CARDS, !0)
              }
            ],
            alphaLoans: [
              'ProfileProductsService',
              function (n) {
                return n.getAlphaLoansForPayment()
              }
            ],
            consumerLoans: [
              'LookupsService',
              function (n) {
                return n.getPersonalConsumerLoans()
              }
            ],
            mortgageEnterpriseLoans: [
              'ProfileProductsService',
              function (t) {
                return t.getLoansByRequestType(n.server.ProductRequestType.MortgageEnterpriseLoansForPayment)
              }
            ],
            TransactionActionsService: [
              'ProfileProductsService',
              'STRINGS',
              'paymentTypes',
              'cards',
              'interbankCards',
              'alphaLoans',
              'consumerLoans',
              'mortgageEnterpriseLoans',
              'ProductMatchingService',
              'MenuItemsService',
              function (t, i, r, u, f, e, o, s, h, c) {
                return new n.common.services.PaymentTransactionActionsService(t, i, r, u, f, e, o, s, h, c)
              }
            ],
            transactionTypes: [
              'paymentTypes',
              function (n) {
                return n.filter(function (n) {
                  return !n.Item.ParentProductTypeId && !n.Item.IsGroup && n.Item.IsActive
                }).map(function (n) {
                  return {
                    title: n.title,
                    searchTerms: n.searchTerms,
                    value: n.Item.ProductTypeId
                  }
                })
              }
            ],
            failedBehavior: function () {
              return null
            }
          }
        }).state(n.constants.stateNames.paymentsPending + n.constants.stateNames.transactionCancel, {
          url: '/cancel/{id}',
          controller: 'TransactionDetailsController as vm',
          templateUrl: 'Templates/Features/Payments/Transaction/cancel',
          modal: !0,
          modalClass: 'custom'
        }).state(n.constants.stateNames.paymentsPending + n.constants.stateNames.transactionDetails, {
          url: '/details/{id}',
          controller: 'TransactionDetailsController as vm',
          templateUrl: 'Templates/Features/Payments/Transaction/payment-details',
          modal: !0,
          modalClass: 'custom'
        }).state('root.payments.recurring', {
          url: '/recurring',
          abstract: !0,
          template: '<div ui-view=""></div>'
        }).state('root.payments.recurring.list', {
          url: '/list/{account}',
          templateUrl: 'Templates/Features/Payments/Recurring/paymentsRecurring',
          controller: 'PaymentsRecurringController as vm',
          resolve: {
            enquiryAccounts: [
              'ProfileProductsService',
              function (t) {
                return t.getAccountsByRequestType(n.server.ProductRequestType.DebitAccountsForStandingOrders)
              }
            ],
            OnlineStatus: [
              'QueriesService',
              function (n) {
                return n.getDatesAndOnLineStatus().then(function (n) {
                  return n.OnLine
                })
              }
            ],
            standingPaymentTypes: [
              'LookupsService',
              function (n) {
                return n.getStandingPaymentTypes()
              }
            ]
          }
        }).state('root.payments.recurring.details', {
          url: '/details/:key',
          templateUrl: 'Templates/Features/Payments/Recurring/paymentsRecurringDetails',
          controller: 'PaymentsRecurringDetailsController as vm'
        }).state('root.payments.recurring.cancel', {
          url: '/cancel/:key',
          templateUrl: 'Templates/Features/Payments/Recurring/paymentsRecurringDetails',
          controller: 'PaymentsRecurringCancelController as vm'
        }).state('root.payments.recurring.confirm-cancelation', {
          url: '/confirm/:key',
          templateUrl: 'Templates/Features/Payments/Recurring/deleteRecurringConfirmation',
          controller: 'PaymentsRecurringCancelConfirmationController as vm'
        }).state('root.payments.recurring.new', {
          url: '/new',
          templateUrl: 'Templates/Features/Payments/Recurring/paymentsRecurringNewContainer',
          controller: 'PaymentsRecurringNewController as vm',
          resolve: {
            debitAccountsForStandingOrders: [
              'ProfileProductsService',
              function (t) {
                return t.getAccountsByRequestType(n.server.ProductRequestType.DebitAccountsForStandingOrders)
              }
            ],
            OnlineStatus: [
              'QueriesService',
              function (n) {
                return n.getDatesAndOnLineStatus().then(function (n) {
                  return n.OnLine
                })
              }
            ],
            standingPaymentTypes: [
              'LookupsService',
              function (n) {
                return n.getStandingPaymentTypes()
              }
            ],
            otpHandler: [
              'OtpHandlerService',
              function (n) {
                return n.retrieveHandler(33, {
                  uiContext: {
                    isNewScreen: !0
                  }
                })
              }
            ]
          }
        }).state('root.payments.recurring.edit', {
          url: '/edit/:key',
          templateUrl: 'Templates/Features/Payments/Recurring/paymentsRecurringNewContainer',
          controller: 'PaymentsRecurringEditController as vm',
          resolve: {
            debitAccountsForStandingOrders: [
              'ProfileProductsService',
              function (t) {
                return t.getAccountsByRequestType(n.server.ProductRequestType.DebitAccountsForStandingOrders)
              }
            ],
            standingPaymentTypes: [
              'LookupsService',
              function (n) {
                return n.getStandingPaymentTypes()
              }
            ]
          }
        })
      }
      ])
    }) (t = n.payments || (n.payments = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      'use strict';
      t.mainModule = angular.module('alpha.profile', [
        'alpha',
        'alpha.services'
      ]);
      t.mainModule.config(['$stateProvider',
      '$urlRouterProvider',
      function (t, i) {
        i.when('/profile/settings', '/profile/settings/accounts-alpha');
        i.when('/profile/usermanagement', 'profile/usermanagement/userManagementLandingPage');
        t.state(n.constants.stateNames.profileBaseState, {
          url: '/profile',
          template: '<div data-ui-view=""></div>',
          abstract: !0
        }).state(n.constants.stateNames.profilePersonalState, {
          templateUrl: 'Templates/Features/Profile/profile-wrapper',
          url: '/personal/{email}/{referer}',
          controller: 'ProfileController as vm',
          resolve: {
            hasActiveAlerts: [
              'EServicesService',
              function (n) {
                return n.getAccountAlertInfo().then(function (n) {
                  return n.HasActivatedAlerts
                })
              }
            ],
            hasTransactionAlerts: [
              'EServicesService',
              function (n) {
                return n.getAlerts().then(function (n) {
                  if (n) return n.ReceiveAlerts && n.Contact.ContactType == 4
                })
              }
            ],
            model: [
              'AppEventsService',
              'SecurityService',
              'CachingService',
              function (t, i, r) {
                var u = !r.getUserInfoCache();
                return u && t.publish(n.common.services.AppEventsService.InvalidateUserSessionInfo_Event),
                i.getUserSessionInfo(u)
              }
            ],
            fifteenDigitCode: [
              'SecurityService',
              function (t) {
                return t.getCartolini().then(function (t) {
                  return !n.utils.isUndefinedOrNull(t) && t.ResultCode == 0 ? t.Cartolini.UserName15Digit : ''
                })
              }
            ],
            sevenDigitCode: [
              'SecurityService',
              function (t) {
                return t.getCartolini().then(function (t) {
                  return !n.utils.isUndefinedOrNull(t) && t.ResultCode == 0 ? t.Cartolini.UserName7Digit : ''
                })
              }
            ],
            referer: [
              '$stateParams',
              function (n) {
                return n.referer
              }
            ],
            p2pEnabled: [
              'RoleService',
              function (n) {
                return n.hasLazyPermission('P2PActive')
              }
            ],
            dialCodeMatcher: [
              'DialCodeService',
              function (n) {
                return n.getDialCodeMatcher()
              }
            ]
          }
        });
        t.state(n.constants.stateNames.profileProductAbstract, {
          url: '/products',
          templateUrl: 'Templates/Features/Profile/settings',
          controller: 'ProfileManagementController as vm',
          resolve: {
            session: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ],
            isInVersion: [
              'VersionFilterService',
              function (t) {
                return t.IsInVersions(n.constants.versionFilters.CITI_ONLINE).then(function (n) {
                  return n
                })
              }
            ]
          }
        });
        t.state(n.constants.stateNames.settingsAddAccount, {
          url: '/add/{productTypeScope}',
          templateUrl: 'Templates/Features/Profile/Product-add/add-wrapper',
          controller: 'ProductAddController as vm',
          resolve: {
            product: function () {
              var t = new n.model.AccountProduct({
              });
              return t.CategoryGroupType = n.server.CategoryGroupType.ACCOUNT,
              t.BankProduct.Uses = [
              ],
              t.BankProduct.Details = [
              ],
              t
            },
            productTypeScope: [
              '$stateParams',
              function (t) {
                var i = t.productTypeScope;
                return n.server.ProductTypeScope[i[0].toUpperCase() + i.substring(1)]
              }
            ],
            sessionInfo: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ],
            greekBanks: [
              'LookupsService',
              function (n) {
                return n.getBanks()
              }
            ],
            countries: [
              'LookupsService',
              function (n) {
                return n.getCountries()
              }
            ],
            userSessionInfo: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ],
            otpHandler: [
              'OtpHandlerService',
              'ProfileProductsService',
              'product',
              'productTypeScope',
              'RoleService',
              function (t, i, r, u, f) {
                var e = {
                  payload: i.buildAddProductModel(r),
                  uiContext: {
                    isNewScreen: !0
                  }
                };
                return u === (f.IsRetail() && n.server.ProductTypeScope.Local) ? t.retrieveHandler(4, e)  : t.activatedHandler(4, e)
              }
            ]
          }
        });
        t.state(n.constants.stateNames.settingsAlphaCards, {
          url: '/cards-alpha',
          templateUrl: 'Templates/Features/Profile/Cards/list-alpha',
          controller: 'ProfilePreferredProductsController as vm',
          resolve: {
            products: [
              'ProfileProductsService',
              function (t) {
                return t.getCards().then(function (t) {
                  return t.filter(function (t) {
                    var r = $('meta[name=EnablePsd2OtherBankProductsFeatureFlag]').attr('content') == 'True' || $('meta[name=EnablePsd2OtherBankProductsFeatureFlag]').attr('content') == 'true',
                    i;
                    return r ? (i = !1, t.BankProduct && t.BankProduct.Details && (i = t.BankProduct.Details.some(function (t) {
                      return t.Name === n.server.DetailName.IS_OTHER_BANK_PRODUCT && t.Value === 'true'
                    })), t.CategoryType != 10000 || i)  : t.CategoryType != 10000
                  })
                })
              }
            ],
            editState: function () {
              return n.constants.stateNames.settingsCard
            }
          }
        }).state(n.constants.stateNames.settingsOtherCards, {
          url: '/cards-other',
          templateUrl: 'Templates/Features/Profile/Cards/list-other',
          controller: 'ProfileProductsController as vm',
          resolve: {
            products: [
              'ProfileProductsService',
              function (t) {
                return t.getCards().then(function (t) {
                  return t.filter(function (t) {
                    var i = !1;
                    return t.BankProduct && t.BankProduct.Details && (i = t.BankProduct.Details.some(function (t) {
                      return t.Name === n.server.DetailName.IS_OTHER_BANK_PRODUCT && t.Value === 'true'
                    })),
                    t.CategoryType == 10000 && !i
                  })
                })
              }
            ],
            editState: function () {
              return n.constants.stateNames.settingsCard
            }
          }
        }).state(n.constants.stateNames.settingsCard, {
          url: '/card/edit/:id',
          templateUrl: 'Templates/Features/Profile/Cards/card-settings',
          controller: 'ProductSettingsController as vm',
          resolve: {
            product: [
              'ProfileProductsService',
              '$stateParams',
              function (n, t) {
                return n.getCard(t.id)
              }
            ],
            productInfo: [
              '$q',
              'product',
              'ProductsService',
              function (t, i, r) {
                return i ? r.getProductInfo({
                  Code: i.Code,
                  ProductID: i.BankProduct.ProductID,
                  Family: n.server.ProductTypeFamily.Card,
                  TypeID: i.TypeID
                })  : t.reject('ProductNotFound')
              }
            ],
            validUsesForProduct: [
              'productInfo',
              'product',
              function (t) {
                return n.utils.isUndefinedOrNull(t) || t.ResultCode != 0 ? [
                ] : t.ProductInfo[0].ValidUses
              }
            ],
            sessionInfo: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ],
            cdimatch: [
              'product',
              'ProductsService',
              function (n, t) {
                var i = {
                  Code: n.Code,
                  ProductID: n.BankProduct.ProductID,
                  TypeID: n.TypeID
                };
                return t.getCdiMatch(i).then(function (n) {
                  return n.ResultCode == 0 ? n.CdiMatch : !1
                }).catch (function () {
                  return !1
                })
              }
            ],
            otpHandler: [
              'OtpHandlerService',
              'RoleService',
              'product',
              function (n) {
                return n.retrieveHandler(4, {
                  payload: null,
                  uiContext: {
                    isNewScreen: !0
                  }
                })
              }
            ]
          }
        });
        t.state(n.constants.stateNames.settingsLoans, {
          url: '/loans',
          templateUrl: 'Templates/Features/Profile/Loans/list-alpha',
          controller: 'ProfilePreferredProductsController as vm',
          resolve: {
            products: [
              'ProfileProductsService',
              function (n) {
                return n.getLoans()
              }
            ],
            editState: function () {
              return n.constants.stateNames.settingsLoan
            }
          }
        }).state(n.constants.stateNames.settingsLoan, {
          url: '/loan/edit/:id',
          templateUrl: 'Templates/Features/Profile/Loans/loan-settings',
          controller: 'ProductSettingsController as vm',
          resolve: {
            product: [
              'ProfileProductsService',
              '$stateParams',
              function (n, t) {
                return n.getLoan(t.id)
              }
            ],
            productInfo: [
              '$q',
              'product',
              'ProductsService',
              function (t, i, r) {
                return i ? r.getProductInfo({
                  Code: i.Code,
                  ProductID: i.BankProduct.ProductID,
                  Family: undefined,
                  Scope: n.server.ProductTypeScope.Local,
                  TypeID: i.TypeID
                })  : t.reject('ProductNotFound')
              }
            ],
            validUsesForProduct: [
              'productInfo',
              'product',
              function (t) {
                return n.utils.isUndefinedOrNull(t) || t.ResultCode != 0 ? [
                ] : t.ProductInfo[0].ValidUses
              }
            ],
            sessionInfo: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ],
            cdimatch: [
              'product',
              'ProductsService',
              function (n, t) {
                var i = {
                  Code: n.Code,
                  ProductID: n.BankProduct.ProductID,
                  TypeID: n.TypeID
                };
                return t.getCdiMatch(i).then(function (n) {
                  return n.ResultCode == 0 ? n.CdiMatch : !1
                }).catch (function () {
                  return !1
                })
              }
            ],
            otpHandler: [
              'OtpHandlerService',
              'RoleService',
              'product',
              function (n) {
                return n.retrieveHandler(4, {
                  payload: null,
                  uiContext: {
                    isNewScreen: !0
                  }
                })
              }
            ]
          }
        });
        t.state(n.constants.stateNames.settingsInvestments, {
          url: '/investments',
          templateUrl: 'Templates/Features/Profile/Investments/list-alpha',
          controller: 'PreferredInvestmentProductsController as vm',
          resolve: {
            products: [
              'ProfileProductsService',
              function (n) {
                return n.getInvestments()
              }
            ],
            editState: function () {
              return n.constants.stateNames.settingsInvestment
            }
          }
        }).state(n.constants.stateNames.settingsInvestment, {
          url: '/investment/edit/:id',
          templateUrl: 'Templates/Features/Profile/Investments/investment-settings',
          controller: 'ProductSettingsController as vm',
          resolve: {
            product: [
              'ProfileProductsService',
              '$stateParams',
              function (n, t) {
                return n.getInvestment(t.id)
              }
            ],
            productInfo: [
              '$q',
              'product',
              'ProductsService',
              function (n, t) {
                return t ? null : n.reject('ProductNotFound')
              }
            ],
            validUsesForProduct: [
              '$q',
              function () {
                return [3]
              }
            ],
            sessionInfo: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ],
            cdimatch: [
              function () {
                return !0
              }
            ],
            otpHandler: [
              'OtpHandlerService',
              'RoleService',
              'product',
              function (n) {
                return n.retrieveHandler(4, {
                  payload: null,
                  uiContext: {
                    isNewScreen: !0
                  }
                })
              }
            ]
          }
        });
        t.state(n.constants.stateNames.settingsCitiMapping, {
          url: '/citibank',
          templateUrl: 'Templates/Features/Profile/Citibank/products-list',
          controller: 'CitiProductsMappingController as vm',
          resolve: {
            citiprodResponse: [
              'ProductsService',
              function (n) {
                return n.getCitiBankProductMapping({
                }).then(function (n) {
                  return n
                })
              }
            ]
          }
        });
        t.state(n.constants.stateNames.settingsEmporikiMapping, {
          url: '/emporiki',
          templateUrl: 'Templates/Features/Profile/Emporiki/products-list',
          controller: 'EmporikiProductsMappingController as vm',
          resolve: {
            emporikiprodResponse: [
              'ProductsService',
              function (n) {
                return n.getCitiBankProductMapping({
                }).then(function (n) {
                  return n
                })
              }
            ]
          }
        });
        t.state(n.constants.stateNames.profileSecuritySettings, {
          url: '/security',
          templateUrl: 'Templates/Features/Profile/security/security',
          resolve: {
            model: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ]
          }
        }).state('root.profile.security.changepassword', {
          url: '/password',
          templateUrl: 'Templates/Features/Profile/security/security-change-password',
          controller: 'ProfileChangePasswordController as vm'
        }).state(n.constants.stateNames.forceChangePasswordState, {
          url: '/force-password',
          templateUrl: 'Templates/Features/Profile/security/security-force-change-password',
          controller: 'ProfileForceChangePasswordController as vm'
        }).state(n.constants.stateNames.profileDeactivation, {
          url: '/deactivate',
          templateUrl: 'Templates/Features/Profile/deactivate',
          controller: 'DeactivateAccountController as vm',
          resolve: {
            name: [
              'SecurityService',
              'RoleService',
              function (n, t) {
                return t.IsRetail() ? n.getCartolini().then(function (n) {
                  return n.Cartolini.Surname + ' ' + n.Cartolini.Name
                })  : n.getUserSessionInfo().then(function (n) {
                  return n.SurName + ' ' + n.Name
                })
              }
            ],
            accounts: [
              'ProfileProductsService',
              function (t) {
                return t.getAccountsByRequestType(n.server.ProductRequestType.AccountsForEstatements)
              }
            ],
            cards: [
              'ProfileProductsService',
              function (t) {
                return t.getCardsByRequestType(n.server.ProductRequestType.CardsForEStatements)
              }
            ],
            loans: [
              'ProfileProductsService',
              function (t) {
                return t.getLoansByRequestType(n.server.ProductRequestType.MortgageLoansForEstatements)
              }
            ]
          }
        });
        t.state(n.constants.stateNames.GDPRConsentState, {
          url: '/Consent',
          templateUrl: 'Templates/Features/Profile/consent_wrapper',
          controller: 'GDPRConsentController as vm',
          resolve: {
            session: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ],
            isInVersion: [
              'VersionFilterService',
              function (t) {
                return t.IsInVersions(n.constants.versionFilters.GET_CONSENT_PREVIOUS_VERSION).then(function (n) {
                  return n
                })
              }
            ],
            Consent: [
              'SecurityService',
              'isInVersion',
              function (n, t) {
                if (t) return console.log('GDPR Module - Is Old Execution path in version: ' + t),
                n.getConsent({
                  Action: 3
                }).then(function (n) {
                  if (n.Answer != null) return Boolean(Number(n.Answer.Value))
                })
              }
            ],
            GDPRData: [
              'SecurityService',
              'isInVersion',
              function (n, t) {
                return t ? null : n.getGDPRData({
                }).then(function (n) {
                  return n
                })
              }
            ],
            ShouldUpdateInform: [
              'isInVersion',
              'GDPRData',
              function (t, i) {
                return i && !t ? i.ResultCode == 0 ? i.InformFlag ? n.model.ShouldUpdateInform.Yes : n.model.ShouldUpdateInform.No : n.model.ShouldUpdateInform.CallFailed : n.model.ShouldUpdateInform.No
              }
            ],
            UpdateGDPRDataResolver: [
              'SecurityService',
              'ShouldUpdateInform',
              function (t, i) {
                var u,
                r;
                return console.log('Should Update Only Inform: ' + i.toString()),
                i == n.model.ShouldUpdateInform.Yes ? (u = {
                }, u.InformValue = !0, r = {
                }, r.Inform = u, r.UpdateAction = 0, t.updateGDPRData(r).then(function (n) {
                  return n
                }))  : null
              }
            ],
            userInfo: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ]
          }
        })
      }
      ])
    }) (t = n.profile || (n.profile = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      'use strict';
      t.mainModule = angular.module('alpha.eBankingServices', [
        'alpha',
        'alpha.services'
      ]);
      t.mainModule.config(['$stateProvider',
      '$urlRouterProvider',
      function (t, i) {
        i.when('/services/otp', [
          '$state',
          'OtpStateResolverService',
          function (n, t) {
            return t.redirectState().then(function (t) {
              return n.go(t),
              t
            })
          }
        ]);
        i.when('/services/alphaphone-banking', [
          '$state',
          'SecurityService',
          function (n, t) {
            t.getCartolini().then(function (t) {
              t.Cartolini.Channel.indexOf(5) != - 1 ? n.go('root.services.alphaphone.cartolini')  : n.go('root.services.alphaphone.activation')
            })
          }
        ]);
        t.state('root.services', {
          url: '/services',
          template: '<div data-ui-view=""></div>',
          abstract: !0,
          resolve: {
            session: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ]
          }
        }).state('root.services.estatements', {
          url: '/estatements',
          abstract: !0,
          templateUrl: 'Templates/Features/Services/estatements/estatements-wrapper'
        }).state('root.services.estatements.accounts-list', {
          url: '/accounts',
          templateUrl: 'Templates/Features/Services/estatements/estatements-list',
          controller: 'EStatementsController as vm',
          resolve: {
            model: [
              'ProfileProductsService',
              function (t) {
                return t.getAccountsByRequestType(n.server.ProductRequestType.AccountsForEstatements)
              }
            ],
            type: function () {
              return n.server.ProductRequestType.AccountsForEstatements
            }
          }
        }).state('root.services.estatements.cards-list', {
          url: '/cards',
          templateUrl: 'Templates/Features/Services/estatements/estatements-list',
          controller: 'EStatementsController as vm',
          resolve: {
            model: [
              'ProfileProductsService',
              function (t) {
                return t.getCardsByRequestType(n.server.ProductRequestType.CardsForEStatements)
              }
            ],
            type: function () {
              return n.server.ProductRequestType.CardsForEStatements
            }
          }
        }).state('root.services.estatements.loans-list', {
          url: '/loans',
          templateUrl: 'Templates/Features/Services/estatements/estatements-list',
          controller: 'EStatementsController as vm',
          resolve: {
            model: [
              'ProfileProductsService',
              function (t) {
                return t.getLoansByRequestType(n.server.ProductRequestType.MortgageLoansForEstatements)
              }
            ],
            type: function () {
              return n.server.ProductRequestType.MortgageLoansForEstatements
            }
          }
        }).state('root.services.estatements.update.account', {
          url: '/account',
          templateUrl: 'Templates/Features/Services/estatements/estatements-update',
          controller: 'EStatementsUpdateController as vm'
        }).state('root.services.estatements.update.card', {
          url: '/card',
          templateUrl: 'Templates/Features/Services/estatements/estatements-update',
          controller: 'EStatementsCardUpdateController as vm',
          resolve: {
            cardAlertResponse: [
              '$stateParams',
              'EServicesService',
              'ProfileProductsService',
              '$q',
              function (t, i, r, u) {
                var f = t.id;
                return n.utils.isUndefinedOrNullorWhiteSpace(f) ? u.reject('ProductNotFound')  : r.getCard(f).then(function (n) {
                  return i.getCardAlerts({
                    CCNumber: n.Code,
                    ProductID: n.BankProduct.ProductID
                  })
                })
              }
            ]
          }
        }).state('root.services.estatements.update.loan', {
          url: '/loan',
          templateUrl: 'Templates/Features/Services/estatements/estatements-update',
          controller: 'EStatementsUpdateController as vm'
        }).state('root.services.alerts', {
          url: '/alerts',
          templateUrl: 'Templates/Features/Services/alerts/alpha-alerts-wrapper',
          abstract: !0
        }).state('root.services.alerts.alerts', {
          url: '/alpha-alerts',
          templateUrl: 'Templates/Features/Services/alerts/alpha-alerts',
          controller: 'alertsController as vm',
          resolve: {
            model: [
              'EServicesService',
              function (n) {
                return n.getAlerts()
              }
            ]
          }
        }).state('root.services.otp', {
          templateUrl: 'Templates/Features/Services/otp/otp-wrapper',
          url: '/otp',
          controller: 'OtpWrapperController as vm',
          resolve: {
            tokenInfo: [
              'SecurityService',
              function (n) {
                return n.tokenInfo()
              }
            ]
          }
        }).state('root.services.otp.inprocess', {
          url: '/inprocess',
          controller: 'OtpInProcessController as vm',
          templateUrl: 'Templates/Features/Services/otp/otp-activation-inprocess'
        }).state('root.services.otp.activate', {
          templateUrl: 'Templates/Features/Services/otp/otp-activation-wrapper',
          url: '/activate',
          controller: 'OtpActivationController as vm',
          resolve: {
            otpHandler: [
              'OtpHandlerService',
              function (n) {
                return n.activatedHandler(16, {
                  hints: {
                    Requirement: String(2),
                    Method: String(2)
                  },
                  payload: null,
                  uiContext: {
                    isNewScreen: !0
                  }
                }, !0)
              }
            ]
          }
        }).state('root.services.otp.status', {
          templateUrl: 'Templates/Features/Services/otp/otp-status',
          url: '/status',
          controller: 'OtpStatusController as vm',
          resolve: {
            tokenInfo: [
              'SecurityService',
              function (n) {
                return n.tokenInfo()
              }
            ],
            session: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ]
          }
        }).state('root.services.otp.replace', {
          templateUrl: 'Templates/Features/Services/otp/otp-replace-wrapper',
          url: '/replace/{to}',
          controller: 'OtpReplaceController as vm',
          resolve: {
            tokenInfo: [
              'SecurityService',
              function (n) {
                return n.tokenInfo()
              }
            ],
            session: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ],
            otpHandler: [
              'OtpHandlerService',
              function (n) {
                return n.activatedHandler(14, {
                  hints: {
                    Requirement: String(2),
                    Method: String(2)
                  },
                  payload: null,
                  uiContext: {
                    isNewScreen: !0
                  }
                }, !0)
              }
            ]
          }
        }).state('root.services.alphaphone', {
          url: '/alphaphone-banking',
          templateUrl: 'Templates/Features/Services/alphaPhone/wrapper',
          controller: 'AlphaPhoneController as vm',
          resolve: {
            model: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ],
            cartolini: [
              'SecurityService',
              function (n) {
                return n.getCartolini().then(function (n) {
                  return n
                })
              }
            ]
          }
        }).state('root.services.alphaphone.cartolini', {
          url: '/cartolini',
          templateUrl: 'Templates/Features/Services/alphaPhone/cartolini',
          controller: 'CartoliniController as vm'
        }).state('root.services.alphaphone.activation', {
          url: '/activation',
          templateUrl: 'Templates/Features/Services/alphaPhone/activation-wrapper',
          controller: 'AlphaphoneActivationController as vm',
          resolve: {
            userInfo: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ]
          }
        }).state('root.services.mobileApps.mobileBanking', {
          url: '/mobile-banking',
          templateUrl: 'Templates/Features/Services/mobile-banking',
          controller: 'eBankingServicesController as vm'
        }).state('root.services.mobileApps.safeAccess', {
          url: '/safe-access',
          templateUrl: 'Templates/Features/Services/safe-access',
          controller: 'eBankingServicesController as vm'
        }).state('root.services.mobileApps.bankBonus', {
          url: '/bank-bonus',
          templateUrl: 'Templates/Features/Services/bank-bonus',
          controller: 'eBankingServicesController as vm'
        }).state('root.services.secureWeb', {
          url: '/secure-web',
          templateUrl: 'Templates/Features/Services/secureWeb/secure-web-container',
          controller: 'SecureWebController as vm',
          resolve: {
            cards: [
              'ProfileProductsService',
              function (t) {
                return t.getCardsByRequestType(n.server.ProductRequestType.CardsForSecureWeb)
              }
            ],
            otpHandler: [
              'OtpHandlerService',
              function (n) {
                return n.activatedHandler(19, {
                  hints: {
                    Requirement: String(2),
                    Method: String(1)
                  },
                  payload: {
                  },
                  uiContext: {
                    isNewScreen: !0
                  }
                })
              }
            ],
            session: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ]
          }
        })
      }
      ])
    }) (t = n.eBankingServices || (n.eBankingServices = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (n) {
      'use strict';
      n.mainModule = angular.module('alpha.transactions', [
        'alpha.services'
      ])
    }) (t = n.transactions || (n.transactions = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      'use strict';
      t.mainModule = angular.module('alpha.transfers', [
        'alpha',
        'alpha.services',
        'alpha.transactions',
        'ngSanitize'
      ]);
      t.transfersHistoryConfig = {
        url: '/history',
        templateUrl: 'Templates/Features/transfers/history',
        controller: 'TransactionsHistoryController as vm',
        resolve: {
          transactionSearchHelper: [
            'STRINGS',
            function (t) {
              return new n.common.services.TransferTranscationSearchHelper(t)
            }
          ],
          queryTypes: [
            'LookupsService',
            function (n) {
              return n.getQueryTypesForTransfers()
            }
          ],
          channels: [
            'LookupsService',
            function (n) {
              return n.getChannels()
            }
          ],
          countries: [
            'LookupsService',
            function (n) {
              return n.getCountries()
            }
          ],
          TransactionActionsService: [
            'ProfileProductsService',
            'STRINGS',
            'LookupsService',
            'MenuItemsService',
            function (t, i, r, u) {
              return new n.common.services.TransferTransactionActionsService(t, i, r, u)
            }
          ],
          transactionTypes: function () {
            return []
          },
          failedBehavior: function () {
            return null
          }
        }
      };
      t.mainModule.config(['$stateProvider',
      '$urlRouterProvider',
      function (t) {
        function i(t, i, r, u) {
          var f = new n.model.AddMyTransferTemplateViewModel,
          s = r.key,
          e = i.getStateData(s),
          o;
          return e && (f.Template.Transaction = e),
          o = u.IsRetail() ? t.getProductByCode(f.Template.Transaction.CreditProduct)  : t.getProductByTypeAndCode(n.server.ProductRequestType.AllAccounts, f.Template.Transaction.CreditProduct),
          o.then(function (n) {
            n != null && (f.Template.Transaction.IsProfileProduct = !0, f.AddProductFromTemplateToProfile = null)
          }).catch (function () {
            f.Template.Transaction.IsProfileProduct = !0;
            f.AddProductFromTemplateToProfile = null
          }).then(function () {
            return f.TemplateType = 0,
            f.Template.TemplateType = f.TemplateType,
            f.Template.TransactionType = f.Template.Transaction.Type,
            f
          })
        }
        function r(n, t, i) {
          var r = {
            payload: t.buildTransactionTemplateModel(0, i.Template, i.AddProductFromTemplateToProfile),
            uiContext: {
              isNewScreen: !0
            }
          };
          return n.activatedHandler(31, r)
        }
        t.state('root.transfers', {
          abstract: !0,
          url: '/transfers',
          template: '<div data-ui-view=""></div>'
        }).state('root.transfers.new', {
          url: '/new',
          controller: 'NewTransferController as vm',
          templateUrl: 'Templates/Features/Transfers/newTransfer',
          abstract: !0,
          resolve: {
            userInfo: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ],
            otpHandler: [
              'OtpHandlerService',
              function (n) {
                return n.retrieveHandler(1, {
                  uiContext: {
                    isNewScreen: !0
                  }
                })
              }
            ]
          }
        }).state('root.transfers.new.intrabank', {
          url: '/:id/:type/intrabank/:key',
          controller: 'IntraBankTransferWizard as vm',
          templateUrl: 'Templates/Features/Transfers/newTransferWizardWithMenu',
          resolve: n.transfers.getIntraBankStateResolve({
            Model: [
              'QueriesService',
              '$stateParams',
              'StateHelperService',
              function (t, i, r) {
                var u = new n.model.IntraBankTransferInfo,
                f = t.getDatesAndOnLineStatus().then(function (n) {
                  var t = n;
                  return u.setDatesAndOnlineStatus(t),
                  u
                }, function () {
                  return u.HasErrors = !0,
                  u.ErrorMessage = 'Could not get online status and calendar information.',
                  u
                });
                return f.then(function (n) {
                  var f = i.key,
                  u;
                  return f && (u = r.getStateData(f), u && u.Transaction) ? t.getTransactionTemplates(t.getTransactionTemplatesRequest(u.ID, 0)).then(function (t) {
                    return t && t.Templates && t.Templates.length > 0 && r.setStateData(f, t.Templates[0]),
                    n
                  })  : n
                })
              }
            ],
            otpHandler: [
              'OtpHandlerService',
              'Model',
              '$stateParams',
              'StateHelperService',
              'RoleService',
              function (n, t, i, r, u) {
                var e,
                f,
                o,
                s;
                return !u.IsRetail() && (e = i.key, e && (f = r.getStateData(e), f.DebitProduct && f.CreditProduct)) ? (o = {
                  DebitProductCode: f.DebitProduct,
                  DebitProductType: f.DebitProductType,
                  CreditProductCode: f.CreditProduct,
                  CreditProductType: t.UseProfileProduct ? f.CreditProductTypeID : 0,
                  Amount: f.Amount,
                  TransferType: 0
                }, s = {
                  hints: {
                    Requirement: String(2),
                    Method: String(1)
                  },
                  payload: o
                }, n.activatedHandler(1, s))  : n.activatedHandler(1, 'awb.transfer.intrabank')
              }
            ]
          })
        }).state('root.transfers.new.interbank', {
          url: '/:id/:type/interbank/:key',
          controller: 'InterBankTransferWizard as vm',
          templateUrl: 'Templates/Features/Transfers/newTransferWizard',
          resolve: n.transfers.getInterBankStateResolve({
            Model: [
              'QueriesService',
              'banks',
              '$stateParams',
              'StateHelperService',
              function (t, i, r, u) {
                var f = new n.model.InterBankTransferInfo,
                e;
                return f.Banks = i,
                e = t.getDatesAndOnLineStatus().then(function (n) {
                  var t = n;
                  return f.setDatesAndOnlineStatus(t),
                  f
                }, function () {
                  return f.HasErrors = !0,
                  f.ErrorMessage = 'Could not get online status and calendar information.',
                  f
                }),
                e.then(function (n) {
                  var f = r.key,
                  i;
                  return f && (i = u.getStateData(f), i && i.Transaction) ? t.getTransactionTemplates(t.getTransactionTemplatesRequest(i.ID, 0)).then(function (t) {
                    return t && t.Templates && t.Templates.length > 0 && u.setStateData(f, t.Templates[0]),
                    n
                  })  : n
                })
              }
            ],
            otpHandler: [
              'OtpHandlerService',
              function (n) {
                return n.activatedHandler(1, 'awb.transfer.external')
              }
            ]
          })
        }).state(n.constants.stateNames.newCitiRetailTransferState, {
          url: '/:id/:type/citibank/:key',
          controller: 'CitiBankTransferWizard as vm',
          templateUrl: 'Templates/Features/Transfers/newTransferWizard',
          resolve: {
            behaviorConfig: function () {
              return {
                hasFees: !1
              }
            },
            hasFees: function () {
              return !1
            },
            debitAccounts: [
              'ProfileProductsService',
              function (t) {
                return t.getAccountsByRequestType(n.server.ProductRequestType.DebitAccounts)
              }
            ],
            debitAccountsForOrderedTransfer: [
              'ProfileProductsService',
              function (t) {
                return t.getAccountsByRequestType(n.server.ProductRequestType.DebitAccountsForOrderedTransfer)
              }
            ],
            banks: [
              'LookupsService',
              function (n) {
                var t = [
                ];
                return t.push(n.getRetailCitibank()),
                t
              }
            ],
            interbankCreditAccounts: [
              'banks',
              'ProductsService',
              function (t, i) {
                return i.getProfileProducts({
                  ReturnBalances: !0,
                  MaxRecords: 1000,
                  RequestType: n.server.ProductRequestType.All,
                  LastPageIndex: null,
                  PreferredOnly: !1,
                  ReturnDetails: !0,
                  ProductTypeIDs: [
                    t[0].TypeID
                  ]
                }, !0).then(function (t) {
                  return null != t.Products ? t.Products.map(function (t) {
                    var i = new n.model.AccountProduct(t);
                    return i.CategoryGroupType = n.server.CategoryGroupType.ACCOUNT,
                    i
                  })  : [
                  ]
                })
              }
            ],
            Model: [
              'QueriesService',
              'banks',
              function (t, i) {
                var r = new n.model.CitiRetailTransferInfo(i[0]);
                return r.Banks = i,
                t.getDatesAndOnLineStatus().then(function (n) {
                  var t = n;
                  return r.setDatesAndOnlineStatus(t),
                  r
                }, function () {
                  return r.HasErrors = !0,
                  r.ErrorMessage = 'Could not get online status and calendar information.',
                  r
                })
              }
            ],
            otpHandler: [
              'OtpHandlerService',
              function (n) {
                return n.activatedHandler(1, 'awb.transfer.external')
              }
            ]
          }
        }).state('root.transfers.new.international', {
          url: '/:id/:type/international/:key',
          controller: 'InternationalTransferWizard as vm',
          templateUrl: 'Templates/Features/Transfers/newTransferWizard',
          resolve: n.transfers.getInternationalBankStateResolve({
            Model: [
              'QueriesService',
              'countries',
              'banks',
              function (t, i, r) {
                var u = new n.model.InternationalTransferInfo;
                return u.Countries = i,
                u.Banks = r,
                t.getDatesAndOnLineStatus().then(function (n) {
                  var t = n;
                  return u.setDatesAndOnlineStatus(t),
                  u
                }, function () {
                  return u.HasErrors = !0,
                  u.ErrorMessage = 'Could not get online status and calendar information.',
                  u
                })
              }
            ],
            otpHandler: [
              'OtpHandlerService',
              function (n) {
                return n.activatedHandler(1, 'awb.transfer.international')
              }
            ]
          })
        }).state('root.transfers.myTransfers', {
          url: '/myTransfers',
          abstract: !0,
          template: '<div ui-view=""></div>',
          resolve: {
            countries: [
              'LookupsService',
              function (n) {
                return n.getCountries()
              }
            ]
          }
        }).state('root.transfers.myTransfers.list', {
          url: '/list',
          templateUrl: 'Templates/Features/Transfers/MyTransfers/myTransfers',
          controller: 'MyTransfersController as vm',
          resolve: {
            TransactionActionsService: [
              'ProfileProductsService',
              'STRINGS',
              'LookupsService',
              'MenuItemsService',
              function (t, i, r, u) {
                return new n.common.services.TransferTransactionActionsService(t, i, r, u)
              }
            ]
          }
        }).state('root.transfers.myTransfers.addintrabank', {
          url: '/addintrabank/:key',
          templateUrl: 'Templates/Features/Transfers/MyTransfers/addMyTransferIntrabank',
          controller: 'MyTransfersAddController as vm',
          resolve: {
            Model: [
              'ProfileProductsService',
              'StateHelperService',
              '$stateParams',
              'RoleService',
              i
            ],
            otpHandler: [
              'OtpHandlerService',
              'QueriesService',
              'Model',
              r
            ]
          }
        }).state('root.transfers.myTransfers.addinterbank', {
          url: '/addinterbank/:key',
          templateUrl: 'Templates/Features/Transfers/MyTransfers/addMyTransferInterbank',
          controller: 'MyTransfersAddController as vm',
          resolve: {
            Model: [
              'ProfileProductsService',
              'StateHelperService',
              '$stateParams',
              'RoleService',
              i
            ],
            otpHandler: [
              'OtpHandlerService',
              'QueriesService',
              'Model',
              r
            ]
          }
        }).state('root.transfers.myTransfers.addinternational', {
          url: '/addinternational/:key',
          templateUrl: 'Templates/Features/Transfers/MyTransfers/addMyTransferInternational',
          controller: 'MyTransfersAddController as vm',
          resolve: {
            Model: [
              'ProfileProductsService',
              'StateHelperService',
              '$stateParams',
              'RoleService',
              i
            ],
            otpHandler: [
              'OtpHandlerService',
              'QueriesService',
              'Model',
              r
            ]
          }
        }).state('root.transfers.myTransfers.addEUImports', {
          url: '/addEUIMports/:key',
          templateUrl: 'Templates/Features/Transfers/MyTransfers/addMyTransferEUImports',
          controller: 'MyTransfersAddController as vm',
          resolve: {
            Model: [
              'ProfileProductsService',
              'StateHelperService',
              '$stateParams',
              'RoleService',
              i
            ],
            otpHandler: [
              'OtpHandlerService',
              'QueriesService',
              'Model',
              r
            ]
          }
        }).state('root.transfers.myTransfers.list.delete', {
          url: '/delete/:id',
          templateUrl: 'Templates/Features/Transfers/MyTransfers/deleteMyTransfer',
          controller: 'MyTransfersDeleteController as vm',
          successState: 'root.transfers.myTransfers.list',
          modal: !0,
          modalClass: 'custom',
          modalSize: 'lg'
        }).state('root.transfers.myTransfers.edit', {
          template: '<div data-ui-view=""></div>',
          controller: 'MyTransfersEditController as vm',
          abstract: !0,
          url: '/edit/:id',
          resolve: {
            Model: [
              'QueriesService',
              '$stateParams',
              function (t, i) {
                var u = i.id,
                r = new n.model.MyTransferTemplatesBase;
                return t.getTransactionTemplates(t.getTransactionTemplatesRequest(u, 0)).then(function (n) {
                  return r.Template = n.Templates[0],
                  r
                }, function () {
                  return r.HasErrors = !0,
                  r.ErrorMessage = 'Could not get the details of the requested transfer template.',
                  r
                })
              }
            ]
          }
        }).state('root.transfers.myTransfers.edit.intrabank', {
          url: '/intrabank',
          templateUrl: 'Templates/Features/Transfers/MyTransfers/editMyTransferIntrabank'
        }).state('root.transfers.myTransfers.edit.interbank', {
          url: '/interbank',
          templateUrl: 'Templates/Features/Transfers/MyTransfers/editMyTransferInterbank'
        }).state('root.transfers.myTransfers.edit.international', {
          url: '/international',
          templateUrl: 'Templates/Features/Transfers/MyTransfers/editMyTransferInternational'
        }).state('root.transfers.myTransfers.edit.simpleImport', {
          url: '/simpleImport',
          templateUrl: 'Templates/Features/Transfers/MyTransfers/editMyTransferSimpleImport'
        }).state(n.constants.stateNames.transfersHistory, n.transfers.transfersHistoryConfig).state(n.constants.stateNames.transfersHistory + n.constants.stateNames.citibankDetails, {
          url: '/citibank/{id}',
          controller: 'TransactionDetailsController as vm',
          templateUrl: 'Templates/Features/Transfers/Transaction/citibank-details',
          modal: !0,
          modalClass: 'custom'
        }).state(n.constants.stateNames.transfersHistory + n.constants.stateNames.intrabankDetails, {
          url: '/intrabank/{id}',
          controller: 'TransactionDetailsController as vm',
          templateUrl: 'Templates/Features/Transfers/Transaction/intrabank-details',
          modal: !0,
          modalClass: 'custom'
        }).state(n.constants.stateNames.transfersHistory + n.constants.stateNames.interbankDetails, {
          url: '/interbank/{id}',
          templateUrl: 'Templates/Features/Transfers/Transaction/interbank-details',
          controller: 'TransactionDetailsController as vm',
          modal: !0,
          modalClass: 'custom'
        }).state(n.constants.stateNames.transfersHistory + n.constants.stateNames.internationalDetails, {
          url: '/international/{id}',
          templateUrl: 'Templates/Features/Transfers/Transaction/international-details',
          controller: 'TransactionDetailsController as vm',
          modal: !0,
          modalClass: 'custom'
        }).state(n.constants.stateNames.transfersHistory + n.constants.stateNames.internationalSwift, {
          url: '/international/swift/{id}/{language}',
          templateUrl: function (n) {
            return n.language == 'EN' ? 'Templates/Features/Transfers/Transaction/international-swift?language=en' : n.language == 'EL' ? 'Templates/Features/Transfers/Transaction/international-swift?language=el' : 'Templates/Features/Transfers/Transaction/international-swift'
          },
          controller: 'TransactionDetailsController as vm',
          modal: !0,
          modalSize: 'lg',
          changeLang: !0,
          successState: n.constants.stateNames.transfersHistory + n.constants.stateNames.internationalSwift
        }).state(n.constants.stateNames.transfersHistory + n.constants.stateNames.euimportsDetails, {
          url: '/euimport/{id}',
          templateUrl: 'Templates/Features/Transfers/Transaction/euimports-details',
          controller: 'SimpleImportTransactionDetailsController as vm',
          modal: !0,
          modalClass: 'custom'
        }).state(n.constants.stateNames.transfersHistory + n.constants.stateNames.transactionCancel, {
          url: '/cancel/{id}',
          controller: 'TransactionDetailsController as vm',
          templateUrl: 'Templates/Features/Transfers/Transaction/cancel',
          modal: !0,
          modalClass: 'custom'
        }).state(n.constants.stateNames.transfersHistory + n.constants.stateNames.instantPaymentDetails, {
          url: '/instantpayment/{id}',
          controller: 'TransactionDetailsController as vm',
          templateUrl: 'Templates/Features/Transfers/Transaction/instant-payment',
          modal: !0,
          modalClass: 'custom'
        }).state(n.constants.stateNames.transfersPending, {
          url: '/pending',
          templateUrl: 'Templates/Features/Transfers/history',
          controller: 'PendingTransactionsController as vm',
          resolve: {
            transactionSearchHelper: [
              'STRINGS',
              function (t) {
                return new n.common.services.TransferTranscationSearchHelper(t)
              }
            ],
            queryTypes: [
              'LookupsService',
              function (n) {
                return n.getQueryTypesForTransfers()
              }
            ],
            channels: [
              'LookupsService',
              function (n) {
                return n.getChannels()
              }
            ],
            countries: [
              'LookupsService',
              function (n) {
                return n.getCountries()
              }
            ],
            TransactionActionsService: [
              'ProfileProductsService',
              'STRINGS',
              'LookupsService',
              'MenuItemsService',
              function (t, i, r, u) {
                return new n.common.services.TransferTransactionActionsService(t, i, r, u)
              }
            ],
            transactionTypes: function () {
              return []
            },
            failedBehavior: function () {
              return null
            }
          }
        }).state(n.constants.stateNames.transfersPending + n.constants.stateNames.transactionCancel, {
          url: '/cancel/{id}',
          controller: 'TransactionDetailsController as vm',
          templateUrl: 'Templates/Features/Transfers/Transaction/cancel',
          modal: !0,
          successState: n.constants.stateNames.transfersPending,
          modalClass: 'custom'
        }).state(n.constants.stateNames.transfersPending + n.constants.stateNames.intrabankDetails, {
          url: '/intrabank/{id}',
          controller: 'TransactionDetailsController as vm',
          templateUrl: 'Templates/Features/Transfers/Transaction/intrabank-details',
          modal: !0,
          modalClass: 'custom'
        }).state(n.constants.stateNames.transfersPending + n.constants.stateNames.interbankDetails, {
          url: '/interbank/{id}',
          templateUrl: 'Templates/Features/Transfers/Transaction/interbank-details',
          controller: 'TransactionDetailsController as vm',
          modal: !0,
          modalClass: 'custom'
        }).state(n.constants.stateNames.transfersPending + n.constants.stateNames.internationalDetails, {
          url: '/international/{id}',
          templateUrl: 'Templates/Features/Transfers/Transaction/international-details',
          controller: 'TransactionDetailsController as vm',
          modal: !0,
          modalClass: 'custom'
        }).state(n.constants.stateNames.transfersPending + n.constants.stateNames.internationalSwift, {
          url: '/international/swift/{id}',
          templateUrl: 'Templates/Features/Transfers/Transaction/international-swift',
          controller: 'TransactionDetailsController as vm',
          modal: !0,
          modalClass: 'custom'
        }).state(n.constants.stateNames.transfersPending + n.constants.stateNames.euimportsDetails, {
          url: '/euimport/{id}',
          templateUrl: 'Templates/Features/Transfers/Transaction/euimports-details',
          controller: 'SimpleImportTransactionDetailsController as vm',
          modal: !0,
          modalClass: 'custom'
        }).state('root.transfers.recurring', {
          url: '/recurring',
          abstract: !0,
          template: '<div ui-view=""></div>'
        }).state('root.transfers.recurring.list', {
          url: '/list',
          templateUrl: 'Templates/Features/Transfers/Recurring/transfersRecurring',
          controller: 'TransfersRecurringController as vm',
          resolve: {
            Model: [
              'QueriesService',
              function (t) {
                var i = new n.model.RecurringTransfersViewModel(t);
                return t.getStandingOrders(t.getStandingOrdersRequest('', 10)).then(function (n) {
                  return i.StandingOrders = n.StandingOrders,
                  i.HasMore = n.HasMore,
                  i.ReplyRecords = n.ReplyRecords,
                  i.TotalRecords = n.TotalRecords,
                  i.LastPageIndex = n.CurrentPageIndex,
                  i
                }, function () {
                  return i.HasErrors = !0,
                  i.ErrorMessage = 'Could not get recurring transfers information.',
                  i
                })
              }
            ]
          }
        }).state('root.transfers.recurring.new', {
          url: '/new/:key',
          templateUrl: 'Templates/Features/Transfers/Recurring/transfersRecurringNewContainer',
          controller: 'TransfersRecurringNewController as vm',
          resolve: {
            userInfo: [
              'SecurityService',
              function (n) {
                return n.getUserSessionInfo()
              }
            ],
            debitAccountsForStandingOrders: [
              'ProfileProductsService',
              function (t) {
                return t.getAccountsByRequestType(n.server.ProductRequestType.DebitAccountsForStandingOrders)
              }
            ],
            creditAccountsForOrderedTransfer: [
              'ProfileProductsService',
              function (t) {
                return t.getAccountsByRequestType(n.server.ProductRequestType.CreditAccountsForOrderedTransfer)
              }
            ],
            Model: [
              'QueriesService',
              'STRINGS',
              function (t, i) {
                var r = new n.model.NewRecurringTransferVM;
                return t.getDatesAndOnLineStatus().then(function (n) {
                  return r.Online = n.OnLine,
                  r.CurrentWorkingDate = n.CurrentWorkingDate,
                  r.NextWorkingDate = n.NextWorkingDate,
                  r
                }, function () {
                  return r.HasErrors = !0,
                  r.ErrorMessage = i.getDatesAndOnlineStatusError,
                  r
                })
              }
            ],
            otpHandler: [
              'OtpHandlerService',
              function (n) {
                return n.retrieveHandler(32, {
                  uiContext: {
                    isNewScreen: !0
                  }
                })
              }
            ]
          }
        }).state('root.transfers.recurring.details', {
          url: '/details/:id',
          templateUrl: 'Templates/Features/Transfers/Recurring/transfersRecurringDetails',
          controller: 'TransfersRecurringDetailsController as vm',
          resolve: {
            Model: [
              'QueriesService',
              '$stateParams',
              function (t, i) {
                var u = i.id,
                r = new n.model.RecurringTransferVM;
                return t.getStandingOrders(t.getStandingOrdersRequest(u)).then(function (n) {
                  return r.StandingOrder = n.StandingOrders[0],
                  r
                }, function () {
                  return r.HasErrors = !0,
                  r.ErrorMessage = 'Could not get the details of the requested recurring transfer.',
                  r
                })
              }
            ]
          }
        }).state('root.transfers.recurring.delete', {
          url: '/delete/:id',
          templateUrl: 'Templates/Features/Transfers/Recurring/transfersRecurringDetails',
          controller: 'TransferRecurringDeleteController as vm',
          resolve: {
            Model: [
              'QueriesService',
              '$stateParams',
              function (t, i) {
                var u = i.id,
                r = new n.model.RecurringTransferVM;
                return t.getStandingOrders(t.getStandingOrdersRequest(u)).then(function (n) {
                  return r.StandingOrder = n.StandingOrders[0],
                  r
                }, function () {
                  return r.HasErrors = !0,
                  r.ErrorMessage = 'Could not get the details of the requested recurring transfer.',
                  r
                })
              }
            ]
          }
        }).state('root.transfers.recurring.delete.confirm', {
          url: '/confirmDelete',
          controller: 'TransfersRecurringDeleteConfirmationController as vm',
          templateUrl: 'Templates/Features/Transfers/Recurring/deleteRecurringConfirmation',
          successState: 'root.transfers.recurring.list',
          modal: !0,
          modalSize: 'lg'
        })
      }
      ])
    }) (t = n.transfers || (n.transfers = {
    }))
  }(alpha || (alpha = {
  }));
  __extends = this && this.__extends || function () {
    var n = Object.setPrototypeOf || {
      __proto__: [
      ]
    }
    instanceof Array && function (n, t) {
      n.__proto__ = t
    }
    || function (n, t) {
      for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
    };
    return function (t, i) {
      function r() {
        this.constructor = t
      }
      n(t, i);
      t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
    }
  }(),
  function (n) {
    var t;
    (function (t) {
      var b = function () {
        function t(t, i, r, u, f, e, o, s) {
          var h = this,
          l,
          v,
          a,
          c;
          if (this.accounts = t, this.otherBankProducts = i, this.roleService = r, this.AppEventsService = u, this.otherBankProductsService = f, this.StateHelperService = e, this.SharedDataService = o, this.$state = s, this.productCount = 0, this.totalRecords = 0, this.hasProducts = !0, this.firstTime = !0, this.campaign = 0, this.isBusyMap = {
          }, this.hasErrorMap = {
          }, this.Model = {
            HasErrors: !1,
            ErrorMessage: '',
            HasFatalError: !1
          }, this.newReloadKey = uuid.v4(), this.isPsd2OtherBankProductsFeatureEnabled = $('meta[name=EnablePsd2OtherBankProductsFeatureFlag]').attr('content') == 'True' || $('meta[name=EnablePsd2OtherBankProductsFeatureFlag]').attr('content') == 'true', this.refreshView = function (n) {
            h.refreshProductCount(n);
            h.refreshHasProducts()
          }, this.refreshProductCount = function (n) {
            h.productCount = h.accounts && h.accounts.length ? h.accounts.length : 0;
            h.totalRecords = n
          }, this.refreshHasProducts = function () {
            h.firstTime && (h.hasProducts = h.accounts.length > 0, h.firstTime = !1)
          }, this.accountsChanged = function (n, t) {
            h.accounts = t.products;
            var i = t && t.response ? t.response.TotalRecords : null;
            h.refreshView(i)
          }, this.ClearErrorMessages(), this.showOtherBankProductsOverviewMsg = this.isPsd2OtherBankProductsFeatureEnabled, this.otherBankProducts) for (l = 0, v = this.otherBankProducts; l < v.length; l++) a = v[l],
          this.isBusyMap[a.Code] = {
            isBusy: !1
          },
          this.hasErrorMap[a.Code] = {
            hasError: a.BankProduct.OtherBankProductId === undefined
          };
          if (this.OtherBankAccounts = i, r.IsRetail() ? this.refreshView()  : (this.accounts = [
          ], this.AppEventsService.subscribe(n.common.services.AppEventsService.CustomUiSelectProductsChanged_Event, this.accountsChanged)), this.bannerKey = new Date, this.bannerKey < new Date(2018, 0, 6) ? (this.campaign = 1, this.bannerMenuPath = 'root.investments.e-timedeposit-bonus.newrequest({uid : vm.newReloadKey})')  : (this.campaign = 2, this.bannerMenuPath = 'root.accounts.save-smart.newrequest'), this.showCampaignBanner = this.roleService.IsRetail() && this.campaign > 0, this.isEndUser = this.roleService.isEndUser(), s.params && s.params.isOauthCallbackRedirect) {
            if (c = o.GetControllerData(n.server.Controllers.AccountsController, n.common.services.AppEventsService.PSD2ProductBalanceServiceTrigger), c) {
              console.log('data fetched: ', c);
              this.reloadAccountBalance(c.RequestedBank, c.RequestedProductCode, c.RequestedProductId, c.RequestedProductIdentifier);
              return
            }
            if (c = o.GetControllerData(n.server.Controllers.OtherBankAccountsOverviewController, n.common.services.AppEventsService.PSD2ProductDetailsServiceTrigger), c) {
              this.reRegisterOtherBankAccount(c.RequestedProductCode, null, c.RequestedBank, c.OtherBankProductDescription);
              return
            }
          }
        }
        return t.prototype.hideOtherBankProductsMessage = function () {
          this.showOtherBankProductsOverviewMsg = !1
        },
        t.prototype.reRegisterOtherBankAccount = function (t, i, r, u) {
          var f = this,
          e;
          f.isBusyMap[t] = {
            isBusy: !0
          };
          i != null && i.BankProduct.Details && (e = i.BankProduct.Details.filter(function (t) {
            return t.Name === n.server.DetailName.PRODUCT_BANK_NAME
          }), e.length > 0 && (r = parseInt(e[0].Value)));
          f.otherBankProductsService.getProductDetails(r, 1, 3, t, null).then(function (i) {
            if (i.ResultCode === 0 && i.Error == null) if (f.ClearErrorMessages(), i.NeedsNewAccessToken) {
              var e = {
                requestIntentId: i.RequestIntentId,
                bank: r,
                productType: 1,
                scope: i.ScopeNeeded,
                productCode: t,
                serviceRequested: 3,
                callingJsController: n.server.Controllers.OtherBankAccountsOverviewController,
                productDescription: u
              };
              f.StateHelperService.go(n.constants.stateNames.oAuthDanceBeginState, null, e)
            } else f.otherBankProductsService.finishOtherBankMultipleProductsAddition(r, 1, i.OtherBankProductDetails).then(function () {
              f.hasErrorMap[t] = {
                hasError: !1
              }
            }).catch (function (n) {
              console.log(n)
            }).finally (function () {
              for (var n, r = 0, u = f.otherBankProducts; r < u.length; r++) n = u[r],
              n.Code === t && (n.BankProduct.OtherBankProdLastUpdateOn = i.OtherBankProductDetails[0].LastUpdatedOn, n.BankProduct.AvailableBalance = i.OtherBankProductDetails[0].AvailableBalance.Amount, n.BankProduct.AvailableBalanceSign = i.OtherBankProductDetails[0].AvailableBalance.Sign);
              f.isBusyMap[t] = {
                isBusy: !1
              }
            }),
            f.AppEventsService.publish(n.common.services.AppEventsService.PSD2ClearLocalStorageTrigger);
             else f.Model.HasErrors = !0,
            f.Model.ErrorMessage = n.utils.getErrorMsg(i.Error);
            console.log(i)
          }).catch (function (n) {
            console.log(n)
          }).finally (function () {
            f.isBusyMap[t] = {
              isBusy: !1
            }
          })
        },
        t.prototype.reloadAccountBalance = function (t, i, r, u) {
          var f = this;
          f.isBusyMap[i] = {
            isBusy: !0
          };
          f.otherBankProductsService.getProductBalance(t, 1, i, r, u).then(function (e) {
            var s,
            o;
            e.ResultCode === 0 && e.Error == null ? (f.ClearErrorMessages(), e.NeedsNewAccessToken ? (s = {
              requestIntentId: e.RequestIntentId,
              bank: t,
              productType: 1,
              scope: e.ScopeNeeded,
              productCode: i,
              otherBankProductId: r,
              serviceRequested: 1,
              callingJsController: n.server.Controllers.AccountsController,
              productIdentifier: u
            }, f.StateHelperService.go(n.constants.stateNames.oAuthDanceBeginState, null, s))  : (e.OtherBankProductBalances && e.OtherBankProductBalances.length != 0 && (o = e.OtherBankProductBalances[0], setTimeout(function () {
              var t,
              r,
              n;
              if (f.otherBankProducts) for (t = 0, r = f.otherBankProducts; t < r.length; t++) n = r[t],
              n.Code === i && (n.BankProduct.OtherBankProdLastUpdateOn = o.LastUpdatedOn, n.BankProduct.AvailableBalance = o.AvailableBalance.Value, n.BankProduct.AvailableBalanceSign = o.AvailableBalance.Sign)
            }, 0)), f.AppEventsService.publish(n.common.services.AppEventsService.PSD2ClearLocalStorageTrigger)))  : (f.Model.HasErrors = !0, f.Model.ErrorMessage = n.utils.getErrorMsg(e.Error))
          }, function (t) {
            f.Model.HasFatalError = !0;
            f.Model.ErrorMessage = n.utils.getErrorMsg(t)
          }).finally (function () {
            f.isBusyMap[i] = {
              isBusy: !1
            }
          })
        },
        t.prototype.reloadKeyForNewRequest = function () {
          this.newReloadKey = uuid.v4()
        },
        t.prototype.isCMAccount = function (n) {
          var i = !1,
          r,
          t;
          if (n && n.Uses && this.roleService.hasFeature('CashManagement')) for (r = n.Uses.length, t = 0; t < r; t++) if (n.Uses[t] == 5) {
            i = !0;
            break
          }
          return i
        },
        Object.defineProperty(t.prototype, 'IsCorporate', {
          get: function () {
            return this.isCorporate
          },
          enumerable: !0,
          configurable: !0
        }),
        t.prototype.ClearErrorMessages = function () {
          this.Model.HasErrors = !1;
          this.Model.HasFatalError = !1;
          this.Model.ErrorMessage = null
        },
        t.$inject = [
          'products',
          'otherBankProducts',
          'RoleService',
          'AppEventsService',
          'OtherBankProductsService',
          'StateHelperService',
          'SharedDataService',
          '$state'
        ],
        t
      }(),
      i,
      r,
      u,
      f,
      e,
      o,
      s,
      h,
      c,
      l,
      a,
      v,
      y,
      p,
      w;
      t.mainModule.controller('AccountsController', b);
      i = function () {
        function t(t, i, r) {
          this.response = t;
          this.product = i;
          this.ProductsService = r;
          this.chequeNo = '';
          this.chequeStatus = '';
          this.response.ResultCode == 0 ? (this.hasMore = t.HasMore, this.currentIndex = t.CurrentPageIndex, this.cheques = this.response.ChequeStatus, this.headerInfo = this.response.HeaderInfo, this.error = '')  : n.utils.isUndefinedOrNull(this.response.Error) || (this.error = this.response.Error.Message)
        }
        return t.prototype.loadMore = function () {
          var t = this;
          return this.ProductsService.getChequeStatus({
            ProductCode: this.product.Code,
            ProductTypeID: this.product.TypeID,
            MaxRecords: 10,
            ReturnChequeBooksInfo: !1,
            SpecificChequeNumber: undefined,
            LastPageIndex: this.currentIndex
          }).then(function (i) {
            i.ResultCode == 0 ? (t.hasMore = i.HasMore, t.currentIndex = i.CurrentPageIndex, t.cheques = t.cheques.concat(i.ChequeStatus), t.error = '')  : n.utils.isUndefinedOrNull(i.Error) || (t.error = i.Error.Message, t.hasMore = !1, t.currentIndex = '', t.cheques = [
            ])
          })
        },
        t.prototype.searchChequeNumber = function () {
          if (!n.utils.isUndefinedOrNullorWhiteSpace(this.chequeNo)) {
            var t = this;
            return this.ProductsService.getChequeStatus({
              ProductCode: this.product.Code,
              ProductTypeID: this.product.TypeID,
              MaxRecords: 10,
              ReturnChequeBooksInfo: !1,
              SpecificChequeNumber: t.chequeNo
            }).then(function (i) {
              i.ResultCode == 0 ? n.utils.isUndefinedOrNull(i.ChequeStatus[0]) || (t.chequeStatus = i.ChequeStatus[0].StatusDescription)  : n.utils.isUndefinedOrNull(i.Error) || (t.chequeStatus = i.Error.Message)
            })
          }
        },
        t.$inject = [
          'cheques',
          'product',
          'ProductsService'
        ],
        t
      }();
      n.accounts.mainModule.controller('AccountsChequesController', i);
      r = function () {
        function t(t, i, r) {
          this.blocksResponse = t;
          this.product = i;
          this.QueriesService = r;
          this.blocksResponse.ResultCode == 0 ? (this.blocks = this.blocksResponse.Blocks, this.currentIndex = this.blocksResponse.CurrentPageIndex, this.hasMore = this.blocksResponse.HasMore, this.error = '')  : n.utils.isUndefinedOrNull(this.blocksResponse.Error) || (this.error = this.blocksResponse.Error.Message)
        }
        return t.prototype.loadMore = function () {
          var t = this;
          this.QueriesService.getProductBlocks({
            DebitProductCode: this.product.Code,
            DebitProductType: this.product.TypeID,
            MaxRecords: 10,
            LastPageIndex: this.currentIndex
          }).then(function (i) {
            i.ResultCode == 0 ? (t.hasMore = i.HasMore, t.currentIndex = i.CurrentPageIndex, t.blocks = t.blocks.concat(i.Blocks), t.error = '')  : n.utils.isUndefinedOrNull(i.Error) || (t.error = i.Error.Message, t.hasMore = !1, t.currentIndex = '', t.blocks = [
            ])
          })
        },
        t.$inject = [
          'blocksResponse',
          'product',
          'QueriesService'
        ],
        t
      }();
      n.accounts.mainModule.controller('AccountsBlocksController', r);
      u = function () {
        function t(t, i, r) {
          this.holdsResponse = t;
          this.product = i;
          this.QueriesService = r;
          this.holdsResponse.ResultCode == 0 ? (this.holds = this.holdsResponse.Holds, this.currentIndex = this.holdsResponse.CurrentPageIndex, this.hasMore = this.holdsResponse.HasMore, this.error = '')  : n.utils.isUndefinedOrNull(this.holdsResponse.Error) || (this.error = this.holdsResponse.Error.Message)
        }
        return t.prototype.loadMore = function () {
          var t = this;
          this.QueriesService.getProductHolds({
            DebitProductCode: this.product.Code,
            DebitProductType: this.product.TypeID,
            MaxRecords: 10,
            LastPageIndex: this.currentIndex
          }).then(function (i) {
            i.ResultCode == 0 ? (t.hasMore = i.HasMore, t.currentIndex = i.CurrentPageIndex, t.holds = t.holds.concat(i.Holds), t.error = '')  : n.utils.isUndefinedOrNull(i.Error) || (t.error = i.Error.Message, t.hasMore = !1, t.currentIndex = '', t.holds = [
            ])
          })
        },
        t.$inject = [
          'holdsResponse',
          'product',
          'QueriesService'
        ],
        t
      }();
      n.accounts.mainModule.controller('AccountsHoldsController', u);
      f = function () {
        function t(t, i, r) {
          this.unclearsResponse = t;
          this.product = i;
          this.QueriesService = r;
          this.unclearsResponse.ResultCode == 0 ? (this.unclears = this.unclearsResponse.UnClears, this.currentIndex = this.unclearsResponse.CurrentPageIndex, this.hasMore = this.unclearsResponse.HasMore, this.error = '')  : n.utils.isUndefinedOrNull(this.unclearsResponse.Error) || (this.error = this.unclearsResponse.Error.Message)
        }
        return t.prototype.loadMore = function () {
          var t = this;
          this.QueriesService.getProductUnclears({
            DebitProductCode: this.product.Code,
            DebitProductType: this.product.TypeID,
            MaxRecords: 10,
            LastPageIndex: this.currentIndex
          }).then(function (i) {
            i.ResultCode == 0 ? (t.hasMore = i.HasMore, t.currentIndex = i.CurrentPageIndex, t.unclears = t.unclears.concat(i.UnClears), t.error = '')  : n.utils.isUndefinedOrNull(i.Error) || (t.error = i.Error.Message, t.hasMore = !1, t.currentIndex = '', t.unclears = [
            ])
          })
        },
        t.$inject = [
          'unclearsResponse',
          'product',
          'QueriesService'
        ],
        t
      }();
      n.accounts.mainModule.controller('AccountsUnclearController', f);
      e = function () {
        function t(t, i, r, u, f, e, o) {
          if (this.incomingOrders = t, this.product = i, this.ProductsService = r, this.currenciesLookup = u, this.scope = f, this.modal = e, this.detailLocale = o, this.payments = [
          ], this.dateFromPopupOpened = !1, this.dateToPopupOpened = !1, this.dateFormat = 'dd/MM/yyyy', this.showValidationErrors = !1, this.dateOptions = {
            formatYear: 'yyyy',
            startingDay: 1,
            showWeeks: 'false',
            maxMode: 'day'
          }, this.incomingOrders.ResultCode == 0) {
            this.hasMore = t.HasMore;
            this.currentIndex = t.CurrentPageIndex;
            this.payments = this.incomingOrders.Payments;
            var s = n.model.Currency;
            n.utils.isUndefinedOrNull(this.payments) || this.payments.map(function (n) {
              var t = s[n.Currency];
              n.Currency = t
            });
            this.error = ''
          } else n.utils.isUndefinedOrNull(this.incomingOrders.Error) || (this.error = this.incomingOrders.Error.Message, this.hasMore = !1, this.currentIndex = '');
          this.today = new Date;
          this.firstDayOfMonth = new Date(this.today.getFullYear(), this.today.getMonth(), 1);
          this.dateFrom = this.firstDayOfMonth;
          this.dateTo = new Date;
          this.documentData = this.ProductsService.getIncomingOrdersRequest(this.product.Code, this.product.TypeID, 10);
          this.documentData.LastPageIndices = [
          ];
          this.documentData.DocumentRequestType = 12
        }
        return t.prototype.getIncomingOrderDetails = function (t) {
          var i = this,
          r = null == this.detailLocale ? '{0}' : '{0}?language={1}',
          u = this.modal.open({
            templateUrl: n.utils.formatString(r, [
              'Templates/Features/Accounts/incomingorderDetailsModal',
              i.detailLocale
            ]),
            controller: 'IncomingOrderDetailsModalInstanceCtrl as vm',
            size: 'sm',
            windowClass: 'custom',
            resolve: {
              details: [
                'ProductsService',
                function (r) {
                  return r.getIncomingOrderDetails({
                    FTSID: t.FTSID,
                    Language: n.utils.ToSpecificLocale(i.detailLocale),
                    Channel: 3
                  })
                }
              ],
              locale: function () {
                return i.detailLocale
              },
              outstatus: function () {
                return t.OutStatus
              }
            }
          }).result.then(function (n) {
            i.detailLocale = n;
            i.getIncomingOrderDetails(t)
          })
        },
        t.prototype.dateFromPopupToggleVisibility = function (n) {
          n.preventDefault();
          n.stopPropagation();
          this.dateToPopupOpened = !1;
          this.dateFromPopupOpened = !0
        },
        t.prototype.dateToPopupToggleVisibility = function (n) {
          n.preventDefault();
          n.stopPropagation();
          this.dateFromPopupOpened = !1;
          this.dateToPopupOpened = !0
        },
        t.prototype.getFilteredIncomingOrders = function () {
          var t = this,
          i;
          t.showValidationErrors = !0;
          t.scope && t.scope.form && n.utils.forceValidation(t.scope.form);
          t.scope.form.$valid && ((t.amountFrom == '' || isNaN(parseFloat(t.amountFrom))) && (t.amountFrom = undefined), (t.amountTo == '' || isNaN(parseFloat(t.amountTo))) && (t.amountTo = undefined), n.utils.isUndefinedOrNull(this.dateFrom) || this.dateFrom.setHours(0, 0, 0, 0), n.utils.isUndefinedOrNull(this.dateTo) || this.dateTo.setHours(23, 59, 59, 999), n.utils.isUndefinedOrNull(t.amountFrom) && n.utils.isUndefinedOrNull(t.amountTo) && n.utils.isUndefinedOrNull(t.dateFrom) && n.utils.isUndefinedOrNull(t.dateTo) && n.utils.isUndefinedOrNull(t.selectedCurrency) ? (this.documentData = this.ProductsService.getIncomingOrdersRequest(t.product.Code, t.product.TypeID, 10), this.documentData.DocumentRequestType = 12, this.documentData.LastPageIndices = [
          ], t.ProductsService.getIncomingOrders(t.product.Code, t.product.TypeID, 10).then(function (i) {
            if (i.ResultCode == 0) {
              t.hasMore = !1;
              t.payments = i.Payments;
              var r = n.model.Currency;
              n.utils.isUndefinedOrNull(t.payments) || t.payments.map(function (n) {
                var t = r[n.Currency];
                n.Currency = t
              });
              t.error = ''
            } else n.utils.isUndefinedOrNull(i.Error) || (t.error = i.Error.Message, t.hasMore = !1, t.currentIndex = '', t.payments = [
            ])
          }))  : (i = undefined, n.utils.isUndefinedOrNull(t.selectedCurrency) || (i = parseInt(t.selectedCurrency.Currency)), this.documentData = this.ProductsService.getIncomingOrdersRequestPDF(t.product.Code, t.product.TypeID, 10, n.utils.isUndefinedOrNull(t.amountFrom) ? undefined : parseFloat(t.amountFrom), n.utils.isUndefinedOrNull(t.amountTo) ? undefined : parseFloat(t.amountTo), t.dateFrom, t.dateTo, i), this.documentData.DocumentRequestType = 12, this.documentData.LastPageIndices = [
          ], t.ProductsService.getIncomingOrders(t.product.Code, t.product.TypeID, 10, n.utils.isUndefinedOrNull(t.amountFrom) ? undefined : parseFloat(t.amountFrom), n.utils.isUndefinedOrNull(t.amountTo) ? undefined : parseFloat(t.amountTo), t.dateFrom, t.dateTo, i).then(function (i) {
            if (i.ResultCode == 0) {
              t.hasMore = i.HasMore;
              t.currentIndex = '2';
              t.payments = i.Payments;
              t.error = '';
              var r = n.model.Currency;
              n.utils.isUndefinedOrNull(t.payments) || t.payments.map(function (n) {
                var t = r[n.Currency];
                n.Currency = t
              })
            } else n.utils.isUndefinedOrNull(i.Error) || (t.error = i.Error.Message, t.hasMore = !1, t.currentIndex = '', t.payments = [
            ])
          })))
        },
        t.prototype.loadMore = function () {
          var t = this;
          n.utils.isUndefinedOrNull(this.dateFrom) || this.dateFrom.setHours(0, 0, 0, 0);
          n.utils.isUndefinedOrNull(this.dateTo) || this.dateFrom.setHours(23, 59, 59, 999);
          this.ProductsService.getIncomingOrders(this.product.Code, this.product.TypeID, 10, n.utils.isUndefinedOrNull(t.amountFrom) ? undefined : parseFloat(t.amountFrom), n.utils.isUndefinedOrNull(t.amountTo) ? undefined : parseFloat(t.amountTo), this.dateFrom, this.dateTo, n.server.Currency.NA, this.currentIndex).then(function (i) {
            if (t.documentData = t.ProductsService.getIncomingOrdersRequestPDF(t.product.Code, t.product.TypeID, 10, n.utils.isUndefinedOrNull(t.amountFrom) ? undefined : parseFloat(t.amountFrom), n.utils.isUndefinedOrNull(t.amountTo) ? undefined : parseFloat(t.amountTo), t.dateFrom, t.dateTo, n.server.Currency.NA), t.documentData.DocumentRequestType = 12, t.documentData.LastPageIndices = [
              t.currentIndex
            ], i.ResultCode == 0) {
              if (t.hasMore = i.HasMore, t.currentIndex = (parseInt(t.currentIndex) + 1).toString(), !n.utils.isUndefinedOrNull(i.Payments)) {
                var r = n.model.Currency;
                i.Payments.map(function (n) {
                  var t = r[n.Currency];
                  n.Currency = t
                })
              }
              t.payments = t.payments.concat(i.Payments);
              t.error = ''
            } else n.utils.isUndefinedOrNull(i.Error) || (t.error = i.Error.Message, t.hasMore = !1, t.payments = [
            ])
          })
        },
        t.prototype.selectCurrency = function (n) {
          this.selectedCurrency = n;
          this.getFilteredIncomingOrders()
        },
        t.$inject = [
          'incomingOrders',
          'product',
          'ProductsService',
          'currenciesLookup',
          '$scope',
          '$modal',
          'appLocale'
        ],
        t
      }();
      n.accounts.mainModule.controller('AccountsIncomingOrdersController', e);
      o = function () {
        function t(t, i, r, u, f, e, o, s, h, c, l) {
          var y = this,
          a,
          v,
          b,
          p,
          k,
          w;
          this.statementsResponse = t;
          this.product = i;
          this.STRINGS = r;
          this.ProductsService = u;
          this.modal = f;
          this.scope = e;
          this.filterService = o;
          this.postNewWindowService = s;
          this.roleService = h;
          this.modalService = c;
          this.CashManagementServiceProxy = l;
          this.dateFromPopupOpened = !1;
          this.dateToPopupOpened = !1;
          this.dateFormat = 'dd/MM/yyyy';
          this.showValidationErrors = !1;
          this.showGrossBalancePanel = !1;
          this.isCashManagement = !1;
          this.dateOptions = {
            formatYear: 'yyyy',
            startingDay: 1,
            showWeeks: 'false',
            maxMode: 'day'
          };
          this.MAX_NUMBER_OF_TRANSACTION_IN_PDF = 330;
          this.statementsResponse.ResultCode == 0 ? (this.errorMessage = '', this.hasMore = t.HasMore, this.currentIndex = t.CurrentPageIndex, this.newGrossBalance = t.NewGrossBalance, this.newGrossBalanceSign = t.NewGrossBalanceSign, this.previousGrossBalance = t.PreviousGrossBalance, this.previousGrossBalanceSign = t.PreviousGrossBalanceSign, this.setShowGrossBalancePanel(), this.statements = t.Statements)  : n.utils.isUndefinedOrNull(t.Error) || (this.hasMore = !1, this.currentIndex = '', this.newGrossBalance = null, this.newGrossBalanceSign = null, this.previousGrossBalance = null, this.previousGrossBalanceSign = null, this.setShowGrossBalancePanel(), this.statements = [
          ], this.errorMessage = t.Error.Message);
          this.today = new Date;
          this.firstDayOfMonth = new Date(this.today.getFullYear(), this.today.getMonth(), 1);
          this.from = this.firstDayOfMonth;
          this.to = this.today;
          a = this.today.getDate().toString();
          v = (this.today.getMonth() + 1).toString();
          a.length < 2 && (a = '0' + a);
          v.length < 2 && (v = '0' + v);
          this.currentDate = a + '/' + v + '/' + this.today.getFullYear();
          this.dateFilterValues = [
            {
              id: 1,
              name: this.STRINGS.dfvLastTransactions
            },
            {
              id: 2,
              name: this.STRINGS.dfvLastMonth
            },
            {
              id: 3,
              name: this.STRINGS.dfvLast3Months
            },
            {
              id: 4,
              name: this.STRINGS.dfvLastYear
            },
            {
              id: 5,
              name: this.STRINGS.dfvCustomPeriod
            }
          ];
          this.typeFilterValues = [
            {
              value: 0,
              name: this.STRINGS.tfvAllTransactions
            },
            {
              value: 1,
              name: this.STRINGS.tfvOnlyDebit
            },
            {
              value: 2,
              name: this.STRINGS.tfvOnlyCredit
            }
          ];
          this.selectedDateFilter = {
            id: 1,
            name: this.STRINGS.dfvLastTransactions
          };
          this.selectedTypeFilter = {
            value: 0,
            name: this.STRINGS.tfvAllTransactions
          };
          b = new n.model.AccountStatementsSummaryFilter(new Date(this.today.getFullYear(), this.today.getMonth(), 1).toDateString(), this.today.toDateString());
          this.lastIndicesAndExtraitArr = [
          ];
          this.isCashManagement = !this.roleService.IsRetail() && !this.product.IsAlphaBankProduct;
          this.isCashManagement ? (p = angular.copy(this.product.BankProduct), delete p.Uses, k = this, w = 0, this.product.BankProduct.Uses.forEach(function (n) {
            p['Uses[' + w.toString() + ']'] = n;
            w++
          }), this.documentData = {
            Product: p,
            MaxRecords: 10
          }, this.documentData.DocumentRequestType = 31, this.pdfRequest = {
            Product: this.product.BankProduct,
            MaxRecords: 10
          })  : (this.documentData = this.ProductsService.getAccountStatementsRequest(i.Code, i.TypeID, 10, !0), this.documentData.DocumentRequestType = 7, this.pdfRequest = this.ProductsService.getAccountStatementsRequest(i.Code, i.TypeID, 10, !0));
          this.scope.$watch(function () {
            return y.to
          }, function (n) {
            n && y.checkDate()
          });
          this.scope.$watch(function () {
            return y.from
          }, function (n) {
            n && y.checkDate()
          })
        }
        return t.prototype.setShowGrossBalancePanel = function () {
          this.showGrossBalancePanel = n.utils.isUndefinedOrNull(this.newGrossBalance) || n.utils.isUndefinedOrNull(this.previousGrossBalance) ? !1 : !0
        },
        t.prototype.isStatementsExceedLimit = function () {
          return this.statements && this.statements.length > this.MAX_NUMBER_OF_TRANSACTION_IN_PDF
        },
        t.prototype.showModalCorporate = function () {
          this.roleService.IsRetail() || this.isStatementsExceedLimit() && this.showExceedMaxTransactionModal()
        },
        t.prototype.showExceedMaxTransactionModal = function () {
          this.modalService.open({
            templateUrl: 'Templates/common/directives/infoLimitTransactionsInPdf',
            size: 'lg',
            backdrop: 'static',
            controller: 'onlyCancelModalcontroller as vm'
          })
        },
        t.prototype.checkDate = function () {
          var n = this,
          t = new Date;
          t.setMonth(t.getMonth() - 18);
          var i = n.scope.form.dateFrom,
          r = n.scope.form.dateTo,
          u = n.from < t,
          f = n.to < n.from;
          f ? (n.showValidationErrors = !0, r.$setValidity('dateToIsBigger', !1))  : u ? (n.showValidationErrors = !0, i.$setValidity('eighteenMonthsOrOlder', !1))  : (n.showValidationErrors = !1, i.$setValidity('eighteenMonthsOrOlder', !0), r.$setValidity('dateToIsBigger', !0))
        },
        t.prototype.getStatementsWithFilter = function () {
          var t = this,
          i;
          if (t.scope.form.$valid) {
            if (!this.roleService.IsRetail() && !this.product.IsAlphaBankProduct) {
              this.CashManagementServiceProxy.getAccountCMEStatements({
                Product: this.product.BankProduct,
                MaxRecords: 1000,
                FromDate: n.utils.toShortDateString(this.from),
                ToDate: n.utils.toShortDateString(this.to)
              }).then(function (i) {
                for (var u, f = [
                ], r = 0; r < i.Statements.length; ++r) f.push({
                  Amount: i.Statements[r].amnt,
                  AmountSign: i.Statements[r].dCFlag,
                  EntryDate: i.Statements[r].entryDT,
                  Valeur: i.Statements[r].valueDT,
                  TransactionUN: i.Statements[r].refField,
                  HasCumulative: !1,
                  Priority: 1,
                  Reason: i.Statements[r].suplDtls
                });
                return t.statements = f,
                u = angular.copy(t.product.BankProduct),
                delete u.Uses,
                r = 0,
                t.product.BankProduct.Uses.forEach(function (n) {
                  u['Uses[' + r.toString() + ']'] = n;
                  r++
                }),
                t.documentData = {
                  Product: u,
                  MaxRecords: 1000,
                  FromDate: n.utils.toShortDateString(t.from),
                  ToDate: n.utils.toShortDateString(t.to)
                },
                t.documentData.DocumentRequestType = 31,
                t.pdfRequest = {
                  Product: t.product.BankProduct,
                  MaxRecords: 1000,
                  FromDate: n.utils.toShortDateString(t.from),
                  ToDate: n.utils.toShortDateString(t.to)
                },
                i
              }, function () {
                return {
                }
              });
              return
            }
            return t = this,
            t.showValidationErrors = !0,
            t.scope && t.scope.form && n.utils.forceValidation(t.scope.form),
            this.selectedDateFilter.id == 1 ? (this.documentData = this.ProductsService.getAccountStatementsRequest(this.product.Code, this.product.TypeID, 10, !0), this.documentData.documentRequestType = 7, this.pdfRequest = this.ProductsService.getAccountStatementsRequest(this.product.Code, this.product.TypeID, 10, !0), this.ProductsService.getAccountStatements(this.product.Code, this.product.TypeID, 10, !0).then(function (i) {
              i.ResultCode == 0 ? (t.errorMessage = '', t.hasMore = i.HasMore, t.currentIndex = i.CurrentPageIndex, t.newGrossBalance = i.NewGrossBalance, t.newGrossBalanceSign = i.NewGrossBalanceSign, t.previousGrossBalance = i.PreviousGrossBalance, t.previousGrossBalanceSign = i.PreviousGrossBalanceSign, t.setShowGrossBalancePanel(), t.statements = i.Statements, t.lastIndicesAndExtraitArr = [
              ])  : n.utils.isUndefinedOrNull(i.Error) || (t.hasMore = !1, t.currentIndex = '', t.newGrossBalance = null, t.newGrossBalanceSign = null, t.previousGrossBalance = null, t.previousGrossBalanceSign = null, t.setShowGrossBalancePanel(), t.statements = [
              ], t.errorMessage = i.Error.Message)
            }))  : (i = new n.model.AccountStatementsSummaryFilter(n.utils.toShortDateString(this.from), n.utils.toShortDateString(this.to)), this.advancedSearch && (n.utils.isUndefinedOrNullorWhiteSpace(this.amountFrom) || (i.FromAmount = this.amountFrom), n.utils.isUndefinedOrNullorWhiteSpace(this.amountTo) || (i.ToAmount = this.amountTo), i.Option = this.selectedTypeFilter.value), this.ProductsService.getAggregatedAccountStatements({
              ProductCode: this.product.Code,
              ProductTypeID: this.product.TypeID,
              GetDetails: undefined,
              GetSummary: i
            }).then(function (r) {
              r.ResultCode == 0 ? (t.lastIndicesAndExtraitArr = [
              ], t.errorMessage = '', t.hasMore = r.HasMore, t.lastExtraitKey = r.LastExtraitKey, t.currentIndex = r.CurrentPageIndex, t.newGrossBalance = r.NewGrossBalance, t.newGrossBalanceSign = r.NewGrossBalanceSign, t.previousGrossBalance = r.PreviousGrossBalance, t.previousGrossBalanceSign = r.PreviousGrossBalanceSign, t.setShowGrossBalancePanel(), t.statements = r.Statements, t.documentData = t.ProductsService.getAggregatedAccountStatementsRequest(t.product.Code, t.product.TypeID, undefined, i), t.documentData.DocumentRequestType = 8, t.pdfRequest = t.ProductsService.getAggregatedAccountStatementsRequest(t.product.Code, t.product.TypeID, undefined, i))  : n.utils.isUndefinedOrNull(r.Error) || (t.hasMore = !1, t.currentIndex = '', t.newGrossBalance = null, t.newGrossBalanceSign = null, t.previousGrossBalance = null, t.previousGrossBalanceSign = null, t.setShowGrossBalancePanel(), t.statements = [
              ], t.errorMessage = r.Error.Message)
            }))
          }
        },
        t.prototype.toggleAdvancedSearch = function () {
          this.advancedSearch = !this.advancedSearch;
          this.advancedSearch || (this.amountFrom = null, this.amountTo = null)
        },
        t.prototype.getTransactionDetails = function (t) {
          var i = this,
          r = this.modal.open({
            templateUrl: 'Templates/Features/Accounts/transactionDetailsModal',
            controller: 'TransactionDetailsModalInstanceCtrl as vm',
            size: 'sm',
            windowClass: 'custom',
            resolve: {
              details: [
                'ProductsService',
                function (r) {
                  var u = [
                  ],
                  f;
                  return n.utils.isUndefinedOrNull(t.StatementDetails) || t.StatementDetails.length == 0 || n.utils.isUndefinedOrNull(t.StatementDetails[0]) ? (f = new n.model.AccountStatementDetailsFilter(t.TransactionUN), r.getAggregatedAccountStatements({
                    ProductCode: i.product.Code,
                    ProductTypeID: i.product.TypeID,
                    GetDetails: f,
                    GetSummary: null
                  }).then(function (r) {
                    if (!n.utils.isUndefinedOrNull(r) && !n.utils.isUndefinedOrNull(r.Statements)) {
                      var f;
                      r.Statements[0].StatementDetails.forEach(function (n, i) {
                        n.Amount == t.Amount && (f = i)
                      });
                      u.push({
                        AdditionalInformation: r.Statements[0].StatementDetails[f].AdditionalInformation || null,
                        Amount: t.Amount,
                        AmountSign: t.AmountSign,
                        ConversionDetails: r.Statements[0].StatementDetails[f].ConversionDetails || null,
                        IBAN: i.product.Code,
                        Reason: r.Statements[0].StatementDetails[f].Reason,
                        SenderDetails: r.Statements[0].StatementDetails[f].SenderDetails || null,
                        TransactionDate: r.Statements[0].StatementDetails[f].TransactionDate,
                        TransactionReference: r.Statements[0].StatementDetails[f].TransactionReference,
                        ValueDate: r.Statements[0].StatementDetails[f].ValueDate
                      })
                    }
                    return u
                  }))  : u = t.StatementDetails
                }
              ],
              isCreditTransaction: [
                function () {
                  return t.AmountSign == 'C' || t.AmountSign == 'Π'
                }
              ]
            }
          })
        },
        t.prototype.loadMore = function () {
          var u = this,
          t = this,
          i = new n.model.AccountStatementsSummaryFilter(n.utils.toShortDateString(this.from), n.utils.toShortDateString(this.to)),
          r;
          return this.advancedSearch && (n.utils.isUndefinedOrNullorWhiteSpace(this.amountFrom) || (i.FromAmount = this.amountFrom), n.utils.isUndefinedOrNullorWhiteSpace(this.amountTo) || (i.ToAmount = this.amountTo), i.Option = this.selectedTypeFilter.value),
          r = i.ToDate == n.utils.toShortDateString(t.today) ? !0 : !1,
          this.ProductsService.getAggregatedAccountStatements({
            ProductCode: this.product.Code,
            ProductTypeID: this.product.TypeID,
            GetDetails: undefined,
            GetSummary: i,
            LastPageIndex: this.currentIndex,
            LastExtraitKey: this.lastExtraitKey
          }).then(function (f) {
            if (f.ResultCode == 0) {
              t.errorMessage = '';
              t.hasMore = f.HasMore;
              var e = t.currentIndex,
              o = {
                LastPageIndex: u.currentIndex,
                LastExtraitKey: u.lastExtraitKey
              };
              t.lastExtraitKey = f.LastExtraitKey;
              t.currentIndex = f.CurrentPageIndex;
              t.lastIndicesAndExtraitArr.push(o);
              r || (t.newGrossBalance = f.NewGrossBalance, t.newGrossBalanceSign = f.NewGrossBalanceSign, t.previousGrossBalance = f.PreviousGrossBalance, t.previousGrossBalanceSign = f.PreviousGrossBalanceSign, t.setShowGrossBalancePanel());
              t.statements = t.statements.concat(f.Statements);
              t.documentData = t.ProductsService.getAggregatedAccountStatementsRequest(t.product.Code, t.product.TypeID, null, i, e);
              t.documentData.DocumentRequestType = 8;
              t.pdfRequest = t.ProductsService.getAggregatedAccountStatementsRequest(t.product.Code, t.product.TypeID, null, i, e);
              t.documentData.IndicesAndExtraits = t.lastIndicesAndExtraitArr
            } else n.utils.isUndefinedOrNull(f.Error) || (t.hasMore = !1, t.currentIndex = '', r || (t.newGrossBalance = null, t.newGrossBalanceSign = null, t.previousGrossBalance = null, t.previousGrossBalanceSign = null, t.setShowGrossBalancePanel()), t.statements = [
            ], t.errorMessage = f.Error.Message)
          })
        },
        t.prototype.dateFromPopupToggleVisibility = function (n) {
          n.preventDefault();
          n.stopPropagation();
          this.dateToPopupOpened = !1;
          this.dateFromPopupOpened = !0;
          this.selectedDateFilter = {
            id: 5,
            name: this.STRINGS.dfvCustomPeriod
          }
        },
        t.prototype.selectTimePeriod = function () {
          this.selectedDateFilter = {
            id: 5,
            name: this.STRINGS.dfvCustomPeriod
          }
        },
        t.prototype.dateToPopupToggleVisibility = function (n) {
          n.preventDefault();
          n.stopPropagation();
          this.dateFromPopupOpened = !1;
          this.dateToPopupOpened = !0;
          this.selectedDateFilter = {
            id: 5,
            name: this.STRINGS.dfvCustomPeriod
          }
        },
        t.prototype.selectTypeFilter = function (n) {
          switch (n.value) {
            case 0:
              this.selectedTypeFilter = {
                value: 0,
                name: this.STRINGS.tfvAllTransactions
              };
              this.getStatementsWithFilter();
              break;
            case 1:
              this.selectedTypeFilter = {
                value: 1,
                name: this.STRINGS.tfvOnlyDebit
              };
              this.getStatementsWithFilter();
              break;
            case 2:
              this.selectedTypeFilter = {
                value: 2,
                name: this.STRINGS.tfvOnlyCredit
              };
              this.getStatementsWithFilter()
          }
        },
        t.prototype.selectDateFilter = function (t) {
          switch (t.id) {
            case 1:
              this.selectedDateFilter = {
                id: 1,
                name: this.STRINGS.dfvLastTransactions
              };
              this.to = this.today;
              this.from = this.firstDayOfMonth;
              this.getStatementsWithFilter();
              break;
            case 2:
              this.selectedDateFilter = {
                id: 2,
                name: this.STRINGS.dfvLastMonth
              };
              this.from = n.utils.SubtractMonths(new Date, 1);
              this.to = this.today;
              this.getStatementsWithFilter();
              break;
            case 3:
              this.selectedDateFilter = {
                id: 3,
                name: this.STRINGS.dfvLast3Months
              };
              this.from = n.utils.SubtractMonths(new Date, 3);
              this.to = this.today;
              this.getStatementsWithFilter();
              break;
            case 4:
              this.selectedDateFilter = {
                id: 4,
                name: this.STRINGS.dfvLastYear
              };
              this.from = n.utils.SubtractYears(new Date, 1);
              this.to = this.today;
              this.getStatementsWithFilter();
              break;
            case 5:
              this.selectedDateFilter = {
                id: 5,
                name: this.STRINGS.dfvCustomPeriod
              };
              break;
            default:
              this.to = this.today;
              this.from = this.firstDayOfMonth
          }
        },
        t.prototype.exportPDF = function () {
          var t,
          i,
          n,
          r;
          return this.showGrossBalancePanel && (t = this.filterService('EnumToCurrencyFilter') (this.product.Balance.Currency) + ' ' + this.filterService('currency') (this.newGrossBalance, '') + ' ' + this.newGrossBalanceSign, i = this.filterService('EnumToCurrencyFilter') (this.product.Balance.Currency) + ' ' + this.filterService('currency') (this.previousGrossBalance, '') + ' ' + this.previousGrossBalanceSign),
          n = {
          },
          r = {
            Request: this.pdfRequest,
            ProductCurrency: this.product.Currency,
            IndicesAndExtraits: this.lastIndicesAndExtraitArr,
            ShowGrossBalancePanel: this.showGrossBalancePanel,
            NewGrossBalanceStr: this.showGrossBalancePanel ? t : null,
            PreviousGrossBalanceStr: this.showGrossBalancePanel ? i : null
          },
          n.Parameters = JSON.stringify(r),
          n.PDFRequestType = this.roleService.IsRetail() || this.product.IsAlphaBankProduct ? this.selectedDateFilter.id == 1 ? 3 : 4 : 54,
          n
        },
        t.$inject = [
          'statementsResponse',
          'product',
          'STRINGS',
          'ProductsService',
          '$modal',
          '$scope',
          '$filter',
          'postNewWindowService',
          'RoleService',
          '$modal',
          'CashManagementServiceProxy'
        ],
        t
      }();
      n.accounts.mainModule.controller('AccountsTransactionsController', o);
      s = function () {
        function t(t, i) {
          this.estatementsResponse = t;
          this.product = i;
          this.boxMessageType = 'warning';
          this.estatementsResponse.ResultCode == 0 ? (this.estatements = this.estatementsResponse.EStatements, this.error = '')  : n.utils.isUndefinedOrNull(this.estatementsResponse.Error) || (this.error = this.estatementsResponse.Error.Message, this.estatements = [
          ])
        }
        return t.$inject = [
          'estatementsResponse',
          'product'
        ],
        t
      }();
      n.accounts.mainModule.controller('AccountEStatementsController', s);
      h = function () {
        function t(t, i, r, u) {
          this.chequebooksResponse = t;
          this.modal = i;
          this.stateService = r;
          this.stringService = u;
          var f = this;
          this.chequebooksResponse.ResultCode == 0 ? (this.replyRecords = this.chequebooksResponse.ReplyCount, this.cheques = this.chequebooksResponse.Cheques, n.utils.isUndefinedOrNull(this.chequebooksResponse.Cheques) || this.cheques.forEach(function (n) {
            n.ApplicationStatus == 5 ? (n.StatusString = f.stringService['chequebook.status.complete'], n.StatusClass = 'positive')  : n.ApplicationStatus == 1 ? (n.StatusString = f.stringService['chequebook.status.pending'], n.StatusClass = 'pending', n.MayCancel = !0)  : n.ApplicationStatus == 4 ? n.StatusString = f.stringService['chequebook.status.approved'] : n.ApplicationStatus == 6 ? (n.StatusClass = 'negative', n.StatusString = f.stringService['chequebook.status.canceled'])  : n.ApplicationStatus == 3 ? (n.StatusClass = 'negative', n.StatusString = f.stringService['chequebook.status.rejected'])  : n.ApplicationStatus == 2 && (n.StatusString = f.stringService['chequebook.status.underProcess']);
            n.channel == 8 ? n.ChannelString = f.stringService['chequebook.channel.branch'] : n.channel == 3 && (n.ChannelString = 'myAlpha Web')
          }))  : n.utils.isUndefinedOrNull(this.chequebooksResponse.Error) || (this.cheques = [
          ])
        }
        return t.prototype.cancelApplication = function (t) {
          var i = this,
          r = this.modal.open({
            templateUrl: 'Templates/Features/Accounts/Chequebooks/cancelChequebookModal',
            controller: 'CancelChequebookModalInstanceCtrl as vm',
            size: 'sm',
            windowClass: 'custom',
            resolve: {
              chequeBook: [
                function () {
                  return t
                }
              ]
            }
          });
          r.result.then(function (t) {
            n.utils.isUndefinedOrNull(t.Error) && i.stateService.go('root.accounts.chequebook.list', {
            }, {
              reload: !0
            })
          })
        },
        t.$inject = [
          'chequebooksResponse',
          '$modal',
          '$state',
          'STRINGS'
        ],
        t
      }();
      n.accounts.mainModule.controller('ChequebookController', h);
      c = function (n) {
        function t(t, i, r, u, f, e) {
          var o = n.call(this, t, i) || this;
          return o.scope = t,
          o.$injector = i,
          o.stateService = r,
          o.debitAccounts = u,
          o.ProductsService = f,
          o.stringService = e,
          o.chequePages = [
            {
              name: o.stringService.tenForIndividuals,
              value: 10
            },
            {
              name: o.stringService.twentyFiveForCompanies,
              value: 25
            }
          ],
          o.currentState = r.current.name,
          o.selectedPages = {
            name: o.stringService.tenForIndividuals,
            value: 10
          },
          o
        }
        return __extends(t, n),
        t.prototype.initialiseSteps = function () {
          var n = this,
          t = [
          ],
          i = 0,
          f = {
            templateUrl: 'Templates/Features/Accounts/Chequebooks/new-chequebook-step1',
            title: 'step1',
            index: i++,
            stateName: '',
            processStep: function () {
              return n.model.ProductCode = n.account.Code,
              n.model.ProductTypeId = n.account.TypeID,
              n.model.ChequePages = {
                CheckBookType: n.selectedPages.value
              },
              !0
            }
          },
          r,
          u;
          return t.push(f),
          r = {
            templateUrl: 'Templates/Features/Accounts/Chequebooks/new-chequebook-step2',
            index: i++,
            title: 'step2',
            stateName: '',
            processStep: [
              function () {
                var t = n.qService.defer();
                return n.ProductsService.orderNewChequebook(n.model).then(function (i) {
                  i.ResultCode == 0 ? (n.response = i, t.resolve(i))  : (n.Model.HasErrors = !0, n.Model.ErrorMessage = i.Error.Message, t.reject(i.Error.Message))
                }),
                t.promise
              }
            ]
          },
          t.push(r),
          u = {
            templateUrl: 'Templates/Features/Accounts/Chequebooks/new-chequebook-step3',
            index: i++,
            title: 'step3',
            stateName: ''
          },
          t.push(u),
          t
        },
        t.$inject = [
          '$scope',
          '$injector',
          '$state',
          'debitAccounts',
          'ProductsService',
          'STRINGS'
        ],
        t
      }(n.wizards.WizardController);
      n.accounts.mainModule.controller('OrderChequebookController', c);
      l = function (t) {
        function i(i, r, u, f, e, o, s) {
          var h = t.call(this, i, r) || this;
          return h.scope = i,
          h.$injector = r,
          h.stateService = u,
          h.debitAccounts = f,
          h.ProductsService = e,
          h.$modal = o,
          h.otpHandler = s,
          h.Success = !1,
          h.Failed = !1,
          h.showConfirmation = !1,
          h.dateFormat = 'dd/MM/yyyy',
          h.dateOptions = {
            formatYear: 'yyyy',
            startingDay: 1,
            showWeeks: 'false',
            maxMode: 'day'
          },
          h.Model = h.isUnBlockState() ? new n.model.UnblockAccountModel : new n.model.BlockAccountModel,
          h
        }
        return __extends(i, t),
        Object.defineProperty(i.prototype, 'otpKey', {
          get: function () {
            return this.otpHandler.caller
          },
          enumerable: !0,
          configurable: !0
        }),
        i.prototype.initialiseSteps = function () {
          var n = this,
          t = [
          ],
          i = 0,
          u = {
            templateUrl: 'Templates/Features/Accounts/r_AlphaPhone/block-unblock-account-step1',
            title: 'step1',
            index: i++,
            stateName: '',
            processStep: [
              function () {
                var t = n.buildPayload();
                return n.otpHandler.reset({
                  payload: t
                }).result().then(function () {
                  return n.otpHandler.appendExtraInfoToPayload(t)
                }).then(function (t) {
                  return n.isUnBlockState() ? n.ProductsService.accountTotalUnblock(t)  : n.ProductsService.accountTotalBlock(t)
                }).then(function (t) {
                  return t.ResultCode !== 0 ? n.qService.reject(t)  : (n.response = t, n.qService.when(t))
                })
              }
            ]
          },
          r;
          return t.push(u),
          r = {
            templateUrl: 'Templates/Features/Accounts/r_AlphaPhone/block-unblock-account-step2',
            index: i++,
            title: 'step2',
            stateName: ''
          },
          t.push(r),
          t
        },
        i.prototype.isUnBlockState = function () {
          return this.stateService.current.url == '/unblock'
        },
        i.prototype.buildPayload = function () {
          return {
            ProductCode: this.Model.AccountProduct.Code.substr(12),
            ProductTypeID: this.Model.AccountProduct.TypeID,
            ProductTitle: this.Model.AccountProduct.Title,
            UnblockDate: this.isUnBlockState() ? n.utils.toShortDateString(this.Model.UnblockDate)  : undefined
          }
        },
        i.$inject = [
          '$scope',
          '$injector',
          '$state',
          'debitAccounts',
          'ProductsService',
          '$modal',
          'otpHandler'
        ],
        i
      }(n.wizards.WizardController);
      n.accounts.mainModule.controller('BlockAccountController', l);
      a = function (t) {
        function i(n, i, r, u) {
          var f = t.call(this, n) || this;
          return f.stateService = i,
          f.newReloadKey = uuid.v4(),
          f.IsInVersion && (u === i.current.name ? f.moveToChild(r)  : 'uid' in i.params && (f.newReloadKey = i.params.uid)),
          f
        }
        return __extends(i, t),
        i.prototype.reloadKeyForNewRequest = function () {
          this.newReloadKey = uuid.v4()
        },
        i.prototype.moveToChild = function (t) {
          null != t && t.length > 0 ? this.stateService.go(n.constants.stateNames.accountSaveSmartManagementState)  : this.stateService.go(n.constants.stateNames.accountSaveSmartNewState, {
            uid: this.newReloadKey
          })
        },
        i.$inject = [
          'isInVersion',
          '$state',
          'applicationInfos',
          'parentState'
        ],
        i
      }(n.controllers.VersionFilterController);
      n.accounts.mainModule.controller('SaveSmartController', a);
      v = function (n) {
        function t(t, i, r) {
          var u = n.call(this, t) || this;
          return u.Model = i,
          u.decoratedApplicationInfos = [
          ],
          i.HasError || (u.decoratedApplicationInfos = r.decorate(i.Applications)),
          u
        }
        return __extends(t, n),
        t.$inject = [
          'isInVersion',
          'Model',
          'actionDecorator'
        ],
        t
      }(n.controllers.VersionFilterController);
      n.accounts.mainModule.controller('SaveSmartInfoListController', v);
      y = function () {
        function t() {
        }
        return t.prototype.decorate = function (t) {
          var i = [
          ];
          return null == t ? i : (t.forEach(function (t) {
            var r = new n.model.SaveSmartInfoActionDecorator(t);
            r.Actions.push(new n.model.MenuAction(n.constants.stateNames.accountSaveSmartViewState, {
              id: t.ApplicationID,
              mode: 'view'
            }, null, 'savesmart.burger.View'));
            i.push(r)
          }), i)
        },
        t
      }();
      t.AllSaveSmartListActionDecorator = y;
      p = function (t) {
        function i(n, i, r, u, f, e, o, s, h, c, l, a, v, y, p, w) {
          var b = t.call(this, e, o, n) || this;
          return b.isInVersion = n,
          b.state = i,
          b.userInfo = r,
          b.interestRates = u,
          b.Model = f,
          b.scope = e,
          b.$injector = o,
          b.kycInfo = h,
          b.filterService = c,
          b.postNewWindowService = l,
          b.$window = a,
          b.onlineStatus = v,
          b.regularExpressionProvider = y,
          b.stringsService = p,
          b.analytics = w,
          b.agreedToTerms = !1,
          b.requestSubmitted = !1,
          b.showActions = !1,
          b.Model.HasErrors || (f.Request = {
          }, f.Request.CDINumber = r.CDINumber, f.Request.Name = r.Name, f.Request.LastName = r.SurName, f.Request.Email = r.Email, f.Request.Mobile = r.MobilePhone),
          b
        }
        return __extends(i, t),
        i.prototype.goToProfile = function () {
          this.state.go(n.constants.stateNames.profilePersonalState, {
            referer: 'savesmartRequest'
          })
        },
        i.prototype.initialiseSteps = function () {
          var u = this,
          t = [
          ],
          i,
          r;
          return t.push({
            templateUrl: 'Templates/Features/Accounts/SaveSmart/new-request-step1'
          }),
          i = {
            templateUrl: 'Templates/Features/Accounts/SaveSmart/new-request-step2'
          },
          i.processStep = [
            'SaveSmartService',
            'ProductsService',
            'SecurityService',
            'AppEventsService',
            '$q',
            function (t, i, r, u, f) {
              var e = this,
              o;
              return e.Model.Request.ApplicationDate = new Date,
              e.newSaveSmartRequest = {
                Email: e.Model.Request.Email,
                Firstname: e.Model.Request.Name,
                Lastname: e.Model.Request.LastName,
                MobilePhone: e.Model.Request.Mobile
              },
              o = f.defer(),
              e.requestSubmitted = !0,
              t.createNewSaveSmartReq(e.newSaveSmartRequest).then(function (t) {
                if (0 == t.ResultCode) {
                  e.Model.Request.ApplicationID = t.ApplicationID;
                  e.Model.Request.MainAccount = t.MainProduct;
                  e.Model.Request.ReferenceNumber = t.ReferenceNumber;
                  u.publish(n.common.services.AppEventsService.InvalidateAllSaveSmartInfo_Event);
                  u.publish(n.common.services.AppEventsService.InvalidateUserSessionInfo_Event);
                  var f = i.getProductInfo({
                    Code: e.Model.Request.MainAccount,
                    Family: n.server.ProductTypeFamily.Account,
                    Scope: n.server.ProductTypeScope.Local
                  });
                  f.then(function (t) {
                    var f,
                    i,
                    s;
                    t.ProductInfo[0].ErrorMessage ? o.resolve(!0)  : t.ProductInfo.length > 0 && (f = {
                    }, i = {
                    }, i.product = {
                      CategoryType: t.ProductInfo[0].CategoryType,
                      Code: e.Model.Request.MainAccount,
                      Details: [
                      ],
                      HasDetailedInfo: !1,
                      IsAlphaBankProduct: !0,
                      IsPreferred: !1,
                      TypeID: t.ProductInfo[0].ProductTypeID,
                      TypeName: t.ProductInfo[0].ProductTypeName,
                      Uses: [
                        1,
                        2,
                        3
                      ]
                    }, i.action = 0, i.mode = 2, f.Products = [
                      i
                    ], s = r.modifyProfileProducts(f), s.then(function (t) {
                      !n.utils.isUndefinedOrNull(t.Products) && t.Products.length > 0 && t.Products[0].Code == 1 && (u.publish(n.common.services.AppEventsService.InvalidateAccounts_Event), e.showActions = !0);
                      o.resolve(!0)
                    }).catch (function () {
                      o.resolve(!0)
                    }))
                  })
                } else o.reject(t.Error.Message)
              }).catch (function (n) {
                o.reject(n.Error.Message)
              }),
              o.promise
            }
          ],
          t.push(i),
          r = {
            templateUrl: 'Templates/Features/Accounts/SaveSmart/new-request-step3'
          },
          t.push(r),
          t
        },
        i.prototype.exportPDF = function () {
          var n = {
          };
          return n.Parameters = JSON.stringify({
            ApplicationDate: this.filterService('date') (this.Model.Request.ApplicationDate, 'dd/MM/yyyy', 'UTC+0200'),
            AccountNumber: this.filterService('quartets') (this.Model.Request.MainAccount),
            Name: this.Model.Request.Name,
            LastName: this.Model.Request.LastName,
            Mobile: this.Model.Request.Mobile,
            Email: this.Model.Request.Email,
            TransactionUN: this.Model.Request.ReferenceNumber
          }),
          n.PDFRequestType = 57,
          n
        },
        i.prototype.getCurrentTerms = function () {
          var n = {
          };
          n.Parameters = JSON.stringify({
          });
          n.PDFRequestType = 55;
          this.postNewWindowService(n, 'GetPdf', !1)
        },
        i.prototype.print = function () {
          this.$window.print()
        },
        i.$inject = [
          'isInVersion',
          '$state',
          'userInfo',
          'interestRates',
          'Model',
          '$scope',
          '$injector',
          'VersionFilterService',
          'kycInfo',
          '$filter',
          'postNewWindowService',
          '$window',
          'onlineStatus',
          'RegularExpressionService',
          'STRINGS',
          'analytics'
        ],
        i
      }(n.wizards.VersionFilterWizardController);
      n.accounts.mainModule.controller('SaveSmartNewRequestController', p);
      w = function (t) {
        function i(n, i, r, u, f, e, o, s) {
          var h = t.call(this, u, f, n) || this;
          return h.state = i,
          h.filterService = r,
          h.Model = e,
          h.postNewWindowService = o,
          h.$window = s,
          h
        }
        return __extends(i, t),
        i.prototype.GoToList = function () {
          this.state.go(n.constants.stateNames.accountSaveSmartManagementState)
        },
        i.prototype.initialiseSteps = function () {
          var n = [
          ];
          return n.push({
            templateUrl: 'Templates/Features/Accounts/SaveSmart/details'
          }),
          n
        },
        i.prototype.getCurrentTerms = function () {
          var n = {
          };
          n.Parameters = JSON.stringify({
            ApplicationId: this.Model.Item.SmartOnlineApplicationInfo.ApplicationID
          });
          n.PDFRequestType = 56;
          this.postNewWindowService(n, 'GetPdf', !1)
        },
        i.prototype.exportDetailPdf = function () {
          return this.createDocumentRequest(58)
        },
        i.prototype.createDocumentRequest = function (n) {
          var t = {
          },
          i = {
            ApplicationDate: this.filterService('date') (this.Model.Item.SmartOnlineApplicationInfo.ApplicationDate, 'dd/MM/yyyy', 'UTC+0200'),
            AccountNumber: this.filterService('quartets') (this.Model.Item.SmartOnlineApplicationInfo.MainAccount),
            Name: this.Model.Item.SmartOnlineApplicationInfo.Name,
            LastName: this.Model.Item.SmartOnlineApplicationInfo.LastName,
            Mobile: this.Model.Item.SmartOnlineApplicationInfo.Mobile,
            Email: this.Model.Item.SmartOnlineApplicationInfo.Email,
            TransactionUN: this.Model.Item.SmartOnlineApplicationInfo.ReferenceNumber
          };
          return t.Parameters = JSON.stringify(i),
          t.PDFRequestType = n,
          t
        },
        i.prototype.print = function () {
          this.$window.print()
        },
        i.$inject = [
          'isInVersion',
          '$state',
          '$filter',
          '$scope',
          '$injector',
          'Model',
          'postNewWindowService',
          '$window'
        ],
        i
      }(n.wizards.VersionFilterWizardController);
      n.accounts.mainModule.controller('SaveSmartRequestInfoDetailsController', w)
    }) (t = n.accounts || (n.accounts = {
    }))
  }(alpha || (alpha = {
  })), function (n) {
    var t;
    (function (t) {
      'use strict';
      t.mainModule.config(['$stateProvider',
      '$urlRouterProvider',
      function (t) {
        t.state(n.constants.stateNames.accountFileTransferState, {
          abstract: !0,
          url: '/fileTransfer',
          templateUrl: 'Templates/Features/Misc/fileTransfer',
          controller: 'FileTransferController as vm',
          resolve: {
            products: [
              'ProfileProductsService',
              function (t) {
                return t.getAccountsByRequestType(n.server.ProductRequestType.AllEnquiryAccounts)
              }
            ],
            fileType: function () {
              return 1
            }
          }
        }).state(n.constants.stateNames.accountFileTransferRequestState, {
          url: '/fileTransfer/request',
          templateUrl: 'Templates/Features/Misc/fileTransferRequest',
          controller: 'FileTransferRequestController as vm',
          resolve: {
            model: [
              'products',
              function (t) {
                var i = new n.model.TranferFileInfo;
                return i.CreditProducts = t,
                i.FileType = 1,
                i
              }
            ]
          }
        }).state(n.constants.stateNames.accountFileTransferDownloadState, {
          url: '/fileTransfer/download',
          templateUrl: 'Templates/Features/Misc/fileTransferDownload',
          controller: 'FileTransferDownloadController as vm',
          resolve: {
            model: [
              'products',
              function (t) {
                var i = new n.model.TranferFileInfo;
                return i.CreditProducts = t,
                i.FileType = 1,
                i
              }
            ]
          }
        }).state(n.constants.stateNames.accountDetailsState, {
          templateUrl: 'Templates/Features/Accounts/accountdetails',
          controller: 'ProductDetailsController as vm',
          url: '/details/:id',
          resolve: {
            product: [
              'products',
              'ProductsService',
              '$stateParams',
              'CachingService',
              '$q',
              function (t, i, r, u, f) {
                var o = r.id,
                s = u.getCachedProductWithBase64Id(o, n.server.CategoryGroupType.ACCOUNT),
                e = new n.model.AccountProduct(s);
                if (e != null) return i.getAccountBalance({
                  ProductCode: e.Code,
                  ProductTypeID: e.TypeID
                }).then(function (t) {
                  var i = t.Balance;
                  return e.Balance = i,
                  n.utils.isUndefinedOrNull(e.Balance) || (e.Description == '' || n.utils.isUndefinedOrNull(e.Description)) && (n.utils.isUndefinedOrNull(e.Balance.Plafon) && (e.Balance.Plafon = 0), n.utils.isUndefinedOrNull(e.Balance.Blocks) && (e.Balance.Blocks = 0), n.utils.isUndefinedOrNull(e.Balance.UnclearAmount) && (e.Balance.UnclearAmount = 0), n.utils.isUndefinedOrNull(e.Balance.Holds) && (e.Balance.Holds = 0), n.utils.isUndefinedOrNull(e.Balance.WithdrawAmount) && (e.Balance.WithdrawAmount = 0), n.utils.isUndefinedOrNull(e.Balance.NetBalance) && (e.Balance.NetBalance = 0), n.utils.isUndefinedOrNull(e.Balance.DebitLimit) && (e.Balance.DebitLimit = 0), n.utils.isUndefinedOrNull(e.Balance.CapitalControlAmount) && (e.Balance.CapitalControlAmount = 0), n.utils.isUndefinedOrNull(e.Balance.OEXAmountLimit) && (e.Balance.OEXAmountLimit = 0)),
                  f.when(e)
                })
              }
            ]
          }
        })
      }
      ])
    }) (t = n.accounts || (n.accounts = {
    }))
  }(alpha || (alpha = {
  })), function (n) {
    n.mainModule = angular.module('alphaPhoneDirectives', [
    ]);
    n.mainModule.directive('alphaPhoneChecker', [
      'RoleService',
      function (n) {
        return {
          restrict: 'A',
          scope: {
            alphaPhoneClass: '@',
            defaultClass: '@',
            displayNonAlphaPhone: '@'
          },
          link: function (t, i, r) {
            var u = n.isAlphaPhone();
            r.alphaPhoneClass || r.defaultClass ? u && r.alphaPhoneClass ? i.addClass(r.alphaPhoneClass)  : r.defaultClass && i.addClass(r.defaultClass)  : !u && t.displayNonAlphaPhone || u && !t.displayNonAlphaPhone ? i.show()  : i.hide()
          }
        }
      }
    ]);
    n.mainModule.directive('faxSender', [
      '$modal',
      function (n) {
        return {
          restrict: 'A',
          scope: {
            payload: '=',
            createRequest: '&',
            requestType: '@'
          },
          template: '<a href="" ng-click="sendFax()" class="utility-link download-withtext">FAX</a>',
          link: function (t) {
            function i() {
              return t.payload || t.createRequest()
            }
            function r() {
              return t.payload ? 1 : 0
            }
            t.sendFax = function () {
              n.open({
                templateUrl: 'Templates/Features/AlphaPhone/modals/fax-modal',
                controller: 'FaxModalInstanceController as vm',
                windowClass: 'custom',
                size: 'sm',
                backdrop: 'static',
                resolve: {
                  payload: function () {
                    return i()
                  },
                  requestType: function () {
                    return r()
                  }
                }
              })
            }
          }
        }
      }
    ])
  }(alphaPhoneDirectives || (alphaPhoneDirectives = {
  })), function (n) {
    n.mainModule = angular.module('alphaPhoneFilters', [
    ]);
    n.mainModule.filter('description', [
      'STRINGS',
      function (n) {
        return function (t) {
          t = t || '';
          var i = t;
          return alpha.utils.isUndefinedOrNullorWhiteSpace(t) || (i = n['FunctionalMode.' + t]),
          i
        }
      }
    ])
  }(alphaPhoneFilters || (alphaPhoneFilters = {
  })), function (n) {
    var t;
    (function () {
      var t = function () {
        function t(t, i) {
          var r = this;
          this.roleService = t;
          this.$state = i;
          this.transferState = 'ExecuteIntrabankTransfer';
          this.hasInitialized = !1;
          t.getPermissionsPromise().then(function (t) {
            t.indexOf('ExecuteIntrabankTransfer') != - 1 ? r.transferState = n.constants.stateNames.newIntraBankTransferState : t.indexOf('ExecuteInterbankTransfer') != - 1 ? r.transferState = n.constants.stateNames.newInterBankTransferState : t.indexOf('ExecuteInternationalTransfer') != - 1 ? r.transferState = n.constants.stateNames.newInternationalTransferState : t.indexOf('ExecuteSimpleImportsTransfer') != - 1 && (r.transferState = n.constants.stateNames.newEUTransferState);
            r.hasInitialized = !0
          })
        }
        return Object.defineProperty(t.prototype, 'TransferState', {
          get: function () {
            return this.transferState
          },
          enumerable: !0,
          configurable: !0
        }),
        Object.defineProperty(t.prototype, 'Url', {
          get: function () {
            return this.$state.href(this.TransferState)
          },
          enumerable: !0,
          configurable: !0
        }),
        Object.defineProperty(t.prototype, 'HasLoadedPermissions', {
          get: function () {
            return this.hasInitialized
          },
          enumerable: !0,
          configurable: !0
        }),
        t.$inject = [
          'RoleService',
          '$state'
        ],
        t
      }();
      n.investments.mainModule.controller('FooterController', t)
    }) (t = n.main || (n.main = {
    }))
  }(alpha || (alpha = {
  })); __extends = this && this.__extends || function () {
    var n = Object.setPrototypeOf || {
      __proto__: [
      ]
    }
    instanceof Array && function (n, t) {
      n.__proto__ = t
    }
    || function (n, t) {
      for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
    };
    return function (t, i) {
      function r() {
        this.constructor = t
      }
      n(t, i);
      t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
    }
  }(), function (n) {
    var t;
    (function (t) {
      var nt = function () {
        function n(n, t) {
          this.campaign = 0;
          this.newReloadKey = uuid.v4();
          this.TermDeposits = n.filter(function (n) {
            return n.IsTimeDeposit
          });
          this.Mutuals = n.filter(function (n) {
            return n.IsMutual
          });
          this.AlphaFinance = n.filter(function (n) {
            return n.IsAlphaFinance
          });
          this.AlphaPrime = n.filter(function (n) {
            return n.IsAlphaPrime
          });
          this.AlphaPrivate = n.filter(function (n) {
            return n.IsAlphaPrivate
          });
          this.isRetail = t.IsRetail();
          this.bannerKey = new Date;
          this.bannerKey < new Date(2017, 11, 8) ? this.campaign = 1 : this.bannerKey < new Date(2018, 8, 1) && (this.campaign = 2);
          this.bannerMenuPath = 'root.investments.e-timedeposit-bonus.newrequest({uid : vm.newReloadKey})';
          this.showCampaignBanner = this.isRetail && this.campaign > 0;
          this.isEndUser = t.isEndUser();
          this.isCorporate = !t.IsRetail()
        }
        return n.prototype.reloadKeyForNewRequest = function () {
          this.newReloadKey = uuid.v4()
        },
        Object.defineProperty(n.prototype, 'IsCorporate', {
          get: function () {
            return this.isCorporate
          },
          enumerable: !0,
          configurable: !0
        }),
        n.$inject = [
          'products',
          'RoleService'
        ],
        n
      }(),
      i,
      r,
      u,
      f,
      e,
      o,
      s,
      h,
      c,
      l,
      a,
      v,
      y,
      p,
      w,
      b,
      k,
      d,
      g;
      n.investments.mainModule.controller('InvestmentsController', nt);
      i = function () {
        function n(n, t) {
          this.product = n;
          this.$sce = t
        }
        return n.prototype.renderHtml = function (n) {
          return this.$sce.trustAsHtml(n)
        },
        n.$inject = [
          'product',
          '$sce'
        ],
        n
      }();
      n.investments.mainModule.controller('AlphaPrimePrivateDetailsController', i);
      r = function () {
        function t(t) {
          this.error = '';
          t.ResultCode == 0 ? n.utils.isUndefinedOrNull(t.Error) ? this.estatements = t.EStatements : this.error = t.Error.Message : this.error = 'System error'
        }
        return t.$inject = [
          'eStatementsResponse'
        ],
        t
      }();
      n.investments.mainModule.controller('AlphaPrimePrivateEStatementsController', r);
      u = function () {
        function t(n, t, i, r) {
          this.product = n;
          this.$sce = t;
          this.ProductsService = i;
          this.stringsService = r;
          this.documentData = this.monthlyDataToDocumentData(this.product.alphaPrimePrivate.MonthlyData);
          this.documentData.DocumentRequestType = 3
        }
        return t.prototype.renderHtml = function () {
          return !n.utils.isUndefinedOrNull(this.statement) && !n.utils.isUndefinedOrNullorWhiteSpace(this.statement.HTMLData) ? this.$sce.trustAsHtml(this.statement.HTMLData)  : ''
        },
        t.prototype.showPrimeStatementDetails = function (t, i) {
          var r = this,
          u = new n.model.MonthlyData(t, i);
          return this.ProductsService.getAlphaPrimePrivateInfo({
            Type: 0,
            ProductCode: this.product.Code,
            ProductTypeID: this.product.TypeID,
            MonthlyData: u
          }).then(function (t) {
            return r.statement = new n.model.AlphaPrimePrivate(t.HTMLData),
            r.statement
          })
        },
        t.prototype.showPrivateStatementDetails = function (t, i) {
          var r = this,
          u = new n.model.MonthlyData(t, i);
          return this.ProductsService.getAlphaPrimePrivateInfo({
            Type: 1,
            ProductCode: this.product.Code,
            ProductTypeID: this.product.TypeID,
            MonthlyData: u
          }).then(function (t) {
            return r.statement = new n.model.AlphaPrimePrivate(t.HTMLData),
            r.statement
          })
        },
        t.prototype.monthlyDataToDocumentData = function (t) {
          var i = new n.model.DocumentUpdateRequest,
          r,
          u;
          i.Title = this.stringsService.tfvAllTransactions;
          i.KeyValueDictionary = [
          ];
          for (r in t) u = new n.model.KeyValue,
          u.Key = t[r].MonthIndicator + '.' + t[r].YearIndicator,
          u.Value = t[r].Description,
          i.KeyValueDictionary.push(u);
          return i
        },
        t.$inject = [
          'product',
          '$sce',
          'ProductsService',
          'STRINGS'
        ],
        t
      }();
      n.investments.mainModule.controller('AlphaPrimePrivateStatementsController', u);
      f = function (t) {
        function i(n, i, r, u) {
          var f = t.call(this, n) || this;
          return f.stateService = i,
          f.newReloadKey = uuid.v4(),
          f.IsInVersion && (u === i.current.name ? f.moveToChild(r)  : 'uid' in i.params && (f.newReloadKey = i.params.uid)),
          f
        }
        return __extends(i, t),
        i.prototype.reloadKeyForNewRequest = function () {
          this.newReloadKey = uuid.v4()
        },
        i.prototype.moveToChild = function (t) {
          null != t && t.length > 0 ? this.stateService.go(n.constants.stateNames.eTimeDepositManagement)  : this.stateService.go(n.constants.stateNames.eTimeDepositNew, {
            uid: this.newReloadKey
          })
        },
        i.$inject = [
          'isInVersion',
          '$state',
          'depositInfos',
          'parentState'
        ],
        i
      }(n.controllers.VersionFilterController);
      n.investments.mainModule.controller('ETimeDepositController', f);
      e = function (t) {
        function i(n, i, r, u) {
          var f = t.call(this, n) || this;
          return f.stateService = i,
          f.newReloadKey = uuid.v4(),
          f.IsInVersion && (u === i.current.name ? f.moveToChild(r)  : 'uid' in i.params && (f.newReloadKey = i.params.uid)),
          f
        }
        return __extends(i, t),
        i.prototype.reloadKeyForNewRequest = function () {
          this.newReloadKey = uuid.v4()
        },
        i.prototype.moveToChild = function (t) {
          null != t && t.length > 0 ? this.stateService.go(n.constants.stateNames.eTimeDepositBonusManagement)  : this.stateService.go(n.constants.stateNames.eTimeDepositBonusNew, {
            uid: this.newReloadKey
          })
        },
        i.$inject = [
          'isInVersion',
          '$state',
          'depositInfos',
          'parentState'
        ],
        i
      }(n.controllers.VersionFilterController);
      n.investments.mainModule.controller('ETimeDepositBonusController', e);
      o = function (n) {
        function t(t, i, r, u, f) {
          var e = n.call(this, t) || this,
          o;
          return e.Model = i,
          e.decoratedDepositInfos = [
          ],
          e.GridMode = 0,
          e.GridMode = u,
          o = 0 == e.GridMode ? 0 : 1,
          e.pdfRequest = {
            RequestOption: o
          },
          i.HasError || (e.decoratedDepositInfos = r.decorate(i.Deposits)),
          e.documentData = {
            DocumentRequestType: 22,
            KeyValueDictionary: [
              {
                Key: 'option',
                Value: o
              }
            ]
          },
          e.roleService = f,
          e
        }
        return __extends(t, n),
        t.prototype.exportPDF = function () {
          var n = {
          },
          t = {
            Request: this.pdfRequest,
            IsBonus: !1
          };
          return n.Parameters = JSON.stringify(t),
          n.PDFRequestType = 10,
          n
        },
        t.$inject = [
          'isInVersion',
          'Model',
          'actionDecorator',
          'gridMode',
          'RoleService'
        ],
        t
      }(n.controllers.VersionFilterController);
      n.investments.mainModule.controller('ETimeDepositInfoListController', o);
      s = function (n) {
        function t(t, i, r, u, f) {
          var e = n.call(this, t) || this,
          o;
          return e.Model = i,
          e.decoratedDepositInfos = [
          ],
          e.GridMode = 0,
          e.GridMode = u,
          o = 0 == e.GridMode ? 0 : 1,
          e.pdfRequest = {
            RequestOption: o
          },
          i.HasError || (e.decoratedDepositInfos = r.decorate(i.Deposits)),
          e.documentData = {
            DocumentRequestType: 22,
            KeyValueDictionary: [
              {
                Key: 'option',
                Value: o
              },
              {
                Key: 'isBonus',
                Value: !0
              }
            ]
          },
          e.roleService = f,
          e
        }
        return __extends(t, n),
        t.prototype.exportPDF = function () {
          var n = {
          },
          t = {
            Request: this.pdfRequest,
            IsBonus: !0
          };
          return n.Parameters = JSON.stringify(t),
          n.PDFRequestType = 10,
          n
        },
        t.$inject = [
          'isInVersion',
          'Model',
          'actionDecorator',
          'gridMode',
          'RoleService'
        ],
        t
      }(n.controllers.VersionFilterController);
      n.investments.mainModule.controller('ETimeDepositBonusInfoListController', s);
      h = function (t) {
        function i(n, i, r, u, f, e, o, s, h, c) {
          var l = t.call(this, e, o, n) || this;
          return l.securityService = r,
          l.state = u,
          l.filterService = f,
          l.Model = s,
          l.postNewWindowService = h,
          l.$window = c,
          l.CanCancel = !1,
          l.CancelState = {
            HasErrors: !1,
            ErrorMessage: '',
            Success: !1
          },
          l.CanCancel = i === 'cancel',
          l
        }
        return __extends(i, t),
        i.prototype.GoToList = function () {
          this.state.go(n.constants.stateNames.eTimeDepositManagement)
        },
        i.prototype.initialiseSteps = function () {
          var t = [
          ],
          i = {
            templateUrl: 'Templates/Features/Investments/e-timedeposit/details'
          },
          r;
          return i.processStep = [
            'SecurityService',
            'ETimeDepositService',
            'AppEventsService',
            function (t, i, r) {
              var u = this,
              f = u.qService.defer();
              return i.cancelETimeDeposit(u.Model.Item.ApplicationId).then(function (t) {
                0 == t.ResultCode ? (r.publish(n.common.services.AppEventsService.InvalidateAllEtimeDepositInfo_Event), r.publish(n.common.services.AppEventsService.InvalidateAccounts_Event), i.getETimeDepositInfoDetails(u.Model.Item.ApplicationId).then(function (n) {
                  u.Model.Item = n;
                  f.resolve(!0)
                }))  : f.reject(t.Error.Message)
              }).catch (function (n) {
                f.reject(n)
              }),
              f.promise
            }
          ],
          r = {
            templateUrl: 'Templates/Features/Investments/e-timedeposit/cancel/step2'
          },
          t.push(i),
          t.push(r),
          t
        },
        i.prototype.getCurrentTerms = function () {
          var n = {
          };
          n.Parameters = JSON.stringify({
            ApplicationId: this.Model.Item.ApplicationId
          });
          n.PDFRequestType = 13;
          this.postNewWindowService(n, 'GetPdf', !1)
        },
        i.prototype.exportDetailPdf = function () {
          return this.createDocumentRequest(11)
        },
        i.prototype.exportCancelPdf = function () {
          return this.createDocumentRequest(22)
        },
        i.prototype.createDocumentRequest = function (t) {
          var i = {
          },
          r = {
            ApplicationDate: this.Model.Item.ApplicationDate,
            Rate: this.filterService('number') (this.Model.Item.Rate, '2'),
            TimeDepositAccount: this.Model.Item.AccountNumber,
            Amount: this.Model.Item.Amount,
            Duration: n.utils.formatString('{0} {1}', [
              this.Model.Item.Duration,
              this.Model.Item.DurationTypeDescription
            ]),
            Status: this.Model.Item.StatusDescription,
            DebitAccount: this.Model.Item.DebitAccount,
            CreditAccount: this.Model.Item.DebitAccount,
            Owners: n.utils.isUndefinedOrNull(this.Model.Item.Owners) ? [
            ] : this.Model.Item.Owners.map(function (t) {
              return n.utils.formatString('{0} {1}', [
                t.Name,
                t.Surname
              ])
            }),
            StartDate: this.Model.Item.StartDate,
            EndDate: this.Model.Item.EndDate,
            Email: this.Model.Item.EMail,
            Mobile: this.Model.Item.Mobile,
            UN: this.Model.Item.UN,
            isAmountBlocked: this.Model.Item.BlockIndication
          };
          return i.Parameters = JSON.stringify(r),
          i.PDFRequestType = t,
          i
        },
        i.prototype.print = function () {
          this.$window.print()
        },
        i.$inject = [
          'isInVersion',
          'mode',
          'SecurityService',
          '$state',
          '$filter',
          '$scope',
          '$injector',
          'Model',
          'postNewWindowService',
          '$window'
        ],
        i
      }(n.wizards.VersionFilterWizardController);
      n.investments.mainModule.controller('DetailETimeDepositInfoController', h);
      c = function (t) {
        function i(n, i, r, u, f, e, o, s, h, c) {
          var l = t.call(this, e, o, n) || this;
          return l.securityService = r,
          l.state = u,
          l.filterService = f,
          l.Model = s,
          l.postNewWindowService = h,
          l.$window = c,
          l.CanCancel = !1,
          l.CancelState = {
            HasErrors: !1,
            ErrorMessage: '',
            Success: !1
          },
          l.CanCancel = i === 'cancel',
          l
        }
        return __extends(i, t),
        i.prototype.GoToList = function () {
          this.state.go(n.constants.stateNames.eTimeDepositBonusManagement)
        },
        i.prototype.initialiseSteps = function () {
          var t = [
          ],
          i = {
            templateUrl: 'Templates/Features/Investments/e-timedeposit-bonus/details'
          },
          r;
          return i.processStep = [
            'SecurityService',
            'ETimeDepositBonusService',
            'AppEventsService',
            function (t, i, r) {
              var u = this,
              f = u.qService.defer();
              return i.cancelETimeDepositBonus(u.Model.Item.ApplicationId).then(function (t) {
                0 == t.ResultCode ? (r.publish(n.common.services.AppEventsService.InvalidateAccounts_Event), r.publish(n.common.services.AppEventsService.InvalidateAllEtimeDepositInfo_Event), i.getETimeDepositBonusInfoDetails(u.Model.Item.ApplicationId).then(function (n) {
                  u.Model.Item = n;
                  f.resolve(!0)
                }))  : f.reject(t.Error.Message)
              }).catch (function (n) {
                f.reject(n)
              }),
              f.promise
            }
          ],
          r = {
            templateUrl: 'Templates/Features/Investments/e-timedeposit-bonus/cancel/step2'
          },
          t.push(i),
          t.push(r),
          t
        },
        i.prototype.getCurrentTerms = function () {
          var n = {
          };
          n.Parameters = JSON.stringify({
            ApplicationId: this.Model.Item.ApplicationId
          });
          n.PDFRequestType = 13;
          this.postNewWindowService(n, 'GetPdf', !1)
        },
        i.prototype.exportDetailPdf = function () {
          return this.createDocumentRequest(11)
        },
        i.prototype.exportCancelPdf = function () {
          return this.createDocumentRequest(22)
        },
        i.prototype.createDocumentRequest = function (t) {
          var i = {
          },
          r = {
            ApplicationDate: this.Model.Item.ApplicationDate,
            Rate: this.filterService('number') (this.Model.Item.Rate, '2'),
            TimeDepositAccount: this.Model.Item.AccountNumber,
            Amount: this.Model.Item.Amount,
            Duration: n.utils.formatString('{0} {1}', [
              this.Model.Item.Duration,
              this.Model.Item.DurationTypeDescription
            ]),
            Status: this.Model.Item.StatusDescription,
            DebitAccount: this.Model.Item.DebitAccount,
            CreditAccount: this.Model.Item.DebitAccount,
            Owners: n.utils.isUndefinedOrNull(this.Model.Item.Owners) ? [
            ] : this.Model.Item.Owners.map(function (t) {
              return n.utils.formatString('{0} {1}', [
                t.Name,
                t.Surname
              ])
            }),
            StartDate: this.Model.Item.StartDate,
            EndDate: this.Model.Item.EndDate,
            Email: this.Model.Item.EMail,
            Mobile: this.Model.Item.Mobile,
            UN: this.Model.Item.UN,
            isAmountBlocked: this.Model.Item.BlockIndication,
            BonusPoints: this.Model.Item.BonusPoints,
            BonusCardCode: this.Model.Item.BonusCardCode,
            BonusCardApplicationNumber: this.Model.Item.BonusCardApplicationNumber,
            IsBonus: !0
          };
          return i.Parameters = JSON.stringify(r),
          i.PDFRequestType = t,
          i
        },
        i.prototype.print = function () {
          this.$window.print()
        },
        i.$inject = [
          'isInVersion',
          'mode',
          'SecurityService',
          '$state',
          '$filter',
          '$scope',
          '$injector',
          'Model',
          'postNewWindowService',
          '$window'
        ],
        i
      }(n.wizards.VersionFilterWizardController);
      n.investments.mainModule.controller('DetailETimeDepositBonusInfoController', c);
      l = function (t) {
        function i(n, i, r, u, f, e, o) {
          var s = t.call(this, i, r, n) || this;
          return s.Model = u,
          s.filterService = f,
          s.securityService = e,
          s.accounts = o,
          s
        }
        return __extends(i, t),
        i.prototype.initialiseSteps = function () {
          var t = [
          ],
          i = {
            templateUrl: 'Templates/Features/Investments/e-timedeposit/edit/step1'
          },
          r;
          return i.processStep = [
            'ETimeDepositService',
            'AppEventsService',
            function (t, i) {
              var u = this,
              r = u.qService.defer();
              return t.editETimeDeposit(1, u.Model.ETimeAccountNumber, 0, u.Model.NewCreditProduct.Code).then(function (t) {
                0 == t.ResultCode ? (i.publish(n.common.services.AppEventsService.InvalidateActiveEtimeDepositInfo_Event), r.resolve(!0))  : r.reject(t.Error.Message)
              }, function (n) {
                r.reject(n)
              }),
              r.promise
            }
          ],
          r = {
            templateUrl: 'Templates/Features/Investments/e-timedeposit/edit/step2'
          },
          t.push(i),
          t.push(r),
          t
        },
        i.prototype.exportPDF = function () {
          var t = {
          };
          return t.Parameters = JSON.stringify({
            ApplicationDate: this.Model.ApplicationDate,
            Rate: this.filterService('number') (this.Model.Rate, '2'),
            DepositAccount: this.Model.ETimeAccountNumber,
            InitialCapital: this.filterService('currency') (this.Model.Amount, ''),
            Duration: n.utils.formatString('{0} {1}', [
              this.Model.Duration,
              this.Model.DurationTypeDescription
            ]),
            Beneficiaries: n.utils.isUndefinedOrNull(this.Model.Owners) ? [
            ] : this.Model.Owners.map(function (t) {
              return n.utils.formatString('{0} {1}', [
                t.Name,
                t.Surname
              ])
            }),
            StartDate: this.Model.StartDate,
            EndDate: this.Model.EndDate,
            Email: this.Model.UserEmail,
            Mobile: this.Model.UserMobile,
            ConnectedAccount: this.Model.NewCreditProduct.Code,
            UN: this.Model.TransactionNumber
          }),
          t.PDFRequestType = 20,
          t
        },
        i.$inject = [
          'isInVersion',
          '$scope',
          '$injector',
          'Model',
          '$filter',
          'SecurityService',
          'accounts'
        ],
        i
      }(n.wizards.VersionFilterWizardController);
      n.investments.mainModule.controller('EditETimeDepositInfoController', l);
      a = function (t) {
        function i(i, r, u, f, e, o, s, h) {
          var c = t.call(this, r, u, i) || this,
          l;
          return c.Model = f,
          c.filterService = e,
          c.securityService = o,
          c.accounts = s,
          c.cards = h,
          c.newProductSelected = !1,
          c.newCardEntered = !1,
          c.Model.HasErrors && !n.utils.isUndefinedOrNull(c.Model.ResourceErrorMsg) && (c.Model.ErrorMessage = c.STRINGS[c.Model.ResourceErrorMsg]),
          !n.utils.isUndefinedOrNull(h) && h.length > 0 && (c.Model.UseProfileProduct = !0),
          l = c,
          r.$watch(function () {
            return l.Model.UseProfileProduct
          }, function (n, t) {
            n !== t && (n == !0 ? (l.newCardNo = null, l.Model.NewCardNumber = null)  : (l.Model.NewCardProduct = null, l.productSelected()))
          }),
          r.$watch(function () {
            return l.newCardNo
          }, function (t, i) {
            t !== i && (l.newCardEntered = n.utils.isUndefinedOrNullorWhiteSpace(t) ? !1 : !0)
          }),
          c
        }
        return __extends(i, t),
        i.prototype.productSelected = function () {
          this.newProductSelected = n.utils.isUndefinedOrNull(this.Model.NewCardProduct) && n.utils.isUndefinedOrNull(this.Model.NewCreditProduct) ? !1 : !0
        },
        i.prototype.initialiseSteps = function () {
          var t = [
          ],
          i = {
            templateUrl: 'Templates/Features/Investments/e-timedeposit-bonus/edit/step1'
          },
          r;
          return i.processStep = [
            'ETimeDepositBonusService',
            '$q',
            'ProductsService',
            'AppEventsService',
            function (t, i, r, u) {
              var f = this,
              e = f.qService.defer(),
              o = i.when({
                ResultCode: 0,
                ProductInfo: [
                  {
                    Validated: !0,
                    ProductTypeID: 0
                  }
                ]
              });
              return f.Model.UseProfileProduct && !n.utils.isUndefinedOrNull(f.Model.NewCardProduct) ? (o = i.when({
                ResultCode: 0,
                ProductInfo: [
                  {
                    Validated: !0,
                    ProductTypeID: f.Model.NewCardProduct.TypeID
                  }
                ]
              }), f.Model.NewCardProductID = f.Model.NewCardProduct.BankProduct.ProductID, f.Model.NewCardNumber = f.Model.NewCardProduct.Code)  : !f.Model.UseProfileProduct && f.newCardEntered && (o = r.getProductInfo({
                Code: f.newCardNo,
                ProductID: n.constants.pci.defaultProductId,
                Family: n.server.ProductTypeFamily.Card,
                Scope: n.server.ProductTypeScope.Local
              }), f.Model.NewCardProductID = 0, f.Model.NewCardNumber = f.newCardNo),
              o.then(function (n) {
                return n.ProductInfo[0].ErrorMessage ? (e.reject(n.ProductInfo[0].ErrorMessage), !1)  : n.ProductInfo.length > 0 ? (f.Model.NewCardNumberTypeID = n.ProductInfo[0].ProductTypeID, !0)  : void 0
              }).then(function (i) {
                i && t.editETimeDepositBonus(1, f.Model.ETimeAccountNumber, 0, f.Model.NewCreditProduct ? f.Model.NewCreditProduct.Code : null, f.Model.NewCardProductID, f.Model.NewCardNumber, f.Model.NewCardNumberTypeID).then(function (t) {
                  0 == t.ResultCode ? (u.publish(n.common.services.AppEventsService.InvalidateActiveEtimeDepositInfo_Event), e.resolve(!0))  : e.reject(t.Error.Message)
                }, function (n) {
                  e.reject(n)
                })
              }),
              e.promise
            }
          ],
          r = {
            templateUrl: 'Templates/Features/Investments/e-timedeposit-bonus/edit/step2'
          },
          t.push(i),
          t.push(r),
          t
        },
        i.prototype.exportPDF = function () {
          var t = {
          };
          return t.Parameters = JSON.stringify({
            ApplicationDate: this.Model.ApplicationDate,
            Rate: this.filterService('number') (this.Model.Rate, '2'),
            DepositAccount: this.Model.ETimeAccountNumber,
            InitialCapital: this.filterService('currency') (this.Model.Amount, ''),
            Duration: n.utils.formatString('{0} {1}', [
              this.Model.Duration,
              this.Model.DurationTypeDescription
            ]),
            Beneficiaries: n.utils.isUndefinedOrNull(this.Model.Owners) ? [
            ] : this.Model.Owners.map(function (t) {
              return n.utils.formatString('{0} {1}', [
                t.Name,
                t.Surname
              ])
            }),
            StartDate: this.Model.StartDate,
            EndDate: this.Model.EndDate,
            Email: this.Model.UserEmail,
            Mobile: this.Model.UserMobile,
            ConnectedAccount: this.Model.NewCreditProduct ? this.Model.NewCreditProduct.Code : '',
            ConnectedCard: this.Model.NewCardNumber ? this.Model.NewCardNumber : 0,
            UN: this.Model.TransactionNumber,
            BonusPoints: this.Model.Bonus,
            IsBonus: !0
          }),
          t.PDFRequestType = 20,
          t
        },
        i.$inject = [
          'isInVersion',
          '$scope',
          '$injector',
          'Model',
          '$filter',
          'SecurityService',
          'accounts',
          'cards'
        ],
        i
      }(n.wizards.VersionFilterWizardController);
      n.investments.mainModule.controller('EditETimeDepositBonusInfoController', a);
      v = function (t) {
        function i(n, i, r, u, f, e) {
          var o = t.call(this, i, r, n) || this;
          return o.Model = u,
          o.filterService = f,
          o.securityService = e,
          o
        }
        return __extends(i, t),
        i.prototype.initialiseSteps = function () {
          var t = [
          ],
          r = {
            templateUrl: 'Templates/Features/Investments/e-timedeposit/discounting/step1'
          },
          i,
          u;
          return r.processStep = [
            '$q',
            'TransfersService',
            function (t, i) {
              var u = this,
              f = u.qService.defer(),
              r = {
              };
              return r.Amount = u.Model.CapitalRatesTotal,
              r.Currency = n.server.Currency.EUR,
              r.DebitAccountNumber = u.Model.DebitAccount,
              r.DebitAccountType = 1,
              r.CreditAccountNumber = u.Model.CreditAccount,
              r.CreditAccountType = 1,
              r.ExpensesServiceType = 100,
              r.FeeType = 1,
              i.GetTransferExpenses(r).then(function (n) {
                var t = n;
                t.Fees != undefined && (u.Model.AmountLiteral = t.Fees.DebitAmountLiteral);
                f.resolve(!0)
              }).catch (function () {
                f.reject('system error')
              }),
              f.promise
            }
          ],
          i = {
            templateUrl: 'Templates/Features/Investments/e-timedeposit/discounting/step2'
          },
          i.processStep = [
            'ETimeDepositService',
            'AppEventsService',
            function (t, i) {
              var r = this,
              u = r.qService.defer();
              return t.discountingETimeDeposit(1, r.Model.ETimeAccountNumber, 0, r.Model.CreditAccount).then(function (t) {
                0 == t.ResultCode ? (r.Model.TransactionNumber = t.UN, i.publish(n.common.services.AppEventsService.InvalidateActiveEtimeDepositInfo_Event), i.publish(n.common.services.AppEventsService.InvalidateInvestments_Event), i.publish(n.common.services.AppEventsService.InvalidateAccounts_Event), u.resolve(!0))  : u.reject(t.Error.Message)
              }, function (n) {
                u.reject(n)
              }),
              u.promise
            }
          ],
          u = {
            templateUrl: 'Templates/Features/Investments/e-timedeposit/discounting/step3'
          },
          t.push(r),
          t.push(i),
          t.push(u),
          t
        },
        i.prototype.exportPDF = function () {
          var t = {
          };
          return t.Parameters = JSON.stringify({
            AmountLiteral: this.Model.AmountLiteral,
            ApplicationDate: this.Model.ApplicationDate,
            Rate: this.filterService('number') (this.Model.Rate, '2'),
            ETimeAccountNumber: this.Model.ETimeAccountNumber,
            Amount: this.filterService('currency') (this.Model.Amount, ''),
            TotalInterest: this.filterService('currency') (this.Model.TotalInterest, ''),
            NotPaidCreditInterest: this.filterService('currency') (this.Model.NotPaidCreditInterest, ''),
            DiscountInterestToEnd: this.filterService('currency') (this.Model.DiscountInterestToEnd, ''),
            DiscountRate: this.Model.DiscountRate,
            AdditionalInterestPaid: this.filterService('currency') (this.Model.AdditionalInterestPaid, ''),
            Tax: this.filterService('currency') (this.Model.Tax, ''),
            DiscountInterestReturned: this.filterService('currency') (this.Model.DiscountInterestReturned, ''),
            CapitalRatesTotal: this.filterService('currency') (this.Model.CapitalRatesTotal, ''),
            DebitAccount: this.Model.DebitAccount,
            CreditAccount: this.Model.CreditAccount,
            Owners: n.utils.isUndefinedOrNull(this.Model.Owners) ? [
            ] : this.Model.Owners.map(function (t) {
              return n.utils.formatString('{0} {1}', [
                t.Name,
                t.Surname
              ])
            }),
            TransactionNumber: this.Model.TransactionNumber
          }),
          t.PDFRequestType = 23,
          t
        },
        i.$inject = [
          'isInVersion',
          '$scope',
          '$injector',
          'Model',
          '$filter',
          'SecurityService'
        ],
        i
      }(n.wizards.VersionFilterWizardController);
      n.investments.mainModule.controller('DiscountingETimeDepositInfoController', v);
      y = function (t) {
        function i(n, i, r, u, f, e) {
          var o = t.call(this, i, r, n) || this;
          return o.Model = u,
          o.filterService = f,
          o.securityService = e,
          o
        }
        return __extends(i, t),
        i.prototype.initialiseSteps = function () {
          var t = [
          ],
          r = {
            templateUrl: 'Templates/Features/Investments/e-timedeposit-bonus/discounting/step1'
          },
          i,
          u;
          return r.processStep = [
            '$q',
            'TransfersService',
            function (t, i) {
              var u = this,
              f = u.qService.defer(),
              r = {
              };
              return r.Amount = u.Model.CapitalRatesTotal,
              r.Currency = n.server.Currency.EUR,
              r.DebitAccountNumber = u.Model.DebitAccount,
              r.DebitAccountType = 1,
              r.CreditAccountNumber = u.Model.CreditAccount,
              r.CreditAccountType = 1,
              r.ExpensesServiceType = 100,
              r.FeeType = 1,
              i.GetTransferExpenses(r).then(function (n) {
                var t = n;
                t.Fees != undefined && (u.Model.AmountLiteral = t.Fees.DebitAmountLiteral);
                f.resolve(!0)
              }).catch (function () {
                f.reject('system error')
              }),
              f.promise
            }
          ],
          i = {
            templateUrl: 'Templates/Features/Investments/e-timedeposit-bonus/discounting/step2'
          },
          i.processStep = [
            'ETimeDepositBonusService',
            'AppEventsService',
            function (t, i) {
              var r = this,
              u = r.qService.defer();
              return t.discountingETimeDepositBonus(1, r.Model.ETimeAccountNumber, 0, r.Model.CreditAccount).then(function (t) {
                0 == t.ResultCode ? (r.Model.TransactionNumber = t.UN, i.publish(n.common.services.AppEventsService.InvalidateActiveEtimeDepositInfo_Event), i.publish(n.common.services.AppEventsService.InvalidateInvestments_Event), i.publish(n.common.services.AppEventsService.InvalidateAccounts_Event), u.resolve(!0))  : u.reject(t.Error.Message)
              }, function (n) {
                u.reject(n)
              }),
              u.promise
            }
          ],
          u = {
            templateUrl: 'Templates/Features/Investments/e-timedeposit-bonus/discounting/step3'
          },
          t.push(r),
          t.push(i),
          t.push(u),
          t
        },
        i.prototype.exportPDF = function () {
          var t = {
          };
          return t.Parameters = JSON.stringify({
            AmountLiteral: this.Model.AmountLiteral,
            ApplicationDate: this.Model.ApplicationDate,
            Rate: this.filterService('number') (this.Model.Rate, '2'),
            ETimeAccountNumber: this.Model.ETimeAccountNumber,
            Amount: this.filterService('currency') (this.Model.Amount, ''),
            TotalInterest: this.filterService('currency') (this.Model.TotalInterest, ''),
            NotPaidCreditInterest: this.filterService('currency') (this.Model.NotPaidCreditInterest, ''),
            DiscountInterestToEnd: this.filterService('currency') (this.Model.DiscountInterestToEnd, ''),
            DiscountRate: this.filterService('number') (this.Model.DiscountRate, '2'),
            AdditionalInterestPaid: this.filterService('currency') (this.Model.AdditionalInterestPaid, ''),
            Tax: this.filterService('currency') (this.Model.Tax, ''),
            DiscountInterestReturned: this.filterService('currency') (this.Model.DiscountInterestReturned, ''),
            CapitalRatesTotal: this.filterService('currency') (this.Model.CapitalRatesTotal, ''),
            DebitAccount: this.Model.DebitAccount,
            CreditAccount: this.Model.CreditAccount,
            Owners: n.utils.isUndefinedOrNull(this.Model.Owners) ? [
            ] : this.Model.Owners.map(function (t) {
              return n.utils.formatString('{0} {1}', [
                t.Name,
                t.Surname
              ])
            }),
            TransactionNumber: this.Model.TransactionNumber,
            GivenPoints: this.Model.GivenPoints || 0,
            RestPoints: this.Model.RestPoints,
            IsBonus: !0
          }),
          t.PDFRequestType = 23,
          t
        },
        i.$inject = [
          'isInVersion',
          '$scope',
          '$injector',
          'Model',
          '$filter',
          'SecurityService'
        ],
        i
      }(n.wizards.VersionFilterWizardController);
      n.investments.mainModule.controller('DiscountingETimeDepositBonusInfoController', y);
      p = function (t) {
        function i(n, i, r, u, f, e, o, s, h, c, l, a, v, y, p) {
          var w = t.call(this, u, f, i) || this;
          return w.userInfo = n,
          w.isInVersion = i,
          w.Model = r,
          w.scope = u,
          w.$injector = f,
          w.accounts = e,
          w.isKYCAuthorized = s,
          w.depositRatesResponse = h,
          w.filterService = c,
          w.productsService = l,
          w.postNewWindowService = a,
          w.$window = v,
          w.onlineStatus = y,
          w.regularExpressionProvider = p,
          w.durationValues = [
          ],
          w.startDates = [
          ],
          w.amountRange = {
            Min: - 1,
            Max: - 1
          },
          r.HasErrors || (w.initializeStartDates(), w.initializeDurations()),
          w
        }
        return __extends(i, t),
        i.prototype.selectProduct = function (t) {
          var i = this;
          this.productsService.getProductInfo({
            Code: t.Code,
            ProductID: t.BankProduct.ProductID,
            Family: n.server.ProductTypeFamily.Account,
            Scope: n.server.ProductTypeScope.Local,
            ProductInfoType: 1
          }).then(function (t) {
            t.ResultCode == 0 ? i.Model.Beneficiaries = t.ProductInfo.length > 0 ? t.ProductInfo[0].Owners : [
            ] : n.utils.isUndefinedOrNull(t.Error) || (i.Model.HasErrors = !0, i.Model.ErrorMessage = t.Error.Message)
          })
        },
        i.prototype.calculateAmountRange = function () {
          if (this.showValidationErrors = !1, null != this.Model.Duration) {
            var n = [
            ],
            t = this,
            i = this.depositRatesResponse.Rates.filter(function (n) {
              return n.Duration == t.Model.Duration.id
            }).forEach(function (t) {
              n.push(t.MinimumAmount);
              n.push(t.MaximumAmount)
            });
            n.sort(function (n, t) {
              return n - t
            });
            this.amountRange.Min = n[0];
            this.amountRange.Max = n[n.length - 1]
          } else this.amountRange = {
            Min: - 1,
            Max: - 1
          };
          this.setSelectedRate()
        },
        i.prototype.setSelectedRate = function () {
          var n = this,
          t = this.depositRatesResponse.Rates.filter(function (t) {
            return t.Duration == n.Model.Duration.id && t.MinimumAmount <= n.Model.Amount && n.Model.Amount <= t.MaximumAmount
          });
          n.Model.ETimeDepositRate = 1 == t.length ? t[0] : null
        },
        i.prototype.initializeDurations = function () {
          var i = this,
          t = [
          ];
          this.depositRatesResponse.Rates.forEach(function (r) {
            var u = {
              id: r.Duration,
              title: n.utils.formatString('{0} {1}', [
                r.Duration,
                r.DurationText
              ])
            };
            t.indexOf(r.Duration) < 0 && (t.push(r.Duration), i.durationValues.push(u))
          })
        },
        i.prototype.initializeStartDates = function () {
          this.startDates = [
          ];
          this.startDates.push(this.filterService('date') (this.depositRatesResponse.CurrentWorkingDate, 'dd/MM/yyyy', 'UTC+0200'));
          this.startDates.push(this.filterService('date') (this.depositRatesResponse.NextWorkingDate, 'dd/MM/yyyy', 'UTC+0200'));
          this.startDates.push(this.filterService('date') (this.depositRatesResponse.NextNextWorkingDate, 'dd/MM/yyyy', 'UTC+0200'));
          this.Model.StartDate = this.startDates[0]
        },
        i.prototype.initialiseSteps = function () {
          var f = this,
          t = [
          ],
          r = {
            templateUrl: 'Templates/Features/Investments/e-timedeposit/new-request-step1'
          },
          i,
          u;
          return r.processStep = [
            'ETimeDepositService',
            '$q',
            'TransfersService',
            function (n, t, i) {
              var r = this,
              f = {
                Amount: r.Model.Amount,
                Duration: r.Model.ETimeDepositRate.Duration,
                DurationType: r.Model.ETimeDepositRate.DurationType,
                Rate: r.Model.ETimeDepositRate.Rate,
                TimeDepositType: r.Model.ETimeDepositRate.Type,
                DebitAccount: r.Model.DebitProduct.Code,
                DebitAccountID: r.Model.DebitProduct.TypeID,
                StartDate: r.Model.StartDate,
                BlockIndication: r.Model.IsAmountBlocked,
                CreditAccount: r.Model.DebitProduct.Code,
                CreditAccountID: r.Model.DebitProduct.TypeID
              },
              u = t.defer();
              return n.checkNewETimeDeposit(f).then(function (n) {
                return 0 == n.ResultCode && (r.Model.EndDate = n.EndDate, r.Model.InterestTax = n.InterestTax, r.Model.TotalInterests = n.TotalInterests, r.Model.TotalAmount = n.TotalAmount),
                n
              }).then(function (n) {
                if (0 == n.ResultCode) {
                  var t = {
                  };
                  t.Amount = r.Model.Amount;
                  t.Currency = r.Model.DebitProduct.CurrencyEnum;
                  t.DebitAccountNumber = r.Model.DebitProduct.Code;
                  t.DebitAccountType = r.Model.DebitProduct.TypeID;
                  t.CreditAccountNumber = r.Model.DebitProduct.Code;
                  t.CreditAccountType = r.Model.DebitProduct.TypeID;
                  t.ExpensesServiceType = 100;
                  t.FeeType = 1;
                  i.GetTransferExpenses(t).then(function (n) {
                    var t = n;
                    t.Fees != undefined && (r.Model.AmountLiteral = t.Fees.DebitAmountLiteral);
                    u.resolve(!0)
                  })
                } else u.reject(n.Error.Message)
              }).catch (function (n) {
                u.reject(n)
              }),
              u.promise
            }
          ],
          t.push(r),
          i = {
            templateUrl: 'Templates/Features/Investments/e-timedeposit/new-request-step2'
          },
          i.processStep = [
            'ETimeDepositService',
            'AppEventsService',
            '$q',
            function (t, i, r) {
              var u = this,
              f;
              return u.newEtimeDepositRequest = {
                EMail: u.Model.UserEmailAddress,
                Mobile: u.Model.UserMobilePhone,
                DebitAccount: u.Model.DebitProduct.Code,
                DebitAccountID: u.Model.DebitProduct.TypeID,
                Owners: u.Model.Beneficiaries,
                Terms: null,
                Amount: u.Model.Amount,
                BlockIndication: u.Model.IsAmountBlocked,
                StartDate: u.Model.StartDate,
                EndDate: u.Model.EndDate,
                Duration: u.Model.ETimeDepositRate.Duration,
                DurationType: u.Model.ETimeDepositRate.DurationType,
                InterestChargesCode: u.Model.ETimeDepositRate.InterestChargeCode,
                Rate: u.Model.ETimeDepositRate.Rate,
                Tax: u.Model.InterestTax,
                TimeDepositType: u.Model.ETimeDepositRate.Type,
                TotalInterest: u.Model.TotalInterests,
                UpdateProfile: !(u.Model.IsEmailInProfile && u.Model.IsMobileInProfile)
              },
              f = r.defer(),
              t.createNewETimeDeposit(u.newEtimeDepositRequest).then(function (t) {
                0 == t.ResultCode ? (u.Model.TransactionNumber = t.UN, i.publish(n.common.services.AppEventsService.InvalidateAllEtimeDepositInfo_Event), i.publish(n.common.services.AppEventsService.InvalidateUserSessionInfo_Event), i.publish(n.common.services.AppEventsService.InvalidateAccounts_Event), f.resolve(!0))  : f.reject(t.Error.Message)
              }).catch (function (n) {
                f.reject(n.Error.Message)
              }),
              f.promise
            }
          ],
          t.push(i),
          u = {
            templateUrl: 'Templates/Features/Investments/e-timedeposit/new-request-step3'
          },
          t.push(u),
          t
        },
        i.prototype.exportPDF = function () {
          var t = {
          };
          return t.Parameters = JSON.stringify({
            Amount: this.Model.Amount,
            AmountLiteral: this.Model.AmountLiteral,
            DurationTitle: this.Model.Duration.title,
            Rate: this.filterService('number') (this.Model.ETimeDepositRate.Rate, '2'),
            Currency: this.Model.DebitProduct.Currency,
            DebitProductCode: this.Model.DebitProduct.BankProduct.Code,
            TotalInterests: this.Model.TotalInterests,
            InterestTax: this.Model.InterestTax,
            TotalAmount: this.Model.TotalAmount,
            Beneficiaries: this.Model.Beneficiaries.map(function (t) {
              return n.utils.formatString('{0} {1}', [
                t.Surname,
                t.Name
              ])
            }),
            StartDate: this.Model.StartDate,
            EndDate: this.Model.EndDate,
            Email: this.Model.UserEmailAddress,
            Mobile: this.Model.UserMobilePhone,
            TransactionNumber: this.Model.TransactionNumber,
            IsAmountBlocked: this.Model.IsAmountBlocked
          }),
          t.PDFRequestType = 8,
          t
        },
        i.prototype.getCurrentTerms = function () {
          var n = {
          };
          n.Parameters = JSON.stringify({
          });
          n.PDFRequestType = 12;
          this.postNewWindowService(n, 'GetPdf', !1)
        },
        i.prototype.print = function () {
          this.$window.print()
        },
        i.$inject = [
          'userInfo',
          'isInVersion',
          'Model',
          '$scope',
          '$injector',
          'accounts',
          'VersionFilterService',
          'isKYCAuthorized',
          'depositRatesResponse',
          '$filter',
          'ProductsService',
          'postNewWindowService',
          '$window',
          'onlineStatus',
          'RegularExpressionService'
        ],
        i
      }(n.wizards.VersionFilterWizardController);
      n.investments.mainModule.controller('NewETimeDepositRequestController', p);
      w = function (t) {
        function i(i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k, d) {
          var g = t.call(this, e, o, r) || this,
          nt;
          return g.userInfo = i,
          g.isInVersion = r,
          g.state = u,
          g.Model = f,
          g.scope = e,
          g.$injector = o,
          g.debitCardApplicationNo = s,
          g.accounts = h,
          g.cards = c,
          g.isKYCAuthorized = a,
          g.depositRatesResponse = v,
          g.filterService = y,
          g.productsService = p,
          g.postNewWindowService = w,
          g.$window = b,
          g.onlineStatus = k,
          g.regularExpressionProvider = d,
          g.durationValues = [
          ],
          g.startDates = [
          ],
          g.amountRange = {
            Min: - 1,
            Max: - 1
          },
          f.HasErrors || (g.initializeStartDates(), g.initializeDurations()),
          n.utils.isUndefinedOrNull(g.debitCardApplicationNo) ? !n.utils.isUndefinedOrNull(g.cards) && g.cards.length > 0 ? (g.Model.UseProfileProduct = !0, g.Model.UseCardNumber = !1, g.Model.UseCardApplicationNumber = !1)  : (g.Model.UseProfileProduct = !1, g.Model.UseCardNumber = !0, g.Model.UseCardApplicationNumber = !0)  : (g.Model.UseProfileProduct = !1, g.Model.UseCardNumber = !1, g.Model.UseCardApplicationNumber = !0, g.Model.BonusCardApplicationNumber = g.debitCardApplicationNo),
          nt = g,
          e.$watch(function () {
            return nt.selectedCardCode
          }, function (t, i) {
            t !== i && (n.utils.isUndefinedOrNullorWhiteSpace(t) ? nt.Model.UseProfileProduct || (nt.Model.UseCardApplicationNumber = !0)  : (nt.Model.BonusCardApplicationNumber = '', nt.Model.UseCardApplicationNumber = !1))
          }),
          e.$watch(function () {
            return nt.Model.BonusCardApplicationNumber
          }, function (t, i) {
            t !== i && (n.utils.isUndefinedOrNullorWhiteSpace(t) ? nt.Model.UseProfileProduct || (nt.Model.UseCardNumber = !0)  : (nt.selectedCardCode = '', nt.Model.UseCardNumber = !1))
          }),
          g
        }
        return __extends(i, t),
        i.prototype.disableCardInfoEditing = function () {
          var n = this;
          n.selectedCardCode = '';
          n.Model.UseCardNumber = !1;
          n.Model.BonusCardApplicationNumber = '';
          n.Model.UseCardApplicationNumber = !1
        },
        i.prototype.enableCardInfoEditing = function () {
          var n = this;
          n.Model.UseCardNumber = !0;
          n.Model.UseCardApplicationNumber = !0
        },
        i.prototype.isCardNumberRequired = function () {
          var t = !1,
          n = this;
          return !n.Model.UseProfileProduct && n.Model.UseCardNumber && (n.selectedCardCode || n.Model.UseCardApplicationNumber && (!n.Model.UseCardApplicationNumber || n.Model.BonusCardApplicationNumber) || (t = !0)),
          t
        },
        i.prototype.isApplicationNumberRequired = function () {
          var t = !1,
          n = this;
          return !n.Model.UseProfileProduct && n.Model.UseCardApplicationNumber && (n.Model.BonusCardApplicationNumber || n.Model.UseCardNumber && (!n.Model.UseCardNumber || n.selectedCardCode) || (t = !0)),
          t
        },
        i.prototype.goToDebitCardApplication = function () {
          this.state.go(n.constants.stateNames.debitCardNew, {
            uid: uuid.v4(),
            referer: 'termDepositBonusApplication'
          })
        },
        i.prototype.selectProduct = function (t) {
          var i = this;
          this.productsService.getProductInfo({
            Code: t.Code,
            ProductID: t.BankProduct.ProductID,
            Family: n.server.ProductTypeFamily.Account,
            Scope: n.server.ProductTypeScope.Local,
            ProductInfoType: 2
          }).then(function (t) {
            t.ResultCode == 0 ? i.Model.Beneficiaries = t.ProductInfo.length > 0 ? t.ProductInfo[0].Owners : [
            ] : n.utils.isUndefinedOrNull(t.Error) || (i.Model.HasErrors = !0, i.Model.ErrorMessage = t.Error.Message)
          })
        },
        i.prototype.calculateAmountRange = function () {
          if (this.showValidationErrors = !1, null != this.Model.Duration) {
            var n = [
            ],
            t = this,
            i = this.depositRatesResponse.Rates.filter(function (n) {
              return n.Duration == t.Model.Duration.id
            }).forEach(function (t) {
              n.push(t.MinimumAmount);
              n.push(t.MaximumAmount)
            });
            n.sort(function (n, t) {
              return n - t
            });
            this.amountRange.Min = n[0];
            this.amountRange.Max = n[n.length - 1]
          } else this.amountRange = {
            Min: - 1,
            Max: - 1
          };
          this.setSelectedRate()
        },
        i.prototype.setSelectedRate = function () {
          var n = this,
          t = this.depositRatesResponse.Rates.filter(function (t) {
            return t.Duration == n.Model.Duration.id && t.MinimumAmount <= n.Model.Amount && n.Model.Amount <= t.MaximumAmount
          });
          n.Model.ETimeDepositRate = 1 == t.length ? t[0] : null
        },
        i.prototype.initializeDurations = function () {
          var i = this,
          t = [
          ];
          this.depositRatesResponse.Rates.forEach(function (r) {
            var u = {
              id: r.Duration,
              title: n.utils.formatString('{0} {1}', [
                r.Duration,
                r.DurationText
              ])
            };
            t.indexOf(r.Duration) < 0 && (t.push(r.Duration), i.durationValues.push(u))
          })
        },
        i.prototype.initializeStartDates = function () {
          this.startDates = [
          ];
          this.startDates.push(this.filterService('date') (this.depositRatesResponse.CurrentWorkingDate, 'dd/MM/yyyy', 'UTC+0200'));
          this.startDates.push(this.filterService('date') (this.depositRatesResponse.NextWorkingDate, 'dd/MM/yyyy', 'UTC+0200'));
          this.startDates.push(this.filterService('date') (this.depositRatesResponse.NextNextWorkingDate, 'dd/MM/yyyy', 'UTC+0200'));
          this.Model.StartDate = this.startDates[0]
        },
        i.prototype.initialiseSteps = function () {
          var f = this,
          t = [
          ],
          r = {
            templateUrl: 'Templates/Features/Investments/e-timedeposit-bonus/new-request-step1'
          },
          i,
          u;
          return r.processStep = [
            'ETimeDepositBonusService',
            '$q',
            'TransfersService',
            function (t, i, r) {
              var u = this,
              f = i.defer(),
              e = i.when({
                ResultCode: 0,
                ProductInfo: [
                  {
                    Validated: !0,
                    ProductTypeID: 0
                  }
                ]
              });
              return u.Model.UseProfileProduct ? e = i.when({
                ResultCode: 0,
                ProductInfo: [
                  {
                    Validated: !0,
                    ProductTypeID: u.Model.BonusCardProduct.TypeID
                  }
                ]
              })  : u.Model.UseCardNumber && (e = u.productsService.getProductInfo({
                Code: u.selectedCardCode,
                ProductID: n.constants.pci.defaultProductId,
                Family: n.server.ProductTypeFamily.Card,
                Scope: n.server.ProductTypeScope.Local
              })),
              e.then(function (n) {
                return n.ProductInfo[0].ErrorMessage ? (f.reject(n.ProductInfo[0].ErrorMessage), !1)  : n.ProductInfo.length > 0 ? (u.selectedCardTypeId = n.ProductInfo[0].ProductTypeID, !0)  : void 0
              }).then(function (n) {
                if (n) {
                  var i = {
                    Amount: u.Model.Amount,
                    Duration: u.Model.ETimeDepositRate.Duration,
                    DurationType: u.Model.ETimeDepositRate.DurationType,
                    IsBonus: !0,
                    Rate: u.Model.ETimeDepositRate.Rate,
                    TimeDepositType: u.Model.ETimeDepositRate.Type,
                    DebitAccount: u.Model.DebitProduct.Code,
                    DebitAccountID: u.Model.DebitProduct.TypeID,
                    ProductID: u.Model.UseProfileProduct ? u.Model.BonusCardProduct.BankProduct.ProductID : 0,
                    BonusCardCode: u.Model.UseProfileProduct ? u.Model.BonusCardProduct.Code : u.selectedCardCode,
                    BonusCardTypeID: u.Model.UseProfileProduct ? u.Model.BonusCardProduct.TypeID : u.selectedCardTypeId,
                    BonusCardApplicationNumber: u.Model.BonusCardApplicationNumber,
                    BonusPoints: u.Model.ETimeDepositRate.BonusPoints,
                    StartDate: u.Model.StartDate,
                    BlockIndication: u.Model.IsAmountBlocked,
                    CreditAccount: u.Model.DebitProduct.Code,
                    CreditAccountID: u.Model.DebitProduct.TypeID
                  };
                  t.checkNewETimeDepositBonus(i).then(function (n) {
                    return 0 == n.ResultCode ? (u.Model.EndDate = n.EndDate, u.Model.InterestTax = n.InterestTax, u.Model.TotalInterests = n.TotalInterests, u.Model.TotalAmount = n.TotalAmount)  : f.reject(n.Error.Message),
                    n
                  }).then(function (n) {
                    if (0 == n.ResultCode) {
                      var t = {
                      };
                      t.Amount = u.Model.Amount;
                      t.Currency = u.Model.DebitProduct.CurrencyEnum;
                      t.DebitAccountNumber = u.Model.DebitProduct.Code;
                      t.DebitAccountType = u.Model.DebitProduct.TypeID;
                      t.CreditAccountNumber = u.Model.DebitProduct.Code;
                      t.CreditAccountType = u.Model.DebitProduct.TypeID;
                      t.ExpensesServiceType = 100;
                      t.FeeType = 1;
                      r.GetTransferExpenses(t).then(function (n) {
                        var t = n;
                        t.Fees != undefined && (u.Model.AmountLiteral = t.Fees.DebitAmountLiteral);
                        f.resolve(!0)
                      })
                    } else f.reject(n.Error.Message)
                  }).catch (function (n) {
                    f.reject(n)
                  })
                }
              }),
              f.promise
            }
          ],
          t.push(r),
          i = {
            templateUrl: 'Templates/Features/Investments/e-timedeposit-bonus/new-request-step2'
          },
          i.processStep = [
            'ETimeDepositBonusService',
            'AppEventsService',
            '$q',
            function (t, i, r) {
              var u = this,
              f;
              return u.newEtimeDepositBonusRequest = {
                EMail: u.Model.UserEmailAddress,
                Mobile: u.Model.UserMobilePhone,
                DebitAccount: u.Model.DebitProduct.Code,
                DebitAccountID: u.Model.DebitProduct.TypeID,
                ProductID: u.Model.UseProfileProduct ? u.Model.BonusCardProduct.BankProduct.ProductID : 0,
                BonusCardCode: u.Model.UseProfileProduct ? u.Model.BonusCardProduct.Code : u.selectedCardCode,
                BonusCardTypeID: u.Model.UseProfileProduct ? u.Model.BonusCardProduct.TypeID : u.selectedCardTypeId,
                BonusCardApplicationNumber: u.Model.BonusCardApplicationNumber,
                BonusPoints: u.Model.ETimeDepositRate.BonusPoints,
                Owners: u.Model.Beneficiaries,
                Terms: null,
                Amount: u.Model.Amount,
                BlockIndication: u.Model.IsAmountBlocked,
                StartDate: u.Model.StartDate,
                EndDate: u.Model.EndDate,
                Duration: u.Model.ETimeDepositRate.Duration,
                DurationType: u.Model.ETimeDepositRate.DurationType,
                IsBonus: !0,
                InterestChargesCode: u.Model.ETimeDepositRate.InterestChargeCode,
                Rate: u.Model.ETimeDepositRate.Rate,
                Tax: u.Model.InterestTax,
                TimeDepositType: u.Model.ETimeDepositRate.Type,
                TotalInterest: u.Model.TotalInterests,
                UpdateProfile: !(u.Model.IsEmailInProfile && u.Model.IsMobileInProfile)
              },
              f = r.defer(),
              t.createNewETimeDepositBonus(u.newEtimeDepositBonusRequest).then(function (t) {
                0 == t.ResultCode ? (u.Model.TransactionNumber = t.UN, i.publish(n.common.services.AppEventsService.InvalidateAllEtimeDepositInfo_Event), i.publish(n.common.services.AppEventsService.InvalidateUserSessionInfo_Event), i.publish(n.common.services.AppEventsService.InvalidateAccounts_Event), f.resolve(!0))  : f.reject(t.Error.Message)
              }).catch (function (t) {
                n.utils.isUndefinedOrNull(t.Error) ? f.reject('System error')  : f.reject(t.Error.Message)
              }),
              f.promise
            }
          ],
          t.push(i),
          u = {
            templateUrl: 'Templates/Features/Investments/e-timedeposit-bonus/new-request-step3'
          },
          t.push(u),
          t
        },
        i.prototype.exportPDF = function () {
          var t = {
          };
          return t.Parameters = JSON.stringify({
            Amount: this.Model.Amount,
            AmountLiteral: this.Model.AmountLiteral,
            BonusCard: this.Model.UseProfileProduct ? this.Model.BonusCardProduct.Code : this.selectedCardCode,
            BonusCardApplicationNumber: this.Model.BonusCardApplicationNumber,
            BonusPoints: this.Model.ETimeDepositRate.BonusPoints,
            DurationTitle: this.Model.Duration.title,
            Rate: this.filterService('number') (this.Model.ETimeDepositRate.Rate, '2'),
            Currency: this.Model.DebitProduct.Currency,
            DebitProductCode: this.Model.DebitProduct.BankProduct.Code,
            TotalInterests: this.Model.TotalInterests,
            InterestTax: this.Model.InterestTax,
            IsBonus: !0,
            TotalAmount: this.Model.TotalAmount,
            Beneficiaries: this.Model.Beneficiaries.map(function (t) {
              return n.utils.formatString('{0} {1}', [
                t.Surname,
                t.Name
              ])
            }),
            StartDate: this.Model.StartDate,
            EndDate: this.Model.EndDate,
            Email: this.Model.UserEmailAddress,
            Mobile: this.Model.UserMobilePhone,
            TransactionNumber: this.Model.TransactionNumber,
            IsAmountBlocked: this.Model.IsAmountBlocked
          }),
          t.PDFRequestType = 8,
          t
        },
        i.prototype.getCurrentTerms = function () {
          var n = {
          };
          n.Parameters = JSON.stringify({
            IsBonus: !0
          });
          n.PDFRequestType = 30;
          this.postNewWindowService(n, 'GetPdf', !1)
        },
        i.prototype.print = function () {
          this.$window.print()
        },
        i.$inject = [
          'userInfo',
          'isInVersion',
          '$state',
          'Model',
          '$scope',
          '$injector',
          'debitCardApplicationNo',
          'accounts',
          'cards',
          'VersionFilterService',
          'isKYCAuthorized',
          'depositRatesResponse',
          '$filter',
          'ProductsService',
          'postNewWindowService',
          '$window',
          'onlineStatus',
          'RegularExpressionService'
        ],
        i
      }(n.wizards.VersionFilterWizardController);
      n.investments.mainModule.controller('NewETimeDepositBonusRequestController', w);
      b = function () {
        function t() {
        }
        return t.prototype.decorate = function (t) {
          var i = [
          ];
          return null == t ? i : (t.forEach(function (t) {
            var r = new n.model.ETimeDepositInfoActionDecorator(t);
            r.Actions.push(new n.model.MenuAction(n.constants.stateNames.eTimeDepositView, {
              id: t.ApplicationID,
              mode: 'view'
            }, null, 'eTimeDeposit.burger.View'));
            0 == t.Status && r.Actions.push(new n.model.MenuAction(n.constants.stateNames.eTimeDepositView, {
              id: t.ApplicationID,
              mode: 'cancel'
            }, null, 'eTimeDeposit.burger.Cancel'));
            r.Actions.push(new n.model.MenuAction(n.constants.stateNames.eTimeDepositNew, null, null, 'eTimeDeposit.burger.New'));
            i.push(r)
          }), i)
        },
        t
      }();
      t.AllDepositListActionDecorator = b;
      k = function () {
        function t() {
        }
        return t.prototype.decorate = function (t) {
          var i = [
          ];
          return null == t ? i : (t.forEach(function (t) {
            var r = new n.model.ETimeDepositInfoActionDecorator(t);
            r.Actions.push(new n.model.MenuAction(n.constants.stateNames.eTimeDepositBonusView, {
              id: t.ApplicationID,
              mode: 'view'
            }, null, 'eTimeDeposit.burger.View'));
            0 == t.Status && r.Actions.push(new n.model.MenuAction(n.constants.stateNames.eTimeDepositBonusView, {
              id: t.ApplicationID,
              mode: 'cancel'
            }, null, 'eTimeDeposit.burger.Cancel'));
            r.Actions.push(new n.model.MenuAction(n.constants.stateNames.eTimeDepositBonusNew, null, null, 'eTimeDeposit.burger.New'));
            i.push(r)
          }), i)
        },
        t
      }();
      t.AllDepositBonusListActionDecorator = k;
      d = function () {
        function t() {
        }
        return t.prototype.decorate = function (t) {
          var i = [
          ];
          return null == t ? i : (t.forEach(function (t) {
            var r = new n.model.ETimeDepositInfoActionDecorator(t);
            r.Actions.push(new n.model.MenuAction(n.constants.stateNames.eTimeDepositEdit, {
              uuid: t.Id
            }, null, 'eTimeDeposit.burger.Edit'));
            r.Actions.push(new n.model.MenuAction(n.constants.stateNames.eTimeDepositWithdraw, {
              uuid: t.Id
            }, null, 'eTimeDeposit.burger.WithDraw'));
            r.Actions.push(new n.model.MenuAction(n.constants.stateNames.timedepositDetailsState, {
              id: t.Id
            }, null, 'eTimeDeposit.burger.View'));
            i.push(r)
          }), i)
        },
        t
      }();
      t.ActiveDepositListActionDecorator = d;
      g = function () {
        function t() {
        }
        return t.prototype.decorate = function (t) {
          var i = [
          ];
          return null == t ? i : (t.forEach(function (t) {
            var r = new n.model.ETimeDepositInfoActionDecorator(t);
            r.Actions.push(new n.model.MenuAction(n.constants.stateNames.eTimeDepositBonusEdit, {
              uuid: t.Id
            }, null, 'eTimeDeposit.burger.Edit'));
            r.Actions.push(new n.model.MenuAction(n.constants.stateNames.eTimeDepositBonusWithdraw, {
              uuid: t.Id
            }, null, 'eTimeDeposit.burger.WithDraw'));
            r.Actions.push(new n.model.MenuAction(n.constants.stateNames.timedepositDetailsState, {
              id: t.Id
            }, null, 'eTimeDeposit.burger.View'));
            i.push(r)
          }), i)
        },
        t
      }();
      t.ActiveDepositBonusListActionDecorator = g
    }) (t = n.investments || (n.investments = {
    }))
  }(alpha || (alpha = {
  })), function (n) {
    var t;
    (function () {
      var u = function () {
        function t(t, i) {
          this.products = t;
          this.isEndUser = i.isEndUser();
          this.isCorporate = !i.IsRetail();
          this.isCorporate && t.forEach(function (t) {
            var i = t.getProductActions(),
            r = angular.copy(i);
            r.forEach(function (t, r) {
              t.stateName == n.constants.stateNames.newTransferState && i.splice(r, 1)
            });
            t.setProductActions = i
          })
        }
        return Object.defineProperty(t.prototype, 'IsCorporate', {
          get: function () {
            return this.isCorporate
          },
          enumerable: !0,
          configurable: !0
        }),
        t.$inject = [
          'products',
          'RoleService'
        ],
        t
      }(),
      t,
      i,
      r;
      n.loans.mainModule.controller('LoansController', u);
      t = function () {
        function t(t, i, r, u, f) {
          var e = this,
          s,
          o,
          h;
          this.statementsResponse = t;
          this.product = i;
          this.STRINGS = r;
          this.ProductsService = u;
          this.scope = f;
          this.showChart = !1;
          this.dateFromPopupOpened = !1;
          this.dateToPopupOpened = !1;
          this.dateFormat = 'dd/MM/yyyy';
          this.lastIndicesArr = [
          ];
          this.maxRecords = 30;
          this.showValidationErrors = !1;
          this.showGrossBalancePanel = !1;
          this.dateOptions = {
            formatYear: 'yyyy',
            startingDay: 1,
            showWeeks: 'false',
            maxMode: 'day'
          };
          this.statementsResponse.ResultCode == 0 ? (this.errorMessage = '', this.hasMore = t.HasMore, this.currentIndex = t.CurrentPageIndex, n.utils.isUndefinedOrNull(this.statementsResponse.HostStatements) || (s = this.statementsResponse.HostStatements, this.statements = s), n.utils.isUndefinedOrNull(this.statementsResponse.FDHStatements) || n.utils.isUndefinedOrNull(this.statementsResponse.FDHStatements[0].Statements) || (o = [
          ], this.statementsResponse.FDHStatements.map(function (n) {
            o = o.concat(n.Statements)
          }), this.statements = o), n.utils.isUndefinedOrNull(this.statementsResponse.LMSStatements) || (h = this.statementsResponse.LMSStatements, this.statements = h), this.setNewPrevGrossbalance(t))  : n.utils.isUndefinedOrNull(t.Error) || (this.hasMore = !1, this.currentIndex = '', this.statements = [
          ], this.errorMessage = t.Error.Message, this.setNewPrevGrossbalance(t));
          this.today = new Date;
          this.firstDayOfMonth = new Date(this.today.getFullYear(), this.today.getMonth(), 1);
          this.from = this.firstDayOfMonth;
          this.to = this.today;
          this.dateFilterValues = [
            {
              id: 1,
              name: r.dfvLastTransactions
            },
            {
              id: 2,
              name: r.dfvLast3Months
            },
            {
              id: 3,
              name: r.dfvCustomPeriod
            }
          ];
          this.selectedDateFilter = {
            id: 1,
            name: r.dfvLastTransactions
          };
          this.noRecords = this.STRINGS.noRecords;
          this.documentData = this.ProductsService.getLoanStatementsRequest(i.Code, i.TypeID, 10, this.currentIndex);
          this.documentData.Currency = i.Currency;
          this.documentData.DocumentRequestType = 10;
          this.scope.$watch(function () {
            return e.to
          }, function (n) {
            n && e.checkDate()
          });
          this.scope.$watch(function () {
            return e.from
          }, function (n) {
            n && e.checkDate()
          })
        }
        return t.prototype.setNewPrevGrossbalance = function (t) {
          this.newGrossBalance = n.utils.isUndefinedOrNullorWhiteSpace(t.NewGrossBalance) ? null : t.NewGrossBalance;
          this.newGrossBalanceSign = n.utils.isUndefinedOrNullorWhiteSpace(t.NewGrossBalanceSign) ? null : t.NewGrossBalanceSign;
          this.previousGrossBalance = n.utils.isUndefinedOrNullorWhiteSpace(t.PreviousGrossBalance) ? null : t.PreviousGrossBalance;
          this.previousGrossBalanceSign = n.utils.isUndefinedOrNullorWhiteSpace(t.PreviousGrossBalanceSign) ? null : t.PreviousGrossBalanceSign;
          this.setShowGrossBalancePanel()
        },
        t.prototype.setShowGrossBalancePanel = function () {
          this.showGrossBalancePanel = n.utils.isUndefinedOrNull(this.newGrossBalance) || n.utils.isUndefinedOrNull(this.previousGrossBalance) ? !1 : !0
        },
        t.prototype.loadMore = function () {
          var t = this;
          return t.lastIndicesArr.push(t.currentIndex),
          this.ProductsService.getLoanStatements({
            ProductCode: this.product.Code,
            ProductTypeID: this.product.TypeID,
            MaxRecords: this.maxRecords,
            LastPageIndex: this.currentIndex,
            FromDate: this.from.toDateString(),
            ToDate: this.to.toDateString()
          }).then(function (i) {
            var r,
            u,
            f,
            e;
            i.ResultCode == 0 ? (t.documentData = t.ProductsService.getLoanStatementsRequest(t.product.Code, t.product.TypeID, t.maxRecords, t.currentIndex, t.from.toDateString(), t.to.toDateString()), t.documentData.Currency = t.product.Currency, t.documentData.DocumentRequestType = 10, t.errorMessage = '', t.hasMore = i.HasMore, t.currentIndex = i.CurrentPageIndex, r = [
            ], n.utils.isUndefinedOrNull(i.HostStatements) || (u = i.HostStatements, r = u), n.utils.isUndefinedOrNull(i.FDHStatements) || (f = i.FDHStatements[0].Statements, r = f), n.utils.isUndefinedOrNull(i.LMSStatements) || (e = i.LMSStatements, r = e), t.statements = t.statements.concat(r), t.setNewPrevGrossbalance(i), t.documentData.LastPageIndex = '', t.documentData.LastPageIndices = t.lastIndicesArr)  : n.utils.isUndefinedOrNull(i.Error) || (t.hasMore = !1, t.currentIndex = '', t.statements = [
            ], t.errorMessage = i.Error.Message, t.setNewPrevGrossbalance(i))
          })
        },
        t.prototype.checkDate = function () {
          var n = this,
          t = new Date;
          t.setMonth(t.getMonth() - 18);
          var i = n.scope.form.dateFrom,
          r = n.scope.form.dateTo,
          u = n.from < t,
          f = n.to < n.from;
          f ? (n.showValidationErrors = !0, r.$setValidity('dateToIsBigger', !1))  : u ? (n.showValidationErrors = !0, i.$setValidity('eighteenMonthsOrOlder', !1))  : (n.showValidationErrors = !1, i.$setValidity('eighteenMonthsOrOlder', !0), r.$setValidity('dateToIsBigger', !0))
        },
        t.prototype.getStatementsByDate = function () {
          var t = this;
          if (!t.scope.form.$invalid) return t.lastIndicesArr = [
          ],
          this.selectedDateFilter.id == 1 ? this.ProductsService.getLoanStatements({
            ProductCode: this.product.Code,
            ProductTypeID: this.product.TypeID,
            MaxRecords: 10,
            LastPageIndex: this.currentIndex
          }).then(function (i) {
            var r,
            u,
            f;
            i.ResultCode == 0 ? (t.documentData = t.ProductsService.getLoanStatementsRequest(t.product.Code, t.product.TypeID, 10, t.currentIndex), t.documentData.Currency = t.product.Currency, t.documentData.DocumentRequestType = 10, t.errorMessage = '', t.hasMore = i.HasMore, t.currentIndex = i.CurrentPageIndex, t.setNewPrevGrossbalance(i), n.utils.isUndefinedOrNull(i.HostStatements) || (r = i.HostStatements, t.statements = r), n.utils.isUndefinedOrNull(i.FDHStatements) || (u = i.FDHStatements[0].Statements, t.statements = u), n.utils.isUndefinedOrNull(i.LMSStatements) || (f = i.LMSStatements, t.statements = f), t.noRecords = t.STRINGS.noRecords)  : n.utils.isUndefinedOrNull(i.Error) || (t.hasMore = !1, t.currentIndex = '', t.statements = [
            ], t.errorMessage = i.Error.Message, t.setNewPrevGrossbalance(i))
          })  : this.ProductsService.getLoanStatements({
            ProductCode: this.product.Code,
            ProductTypeID: this.product.TypeID,
            MaxRecords: this.maxRecords,
            FromDate: this.from.toDateString(),
            ToDate: this.to.toDateString()
          }).then(function (i) {
            var r,
            u,
            f;
            i.ResultCode == 0 ? (t.documentData = t.ProductsService.getLoanStatementsRequest(t.product.Code, t.product.TypeID, t.maxRecords, t.currentIndex, t.from.toDateString(), t.to.toDateString()), t.documentData.Currency = t.product.Currency, t.documentData.DocumentRequestType = 10, t.errorMessage = '', t.hasMore = i.HasMore, t.currentIndex = i.CurrentPageIndex, t.statements = [
            ], n.utils.isUndefinedOrNull(i.HostStatements) || (r = i.HostStatements, t.statements = r), n.utils.isUndefinedOrNull(i.FDHStatements) || (u = i.FDHStatements[0].Statements, t.statements = u), n.utils.isUndefinedOrNull(i.LMSStatements) || (f = i.LMSStatements, t.statements = f), t.setNewPrevGrossbalance(i), t.noRecords = t.STRINGS.noLoanTransactionsByDate)  : n.utils.isUndefinedOrNull(i.Error) || (t.hasMore = !1, t.currentIndex = '', t.statements = [
            ], t.errorMessage = i.Error.Message, t.setNewPrevGrossbalance(i))
          })
        },
        t.prototype.dateFromPopupToggleVisibility = function (n) {
          n.preventDefault();
          n.stopPropagation();
          this.dateToPopupOpened = !1;
          this.dateFromPopupOpened = !0;
          this.selectedDateFilter = {
            id: 3,
            name: this.STRINGS.dfvCustomPeriod
          }
        },
        t.prototype.dateToPopupToggleVisibility = function (n) {
          n.preventDefault();
          n.stopPropagation();
          this.dateFromPopupOpened = !1;
          this.dateToPopupOpened = !0;
          this.selectedDateFilter = {
            id: 3,
            name: this.STRINGS.dfvCustomPeriod
          }
        },
        t.prototype.selectDateFilter = function (t) {
          switch (t.id) {
            case 1:
              this.selectedDateFilter = {
                id: 1,
                name: this.STRINGS.dfvLastTransactions
              };
              this.from = this.firstDayOfMonth;
              this.to = this.today;
              this.getStatementsByDate();
              break;
            case 2:
              this.selectedDateFilter = {
                id: 2,
                name: this.STRINGS.dfvLast3Months
              };
              this.from = n.utils.SubtractMonths(new Date, 3);
              this.to = new Date;
              this.getStatementsByDate();
              break;
            case 3:
              this.selectedDateFilter = {
                id: 3,
                name: this.STRINGS.dfvCustomPeriod
              };
              break;
            default:
              this.from = this.firstDayOfMonth;
              this.to = this.today
          }
        },
        t.prototype.selectTimePeriod = function () {
          this.selectedDateFilter = {
            id: 5,
            name: this.STRINGS.dfvCustomPeriod
          }
        },
        t.$inject = [
          'statementsResponse',
          'product',
          'STRINGS',
          'ProductsService',
          '$scope'
        ],
        t
      }();
      n.loans.mainModule.controller('LoansTransactionsController', t);
      i = function () {
        function t(n, t, i) {
          this.response = n;
          this.product = t;
          this.ProductsService = i;
          this.chequeNo = '';
          this.chequeStatus = '';
          this.hasMore = n.HasMore;
          this.currentIndex = n.CurrentPageIndex;
          this.cheques = this.response.ChequeStatus
        }
        return t.prototype.loadMore = function () {
          var n = this;
          return this.ProductsService.getChequeStatus({
            ProductCode: this.product.Code,
            ProductTypeID: this.product.TypeID,
            MaxRecords: 10,
            ReturnChequeBooksInfo: !1,
            SpecificChequeNumber: undefined,
            LastPageIndex: this.currentIndex
          }).then(function (t) {
            n.hasMore = t.HasMore;
            n.currentIndex = t.CurrentPageIndex;
            n.cheques = n.cheques.concat(t.ChequeStatus)
          })
        },
        t.prototype.searchChequeNumber = function () {
          if (!n.utils.isUndefinedOrNullorWhiteSpace(this.chequeNo)) {
            var t = this;
            return this.ProductsService.getChequeStatus({
              ProductCode: this.product.Code,
              ProductTypeID: this.product.TypeID,
              MaxRecords: 10,
              ReturnChequeBooksInfo: !1,
              SpecificChequeNumber: t.chequeNo
            }).then(function (i) {
              n.utils.isUndefinedOrNull(i.ChequeStatus[0]) || (t.chequeStatus = i.ChequeStatus[0].StatusDescription)
            })
          }
        },
        t.$inject = [
          'cheques',
          'product',
          'ProductsService'
        ],
        t
      }();
      n.loans.mainModule.controller('ChequesController', i);
      r = function () {
        function t(t, i, r, u, f, e) {
          this.estatementsResponse = t;
          this.product = i;
          this.cardstatementsResponse = r;
          this.ProductsService = u;
          this.modal = f;
          this.stringService = e;
          this.error = '';
          this.previousStatementsError = '';
          n.utils.isUndefinedOrNull(this.estatementsResponse) || this.estatementsResponse.ResultCode != 1 ? n.utils.isUndefinedOrNull(this.cardstatementsResponse) || this.cardstatementsResponse.ResultCode != 1 ? (this.error = '', this.estatements = this.estatementsResponse.EStatements, this.cardstatements = this.cardstatementsResponse.Statements.length > 0 ? this.cardstatementsResponse.Statements[0].OldStatements : [
          ], this.product.HasLMSBalance && !n.utils.isUndefinedOrNull(this.product.LMSBalance) ? this.currency = this.product.LMSBalance.Currency : this.product.HasFDHBalance && !n.utils.isUndefinedOrNull(this.product.FDHBalance) ? this.currency = this.product.FDHBalance.Currency : this.product.HasHostBalance && !n.utils.isUndefinedOrNull(this.product.HostBalance) && (this.currency = this.product.HostBalance.Currency), n.utils.isUndefinedOrNull(this.currency) && (this.currency = this.product.CurrencyEnum))  : this.error = this.cardstatementsResponse.Error.Message : this.error = this.estatementsResponse.Error.Message
        }
        return t.prototype.getEStatement = function (n) {
          var t = this,
          i = this.modal.open({
            templateUrl: 'Templates/Features/Cards/oldStatementsModal',
            controller: 'OldStatementsModalInstanceCtrl as vm',
            size: 'lg',
            windowClass: 'customfeatures',
            resolve: {
              eStatementsResponse: [
                'ProductsService',
                function () {
                  return t.ProductsService.getCardStatements({
                    ProductCode: t.product.Code,
                    ProductTypeID: t.product.TypeID,
                    ProductID: t.product.BankProduct.ProductID,
                    GetOldStatements: !0,
                    StatementID: n.StatementID
                  })
                }
              ],
              documentData: [
                'ProductsService',
                function () {
                  var i = {
                    ProductCode: t.product.Code,
                    ProductTypeID: t.product.TypeID,
                    GetOldStatements: !0,
                    StatementID: n.StatementID,
                    ProductID: t.product.BankProduct.ProductID
                  };
                  return i.DocumentRequestType = 17,
                  i
                }
              ],
              cardCode: [
                function () {
                  return t.product.Code
                }
              ]
            }
          })
        },
        t.prototype.getPreviousStatements = function () {
          this.hideBtn = !0;
          var t = this;
          return this.ProductsService.getCardEStatements({
            ProductCode: t.product.Code,
            ProductTypeID: t.product.BankProduct.TypeID,
            ProductID: t.product.BankProduct.ProductID
          }).then(function (i) {
            i.ResultCode == 0 ? t.previousStatements = n.utils.isUndefinedOrNull(i.EStatements) ? [
            ] : i.EStatements : t.previousStatementsError = n.utils.isUndefinedOrNull(i.Error) ? 'System error' : i.Error.Message
          }).catch (function (n) {
            t.previousStatementsError = n.Error.Message
          })
        },
        t.$inject = [
          'estatementsResponse',
          'product',
          'cardstatementsResponse',
          'ProductsService',
          '$modal',
          'STRINGS'
        ],
        t
      }();
      n.loans.mainModule.controller('LoanEstatementsController', r)
    }) (t = n.loans || (n.loans = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function (t) {
      'use strict';
      t.mainModule.config(['$stateProvider',
      '$urlRouterProvider',
      function (t) {
        t.state(n.constants.stateNames.loanFileTransferState, {
          abstract: !0,
          url: '/fileTransfer',
          templateUrl: 'Templates/Features/Misc/fileTransfer',
          controller: 'FileTransferController as vm',
          resolve: {
            products: [
              'ProfileProductsService',
              function (t) {
                return t.getLoansByRequestType(n.server.ProductRequestType.LoansForFile)
              }
            ],
            fileType: function () {
              return 2
            }
          }
        }).state(n.constants.stateNames.loanFileTransferRequestState, {
          url: '/fileTransfer/request',
          templateUrl: 'Templates/Features/Misc/fileTransferRequest',
          controller: 'FileTransferRequestController as vm',
          resolve: {
            model: [
              'products',
              function (t) {
                var i = new n.model.TranferFileInfo;
                return i.CreditProducts = t,
                i.FileType = 2,
                i
              }
            ]
          }
        }).state(n.constants.stateNames.loanFileTransferDownloadState, {
          url: '/fileTransfer/download',
          templateUrl: 'Templates/Features/Misc/fileTransferDownload',
          controller: 'FileTransferDownloadController as vm',
          resolve: {
            model: [
              'products',
              function (t) {
                var i = new n.model.TranferFileInfo;
                return i.CreditProducts = t,
                i.FileType = 2,
                i
              }
            ]
          }
        })
      }
      ])
    }) (t = n.accounts || (n.accounts = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function () {
      var t = function () {
        function n(n, t) {
          this.securityService = n;
          this.errorCode = t
        }
        return n.prototype.determineSignOff = function () {
          this.errorCode == '4' && this.securityService.signOff()
        },
        n.$inject = [
          'SecurityService',
          'errorCode'
        ],
        n
      }();
      n.misc.mainModule.controller('TransitionErrorController', t)
    }) (t = n.misc || (n.misc = {
    }))
  }(alpha || (alpha = {
  })),
  function (n) {
    var t;
    (function () {
      var t = function () {
        function t(t, i, r, u, f, e, o, s, h) {
          var c,
          l;
          if (this.$scope = t, this.$state = i, this.appEventsService = r, this.$window = u, this.callingState = f, this.oAuthData = e, this.languageService = o, this.otherBankProductsService = s, this.stringService = h, this.IsBusy = !0, this.countDownMillisecondsForRedirection = 5000, c = this, e && f) {
            if (c.requestIntentId = e.requestIntentId, c.requestedBank = e.bank, c.requestedProductType = e.productType, c.requestedScope = e.scope, c.requestedProductCode = e.productCode, c.requestedProductIdentifier = e.productIdentifier, c.requestedOtherBankProductId = e.otherBankProductId, c.requestedServiceType = e.serviceRequested, c.callingJsController = e.callingJsController, c.otherBankProductTitle = e.productDescription, c.languageService.getLanguage().toUpperCase() == 'EN') switch (c.requestedProductType) {
              case 1:
                c.requestedProductTypeName = 'account';
                c.allProductsRequested = 'owned accounts';
                break;
              case 2:
                c.requestedProductTypeName = 'card';
                c.allProductsRequested = 'owned cards'
            } else switch (this.requestedProductType) {
              case 1:
                c.requestedProductTypeName = 'του λογαριασμού';
                c.allProductsRequested = 'των λογαριασμών σας';
                break;
              case 2:
                c.requestedProductTypeName = 'της κάρτας';
                c.allProductsRequested = 'των καρτών σας'
            }
            l = {
              RequestedBank: c.requestedBank,
              RequestedScope: c.requestedScope,
              RequestedProductType: c.requestedProductType,
              RequestedProductCode: c.requestedProductCode,
              RequestedProductId: c.requestedOtherBankProductId,
              RequestedServiceType: c.requestedServiceType,
              CallingStateUrl: c.callingState.URL,
              CallingStateName: f.Name,
              TimeStamp: Math.floor(Date.now()),
              CallingJsController: c.callingJsController,
              OtherBankProductDescription: c.otherBankProductTitle,
              RequestedProductIdentifier: c.requestedProductIdentifier
          };
          u.localStorage.setItem('OAuthRedirectInfoObject', JSON.stringify(l));
          c.otherBankProductsService.saveOAuthCallbackState(l).then(function (n) {
            switch (c.requestedBank) {
              case 1:
                var t = $('meta[name=PiraeusClientId]').attr('content'),
                i = $('meta[name=PiraeusRedirectUri]').attr('content'),
                r = $('meta[name=PiraeusAuthServerAuthorizeUrl]').attr('content');
                c.requestedBankName = c.languageService.getLanguage().toUpperCase() == 'EN' ? 'Piraeus Bank' : 'Τράπεζας Πειραιώς';
                c.redirectUrl = r + '?client_id=' + t + '&response_type=code&scope=' + c.requestedScope + '&redirect_uri=' + encodeURIComponent(i) + '&state=' + n.StateKey
            }
            setTimeout(function () {
              c.BeginOAuthDance()
            }, c.countDownMillisecondsForRedirection)
          },
          function (t) {
            c.IsBusy = !1;
            c.errorMessage = n.utils.isUndefinedOrNull(t.Error) ? c.stringService.systemError : t.Error.Message
          })
      }
  }
  return t.prototype.BeginOAuthDance = function () {
    this.IsBusy = !0;
    n.utils.isUndefinedOrNullorWhiteSpace(this.redirectUrl) || (this.$window.location.href = this.redirectUrl)
},
t.$inject = [
  '$scope',
  '$state',
  'AppEventsService',
  '$window',
  'callingState',
  'oAuthData',
  'LanguageService',
  'OtherBankProductsService',
  'STRINGS'
],
t
}();
n.oAuth.mainModule.controller('OAuthBeginController', t)
}) (t = n.oAuth || (n.oAuth = {
}))
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(),
function (n) {
var t;
(function (t) {
var u,
f,
i,
r,
e,
o,
s,
h,
c,
l,
a,
v,
y,
p,
w,
b;
t.mainModule = angular.module('alpha.overview', [
'alpha'
]);
u = function () {
function t(t, i, r, u, f, e, o, s, h) {
  var l = this,
  c;
  this.AppEventsService = t;
  this.ProfileProductsService = i;
  this.$scope = r;
  this.roleService = u;
  this.stateService = f;
  this.versionFilterService = e;
  this.localeService = o;
  this.StateHelperService = s;
  this.SecurityService = h;
  this.newReloadKey = uuid.v4();
  this.numberOfVisiblePies = 0;
  this.taxFreeInVersion = !1;
  this.campaign = 0;
  this.legalEntityHasExpired = !1;
  this.legalEntityAboutToExpire = !1;
  this.isPsd2OtherBankProductsFeatureEnabled = $('meta[name=EnablePsd2OtherBankProductsFeatureFlag]').attr('content') == 'True' || $('meta[name=EnablePsd2OtherBankProductsFeatureFlag]').attr('content') == 'true';
  c = this;
  this.SecurityService.getUserSessionInfo().then(function (n) {
    if (n.UserInfo != null && n.UserInfo.CompanyInfo != null) {
      var t = n.UserInfo.CompanyInfo.LegalEntityExpiryDate,
      i = t.indexOf('-') != - 1 ? t.replace(/-/g, '')  : t,
      u = new Date(parseInt(i.substring(0, 4)), parseInt(i.substring(4, 6)), parseInt(i.substring(6, 8))),
      f = new Date,
      e = u.getTime() - f.getTime(),
      r = Math.ceil(e / 86400000);
      c.legalEntityAboutToExpire = r > 0 && r < 60;
      c.legalEntityHasExpired = r <= 0
    }
  });
  c.showOtherBankProductsOverviewMsg = c.isPsd2OtherBankProductsFeatureEnabled;
  r.bannerKey = new Date;
  r.bannerKey < new Date(2017, 11, 8) ? (this.campaign = 1, r.bannerMenuPath = 'root.investments.e-timedeposit-bonus.newrequest({uid : vm.newReloadKey})')  : r.bannerKey < new Date(2018, 0, 6) ? (this.campaign = 2, r.bannerMenuPath = 'root.investments.e-timedeposit-bonus.newrequest({uid : vm.newReloadKey})')  : r.bannerKey < new Date(2018, 1, 1) && (this.campaign = 3, r.bannerMenuPath = 'root.transfers.new.intrabank');
  r.showCampaignBanner = this.roleService.IsRetail() && this.campaign > 0;
  r.role = u.getRoleString();
  n.utils.Intersect([u.getRolePermissions(),
  [
    'ViewAccounts',
    'ViewLoans',
    'ViewInvestments',
    'ViewCards'
  ]]).length || f.go(n.constants.stateNames.transfersJobIntrabank);
  c.roleService.IsRetail() && this.versionFilterService.IsInVersions(n.constants.versionFilters.TAX_FREE).then(function (n) {
    c.taxFreeInVersion = n
  });
  t.subscribe(n.common.services.AppEventsService.GraphDataUpdated_Event, function (n, t) {
    l.numberOfVisiblePies = t
  })
}
return t.prototype.closeBanner = function () {
  var n = angular.element('#BoBBanner');
  n.css('display', 'none')
},
t.prototype.fireDonationBannerRedirect = function () {
  var i = this,
  r = n.constants.constantAccounts.fireDonationAccount,
  t = {
  };
  t.CreditProduct = r;
  t.Type = 1;
  i.StateHelperService.go(i.$scope.bannerMenuPath, null, t)
},
t.prototype.hideOtherBankProductsMessage = function () {
  this.showOtherBankProductsOverviewMsg = !1
},
t.prototype.reloadKeyForNewRequest = function () {
  var n = this;
  this.newReloadKey = uuid.v4()
},
t.$inject = [
  'AppEventsService',
  'ProfileProductsService',
  '$scope',
  'RoleService',
  '$state',
  'VersionFilterService',
  'LanguageService',
  'StateHelperService',
  'SecurityService'
],
t
}();
n.overview.mainModule.controller('OverviewController', u);
f = function () {
function t(t, i, r, u) {
  this.AppEventsService = t;
  this.ProfileProductsService = i;
  this.$scope = r;
  this.roleService = u;
  this.productTypesRank = 0;
  this.loading = !1;
  this.noProducts = !1;
  var f = this,
  e = function () {
    f.productTypesRank != 0 && (f.graphRankClass = n.utils.numberToLiteral(f.productTypesRank) + '-graphs', t.publish(n.common.services.AppEventsService.GraphDataUpdated_Event, f.productTypesRank))
  };
  u.isAccessAllowed('ViewAccounts') && this.ProfileProductsService.getAccounts(!0).then(function (t) {
    if (f.accounts = [
    ], t.length > 0) {
      for (var i = 0; i < t.length; i++) !t[i].hasError && t[i].AmountInEUR != 0 && t[i].Uses.some(function (n) {
        return n === 3
      }) ? f.accounts.push(t[i])  : !t[i].hasError && t[i].Uses.some(function (n) {
        return n === 3
      }) && t[i].BankProduct && t[i].BankProduct.Details && t[i].BankProduct.Details.some(function (t) {
        return t.Name === n.server.DetailName.IS_OTHER_BANK_PRODUCT && t.Value === 'true'
      }) && (t[i].AmountInEUR = t[i].AvailableBalance, f.accounts.push(t[i]));
      f.loading = !1;
      f.accounts.length > 0 && f.productTypesRank++;
      e()
    } else f.noProducts = !0
  }, function () {
    f.loading = !1;
    f.noProducts = !0
  });
  u.isAccessAllowed('ViewCards') && this.ProfileProductsService.getCards(!0).then(function (t) {
    if (f.cards = [
    ], t.length > 0) {
      for (var i = 0; i < t.length; i++) t[i].AmountInEUR > 0 && t[i].IsMainCard && !t[i].hasError && !t[i].IsPrepaid ? f.cards.push(t[i])  : !t[i].hasError && t[i].Uses.some(function (n) {
        return n === 3
      }) && t[i].BankProduct && t[i].BankProduct.Details && t[i].BankProduct.Details.some(function (t) {
        return t.Name === n.server.DetailName.IS_OTHER_BANK_PRODUCT && t.Value === 'true'
      }) && (t[i].AmountInEUR = t[i].AvailableBalance, f.cards.push(t[i]));
      f.loading = !1;
      f.cards.length > 0 && f.productTypesRank++;
      e()
    } else f.noProducts = !0
  }, function () {
    f.loading = !1;
    f.noProducts = !0
  });
  u.isAccessAllowed('ViewLoans') && this.ProfileProductsService.getLoans(!0).then(function (n) {
    if (f.loans = [
    ], n.length > 0) {
      for (var t = 0; t < n.length; t++) n[t].AmountInEUR > 0 && !n[t].hasError && f.loans.push(n[t]);
      f.loading = !1;
      f.loans.length > 0 && f.productTypesRank++;
      e()
    } else f.noProducts = !0
  }, function () {
    f.loading = !1;
    f.noProducts = !0
  });
  u.isAccessAllowed('ViewInvestments') && this.ProfileProductsService.getInvestments(!0).then(function (n) {
    if (f.investments = [
    ], n.length > 0) {
      for (var t = 0; t < n.length; t++) n[t].hasError || n[t].IsTimeDeposit && n[t].AvailableBalance == 0 || f.investments.push(n[t]);
      f.loading = !1;
      f.investments.length > 0 && f.productTypesRank++;
      e()
    } else f.noProducts = !0
  }, function () {
    f.loading = !1;
    f.noProducts = !0
  })
}
return t.$inject = [
  'AppEventsService',
  'ProfileProductsService',
  '$scope',
  'RoleService'
],
t
}();
n.overview.mainModule.controller('GraphsOverviewController', f);
i = function () {
function t(n, t, i) {
  this.ProfileProductsService = n;
  this.roleService = i;
  this.collapsed = !1;
  this.hasProducts = !0;
  this.hasErrors = !1;
  this.productbalanceSum = 0;
  this.loading = !0;
  this.reloadData()
}
return t.prototype.reloadData = function () {
  this.loadProducts();
  this.updateUI()
},
t.prototype.updateUI = function () {
  var t = this;
  this.productsPromise.then(function (i) {
    t.hasErrors = !1;
    n.utils.isUndefinedOrNull(i) || i.length <= 0 ? (t.collapsed = !0, t.hasProducts = !1, t.loading = !1)  : (t.products = i, t.calculateSum(), t.productsLoaded())
  }, function () {
    t.collapsed = !0;
    t.hasProducts = !1;
    t.loading = !1;
    t.hasErrors = !0
  })
},
t.prototype.calculateSum = function () {
  throw Error('please use a derived instance');
},
t.prototype.productsLoaded = function () {
},
t.prototype.loadProducts = function () {
  throw Error('please use a derived instance');
},
t
}();
t.ProductCategoryOverviewController = i;
r = function (t) {
function i(n, i) {
  var r = t.call(this, n, i) || this;
  return r.ProfileProductsService = n,
  r.collapsed = !1,
  r.hasProducts = !0,
  r.loading = !0,
  r
}
return __extends(i, t),
i.prototype.updateUI = function () {
  var t = this;
  this.productsPromise.then(function (i) {
    n.utils.isUndefinedOrNull(i) || i.length <= 0 ? (t.collapsed = !0, t.hasProducts = !1, t.loading = !1)  : (t.products = i.filter(function (n) {
      return !(n.IsTimeDeposit && n.AvailableBalance == 0)
    }), t.calculateSum())
  }, function () {
    t.collapsed = !0;
    t.hasProducts = !1;
    t.loading = !1
  })
},
i.$inject = [
  'ProfileProductsService',
  'STRINGS'
],
i
}(i);
n.overview.mainModule.controller('OverviewForInvestmentController', r);
e = function (t) {
function i(i, r, u, f, e, o, s, h) {
  var c = t.call(this, i, r, u) || this,
  a,
  v,
  y,
  l;
  if (c.ProfileProductsService = i, c.stringservice = r, c.roleService = u, c.otherBankProductsService = f, c.StateHelperService = e, c.AppEventsService = o, c.SharedDataService = s, c.$state = h, c.isBusyMap = {
  }, c.hasErrorMap = {
  }, c.Model = {
    HasErrors: !1,
    ErrorMessage: '',
    HasFatalError: !1
  }, c.ClearErrorMessages(), c.products) for (a = 0, v = c.products; a < v.length; a++) y = v[a],
  c.isBusyMap[y.Code] = {
    isBusy: !1
  },
  c.hasErrorMap[y.Code] = {
    hasError: !1
  };
  if (h.params && h.params.isOauthCallbackRedirect) {
    if (l = s.GetControllerData(n.server.Controllers.OtherBankAccountsOverviewController, n.common.services.AppEventsService.PSD2ProductBalanceServiceTrigger), l) return console.log('data fetched: ', l),
    c.reloadAccountBalance(l.RequestedBank, l.RequestedProductCode, l.RequestedProductId, l.RequestedProductIdentifier),
    c;
    if (l = s.GetControllerData(n.server.Controllers.OtherBankAccountsOverviewController, n.common.services.AppEventsService.PSD2ProductDetailsServiceTrigger), l) return c.reRegisterOtherBankAccount(l.RequestedProductCode, null, l.RequestedBank, l.OtherBankProductDescription),
    c
  }
  return c
}
return __extends(i, t),
i.prototype.reRegisterOtherBankAccount = function (t, i, r, u) {
  var f = this,
  e;
  f.isBusyMap[t] = {
    isBusy: !0
  };
  i != null && i.BankProduct.Details && (e = i.BankProduct.Details.filter(function (t) {
    return t.Name === n.server.DetailName.PRODUCT_BANK_NAME
  }), e.length > 0 && (r = parseInt(e[0].Value)));
  f.otherBankProductsService.getProductDetails(r, 1, 3, t, null).then(function (i) {
    if (i.ResultCode === 0 && i.Error == null) if (f.ClearErrorMessages(), i.NeedsNewAccessToken) {
      var e = {
        requestIntentId: i.RequestIntentId,
        bank: r,
        productType: 1,
        scope: i.ScopeNeeded,
        productCode: t,
        serviceRequested: 3,
        callingJsController: n.server.Controllers.OtherBankAccountsOverviewController,
        productDescription: u
      };
      f.StateHelperService.go(n.constants.stateNames.oAuthDanceBeginState, null, e)
    } else f.otherBankProductsService.finishOtherBankMultipleProductsAddition(r, 1, i.OtherBankProductDetails).then(function () {
      f.hasErrorMap[t] = {
        hasError: !1
      }
    }).catch (function (n) {
      console.log(n)
    }).finally (function () {
      f.isBusyMap[t] = {
        isBusy: !1
      }
    }),
    f.AppEventsService.publish(n.common.services.AppEventsService.PSD2ClearLocalStorageTrigger);
     else f.Model.HasErrors = !0,
    f.Model.ErrorMessage = n.utils.getErrorMsg(i.Error);
    console.log(i)
  }).catch (function (n) {
    console.log(n)
  }).finally (function () {
    f.isBusyMap[t] = {
      isBusy: !1
    }
  })
},
i.prototype.reloadAccountBalance = function (t, i, r, u) {
  var f = this;
  f.isBusyMap[i] = {
    isBusy: !0
  };
  f.otherBankProductsService.getProductBalance(t, 1, i, r, u).then(function (e) {
    var s,
    o;
    e.ResultCode === 0 && e.Error == null ? (f.ClearErrorMessages(), e.NeedsNewAccessToken ? (s = {
      requestIntentId: e.RequestIntentId,
      bank: t,
      productType: 1,
      scope: e.ScopeNeeded,
      productCode: i,
      otherBankProductId: r,
      serviceRequested: 1,
      callingJsController: n.server.Controllers.OtherBankAccountsOverviewController,
      productIdentifier: u
    }, f.StateHelperService.go(n.constants.stateNames.oAuthDanceBeginState, null, s))  : (e.OtherBankProductBalances && e.OtherBankProductBalances.length != 0 && (o = e.OtherBankProductBalances[0], setTimeout(function () {
      var t,
      r,
      n;
      if (f.products) for (t = 0, r = f.products; t < r.length; t++) n = r[t],
      n.Code === i && (n.BankProduct.OtherBankProdLastUpdateOn = o.LastUpdatedOn, n.BankProduct.AvailableBalance = o.AvailableBalance.Value, n.BankProduct.AvailableBalanceSign = o.AvailableBalance.Sign)
    }, 0)), f.AppEventsService.publish(n.common.services.AppEventsService.PSD2ClearLocalStorageTrigger)))  : (f.Model.HasErrors = !0, f.Model.ErrorMessage = n.utils.getErrorMsg(e.Error))
  }, function (t) {
    f.hasErrorMap[i] = {
      hasError: !0
    };
    f.Model.HasFatalError = !0;
    f.Model.ErrorMessage = n.utils.getErrorMsg(t)
  }).finally (function () {
    f.isBusyMap[i] = {
      isBusy: !1
    }
  })
},
i.prototype.loadProducts = function () {
  var t = this,
  i = !this.roleService.IsRetail();
  this.productsPromise = this.ProfileProductsService.getAccounts(!0, i).then(function (i) {
    return i.filter(function (i) {
      return i.BankProduct && i.BankProduct.Details ? i.BankProduct.Details.some(function (r) {
        return t.hasErrorMap[i.BankProduct.Code] = {
          hasError: i.BankProduct.OtherBankProductId === undefined
        },
        r.Name === n.server.DetailName.IS_OTHER_BANK_PRODUCT && r.Value === 'true'
      })  : !1
    })
  })
},
i.prototype.calculateSum = function () {
  var n = 0;
  this.products.map(function (t) {
    t.hasError || (n += t.AmountInEUR)
  });
  this.productbalanceSum = Math.abs(n);
  this.productbalanceSumSign = this.stringservice.creditSign;
  n < 0 && (this.productbalanceSumSign = this.stringservice.debitSign);
  this.loading = !1
},
i.prototype.ClearErrorMessages = function () {
  this.Model.HasErrors = !1;
  this.Model.HasFatalError = !1;
  this.Model.ErrorMessage = null
},
i.$inject = [
  'ProfileProductsService',
  'STRINGS',
  'RoleService',
  'OtherBankProductsService',
  'StateHelperService',
  'AppEventsService',
  'SharedDataService',
  '$state'
],
i
}(i);
n.overview.mainModule.controller('OtherBankAccountsOverviewController', e);
o = function (t) {
function i(n, i, r) {
  var u = t.call(this, n, i, r) || this;
  return u.ProfileProductsService = n,
  u.stringservice = i,
  u.roleService = r,
  u.isPsd2OtherBankProductsFeatureEnabled = $('meta[name=EnablePsd2OtherBankProductsFeatureFlag]').attr('content') == 'True' || $('meta[name=EnablePsd2OtherBankProductsFeatureFlag]').attr('content') == 'true',
  u
}
return __extends(i, t),
i.prototype.loadProducts = function () {
  var t = !this.roleService.IsRetail();
  this.productsPromise = this.ProfileProductsService.getAccounts(!0, t).then(function (t) {
    return t.filter(function (t) {
      return t.Uses.some(function (i) {
        var r = !1;
        return t.BankProduct && t.BankProduct.Details && t.BankProduct.Details.some(function (t) {
          return t.Name === n.server.DetailName.IS_OTHER_BANK_PRODUCT && t.Value === 'true'
        }) && (r = !0),
        i === 3 && !r
      })
    })
  })
},
i.prototype.calculateSum = function () {
  var n = 0;
  this.products.map(function (t) {
    t.hasError || (n += t.AmountInEUR)
  });
  this.productbalanceSum = Math.abs(n);
  this.productbalanceSumSign = this.stringservice.creditSign;
  n < 0 && (this.productbalanceSumSign = this.stringservice.debitSign);
  this.loading = !1
},
i.$inject = [
  'ProfileProductsService',
  'STRINGS',
  'RoleService'
],
i
}(i);
n.overview.mainModule.controller('AccountsOverviewController', o);
s = function (t) {
function i(i, r, u, f, e, o, s) {
  var h = t.call(this, i, r) || this,
  l,
  a,
  v,
  c;
  if (h.ProfileProductsService = i, h.stringservice = r, h.otherBankProductsService = u, h.StateHelperService = f, h.AppEventsService = e, h.SharedDataService = o, h.$state = s, h.isBusyMap = {
  }, h.hasErrorMap = {
  }, h.Model = {
    HasErrors: !1,
    ErrorMessage: '',
    HasFatalError: !1
  }, h.ClearErrorMessages(), h.products) for (l = 0, a = h.products; l < a.length; l++) v = a[l],
  h.isBusyMap[v.Code] = {
    isBusy: !1
  },
  h.hasErrorMap[v.Code] = {
    hasError: !1
  };
  if (s.params && s.params.isOauthCallbackRedirect) {
    if (c = o.GetControllerData(n.server.Controllers.OtherBankCardsOverviewController, n.common.services.AppEventsService.PSD2ProductBalanceServiceTrigger), c) return console.log('data fetched: ', c),
    h.reloadCardBalance(c.RequestedBank, c.RequestedProductCode, c.RequestedProductId, c.RequestedProductIdentifier),
    h;
    if (c = o.GetControllerData(n.server.Controllers.OtherBankCardsOverviewController, n.common.services.AppEventsService.PSD2ProductDetailsServiceTrigger), c) return h.reRegisterOtherBankAccount(c.RequestedProductCode, null, c.RequestedBank, c.OtherBankProductDescription),
    h
  }
  return h
}
return __extends(i, t),
i.prototype.reRegisterOtherBankAccount = function (t, i, r, u) {
  var f = this,
  e;
  f.isBusyMap[t] = {
    isBusy: !0
  };
  i != null && i.BankProduct.Details && (e = i.BankProduct.Details.filter(function (t) {
    return t.Name === n.server.DetailName.PRODUCT_BANK_NAME
  }), e.length > 0 && (r = parseInt(e[0].Value)));
  f.otherBankProductsService.getProductDetails(r, 2, 3, t, null).then(function (i) {
    if (i.ResultCode === 0 && i.Error == null) if (f.ClearErrorMessages(), i.NeedsNewAccessToken) {
      var e = {
        requestIntentId: i.RequestIntentId,
        bank: r,
        productType: 2,
        scope: i.ScopeNeeded,
        productCode: t,
        serviceRequested: 3,
        callingJsController: n.server.Controllers.OtherBankCardsOverviewController,
        productDescription: u
      };
      f.StateHelperService.go(n.constants.stateNames.oAuthDanceBeginState, null, e)
    } else i.OtherBankProductDetails[0].OtherBankProductCode = t,
    f.otherBankProductsService.finishOtherBankMultipleProductsAddition(r, 2, i.OtherBankProductDetails).then(function () {
      f.hasErrorMap[t] = {
        hasError: !1
      }
    }).catch (function (n) {
      console.log(n)
    }).finally (function () {
      f.isBusyMap[t] = {
        isBusy: !1
      }
    }),
    f.AppEventsService.publish(n.common.services.AppEventsService.PSD2ClearLocalStorageTrigger);
     else f.Model.HasErrors = !0,
    f.Model.ErrorMessage = n.utils.getErrorMsg(i.Error);
    console.log(i)
  }).catch (function (n) {
    console.log(n)
  }).finally (function () {
    f.isBusyMap[t] = {
      isBusy: !1
    }
  })
},
i.prototype.reloadCardBalance = function (t, i, r, u) {
  var f = this;
  f.isBusyMap[i] = {
    isBusy: !0
  };
  f.otherBankProductsService.getProductBalance(t, 2, i, r, u).then(function (e) {
    var s,
    o;
    e.ResultCode === 0 && e.Error == null ? (f.ClearErrorMessages(), e.NeedsNewAccessToken ? (s = {
      requestIntentId: e.RequestIntentId,
      bank: t,
      productType: 2,
      scope: e.ScopeNeeded,
      productCode: i,
      otherBankProductId: r,
      serviceRequested: 1,
      callingJsController: n.server.Controllers.OtherBankCardsOverviewController,
      productIdentifier: u
    }, f.StateHelperService.go(n.constants.stateNames.oAuthDanceBeginState, null, s))  : (e.OtherBankProductBalances && e.OtherBankProductBalances.length != 0 && (o = e.OtherBankProductBalances[0], setTimeout(function () {
      var t,
      r,
      n;
      if (f.products) for (t = 0, r = f.products; t < r.length; t++) n = r[t],
      n.Code === i && (n.BankProduct.OtherBankProdLastUpdateOn = o.LastUpdatedOn, n.BankProduct.CurrentBalance = o.AvailableBalance.Value, n.BankProduct.CurrentBalanceSign = o.AvailableBalance.Sign)
    }, 0)), f.AppEventsService.publish(n.common.services.AppEventsService.PSD2ClearLocalStorageTrigger)))  : (f.Model.HasErrors = !0, f.Model.ErrorMessage = n.utils.getErrorMsg(e.Error))
  }, function (t) {
    f.Model.HasFatalError = !0;
    f.Model.ErrorMessage = n.utils.getErrorMsg(t)
  }).finally (function () {
    f.isBusyMap[i] = {
      isBusy: !1
    }
  })
},
i.prototype.loadProducts = function () {
  var t = this;
  this.productsPromise = this.ProfileProductsService.getCards(!0).then(function (i) {
    return i.filter(function (i) {
      return i.BankProduct && i.BankProduct.Details ? i.BankProduct.Details.some(function (r) {
        return t.hasErrorMap[i.BankProduct.Code] = {
          hasError: i.BankProduct.OtherBankProductId === undefined
        },
        r.Name === n.server.DetailName.IS_OTHER_BANK_PRODUCT && r.Value === 'true'
      })  : !1
    })
  })
},
i.prototype.productsLoaded = function () {
  this.products.map(function (t) {
    var i = !t.IsPrepaid && !t.IsDebit;
    t.LargeLayout = i && t.HasLoyalty && t.hasAvailableBalance && t.IsMainCard && !t.hasError && t.LoyaltyScheme != 1;
    n.utils.isUndefinedOrNull(t.LargeLayout) && (t.LargeLayout = !1)
  })
},
i.prototype.calculateSum = function () {
  var n = 0;
  this.products.map(function (t) {
    t.AmountInEUR > 0 && (t.hasError || (n += t.AmountInEUR))
  });
  this.productbalanceSum = Math.abs(n);
  this.productbalanceSumSign = this.stringservice.debitSign;
  this.loading = !1
},
i.prototype.ClearErrorMessages = function () {
  this.Model.HasErrors = !1;
  this.Model.HasFatalError = !1;
  this.Model.ErrorMessage = null
},
i.$inject = [
  'ProfileProductsService',
  'STRINGS',
  'OtherBankProductsService',
  'StateHelperService',
  'AppEventsService',
  'SharedDataService',
  '$state'
],
i
}(i);
n.overview.mainModule.controller('OtherBankCardsOverviewController', s);
h = function (t) {
function i(n, i, r) {
  var u = t.call(this, n, i, r) || this;
  return u.ProfileProductsService = n,
  u.stringservice = i,
  u.RoleService = r,
  u.isPsd2OtherBankProductsFeatureEnabled = $('meta[name=EnablePsd2OtherBankProductsFeatureFlag]').attr('content') == 'True' || $('meta[name=EnablePsd2OtherBankProductsFeatureFlag]').attr('content') == 'true',
  u.isRetailUser = u.RoleService.IsRetail(),
  u
}
return __extends(i, t),
i.prototype.loadProducts = function () {
  this.productsPromise = this.ProfileProductsService.getCards(!0);
  this.productsPromise = this.ProfileProductsService.getCards(!0).then(function (t) {
    return t.filter(function (t) {
      var i = !1;
      return t.BankProduct && t.BankProduct.Details && t.BankProduct.Details.some(function (t) {
        return t.Name === n.server.DetailName.IS_OTHER_BANK_PRODUCT && t.Value === 'true'
      }) && (i = !0),
      !i
    })
  })
},
i.prototype.productsLoaded = function () {
  this.products.map(function (t) {
    var i = !t.IsPrepaid && !t.IsDebit;
    t.LargeLayout = i && t.HasLoyalty && t.hasAvailableBalance && t.IsMainCard && !t.hasError && t.LoyaltyScheme != 1;
    n.utils.isUndefinedOrNull(t.LargeLayout) && (t.LargeLayout = !1)
  })
},
i.prototype.calculateSum = function () {
  var n = 0;
  this.products.map(function (t) {
    t.AmountInEUR > 0 && t.IsMainCard && !t.IsPrepaid && (t.hasError || (n += t.AmountInEUR))
  });
  this.productbalanceSum = Math.abs(n);
  this.productbalanceSumSign = this.stringservice.debitSign;
  this.loading = !1
},
i.$inject = [
  'ProfileProductsService',
  'STRINGS',
  'RoleService'
],
i
}(i);
n.overview.mainModule.controller('CardsOverviewController', h);
c = function (n) {
function t(t, i) {
  var r = n.call(this, t, i) || this;
  return r.ProfileProductsService = t,
  r.stringservice = i,
  r
}
return __extends(t, n),
t.prototype.loadProducts = function () {
  this.productsPromise = this.ProfileProductsService.getLoans(!0)
},
t.prototype.calculateSum = function () {
  var n = 0;
  this.products.map(function (t) {
    t.AmountInEUR > 0 && (t.hasError || (n += t.AmountInEUR))
  });
  this.productbalanceSum = Math.abs(n);
  this.productbalanceSumSign = this.stringservice.debitSign;
  this.loading = !1
},
t.$inject = [
  'ProfileProductsService',
  'STRINGS'
],
t
}(i);
n.overview.mainModule.controller('LoansOverviewController', c);
l = function (n) {
function t(t, i) {
  var r = n.call(this, t, i) || this;
  return r.ProfileProductsService = t,
  r.stringservice = i,
  r
}
return __extends(t, n),
t.prototype.loadProducts = function () {
  this.productsPromise = this.ProfileProductsService.getInvestments(!0)
},
t.prototype.calculateSum = function () {
  var n = 0;
  this.products.map(function (t) {
    t.hasError || (n += t.AmountInEUR)
  });
  this.productbalanceSum = Math.abs(n);
  this.productbalanceSumSign = n < 0 ? this.stringservice.debitSign : this.stringservice.creditSign;
  this.loading = !1
},
t.$inject = [
  'ProfileProductsService',
  'STRINGS'
],
t
}(r);
n.overview.mainModule.controller('InvestmentsOverviewController', l);
a = function () {
function t(t) {
  this.myBonus = t;
  this.showPoints = !1;
  this.myBonusNotEnabled = !1;
  n.utils.isUndefinedOrNull(this.myBonus) || this.myBonus.ResultCode != 0 ? this.myBonusNotEnabled = !0 : (this.bonusPoints = parseInt(this.myBonus.TotalPoints), isNaN(this.bonusPoints) || (this.bonusPoints == 0 && (n.utils.isUndefinedOrNull(this.myBonus.AccountCards) || !n.utils.isUndefinedOrNull(this.myBonus.AccountCards) && this.myBonus.AccountCards.length == 0) ? this.myBonusNotEnabled = !0 : this.showPoints = !0))
}
return t.$inject = [
  'myBonus'
],
t
}();
n.overview.mainModule.controller('MyBonusOverviewController', a);
v = function () {
function n(n, t) {
  if (this.QueriesService = n, this.taxEntries = t, this.taxFreeTotal = 0, t.length > 0) {
    var r = this,
    u = (new Date).getFullYear(),
    i = this.taxEntries.filter(function (n) {
      return n.RefYear == u
    });
    i.length > 0 && i[0].TaxEntry.forEach(function (n) {
      r.taxFreeTotal += n.Total
    })
  }
}
return n.$inject = [
  'QueriesService',
  'taxEntries'
],
n
}();
n.overview.mainModule.controller('MyTaxFreeOverviewController', v);
y = function () {
function t(t) {
  this.limits = t;
  this.showMyLimits = !0;
  n.utils.isUndefinedOrNull(t) && (this.showMyLimits = !1)
}
return t.$inject = [
  'limits'
],
t
}();
n.overview.mainModule.controller('MyLimitsOverviewController', y);
p = function () {
function t(t, i, r, u, f, e, o, s) {
  this.StateHelperService = t;
  this.modalService = i;
  this.QueriesService = r;
  this.profileProductsService = u;
  this.STRINGS = f;
  this.lookupsService = e;
  this.roleService = o;
  this.menuItemsService = s;
  var h = this,
  c = new n.common.services.TransferTransactionActionsService(u, f, e, s);
  u.getTransactionTemplates(0).then(function (t) {
    if (t.ReplyRecords > 0) {
      t.Templates.sort(function (n, t) {
        return n.Priority < t.Priority ? - 1 : n.Priority > t.Priority ? 1 : 0
      });
      var i = [
      ];
      t.Templates.map(function (t) {
        var r = new n.model.MyTransferTemplatesBase(t);
        c.decorateTransactionTemplateViewModel(r, t);
        i.push(r)
      });
      h.Model = o.IsRetail() ? i.splice(0, 5)  : i.splice(0, 10)
    } else h.Model = [
    ]
  }, function () {
    h.Model = [
    ]
  })
}
return t.prototype.OpenModal = function () {
  var n = this,
  t = n.modalService.open({
    templateUrl: 'Templates/Features/Overview/myTransfersHelpModal',
    controller: 'OverviewHelpModalController as vm',
    size: 'sm',
    windowClass: 'custom'
  })
},
t.prototype.ReExecute = function (n) {
  var t = n.Actions.filter(function (n) {
    return n.titleResourceKey ? n.titleResourceKey == 'burger.ReExecuteTransfer' : !1
  }) [0],
  i;
  t && (i = angular.copy(t.data), this.StateHelperService.go(t.stateName, t.stateParams, i, t.stateOptions))
},
t.$inject = [
  'StateHelperService',
  '$modal',
  'QueriesService',
  'ProfileProductsService',
  'STRINGS',
  'LookupsService',
  'RoleService',
  'MenuItemsService'
],
t
}();
n.overview.mainModule.controller('MyTransfersOverviewController', p);
w = function () {
function t(t, i, r, u, f, e, o, s, h) {
  this.StateHelperService = t;
  this.modalService = i;
  this.QueriesService = r;
  this.profileProductsService = u;
  this.STRINGS = f;
  this.lookupsService = e;
  this.$q = o;
  this.productMatchingService = s;
  var c = this,
  l = this.profileProductsService.getCardsByRequestType(n.server.ProductRequestType.CardsForPayment),
  a = this.profileProductsService.getCardsByRequestType(n.server.ProductRequestType.INTERBANK_CARDS),
  v = this.profileProductsService.getLoansByRequestType(n.server.ProductRequestType.LoansForPayment).then(function (t) {
    return t.filter(function (t) {
      return t.BankProduct.TypeID != n.constants.general.consumerLoanProductTypeId && t.BankProduct.RequestTypes.indexOf(n.server.ProductRequestType.MortgageEnterpriseLoansForPayment) < 0
    })
  }),
  y = this.lookupsService.getPersonalConsumerLoans(),
  p = this.profileProductsService.getLoansByRequestType(n.server.ProductRequestType.MortgageEnterpriseLoansForPayment);
  c.$q.all({
    cards: l,
    interbankCards: a,
    alphaLoans: v,
    consumerLoans: y,
    mortgageEnterpriseLoans: p
  }).then(function (t) {
    c.paymentTypes = c.lookupsService.getPaymentTypes().then(function (i) {
      var r = new n.common.services.PaymentTransactionActionsService(c.profileProductsService, c.STRINGS, i, t.cards, t.interbankCards, t.alphaLoans, t.consumerLoans, t.mortgageEnterpriseLoans, s, h);
      c.profileProductsService.getTransactionTemplates(1).then(function (u) {
        var o,
        f;
        if (u.ReplyRecords > 0) {
          u.ReplyRecords > 1 && u.Templates.sort(function (n, t) {
            return n.Priority < t.Priority ? - 1 : n.Priority > t.Priority ? 1 : 0
          });
          o = [
          ];
          u.Templates.map(function (u) {
            var e;
            u.TransactionType == 13 && u.Transaction.CreditProductTypeID == 10179;
            var f = null,
            s = t.cards.concat(t.interbankCards).concat(t.alphaLoans).concat(t.consumerLoans),
            h = c.productMatchingService.match(s, u.Transaction.CreditProduct, u.Transaction.CreditProductID);
            n.utils.isUndefinedOrNull(u.Transaction.CreditProductTypeID) || h ? (f = new n.model.MyPaymentsTemplatesBase(u, i, t.cards, t.interbankCards, t.alphaLoans, t.consumerLoans), r.decorateTransactionTemplateViewModel(f), o.push(f))  : (e = i.filter(function (n) {
              return n.Item.ProductTypeId == u.Transaction.CreditProductTypeID
            }) [0], e && e.IsVisible && (f = new n.model.MyPaymentsTemplatesBase(u, i, t.cards, t.interbankCards, t.alphaLoans, t.consumerLoans), r.decorateTransactionTemplateViewModel(f), o.push(f)))
          });
          var s = [
          ],
          h = [
          ],
          e = o;
          for (f = 0; f < e.length; f++) {
            if (s.length == 5) break;
            h.indexOf(e[f].Template.Transaction.CreditProductType) == - 1 && (h.push(e[f].Template.Transaction.CreditProductType), s.push(e[f]))
          }
          s.map(function (n) {
            n.CountTemplates = 0;
            e.map(function (t) {
              n.Template.Transaction.Title = n.Template.Description;
              n.Template.Transaction.CreditProductType == t.Template.Transaction.CreditProductType && n.CountTemplates++;
              var r;
              r = i.filter(function (t) {
                if (t.Item.ProductTypeId) return t.Item.ProductTypeId == n.Template.Transaction.CreditProductTypeID
              });
              r.length > 0 ? r[0].Item.FixedCodePayment && (n.Template.Transaction.Title = n.Template.Transaction.CreditProductType)  : n.CountTemplates = 0
            })
          });
          c.Model = s
        } else c.Model = [
        ]
      })
    })
  })
}
return t.prototype.OpenModal = function () {
  var n = this,
  t = n.modalService.open({
    templateUrl: 'Templates/Features/Overview/myPaymentsHelpModal',
    controller: 'OverviewHelpModalController as vm',
    size: 'sm',
    windowClass: 'custom'
  })
},
t.prototype.ReExecute = function (n) {
  var t = n.Actions.filter(function (n) {
    return n.titleResourceKey ? n.titleResourceKey == 'burger.ReExecutePayment' : !1
  }) [0],
  i;
  t && (i = angular.copy(t.data), n.CountTemplates > 1 && (i.IsFromOverview = !0), this.StateHelperService.go(t.stateName, t.stateParams, i, t.stateOptions))
},
t.$inject = [
  'StateHelperService',
  '$modal',
  'QueriesService',
  'ProfileProductsService',
  'STRINGS',
  'LookupsService',
  '$q',
  'ProductMatchingService',
  'MenuItemsService'
],
t
}();
n.overview.mainModule.controller('MyPaymentsOverviewController', w);
b = function () {
function n(n, t) {
  var i = this;
  this.$modalInstance = n;
  this.stateService = t;
  this.closeModal = function () {
    i.$modalInstance.dismiss()
  };
  this.GoToPaymentsHistory = function () {
    i.stateService.go('root.payments.history');
    i.$modalInstance.dismiss()
  };
  this.GoToTransfersHistory = function () {
    i.stateService.go('root.transfers.history');
    i.$modalInstance.dismiss()
  }
}
return n.$inject = [
  '$modalInstance',
  '$state'
],
n
}();
n.overview.mainModule.controller('OverviewHelpModalController', b)
}) (t = n.overview || (n.overview = {
}))
}(alpha || (alpha = {
})),
function (n) {
var t;
(function (t) {
t.mainModule.config(['$stateProvider',
'$urlRouterProvider',
function (t) {
t.state(n.constants.stateNames.rootState, {
  url: '/overview',
  views: {
    '': {
      templateUrl: 'Templates/Features/Overview/overview',
      controller: 'OverviewController as vm'
    },
    'graphs@root.overview': {
      templateUrl: 'Templates/Features/Overview/graphs',
      controller: 'GraphsOverviewController as vm'
    },
    'accounts@root.overview': {
      templateUrl: 'Templates/Features/Overview/accounts',
      controller: 'AccountsOverviewController as vm'
    },
    'cards@root.overview': {
      templateUrl: 'Templates/Features/Overview/cards',
      controller: 'CardsOverviewController as vm'
    },
    'loans@root.overview': {
      templateUrl: 'Templates/Features/Overview/loans',
      controller: 'LoansOverviewController as vm'
    },
    'investments@root.overview': {
      templateUrl: 'Templates/Features/Overview/investments',
      controller: 'InvestmentsOverviewController as vm'
    },
    'quickAccess@root.overview': {
      templateUrl: 'Templates/Features/Overview/quickAccess'
    }
  },
  resolve: {
    userInfo: [
      'SecurityService',
      function (n) {
        return n.getUserSessionInfo()
      }
    ]
  }
})
}
])
}) (t = n.overview || (n.overview = {
}))
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(),
function (n) {
var t;
(function (t) {
var r = function (t) {
function i(i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k, d, g, nt, tt, it) {
  var rt = t.call(this, r, f) || this,
  et,
  ft,
  ut,
  ot;
  return rt.stateParamsService = i,
  rt.scope = r,
  rt.stateService = u,
  rt.$injector = f,
  rt.modalService = e,
  rt.product = o,
  rt.productTypeFamily = s,
  rt.productTypeScope = h,
  rt.profileProductsService = c,
  rt.greekBanks = l,
  rt.loanTypes = a,
  rt.countries = v,
  rt.productsService = y,
  rt.stringsService = p,
  rt.queriesService = w,
  rt.StateHelperService = b,
  rt.AppEventsService = k,
  rt.$window = d,
  rt.regularExpressionProvider = g,
  rt.roleService = nt,
  rt.userSessionInfo = tt,
  rt.otpHandler = it,
  rt.isRetailUserWithOtpEnabled = !1,
  rt.isRetailUserWithNoOtpEnabled = !1,
  rt.message = '',
  rt.afterBankApproval = !1,
  rt.isDebitCard = !1,
  rt.disabledUses = !1,
  rt.keepOtpHandlerAlive = Boolean(rt.otpHandler),
  rt.otpHandler || (et = f.get('OtpHandlerService'), rt.otpHandler = et.retrieveHandler(4)),
  nt.IsIndividualUser() || tt.OTPStatus != 2 || (rt.isCorporateWithNoOtpEnabled = !0),
  rt.currentState = u.current.name,
  rt.productTypeFamilyString = n.server.ProductTypeFamily[rt.productTypeFamily].toLowerCase(),
  rt.productTypeScopeString = n.server.ProductTypeScope[rt.productTypeScope].toLowerCase(),
  rt.showOPT = nt.getRole() != 10,
  rt.model = new n.model.AddProductViewModel,
  rt.model.product = rt.product,
  rt.model.selectedCountry = null,
  rt.model.ibanValidationResult = {
  },
  rt.model.comesFromSuccessfullTransactionScreen = !1,
  ft = rt.StateHelperService.getStateData(),
  ft && (rt.model = ft, rt.model.product.Uses = rt.model.product.BankProduct.Uses),
  rt.isAlpha = rt.productTypeScope == n.server.ProductTypeScope.Local,
  rt.isNational = rt.productTypeScope == n.server.ProductTypeScope.National,
  rt.isInter = rt.productTypeScope == n.server.ProductTypeScope.International,
  rt.isAccount = rt.productTypeFamily == n.server.ProductTypeFamily.Account,
  rt.isCard = rt.productTypeFamily == n.server.ProductTypeFamily.Card,
  rt.isLoan = rt.productTypeFamily == n.server.ProductTypeFamily.Loan,
  rt.isInvestment = rt.productTypeFamily == n.server.ProductTypeFamily.Investment,
  rt.disabledUses = !rt.isAlpha || rt.isInvestment,
  rt.isAccount && !rt.isAlpha && (rt.model.product.BankProduct.Uses.push(1), rt.model.productValidationResult.ValidUses = [
    1
  ]),
  rt.isAccount || rt.isAlpha || rt.model.product.BankProduct.Uses.push(4),
  rt.model.product.BankProduct.IsAlphaBankProduct = rt.isAlpha,
  rt.model.product.BankProduct.IsPreferred = !1,
  ut = rt,
  rt.preferredCount = 0,
  rt.profileProductsService.getPreferredProductsCount(o.CategoryGroupType).then(function (n) {
    ut.preferredCount = n
  }),
  rt.investmentTypes = [
    {
      TypeName: ut.stringsService['wizard.addInvestment.mutual'],
      TypeID: 10008,
      RequiresOtp: !1
    },
    {
      TypeName: ut.stringsService['wizard.addInvestment.finance'],
      TypeID: 3,
      RequiresOtp: !1
    },
    {
      TypeName: ut.stringsService['wizard.addInvestment.private'],
      TypeID: 3001,
      RequiresOtp: !1
    }
  ],
  nt.IsRetail() ? rt.investmentTypes.push({
    TypeName: ut.stringsService['wizard.addInvestment.timeDeposit'],
    TypeID: 1,
    RequiresOtp: !1
  })  : rt.investmentTypes.push({
    TypeName: ut.stringsService['wizard.addInvestment.timeDeposit'],
    TypeID: 1,
    RequiresOtp: !0
  }),
  nt.IsRetail() && rt.investmentTypes.splice(3, 0, {
    TypeName: ut.stringsService['wizard.addInvestment.prime'],
    TypeID: 3002,
    RequiresOtp: !1
  }),
  rt.isInvestment && (rt.model.selectedInvestmentType = undefined, ot = rt.AppEventsService.subscribe(n.common.services.AppEventsService.OtpSubmitted_Event, function () {
    ut.investmentTypes.forEach(function (n) {
      n.RequiresOtp = !1
    })
  }), r.$on('$destroy', function () {
    ot()
  })),
  r.$on('$destroy', function () {
    rt.keepOtpHandlerAlive && rt.otpHandler.unregister()
  }),
  rt
}
return __extends(i, t),
Object.defineProperty(i.prototype, 'otpKey', {
  get: function () {
    return this.otpHandler.caller
  },
  enumerable: !0,
  configurable: !0
}),
i.prototype.goToPrevStep = function () {
  this.CurrentStepIndex == 1 && this.isAlphaFinance && this.reloadSteps();
  this.previousStep()
},
i.prototype.selectType = function (n) {
  n.TypeID == 10008 ? (this.isAlphaMutual = !0, this.isTimeDeposit = !1, this.isAlphaFinance = !1, this.isAlphaPrime = !1, this.isAlphaPrivate = !1, this.productTypeScopeString = 'alphaMutual')  : n.TypeID == 3001 ? (this.isAlphaMutual = !1, this.isTimeDeposit = !1, this.isAlphaPrivate = !0, this.isAlphaPrime = !1, this.isAlphaFinance = !1, this.productTypeScopeString = 'private')  : n.TypeID == 3002 ? (this.isAlphaMutual = !1, this.isTimeDeposit = !1, this.isAlphaPrivate = !1, this.isAlphaPrime = !0, this.isAlphaFinance = !1, this.productTypeScopeString = 'prime')  : n.TypeID == 1 ? (this.isAlphaMutual = !1, this.isTimeDeposit = !0, this.isAlphaPrivate = !1, this.isAlphaPrime = !1, this.isAlphaFinance = !1, this.productTypeScopeString = 'timeDeposit')  : n.TypeID == 3 && (this.isAlphaMutual = !1, this.isTimeDeposit = !1, this.isAlphaPrivate = !1, this.isAlphaPrime = !1, this.isAlphaFinance = !0, this.productTypeScopeString = 'alphaFinance')
},
i.prototype.canPrefer = function () {
  return this.hasEnquiry() && this.preferredCount < 10 && !this.isAlphaPrime && !this.isAlphaPrivate && !this.isAlphaFinance && !this.isDebitCard
},
i.prototype.isConfirmStep = function () {
  return this.Steps.length - 2 == this.CurrentStepIndex
},
i.prototype.isSuccessStep = function () {
  return this.isFinalStep && this.addSuccessful
},
i.prototype.isFinalStep = function () {
  return this.Steps.length - 1 == this.CurrentStepIndex
},
i.prototype.hasEnquiry = function () {
  return this.model.product.Uses.indexOf(3) != - 1
},
i.prototype.couldHavePreferred = function () {
  return this.model.product.BankProduct.Uses.indexOf(3) != - 1 && this.preferredCount <= 10 && !this.isAlphaPrime && !this.isAlphaPrivate && !this.isAlphaFinance && !this.isDebitCard
},
i.prototype.usesChanged = function () {
  this.model.product.BankProduct.Uses.indexOf(3) == - 1 && (this.model.product.BankProduct.IsPreferred = !1, this.model.product.BankProduct.Color = 0)
},
i.prototype.print = function () {
  this.$window.print()
},
i.prototype.canCheckIban = function () {
  return n.utils.isUndefinedOrNull(this.model.selectedCountry) ? !1 : this.isInter && this.model.selectedCountry.SupportsIBAN && this.model.product.BankProduct.Code && this.model.product.BankProduct.Code != ''
},
i.prototype.initialiseSteps = function () {
  var i = this,
  t = this,
  u = [
  ],
  f = 0,
  r,
  o,
  e,
  s;
  return (t.isAlpha || t.isNational) && (r = {
    templateUrl: 'Templates/Features/profile/Product-add/add-step-1',
    title: t.stringsService['wizard.addProduct.step1'],
    index: f++,
    stateName: ''
  }, this.isAccount ? r.title = t.stringsService['wizard.addAccount.step1'] : this.isCard ? r.title = t.stringsService['wizard.addCard.step1'] : this.isLoan ? r.title = t.stringsService['wizard.addLoan.step1'] : this.isInvestment && (r.title = t.stringsService['wizard.addInvestment.step1'], r.templateUrl = 'Templates/Features/profile/Product-add/addinvestment-step-1'), r.processStep = [
    'productsService',
    'ProfileProductsService',
    'SecurityService',
    'qService',
    'STRINGS',
    'RoleService',
    function (i, r, f, o, h, c) {
      var l = t.qService.defer(),
      v,
      a,
      y;
      return c.IsIndividualUser() && (t.disabledUses = !0),
      t.model.productValidationResult = undefined,
      t.model.product.BankProduct.Uses = [
      ],
      t.isAccount && (t.message = '', t.profileProductsService.getAccounts().then(function (n) {
        n.forEach(function (n) {
          if (n.Code == t.model.product.BankProduct.Code) return t.message = h.theAccountNumber + ' ' + t.model.product.BankProduct.Code + ' ' + h.alreadyInProfile,
          l.reject(t.message)
        })
      })),
      t.isCard && (t.message = '', t.profileProductsService.getCards().then(function (n) {
        n && n.length > 0 && n.forEach(function (n) {
          if (n.Code == t.model.product.BankProduct.Code) return t.message = h.theCardNumber + ' ' + t.model.product.BankProduct.Code + ' ' + h.alreadyInProfile,
          l.reject(t.message)
        })
      })),
      t.isLoan && (t.message = '', t.profileProductsService.getLoans().then(function (n) {
        n.forEach(function (n) {
          if (n.Code == t.model.product.BankProduct.Code) return t.message = h.theLoanNumber + ' ' + t.model.product.BankProduct.Code + ' ' + h.alreadyInProfile,
          l.reject(t.message)
        })
      })),
      t.isInvestment && (t.message = '', (t.isAlphaPrime || t.isAlphaPrivate) && (t.model.product.BankProduct.Code = t.contractNumber.replace(/[a-zA-Z]$/, '')), t.profileProductsService.getInvestments().then(function (n) {
        n.forEach(function (n) {
          if (n.Code == t.model.product.BankProduct.Code) return t.message = h.theInvestmentNumber + ' ' + t.model.product.BankProduct.Code + ' ' + h.alreadyInProfile,
          l.reject(t.message)
        })
      })),
      n.utils.isUndefinedOrNullorWhiteSpace(t.message) ? t.isAlphaFinance ? (t.model.product.BankProduct.Uses = [
        3
      ], u.splice(1, 1), e.index = 1, s.index = 2, y = t.getOtpPayload(), t.updateBankProductForAlphaFinance(y.Products[0].product), t.otpHandler.reset({
        payload: y
      }).enquire().then(function () {
        l.resolve(!0)
      }).catch (function (i) {
        t.message = n.utils.getErrorMsg(i);
        l.reject(i)
      }))  : (t.isAlpha && (t.isAccount || t.isCard) ? v = i.getProductInfo({
        Code: t.model.product.BankProduct.Code,
        ProductID: t.model.product.BankProduct.ProductID,
        Family: t.productTypeFamily,
        Scope: t.productTypeScope
      }, !0)  : t.isTimeDeposit ? v = i.getProductInfo({
        Code: t.model.product.BankProduct.Code,
        ProductID: t.model.product.BankProduct.ProductID,
        Family: n.server.ProductTypeFamily.Account,
        Scope: n.server.ProductTypeScope.Local
      }, !0)  : (n.utils.isUndefinedOrNull(t.model.selectedBank.TypeID) ? t.isLoan ? a = t.model.selectedLoanType.TypeID : (t.isAlphaMutual || t.isAlphaPrime || t.isAlphaPrivate) && (a = t.model.selectedInvestmentType.TypeID)  : a = t.model.selectedBank.TypeID, v = i.getProductInfo({
        Code: t.model.product.BankProduct.Code,
        ProductID: t.model.product.BankProduct.ProductID,
        Family: undefined,
        Scope: t.productTypeScope,
        TypeID: a
      })), f.getUserSessionInfo().then(function (i) {
        return v.then(function (r) {
          var u,
          f,
          e;
          t.roleService.IsIndividualUser() && (i.OTPStatus === 0 || i.OTPStatus === 1) && (t.isRetailUserWithOtpEnabled = !0);
          u = n.server.CategoryGroupType.NONE;
          switch (t.productTypeFamily) {
            case n.server.ProductTypeFamily.Account:
              u = n.server.CategoryGroupType.ACCOUNT;
              break;
            case n.server.ProductTypeFamily.Loan:
              u = n.server.CategoryGroupType.LOAN;
              break;
            case n.server.ProductTypeFamily.Investment:
              u = n.server.CategoryGroupType.ACCOUNT;
              break;
            case n.server.ProductTypeFamily.Card:
              u = n.server.CategoryGroupType.CARD;
              break;
            case n.server.ProductTypeFamily.AlphaMutual:
              u = n.server.CategoryGroupType.MUTUAL;
              break;
            case n.server.ProductTypeFamily.TimeDeposit:
              u = n.server.CategoryGroupType.TIME_DEPOSITE;
              break;
            case n.server.ProductTypeFamily.AlphaFinance:
              u = n.server.CategoryGroupType.STOCK;
              break;
            case n.server.ProductTypeFamily.AlphaPrime:
              u = n.server.CategoryGroupType.PRIME_PRIVATE;
              break;
            default:
              u = n.server.CategoryGroupType.NONE
          }
          if (t.model.product.BankProduct.CategoryGroup = u, t.productTypeScope == n.server.ProductTypeScope.Local && (t.productTypeFamily == n.server.ProductTypeFamily.Account || t.productTypeFamily == n.server.ProductTypeFamily.Card || t.productTypeFamily == n.server.ProductTypeFamily.Loan || t.productTypeFamily == n.server.ProductTypeFamily.Investment) && t.roleService.IsIndividualUser() && i.OTPStatus === 2 && (t.isRetailUserWithNoOtpEnabled = !0), t.roleService.isAlphaPhone() && (f = !1), f = !(t.isRetailUserWithNoOtpEnabled && (t.isCard || t.isAccount || t.isLoan || t.isInvestment)), t.isRetailUserWithOtpEnabled && (f = !(t.isCard || t.isAccount)), t.roleService.isAlphaPhone() && (f = !1), t.isRetailUserWithOtpEnabled && (t.isCard || t.isAccount) && t.productTypeScope == n.server.ProductTypeScope.National && (f = !0), t.isAlphaMutual && (f = !1), t.showOPT = f, r.ResultCode == 0) {
            if (!n.utils.isEmptyArray(r.ProductInfo) && r.ProductInfo[0].Validated) {
              t.model.productValidationResult = r.ProductInfo[0];
              t.model.product.BankProduct.CategoryType = t.model.productValidationResult.CategoryType;
              t.model.product.BankProduct.TypeID = r.ProductInfo[0].ProductTypeID;
              t.model.product.BankProduct.TypeName = r.ProductInfo[0].ProductTypeName;
              t.isAlpha && (t.isAccount || t.isCard || t.isLoan) ? ((t.isLoan && t.model.selectedLoanType.TypeID == 2002 || t.isCard && (r.ProductInfo[0].CategoryType == 103 || r.ProductInfo[0].CategoryType == 102)) && (t.model.productValidationResult.ValidUses = [
                3
              ]), e = !0)  : (t.model.product.BankProduct.Uses = t.model.productValidationResult.ValidUses.slice(), e = !1);
              (t.isInvestment && t.isRetailUserWithNoOtpEnabled && t.model.selectedInvestmentType.TypeID === 1 && !a || t.isInvestment && t.isRetailUserWithOtpEnabled && t.model.selectedInvestmentType.TypeID === 1 && !a) && (e = !0);
              var c = t.model.product.BankProduct.Code,
              s = r.ProductInfo[0].ProductTypeID,
              o = !t.roleService.IsRetail(),
              h = e && !o ? t.productsService.cdiMatch(c, s)  : t.qService.when({
                ResultCode: 1,
                Error: {
                  Message: ''
                }
              });
              return t.roleService.isDemo() && (h = t.qService.when({
                ResultCode: 0,
                DoCdiMatch: !1
              })),
              h.then(function (i) {
                if (i.ResultCode == 0 ? (o = i.DoCdiMatch, t.isRetailUserWithOtpEnabled && (o || (t.showOPT = !0)), o ? (t.isInvestment && t.isRetailUserWithOtpEnabled && t.model.selectedInvestmentType.TypeID === 1 && !a && (t.showOPT = !1), t.roleService.IsRetail() && (t.model.product.BankProduct.Uses = t.model.productValidationResult.ValidUses.slice()))  : t.isInvestment && t.isRetailUserWithOtpEnabled && t.model.selectedInvestmentType.TypeID === 1 && !a ? l.reject(t.STRINGS.unsuccessfulProductAddRetailNoOtp)  : t.isLoan && t.model.selectedLoanType.TypeID == 2002 ? l.reject(t.STRINGS.unsuccessfulLoanAdd)  : t.isCard && (t.model.productValidationResult.CategoryType == 103 || t.model.productValidationResult.CategoryType == 102) ? l.reject(t.STRINGS.unsuccessfulCardAdd)  : t.isCard && r.ProductInfo[0].CategoryType == 104 && s == 1072 ? l.reject(t.STRINGS.unsuccessfulCardAdd)  : t.isAccount || t.isCard && r.ProductInfo[0].CategoryType == 104 ? (t.model.product.BankProduct.Uses = [
                  1
                ], t.model.productValidationResult.ValidUses = [
                  1
                ])  : (t.model.product.BankProduct.Uses = [
                  4
                ], t.model.productValidationResult.ValidUses = [
                  4
                ]))  : i.ResultCode != 1 || n.utils.isUndefinedOrNull(i.Error) || n.utils.isUndefinedOrNullorWhiteSpace(i.Error.Message) || (l.reject(i.Error.Message), t.Model.HasErrors = !0), !t.Model.HasErrors) {
                  if (t.model.productValidationResult.ValidUses.length == 1 && (t.disabledUses = !0, t.model.product.BankProduct.Uses = t.model.productValidationResult.ValidUses.slice()), t.isCard) return t.productsService.getProductTypes({
                    RequestType: n.server.ProductRequestType.AllCards
                  }).then(function (i) {
                    if (i.ResultCode == 0) {
                      if (!n.utils.isUndefinedOrNull(i.ProductTypes)) {
                        var r = i.ProductTypes.filter(function (n) {
                          return n.TypeID == t.model.product.BankProduct.TypeID
                        });
                        r.length > 0 && (r[0].CategoryID == 102 || r[0].CategoryID == 103) && (t.isDebitCard = !0)
                      }
                      l.resolve(!0)
                    } else t.message = n.utils.isUndefinedOrNull(i.Error) ? 'System error' : i.Error.Message,
                    l.reject(t.message)
                  });
                  l.resolve(!0)
                }
              }, function (i) {
                t.message = n.utils.getErrorMsg(i);
                l.reject(t.message)
              })
            }
            n.utils.isEmptyArray(r.ProductInfo) || t.isLoan ? t.isLoan && (t.message = t.stringsService.invalidLoanNumber)  : t.message = n.utils.isUndefinedOrNull(r.Error) ? r.ProductInfo[0].ErrorMessage : r.Error.Message;
            l.reject(t.message)
        } else n.utils.isUndefinedOrNull(r.Error) || l.reject(r.Error.Message)
      },
      function (i) {
        t.message = n.utils.isUndefinedOrNull(i.Error) ? t.stringsService.systemError : i.Error.Message;
        l.reject(t.message)
      })
    })) : l.reject(t.message), l.promise
  }
  ],
  u.push(r)),
  o = {
    templateUrl: 'Templates/Features/Profile/Product-add/add-step-2',
    index: f++,
    title: t.stringsService['wizard.addProduct.step2'],
    stateName: ''
  },
  o.processStep = [
    'STRINGS',
    function (t) {
      var r,
      u;
      return i.addSuccessful = !1,
      i.message = '',
      i.isInter && i.model.selectedCountry.CountryIso != i.model.ibanValidationResult.RelatedBIC.substr(4, 2) ? r = i.roleService.isDemo() ? i.qService.when(!0)  : i.qService.reject(t.countryBicCrossCheckInValid)  : (u = i.isInter && i.isAccount ? i.queriesService.checkBIC({
        InBIC: i.model.ibanValidationResult.RelatedBIC
      }).then(function (n) {
        return n.IsValid
      })  : i.qService.when(!0), r = u.then(function (n) {
        return n ? i.qService.when(!0)  : i.qService.reject(t.invalidBicCode)
      })),
      i.updateProductModel(),
      r.then(function () {
        return i.getOtpPayload()
      }).then(function (n) {
        return i.otpHandler.reset({
          hints: {
            Requirement: String(2),
            Method: String(1)
          },
          payload: n
        }).enquire()
      }).catch (function (t) {
        return i.message = n.utils.getErrorMsg(t),
        i.qService.reject(t)
      })
    }
  ],
  u.push(o),
  e = {
    templateUrl: 'Templates/Features/profile/Product-add/add-step-3',
    index: f++,
    title: t.stringsService['wizard.addProduct.step3'],
    stateName: ''
  },
  e.processStep = [
    'profileProductsService',
    'qService',
    function (i) {
      var r = t.qService.defer();
      return t.otpHandler.result().then(function (n) {
        return i.addProduct(t.model.product, n, t.isAlphaFinance)
      }).then(function (i) {
        !n.utils.isUndefinedOrNull(i.Products) && i.Products.length > 0 && (i.Products[0].Code == 6 || i.Products[0].Code == 1) ? (t.AppEventsService.publish(t.model.product.InvalidateMessage), t.model.product.TypeID == 10046 && t.AppEventsService.publish(n.common.services.AppEventsService.InvalidateLookups_Event, [
          'PredefinedCodesForPaymentType_10046'
        ]), i.Products[0].product.CategoryGroup == n.server.CategoryGroupType.ACCOUNT && t.AppEventsService.publish(n.common.services.AppEventsService.InvalidateCustomUiSelectCategoryGroup, n.server.CategoryGroupType.ACCOUNT), t.afterBankApproval = i.Products[0].Code == 6 && !t.roleService.IsRetail() && (t.isAccount || t.isCard || t.isLoan || t.isInvestment), t.addSuccessful = !0, t.model.successMessage = i.Products[0].Code == 6 ? t.stringsService.additionAfterApproval : i.Products[0].Message, n.utils.isUndefinedOrNull(i.Products[0].product) || (t.responseProductCode = i.Products[0].product.Code), t.documentData = t.ViewModelToPDFModel(), r.resolve(!0))  : (t.Model.ErrorMessage = t.extractError(i), t.Model.HasErrors = !0, r.resolve(!0))
      }).catch (function (n) {
        t.Model.ErrorMessage = t.extractError(n);
        t.Model.HasErrors = !0;
        r.resolve(!0)
      }),
      r.promise
    }
  ],
  u.push(e),
  s = {
    templateUrl: 'Templates/Features/profile/Product-add/add-step-4',
    title: this.stringsService['wizard.addProduct.step4'],
    index: f++,
    stateName: ''
  },
  u.push(s),
  u
}, i.prototype.updateProductModel = function () {
  if (!this.isAlphaFinance) {
    var t = [
    ];
    this.isAlpha ? (this.model.product.BankProduct.TypeID = this.model.productValidationResult.ProductTypeID, this.model.product.BankProduct.TypeName = this.model.productValidationResult.ProductTypeName)  : this.isNational ? (this.model.product.BankProduct.TypeID = this.model.selectedBank.TypeID, this.model.product.BankProduct.TypeName = this.model.selectedBank.TypeName, t.push({
      DataType: 0,
      Name: n.server.DetailName.BANK_NAME,
      Value: this.model.selectedBank.TypeName
    }))  : (t.push({
      DataType: 0,
      Name: n.server.DetailName.CountryISOCode,
      Value: this.model.selectedCountry.CountryIso
    }), t.push({
      DataType: 0,
      Name: n.server.DetailName.BIC_CODE,
      Value: this.model.ibanValidationResult.RelatedBIC
    }), t.push({
      DataType: 0,
      Name: n.server.DetailName.CountryDescrEl,
      Value: this.model.selectedCountry.GreekName
    }), t.push({
      DataType: 0,
      Name: n.server.DetailName.CountryDescrEn,
      Value: this.model.selectedCountry.EnglishName
    }), n.utils.isUndefinedOrNull(this.model.ibanValidationResult.BIC_Name) || t.push({
      DataType: 0,
      Name: n.server.DetailName.BANK_NAME,
      Value: this.model.ibanValidationResult.BIC_Name + ' - ' + this.model.ibanValidationResult.BIC_Address
    }), this.model.product.BankProduct.TypeID = n.constants.general.internationalAccountProductId, this.model.product.BankProduct.TypeName = 'other bank');
    this.isAccount && !this.isAlpha && (this.model.beneficiary && t.push({
      DataType: 0,
      Name: n.server.DetailName.BENEFICIARY_NAME,
      Value: this.model.beneficiary
    }), this.model.beneficiaryAddress && t.push({
      DataType: 0,
      Name: n.server.DetailName.ADDRESS,
      Value: this.model.beneficiaryAddress
    }));
    this.model.product.BankProduct.Details = t
  }
}, i.prototype.updateBankProductForAlphaFinance = function (t) {
  t.TypeID = - 9;
  t.TypeName = 'stock';
  t.Details = [
    {
      DataType: 0,
      Name: n.server.DetailName.STOCK_ASAT,
      Value: this.model.investorAccount
    },
    {
      DataType: 0,
      Name: n.server.DetailName.STOCK_MSAT,
      Value: this.model.securitiesAccount
    }
  ]
}, i.prototype.extractError = function (t) {
  var r = this.stringsService.generalError,
  i = t,
  u;
  return i && i.Message ? r = this.stringsService.generalError : i.Error && i.Error.Message ? r = i.Error.Message : n.utils.isEmptyArray(i.Products) || (u = i.Products[0], [
    6,
    1
  ].indexOf(u.Code) == - 1 && (r = i.Products[0].Message)),
  r
}, i.prototype.searchBic = function () {
  var t = this,
  i;
  n.utils.isUndefinedOrNullorWhiteSpace(t.model.product.BankProduct.Code) || (t.IsBusy = !0, i = this.modalService.open({
    templateUrl: 'Templates/common/modals/searchBic',
    controller: 'SearchBicModalInstanceCtrl as vm',
    windowClass: 'bicModal',
    size: 'sm',
    resolve: {
      response: [
        function () {
          return t.queriesService.checkIBAN({
            InIBAN: t.model.product.BankProduct.Code
          })
        }
      ]
    }
  }), i.result.then(function (n) {
    t.model.ibanValidationResult = n
  }).finally (function () {
    t.IsBusy = !1
  }))
}, i.prototype.buildUsesString = function () {
  var n = this;
  return this.model.product.BankProduct.Uses.filter(function (n) {
    return n != 0 && n != 5
  }).map(function (t) {
    return n.STRINGS['enum.ProductUses.' + t]
  }).join()
}, i.prototype.ViewModelToPDFModel = function () {
  var t = new n.model.DocumentUpdateRequest,
  s,
  c,
  l,
  a,
  h,
  v,
  y,
  o,
  e,
  p,
  f,
  i,
  w,
  r,
  u,
  b,
  k,
  d;
  if (this.model != null) {
    t.Title = this.stringsService.addProductTitleStart;
    t.Title += this.afterBankApproval ? ' ' + this.stringsService.addProductTitleSuccessApplication : ' ' + this.stringsService.addProductTitleSuccessNoApplication;
    this.isAccount ? t.Title += ' ' + this.stringsService.accountLiteralGeniki : this.isCard ? t.Title += ' ' + this.stringsService.cardLiteralGeniki : this.isLoan ? t.Title += ' ' + this.stringsService.loanLiteralGeniki : this.isInvestment && (t.Title += ' ' + this.stringsService.investmentLiteralGeniki);
    t.Title += ' ' + this.stringsService.addProductTitleSuccessInProfile;
    t.DocumentRequestType = 3;
    t.KeyValueDictionary = [
    ];
    s = this.buildUsesString();
    this.productTypeFamily == n.server.ProductTypeFamily.Investment && (this.isAlphaFinance ? this.productTypeFamily = n.server.ProductTypeFamily.AlphaFinance : this.isAlphaMutual ? this.productTypeFamily = n.server.ProductTypeFamily.AlphaMutual : this.isAlphaPrime ? this.productTypeFamily = n.server.ProductTypeFamily.AlphaPrime : this.isAlphaPrivate ? this.productTypeFamily = n.server.ProductTypeFamily.AlphaPrivate : this.isTimeDeposit && (this.productTypeFamily = n.server.ProductTypeFamily.TimeDeposit));
    switch (this.productTypeFamily) {
      case n.server.ProductTypeFamily.Account:
        this.isInter && (c = new n.model.KeyValue, c.Key = this.stringsService.countryTitle, c.Value = this.model.selectedCountry.Name, t.KeyValueDictionary.push(c));
        (this.isAlpha || this.isNational) && (i = new n.model.KeyValue, i.Key = this.stringsService.bankTitle, i.Value = this.isNational ? this.model.selectedBank.TypeName : 'Alpha Bank', t.KeyValueDictionary.push(i));
        o = new n.model.KeyValue;
        o.Key = this.stringsService.accountNumberFieldLabel;
        o.Value = this.model.product.BankProduct.Code;
        t.KeyValueDictionary.push(o);
        this.isAlpha && (r = new n.model.KeyValue, r.Key = this.stringsService.productTypeNameLabel, r.Value = this.model.productValidationResult.ProductTypeName, t.KeyValueDictionary.push(r));
        this.isInter && (l = new n.model.KeyValue, l.Key = this.stringsService.bicLabel, l.Value = this.model.ibanValidationResult.RelatedBIC, t.KeyValueDictionary.push(l), h = new n.model.KeyValue, h.Key = this.stringsService.beneficiaryNameTitleInter, h.Value = this.model.beneficiary, t.KeyValueDictionary.push(h), a = new n.model.KeyValue, a.Key = this.stringsService.beneficiaryAddressLabel, a.Value = this.model.beneficiaryAddress, t.KeyValueDictionary.push(a));
        this.isNational && (h = new n.model.KeyValue, h.Key = this.stringsService.beneficiaryFullName, h.Value = this.model.beneficiary, t.KeyValueDictionary.push(h));
        f = new n.model.KeyValue;
        f.Key = this.stringsService.friendlyName;
        f.Value = this.model.product.BankProduct.Title || '';
        t.KeyValueDictionary.push(f);
        u = new n.model.KeyValue;
        u.Key = this.stringsService.productUsesTitle;
        u.Value = s;
        t.KeyValueDictionary.push(u);
        this.couldHavePreferred() && (e = new n.model.KeyValue, e.Key = this.stringsService.showOverviewTitle, e.Value = this.model.product.BankProduct.IsPreferred ? this.stringsService.yesLabel : this.stringsService.noLabel, t.KeyValueDictionary.push(e));
        break;
      case n.server.ProductTypeFamily.Card:
        i = new n.model.KeyValue;
        i.Key = this.stringsService.bankTitle;
        i.Value = this.isNational ? this.model.selectedBank.TypeName : 'Alpha Bank';
        t.KeyValueDictionary.push(i);
        v = new n.model.KeyValue;
        v.Key = this.stringsService.cardNumberFieldLabel;
        v.Value = this.responseProductCode;
        t.KeyValueDictionary.push(v);
        this.isAlpha && (r = new n.model.KeyValue, r.Key = this.stringsService.cardTypeTitle, r.Value = this.model.productValidationResult.ProductTypeName, t.KeyValueDictionary.push(r));
        f = new n.model.KeyValue;
        f.Key = this.stringsService.friendlyName;
        f.Value = this.model.product.BankProduct.Title || '';
        t.KeyValueDictionary.push(f);
        u = new n.model.KeyValue;
        u.Key = this.stringsService.productUsesTitle;
        u.Value = s;
        t.KeyValueDictionary.push(u);
        this.couldHavePreferred() && (e = new n.model.KeyValue, e.Key = this.stringsService.showOverviewTitle, e.Value = this.model.product.BankProduct.IsPreferred ? this.stringsService.yesLabel : this.stringsService.noLabel, t.KeyValueDictionary.push(e));
        break;
      case n.server.ProductTypeFamily.Loan:
        i = new n.model.KeyValue;
        i.Key = this.stringsService.bankTitle;
        i.Value = this.isNational ? this.model.selectedBank.TypeName : 'Alpha Bank';
        t.KeyValueDictionary.push(i);
        y = new n.model.KeyValue;
        y.Key = this.stringsService.loanNumberFieldLabel;
        y.Value = this.model.product.BankProduct.Code;
        t.KeyValueDictionary.push(y);
        this.isAlpha && (r = new n.model.KeyValue, r.Key = this.stringsService.productTypeNameLabel, r.Value = this.model.productValidationResult.ProductTypeName, t.KeyValueDictionary.push(r));
        f = new n.model.KeyValue;
        f.Key = this.stringsService.friendlyName;
        f.Value = this.model.product.BankProduct.Title || '';
        t.KeyValueDictionary.push(f);
        u = new n.model.KeyValue;
        u.Key = this.stringsService.productUsesTitle;
        u.Value = s;
        t.KeyValueDictionary.push(u);
        this.couldHavePreferred() && (e = new n.model.KeyValue, e.Key = this.stringsService.showOverviewTitle, e.Value = this.model.product.BankProduct.IsPreferred ? this.stringsService.yesLabel : this.stringsService.noLabel, t.KeyValueDictionary.push(e));
        break;
      case n.server.ProductTypeFamily.TimeDeposit:
        i = new n.model.KeyValue;
        i.Key = this.stringsService.bankTitle;
        i.Value = 'Alpha Bank';
        t.KeyValueDictionary.push(i);
        o = new n.model.KeyValue;
        o.Key = this.stringsService.accountNumberFieldLabel;
        o.Value = this.model.product.BankProduct.Code;
        t.KeyValueDictionary.push(o);
        r = new n.model.KeyValue;
        r.Key = this.stringsService.productTypeNameLabel;
        r.Value = this.model.productValidationResult.ProductTypeName;
        t.KeyValueDictionary.push(r);
        f = new n.model.KeyValue;
        f.Key = this.stringsService.friendlyName;
        f.Value = this.model.product.BankProduct.Title || '';
        t.KeyValueDictionary.push(f);
        u = new n.model.KeyValue;
        u.Key = this.stringsService.productUsesTitle;
        u.Value = s;
        t.KeyValueDictionary.push(u);
        this.couldHavePreferred() && (e = new n.model.KeyValue, e.Key = this.stringsService.showOverviewTitle, e.Value = this.model.product.BankProduct.IsPreferred ? this.stringsService.yesLabel : this.stringsService.noLabel, t.KeyValueDictionary.push(e));
        break;
      case n.server.ProductTypeFamily.AlphaMutual:
        i = new n.model.KeyValue;
        i.Key = this.stringsService.bankTitle;
        i.Value = 'Alpha Bank';
        t.KeyValueDictionary.push(i);
        o = new n.model.KeyValue;
        o.Key = this.stringsService.mutualAccountNumber;
        o.Value = this.model.product.BankProduct.Code;
        t.KeyValueDictionary.push(o);
        r = new n.model.KeyValue;
        r.Key = this.stringsService.productTypeNameLabel;
        r.Value = this.model.productValidationResult.ProductTypeName;
        t.KeyValueDictionary.push(r);
        f = new n.model.KeyValue;
        f.Key = this.stringsService.friendlyName;
        f.Value = this.model.product.BankProduct.Title || '';
        t.KeyValueDictionary.push(f);
        u = new n.model.KeyValue;
        u.Key = this.stringsService.productUsesTitle;
        u.Value = s;
        t.KeyValueDictionary.push(u);
        this.couldHavePreferred() && (e = new n.model.KeyValue, e.Key = this.stringsService.showOverviewTitle, e.Value = this.model.product.BankProduct.IsPreferred ? this.stringsService.yesLabel : this.stringsService.noLabel, t.KeyValueDictionary.push(e));
        break;
      case n.server.ProductTypeFamily.AlphaPrime:
      case n.server.ProductTypeFamily.AlphaPrivate:
        i = new n.model.KeyValue;
        i.Key = this.stringsService.bankTitle;
        i.Value = 'Alpha Bank';
        t.KeyValueDictionary.push(i);
        p = new n.model.KeyValue;
        p.Key = this.stringsService.contractNumber;
        p.Value = this.contractNumber;
        t.KeyValueDictionary.push(p);
        r = new n.model.KeyValue;
        r.Key = this.stringsService.productTypeNameLabel;
        r.Value = this.model.productValidationResult.ProductTypeName;
        t.KeyValueDictionary.push(r);
        f = new n.model.KeyValue;
        f.Key = this.stringsService.friendlyName;
        f.Value = this.model.product.BankProduct.Title || '';
        t.KeyValueDictionary.push(f);
        u = new n.model.KeyValue;
        u.Key = this.stringsService.productUsesTitle;
        u.Value = s;
        t.KeyValueDictionary.push(u);
        break;
      case n.server.ProductTypeFamily.AlphaFinance:
        i = new n.model.KeyValue;
        i.Key = this.stringsService.bankTitle;
        i.Value = 'Alpha Bank';
        t.KeyValueDictionary.push(i);
        w = new n.model.KeyValue;
        w.Key = this.stringsService.alphaFinanceCode;
        w.Value = this.model.product.BankProduct.Code;
        t.KeyValueDictionary.push(w);
        r = new n.model.KeyValue;
        r.Key = this.stringsService.productTypeNameLabel;
        r.Value = this.stringsService.financeProductType;
        t.KeyValueDictionary.push(r);
        u = new n.model.KeyValue;
        u.Key = this.stringsService.productUsesTitle;
        u.Value = s;
        t.KeyValueDictionary.push(u);
        b = new n.model.KeyValue;
        b.Key = this.stringsService.investorAccount;
        b.Value = this.model.investorAccount;
        t.KeyValueDictionary.push(b);
        k = new n.model.KeyValue;
        k.Key = this.stringsService.securitiesAccount;
        k.Value = this.model.securitiesAccount;
        t.KeyValueDictionary.push(k)
    }
    this.afterBankApproval && (d = new n.model.KeyValue, d.Key = 'successMessage', d.Value = this.model.successMessage, t.KeyValueDictionary.push(d))
  }
  return t
},
i.prototype.reload = function () {
  var i,
  t;
  this.goToStep(0);
  i = this.model.product.CategoryGroupType;
  this.model = new n.model.AddProductViewModel;
  t = new n.model.ProductBase({
  });
  t.BankProduct.Uses = [
  ];
  this.isAccount && !this.isAlpha && (t.BankProduct.Uses.push(1), this.model.productValidationResult.ValidUses = [
    1
  ]);
  t.BankProduct.Details = [
  ];
  t.CategoryGroupType = i;
  this.model.product = this.product = t;
  this.model.selectedCountry = null;
  this.model.ibanValidationResult = {
  }
},
i.prototype.getOtpPayload = function () {
  return this.profileProductsService.buildAddProductModel(this.model.product, this.isAlphaFinance)
},
i.$inject = [
  '$stateParams',
  '$scope',
  '$state',
  '$injector',
  '$modal',
  'product',
  'productTypeFamily',
  'productTypeScope',
  'ProfileProductsService',
  'greekBanks',
  'loanTypes',
  'countries',
  'ProductsService',
  'STRINGS',
  'QueriesService',
  'StateHelperService',
  'AppEventsService',
  '$window',
  'RegularExpressionService',
  'RoleService',
  'userSessionInfo',
  'otpHandler'
],
i
}(n.wizards.WizardController), i; t.mainModule.controller('ProductAddController', r); i = function (t) {
function i(i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k, d, g, nt, tt, it) {
  var rt = t.call(this, r, f) || this,
  ot,
  ut,
  ft,
  st,
  et,
  ht,
  ct;
  if (rt.stateParamsService = i, rt.scope = r, rt.stateService = u, rt.$injector = f, rt.modalService = e, rt.product = o, rt.productTypeFamily = s, rt.profileProductsService = h, rt.otherBanks = c, rt.productsService = l, rt.stringsService = a, rt.queriesService = v, rt.StateHelperService = y, rt.AppEventsService = p, rt.$window = w, rt.regularExpressionProvider = b, rt.roleService = k, rt.userSessionInfo = d, rt.otherBankProductsService = g, rt.SharedDataService = nt, rt.userProfileAccounts = tt, rt.userProfileCards = it, rt.message = '', rt.isDebitCard = !1, rt.disabledUses = !1, rt.firstStepTitle = null, rt.piraeusTypeIdForAccounts = parseInt($('meta[name=PiraeusTypeIdForAccounts]').attr('content')), rt.piraeusTypeIdForCards = parseInt($('meta[name=PiraeusTypeIdForCards]').attr('content')), rt.currentState = u.current.name, rt.productTypeFamilyString = n.server.ProductTypeFamily[rt.productTypeFamily].toLowerCase(), rt.showOPT = k.getRole() != 10, rt.model = new n.model.AddProductViewModel, rt.model.selectedBank = undefined, rt.model.product = rt.product, rt.model.selectedCountry = null, rt.model.ibanValidationResult = {
  }, ot = rt.StateHelperService.getStateData(), ot && (rt.model = ot, rt.model.product.Uses = rt.model.product.BankProduct.Uses), rt.selectionMode = n.model.OtherBankAccountSelectionMode.ManualEntry, rt.isAccount = rt.productTypeFamily == n.server.ProductTypeFamily.Account, rt.isCard = rt.productTypeFamily == n.server.ProductTypeFamily.Card, rt.disabledUses = !0, rt.isAccount ? (rt.model.product.BankProduct.Uses.push(1), rt.model.productValidationResult.ValidUses = [
    1
  ])  : rt.model.product.BankProduct.Uses.push(4), rt.model.product.BankProduct.IsAlphaBankProduct = !1, rt.model.product.BankProduct.IsPreferred = !1, rt.preferredCount = 0, ut = rt, ut.profileProductsService.getPreferredProductsCount(o.CategoryGroupType).then(function (n) {
    ut.preferredCount = n;
    ut.model.product.BankProduct.IsPreferred = ut.preferredCount < 10
  }), rt.isAccount ? ut.firstStepTitle = ut.stringsService.AddOtherBankAccountStep1Title : rt.isCard && (ut.firstStepTitle = ut.stringsService.AddOtherBankCardStep1Title), u.params && u.params.isOauthCallbackRedirect && (ft = nt.GetControllerData(n.server.Controllers.ProductOtherBankAddController, n.common.services.AppEventsService.PSD2ProductDetailsServiceTrigger), ft)) {
    for (ut.model.product.BankProduct.Title = ft.OtherBankProductDescription, ut.model.product.BankProduct.Code = ft.RequestedProductCode, ft.RequestedBank == 1 && (ut.isAccount ? st = ut.piraeusTypeIdForAccounts : ut.isCard && (st = ut.piraeusTypeIdForCards), ut.otherBankTypeSelected = 1), et = 0, ht = ut.otherBanks; et < ht.length; et++) if (ct = ht[et], ct.TypeID == st) {
      ut.model.selectedBank = ct;
      break
    }
    setTimeout(function () {
      ft.RequestedProductCode && ft.RequestedProductCode.length > 0 ? (ut.selectionMode = n.model.OtherBankAccountSelectionMode.ManualEntry, ut.nextStep())  : (ut.selectionMode = n.model.OtherBankAccountSelectionMode.FromList, ut.otherBankProducts || ut.getAllOtherBankProducts())
    }, 0)
  }
  return rt
}
return __extends(i, t),
i.prototype.isSelectionModeManualEntry = function () {
  return this.selectionMode == n.model.OtherBankAccountSelectionMode.ManualEntry
},
i.prototype.SetProductTypeScope = function (t) {
  this.productTypeScope = n.server.ProductTypeScope.National;
  (t.TypeID === this.piraeusTypeIdForAccounts || t.TypeID === this.piraeusTypeIdForCards) && (this.otherBankTypeSelected = 1)
},
i.prototype.canPrefer = function () {
  return this.hasEnquiry() && this.preferredCount < 10 && !this.isDebitCard
},
i.prototype.isConfirmStep = function () {
  return this.Steps.length - 2 == this.CurrentStepIndex
},
i.prototype.isSuccessStep = function () {
  return this.isFinalStep && this.addSuccessful
},
i.prototype.isFinalStep = function () {
  return this.Steps.length - 1 == this.CurrentStepIndex
},
i.prototype.hasEnquiry = function () {
  return this.model.product.Uses.indexOf(3) != - 1
},
i.prototype.couldHavePreferred = function () {
  return this.model.product.BankProduct.Uses.indexOf(3) != - 1 && this.preferredCount <= 10 && !this.isDebitCard
},
i.prototype.usesChanged = function () {
  this.model.product.BankProduct.Uses.indexOf(3) == - 1 && (this.model.product.BankProduct.IsPreferred = !1, this.model.product.BankProduct.Color = 0)
},
i.prototype.print = function () {
  this.$window.print()
},
i.prototype.getAllOtherBankProducts = function () {
  var t = this,
  i = t.isAccount ? 1 : 2;
  t.otherBankProductsService.getAllOrSpecifiedProducts(t.otherBankTypeSelected, i).then(function (r) {
    if (r.NeedsNewAccessToken) {
      var u = {
        requestIntentId: r.RequestIntentId,
        bank: t.otherBankTypeSelected,
        productType: i,
        scope: r.ScopeNeeded,
        productCode: '',
        serviceRequested: 3,
        callingJsController: n.server.Controllers.ProductOtherBankAddController,
        productDescription: ''
      };
      t.StateHelperService.go(n.constants.stateNames.oAuthDanceBeginState, null, u)
    } else t.otherBankProducts = [
    ],
    r.OtherBankProductDetails.forEach(function (n) {
      var i = !1;
      t.isAccount && t.userProfileAccounts && t.userProfileAccounts.length > 0 && t.userProfileAccounts.forEach(function (t) {
        t.Code == n.OtherBankProductCode && (i = !0)
      });
      t.isCard && t.userProfileCards && t.userProfileCards.length > 0 && t.userProfileCards.forEach(function (t) {
        t.Code == n.OtherBankProductCode && (i = !0)
      });
      t.otherBankProducts.push({
        AccessRights: n.AccessRights,
        AddProduct: !0,
        AvailableBalance: n.AvailableBalance,
        CardCreditLimit: n.CardCreditLimit,
        CardValidFromDate: n.CardValidFromDate,
        CardValidToDate: n.CardValidToDate,
        Commitments: n.Commitments,
        Currency: n.Currency,
        FriendlyName: n.FriendlyName,
        GrossBalance: n.GrossBalance,
        LastUpdatedOn: n.LastUpdatedOn,
        OtherBankProductCode: n.OtherBankProductCode,
        OtherBankProductId: n.OtherBankProductId,
        OtherBankProductType: n.OtherBankProductType,
        OtherBankType: n.OtherBankType,
        OwnerName: n.OwnerName,
        ProductInfo: n.ProductInfo,
        ProductType: n.ProductType,
        ExistsInUserProfile: i
      })
    })
  }).catch (function () {
    return
  });
  return
},
i.prototype.toggleOtherBankProduct = function (n) {
  n.AddProduct = !n.AddProduct
},
i.prototype.showOtherBankProductsList = function () {
  (this.otherBankProducts == null || this.otherBankProducts.length == 0) && this.getAllOtherBankProducts();
  this.selectionMode = n.model.OtherBankAccountSelectionMode.FromList
},
i.prototype.enterOtherBankProductManually = function () {
  this.selectionMode = n.model.OtherBankAccountSelectionMode.ManualEntry
},
i.prototype.initialiseSteps = function () {
  var t = this,
  i = [
  ],
  r = 0,
  f = {
    templateUrl: 'Templates/Features/profile/Product-otherbank-add/add-step-1',
    title: t.stringsService.AddOtherBankProductStep1,
    index: r++,
    stateName: ''
  },
  u,
  e;
  return f.processStep = [
    'productsService',
    'ProfileProductsService',
    'SecurityService',
    'qService',
    'STRINGS',
    'RoleService',
    function (i, r, u, f, e) {
      var o = t.qService.defer(),
      s,
      h;
      return t.disabledUses = !1,
      t.model.productValidationResult = undefined,
      t.model.product.BankProduct.Uses = [
      ],
      t.IsBusy = !0,
      t.isAccount && (t.message = '', t.userProfileAccounts && t.userProfileAccounts.length > 0 && t.userProfileAccounts.forEach(function (n) {
        if (n.Code == t.model.product.BankProduct.Code) return t.message = e.theAccountNumber + ' ' + t.model.product.BankProduct.Code + ' ' + e.alreadyInProfile,
        t.IsBusy = !1,
        o.reject(t.message)
      })),
      t.isCard && (t.message = '', t.userProfileCards && t.userProfileCards.length > 0 && t.userProfileCards.forEach(function (n) {
        if (n.Code == t.model.product.BankProduct.Code) return t.message = e.theCardNumber + ' ' + t.model.product.BankProduct.Code + ' ' + e.alreadyInProfile,
        t.IsBusy = !1,
        o.reject(t.message)
      })),
      n.utils.isUndefinedOrNullorWhiteSpace(t.message) ? (t.selectionMode == n.model.OtherBankAccountSelectionMode.ManualEntry && (h = t.isAccount ? 1 : 2, s = t.otherBankProductsService.getProductDetails(t.otherBankTypeSelected, h, 3, t.model.product.BankProduct.Code, t.model.product.BankProduct.OtherBankProductId)), u.getUserSessionInfo().then(function () {
        var i = n.server.CategoryGroupType.NONE;
        switch (t.productTypeFamily) {
          case n.server.ProductTypeFamily.Account:
            i = n.server.CategoryGroupType.ACCOUNT;
            break;
          case n.server.ProductTypeFamily.Card:
            i = n.server.CategoryGroupType.CARD
        }
        if (t.model.product.BankProduct.CategoryGroup = i, t.selectionMode == n.model.OtherBankAccountSelectionMode.ManualEntry) return s.then(function (i) {
          var u,
          r;
          i.ResultCode == 0 ? i.NeedsNewAccessToken ? (u = {
            requestIntentId: i.RequestIntentId,
            bank: t.otherBankTypeSelected,
            productType: t.isAccount ? 1 : 2,
            scope: i.ScopeNeeded,
            productCode: t.model.product.BankProduct.Code,
            serviceRequested: 3,
            callingJsController: n.server.Controllers.ProductOtherBankAddController,
            productDescription: t.model.product.BankProduct.Title
          }, t.StateHelperService.go(n.constants.stateNames.oAuthDanceBeginState, null, u))  : (i.OtherBankProductDetails && i.OtherBankProductDetails.length === 1 ? (r = i.OtherBankProductDetails[0], t.model.product.BankProduct.Title = r.FriendlyName, t.model.productValidationResult = r.ProductInfo, t.model.product.BankProduct.CategoryType = t.model.productValidationResult.CategoryType, t.model.product.BankProduct.TypeID = r.ProductInfo.ProductTypeID, t.model.product.BankProduct.TypeName = r.ProductInfo.ProductTypeName, t.model.product.BankProduct.Uses = r.ProductInfo.ValidUses, t.otherBankProducts = [
          ], r.OtherBankProductCode = t.model.product.BankProduct.Code, t.otherBankProducts.push(r))  : (t.IsBusy = !1, t.message = n.utils.isUndefinedOrNull(i.Error) ? t.stringsService.systemError : i.Error.Message, o.reject(t.message)), t.AppEventsService.publish(n.common.services.AppEventsService.PSD2ClearLocalStorageTrigger), t.IsBusy = !1, o.resolve(!0))  : n.utils.isUndefinedOrNull(i.Error) || (t.IsBusy = !1, o.reject(i.Error.Message))
        }, function (i) {
          t.message = n.utils.isUndefinedOrNull(i.Error) ? t.stringsService.systemError : i.Error.Message;
          t.IsBusy = !1;
          o.reject(t.message)
        });
        if (t.selectionMode == n.model.OtherBankAccountSelectionMode.FromList) if (t.otherBankProducts.filter(function (n) {
          return n.ExistsInUserProfile
        }).length == t.otherBankProducts.length) o.reject('All the other bank accounts have already been added to your profile');
         else {
          if (t.otherBankProducts.filter(function (n) {
            return n.AddProduct && !n.ExistsInUserProfile
          }).length > 0) return o.resolve(!0);
          o.reject('You must select at least one product')
      }
    })) : (t.IsBusy = !1, o.reject(t.message)), o.promise
  }
  ],
  i.push(f),
  u = {
    templateUrl: 'Templates/Features/profile/Product-otherbank-add/add-step-2',
    index: r++,
    title: t.stringsService.AddOtherBankProductStep2,
    stateName: ''
  },
  u.processStep = [
    'profileProductsService',
    'qService',
    function (i) {
      var r = t.qService.defer(),
      f = [
      ],
      u;
      if (t.selectionMode == n.model.OtherBankAccountSelectionMode.ManualEntry) t.model.product.BankProduct.TypeID = t.model.selectedBank.TypeID,
      t.model.product.BankProduct.TypeName = t.model.selectedBank.TypeName,
      f.push({
        DataType: 0,
        Name: n.server.DetailName.IS_OTHER_BANK_PRODUCT,
        Value: 'true'
      }),
      f.push({
        DataType: 0,
        Name: n.server.DetailName.BANK_NAME,
        Value: t.model.selectedBank.TypeName
      }),
      f.push({
        DataType: 1,
        Name: n.server.DetailName.PRODUCT_BANK_NAME,
        Value: t.otherBankTypeSelected.toString()
      }),
      t.model.product.BankProduct.IsOtherBankProduct = !0;
       else if (t.selectionMode == n.model.OtherBankAccountSelectionMode.FromList) return u = [
      ],
      t.otherBankProducts.forEach(function (i) {
        i.AddProduct && !i.ExistsInUserProfile && u.push({
          BankProduct: {
            CategoryType: i.ProductInfo.CategoryType,
            Uses: i.ProductInfo.ValidUses,
            TypeID: i.ProductInfo.ProductTypeID,
            TypeName: i.FriendlyName,
            CategoryGroup: n.server.CategoryGroupType.ACCOUNT,
            Code: i.OtherBankProductCode,
            IsAlphaBankProduct: !1,
            IsOtherBankProduct: !0,
            IsPreferred: !0,
            Title: i.FriendlyName,
            Details: [
              {
                DataType: 0,
                Name: n.server.DetailName.IS_OTHER_BANK_PRODUCT,
                Value: 'true'
              },
              {
                DataType: 0,
                Name: n.server.DetailName.BANK_NAME,
                Value: t.model.selectedBank.TypeName
              },
              {
                DataType: 1,
                Name: n.server.DetailName.PRODUCT_BANK_NAME,
                Value: t.otherBankTypeSelected.toString()
              }
            ]
          }
        })
      }),
      u.length == 0 && r.reject('You must select at least one product'),
      i.addProducts(u, t.model.otp).then(function (i) {
        if (!n.utils.isUndefinedOrNull(i.Products) && i.Products.length > 0 && (i.Products[0].Code == 6 || i.Products[0].Code == 1)) {
          var f = [
          ],
          e = t.isAccount ? 1 : 2;
          return t.otherBankProducts.forEach(function (n) {
            n.AddProduct && !n.ExistsInUserProfile && f.push(n)
          }),
          i.Products.forEach(function (i) {
            t.model.successMessage = i.Message;
            n.utils.isUndefinedOrNull(i.product) || (t.responseProductCode = i.product.Code)
          }),
          t.otherBankProductsService.finishOtherBankMultipleProductsAddition(t.otherBankTypeSelected, e, f).then(function (i) {
            if (i.ResultCode == 0) u.forEach(function (i) {
              t.makeProductPreferred(new n.model.ProductBase(i.BankProduct))
            }),
            t.addSuccessful = !0,
            t.AppEventsService.publish(t.model.product.InvalidateMessage),
            r.resolve(!0);
             else {
              var f = i.Error ? i.Error.Message : 'There was an error in saving the product details in  the database.';
              r.reject(f)
            }
          })
        }
        t.Model.ErrorMessage = t.extractError(i);
        t.Model.HasErrors = !0;
        r.resolve(!0)
      }),
      r.promise;
      return t.model.product.BankProduct.Details = f,
      i.addProduct(t.model.product, t.model.otp).then(function (i) {
        if (!n.utils.isUndefinedOrNull(i.Products) && i.Products.length > 0 && (i.Products[0].Code == 6 || i.Products[0].Code == 1)) {
          t.AppEventsService.publish(t.model.product.InvalidateMessage);
          i.Products[0].product.CategoryGroup == n.server.CategoryGroupType.ACCOUNT && t.AppEventsService.publish(n.common.services.AppEventsService.InvalidateCustomUiSelectCategoryGroup, n.server.CategoryGroupType.ACCOUNT);
          t.addSuccessful = !0;
          t.model.successMessage = i.Products[0].Message;
          n.utils.isUndefinedOrNull(i.Products[0].product) || (t.responseProductCode = i.Products[0].product.Code);
          var u = t.isAccount ? 1 : 2;
          return t.otherBankProducts[0].OtherBankProductCode = t.model.product.BankProduct.Code,
          t.otherBankProductsService.finishOtherBankMultipleProductsAddition(t.otherBankTypeSelected, u, t.otherBankProducts).then(function (i) {
            if (i.ResultCode == 0) t.makeProductPreferred(new n.model.ProductBase(t.product.BankProduct)),
            r.resolve(!0);
             else {
              var u = i.Error ? i.Error.Message : 'There was an error in saving the product details inside the database.';
              r.reject(u)
            }
          })
        }
        t.Model.ErrorMessage = t.extractError(i);
        t.Model.HasErrors = !0;
        r.resolve(!0)
      }).catch (function (n) {
        t.Model.ErrorMessage = t.extractError(n);
        t.Model.HasErrors = !0;
        r.resolve(!0)
      }),
      r.promise
    }
  ],
  i.push(u),
  e = {
    templateUrl: 'Templates/Features/profile/Product-otherbank-add/add-step-3',
    title: this.stringsService.AddOtherBankProductStep3,
    index: r++,
    stateName: ''
  },
  i.push(e),
  i
},
i.prototype.makeProductPreferred = function (t) {
  this.preferredCount < 10 && (t.BankProduct.IsPreferred = !0, this.profileProductsService.updateProductPreferences(new n.model.ProductBase(t.BankProduct)))
},
i.prototype.extractError = function (t) {
  var r = this.stringsService.generalError,
  i = t,
  u;
  return i && i.Message ? r = this.stringsService.generalError : i.Error && i.Error.Message ? r = i.Error.Message : n.utils.isEmptyArray(i.Products) || (u = i.Products[0], [
    6,
    1
  ].indexOf(u.Code) == - 1 && (r = i.Products[0].Message)),
  r
},
i.prototype.buildUsesString = function () {
  var n = this;
  return this.model.product.BankProduct.Uses.filter(function (n) {
    return n != 0 && n != 5
  }).map(function (t) {
    return n.STRINGS['enum.ProductUses.' + t]
  }).join()
},
i.prototype.reload = function () {
  this.goToStep(0);
  this.model = new n.model.AddProductViewModel;
  var t = new n.model.ProductBase({
  });
  t.BankProduct.Uses = [
  ];
  t.BankProduct.Details = [
  ];
  this.otherBankProducts = [
  ];
  this.selectionMode = n.model.OtherBankAccountSelectionMode.ManualEntry;
  this.model.product = this.product = t;
  this.model.selectedCountry = null;
  this.model.ibanValidationResult = {
  }
},
i.$inject = [
  '$stateParams',
  '$scope',
  '$state',
  '$injector',
  '$modal',
  'product',
  'productTypeFamily',
  'ProfileProductsService',
  'otherBanks',
  'ProductsService',
  'STRINGS',
  'QueriesService',
  'StateHelperService',
  'AppEventsService',
  '$window',
  'RegularExpressionService',
  'RoleService',
  'userSessionInfo',
  'OtherBankProductsService',
  'SharedDataService',
  'userProfileAccounts',
  'userProfileCards'
],
i
}(n.wizards.WizardController);
t.mainModule.controller('ProductOtherBankAddController', i)
}) (t = n.profile || (n.profile = {
}))
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(),
function (n) {
var t;
(function (t) {
var i = function () {
function t(t, i, r, u, f, e, o, s, h, c, l, a) {
  var v,
  y,
  p;
  if (this.$q = t, this.product = i, this.validUsesForProduct = r, this.profileProductsService = u, this.sessionInfo = f, this.cdimatch = e, this.windowService = o, this.stringService = s, this.AppEventsService = h, this.roleService = c, this.productInfo = l, this.otpHandler = a, this.saving = !1, this.disableView = !1, this.CanEditFriendlyNameProduct = !1, this.CanEditUsesProduct = !1, this.CanEditColorProduct = !1, this.CanEditOverviewProduct = !1, this.productOriginal = new n.model.AccountProduct(angular.copy(i.BankProduct)), v = this, n.utils.isUndefinedOrNull(v.productInfo) || v.productInfo.ResultCode != 1) if (n.utils.isUndefinedOrNull(v.productInfo) || n.utils.isUndefinedOrNull(v.productInfo.ProductInfo) || l.ProductInfo.length != 0 && n.utils.isUndefinedOrNull(l.ProductInfo[0].ErrorMessage)) {
    if (v.availableUses = v.validUsesForProduct.slice(), v.product.BankProduct.RequestTypes.indexOf(n.server.ProductRequestType.INTERBANK_CARDS) == - 1 && v.product.BankProduct.RequestTypes.indexOf(n.server.ProductRequestType.AllInterbankAccounts) == - 1 && v.product.BankProduct.RequestTypes.indexOf(n.server.ProductRequestType.AllInternationalAccounts) == - 1 && v.product.BankProduct.RequestTypes.indexOf(n.server.ProductRequestType.AllInvestments) == - 1 && !v.cdimatch && v.roleService.IsRetail()) for (v.validUsesForProduct = v.product.CategoryType == 10001 || v.product.CategoryType == 104 ? [
      1
    ] : v.product.CategoryType == 103 || v.product.CategoryType == 102 || v.product.CategoryType == 202 || v.product.CategoryType == 201001 && v.product.TypeID == 2002 ? [
    ] : [
      4
    ], v.availableUses = v.validUsesForProduct.slice(), y = 0; y < v.productOriginal.Uses.length; y++) v.validUsesForProduct.indexOf(v.productOriginal.Uses[y]) == - 1 && (v.availableUses.push(v.productOriginal.Uses[y]), v.disableView = !0)
  } else this.errorMessage = this.getProductErrorMessage(v.productInfo);
   else this.errorMessage = n.utils.isUndefinedOrNull(v.productInfo.Error) ? v.stringService.systemError : v.productInfo.Error.Message;
  p = !1;
  v.product.BankProduct && v.product.BankProduct.Details && (p = v.product.BankProduct.Details.some(function (t) {
    return t.Name === n.server.DetailName.IS_OTHER_BANK_PRODUCT && t.Value === 'true'
  }));
  p && (v.disableView = !1);
  this.preferredCount = 0;
  this.CanEditFriendlyNameProduct = this.sessionInfo.UserInfo.Permissions.indexOf('EditFriendlyNameProduct') >= 0;
  this.CanEditUsesProduct = this.sessionInfo.UserInfo.Permissions.indexOf('EditUsesProduct') >= 0;
  this.CanEditColorProduct = this.sessionInfo.UserInfo.Permissions.indexOf('EditColorProduct') >= 0;
  this.CanEditOverviewProduct = this.sessionInfo.UserInfo.Permissions.indexOf('EditOverviewProduct') >= 0;
  this.profileProductsService.getPreferredProductsCount(i.CategoryGroupType).then(function (n) {
    v.preferredCount = n
  })
}
return Object.defineProperty(t.prototype, 'userHasOtpEnabled', {
  get: function () {
    return this.sessionInfo.OTPStatus === 1 || this.sessionInfo.OTPStatus === 0
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(t.prototype, 'otpKey', {
  get: function () {
    return this.otpHandler.caller
  },
  enumerable: !0,
  configurable: !0
}),
t.prototype.hasEnquirySelected = function () {
  return this.model.Uses.indexOf(3) != - 1
},
t.prototype.friendlyNameChanged = function () {
  return this.hasChanges(this.productOriginal.FriendlyName, this.model.Title)
},
t.prototype.hasChanges = function (n, t) {
  return n != t
},
t.prototype.canPrefer = function () {
  return this.hasEnquirySelected && (this.preferredCount < 10 || this.preferredCount == 10 && this.product.IsPreferred) && !this.disableView
},
t.prototype.showsMessage = function () {
  return !n.utils.isUndefinedOrNullorWhiteSpace(this.boxMessage)
},
t.prototype.hasEnquiry = function () {
  return this.product.Uses.indexOf(3) != - 1
},
t.prototype.disableSave = function () {
  var n = this.friendlyNameChanged();
  return this.friendlyNameChanged() ? !1 : this.form.$pristine || this.saving || this.disableView
},
t.prototype.back = function () {
  this.windowService.history.back()
},
t.prototype.getProductErrorMessage = function (t) {
  return t.ProductInfo.length == 0 ? this.stringService.systemError : n.utils.isUndefinedOrNull(t.ProductInfo[0].ErrorMessage) ? undefined : t.ProductInfo[0].ErrorMessage
},
t.prototype.submit = function () {
  var t = this,
  r = this,
  i;
  return r.showValidationErrors = !0,
  r.form && n.utils.forceValidation(r.form),
  this.form.$dirty && this.form.$valid ? (this.saving = !0, i = this.buildUpdateInfo(), this.otpHandler.reset({
    payload: i.payload
  }).result().then(function (n) {
    return i.majorChange ? t.profileProductsService.updateProduct(i.product, n)  : t.profileProductsService.updateProductPreferences(i.product)
  }).then(function (n) {
    var i = r.validateResponse(n);
    if (i) return t.$q.reject(i);
    t.handleSuccess(n)
  }).catch (function (n) {
    return t.handleError(n)
  }).finally (function () {
    t.saving = !1
  }))  : void 0
},
t.prototype.validateResponse = function (t) {
  return t.ResultCode == 1 ? t.Error.Message : !n.utils.isUndefinedOrNull(t.Products) && t.Products[0].Code != 6 && t.Products[0].Code != 1 ? t.Products[0].Message : null
},
t.prototype.handleSuccess = function (t) {
  t.Products[0].Code == 1 && (this.product.BankProduct = this.model, this.AppEventsService.publish(this.product.InvalidateMessage), this.product.TypeID == 10046 && this.AppEventsService.publish(n.common.services.AppEventsService.InvalidateLookups_Event, [
    'PredefinedCodesForPaymentType_10046'
  ]));
  this.AppEventsService.publish(n.common.services.AppEventsService.InvalidateCustomUiSelectProduct, this.product.BankProduct.Code);
  this.boxMessage = t.Products[0].Message + '. <br/>' + this.stringService.dateTime + ' ' + (new Date).toLocaleString('en-GB');
  this.boxMessageType = 'success';
  this.state = this.getState(this.product.BankProduct);
  this.form.$setPristine()
},
t.prototype.handleError = function (t) {
  t = t || {
  };
  t.userCancel || (this.boxMessage = n.utils.getErrorMsg(t), this.boxMessageType = 'error', this.state = this.getState(this.product.BankProduct), this.model = angular.copy(this.product.BankProduct), this.form.$setPristine())
},
t.prototype.getState = function (t) {
  var i;
  return t.CategoryType == 10001 ? i = n.constants.stateNames.settingsAlphaAccounts : t.CategoryType == 10002 ? i = n.constants.stateNames.settingsGreekAccounts : t.CategoryType == 10003 ? i = n.constants.stateNames.settingsOtherAccounts : t.RequestTypes.indexOf(n.server.ProductRequestType.AllCards) > - 1 && t.CategoryType != 10000 ? i = n.constants.stateNames.settingsAlphaCards : t.RequestTypes.indexOf(n.server.ProductRequestType.AllCards) > - 1 && t.CategoryType == 10000 ? i = n.constants.stateNames.settingsOtherCards : t.RequestTypes.indexOf(n.server.ProductRequestType.AllLoans) > - 1 ? i = n.constants.stateNames.settingsLoans : t.RequestTypes.indexOf(n.server.ProductRequestType.AllInvestments) > - 1 && (i = n.constants.stateNames.settingsInvestments),
  i
},
t.prototype.buildUpdateInfo = function () {
  var i = new n.model.AccountProduct(this.model),
  r = !1,
  t,
  u,
  f;
  for (t in i.BankProduct) {
    if (t != 'Color' && t != 'Details' && t != 'Uses' && t != 'RequestTypes' && t != 'CachedProductRequestType' && i.BankProduct[t] != this.productOriginal.BankProduct[t]) {
      r = !0;
      break
    }
    if (t == 'Uses' || t == 'RequestTypes' || t == 'CachedProductRequestType') {
      if (i.BankProduct[t].length != this.productOriginal.BankProduct[t].length) {
        r = !0;
        break
      }
      for (u = 0; u < i.BankProduct[t].length; u++) if (i.BankProduct[t][u] != this.productOriginal.BankProduct[t][u]) {
        r = !0;
        break
      }
    }
  }
  return f = r ? 2 : 0,
  {
    majorChange: r,
    product: i,
    payload: this.profileProductsService.buildUpdateProductModel(i, f)
  }
},
t.$inject = [
  '$q',
  'product',
  'validUsesForProduct',
  'ProfileProductsService',
  'sessionInfo',
  'cdimatch',
  '$window',
  'STRINGS',
  'AppEventsService',
  'RoleService',
  'productInfo',
  'otpHandler'
],
t
}(),
r = function (n) {
function t(t, i, r, u, f, e, o, s, h, c, l, a, v) {
  var y = n.call(this, i, r, u, f, e, o, s, h, c, l, a, v) || this;
  return y.stringService = h,
  y.canChangeUses = !1,
  y.canChangeUses = y.roleService.IsIndividualUser() ? o : (y.userHasOtpEnabled || y.sessionInfo.UserInfo.Role == 10) && y.product.IsAlphaBankProduct && !y.product.hasError && !y.disableView,
  y.model = angular.copy(y.product.BankProduct),
  y.canChangeColor = y.product.IsPreferred,
  y
}
return __extends(t, n),
Object.defineProperty(t.prototype, 'showOtpRequiredMessageForUses', {
  get: function () {
    return this.CanEditUsesProduct && this.canChangeUses && this.availableUses.length > 1 && !this.roleService.IsRetail()
  },
  enumerable: !0,
  configurable: !0
}),
t.$inject = [
  '$scope'
].concat(i.$inject),
t
}(i);
t.mainModule.controller('ProductSettingsController', r)
}) (t = n.profile || (n.profile = {
}))
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(),
function (n) {
var t;
(function (t) {
function g(n, t) {
for (var r, u, e = [
  'NoRole',
  'IndividualUser',
  'AdvancedIndividual',
  'PersonalCompany',
  'BMaster',
  'CompanyAdminUser',
  'CompanyAdminUser_DualAction',
  'SimpleCompany',
  'CompanyEndUser',
  'CallCenterUser',
  'Alphaphone',
  'CompanyEndUser_DualAction',
  'Mobile',
  'CompanyApproverUser',
  'PaymentHub',
  'PaymentHub_Mobile'
], f = [
], i = 0; i < n.length; i++) for (r = 0; r < n[i].Services.Service.length; r++) if (u = !1, t.forEach(function (t) {
  n[i].Services.Service[r] == e[t] && (f.push(n[i]), u = !0)
}), u) break;
return f
}
var d = function () {
function n() {
}
return n.prototype.IsPristine = function (n) {
  return n.$pristine
},
n
}(),
u,
f,
e,
i,
r,
o,
s,
h,
c,
l,
a,
v,
y,
p,
w,
b,
k;
t.UpdateTransferLimitVM = d;
u = function () {
function n() {
  this.Contacts = [
  ];
  this.OTP = null;
  this.CompanyUserContacts = [
  ]
}
return n
}();
t.UpdateContactInfo = u;
f = function () {
function n(n, t, i) {
  this.contact = n;
  this.action = t;
  this.mode = i
}
return n
}();
t.DeltaContact = f;
e = function () {
function n(n, t, i) {
  this.ContactType = n;
  this.Description = t;
  this.PinVerification = i
}
return n
}();
t.Contact = e;
i = function () {
function t(n, t, i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k) {
  this.userSession = n;
  this.scope = t;
  this.SecurityService = i;
  this.$state = r;
  this.AppEventsService = u;
  this.hasActiveAlerts = f;
  this.hasTransactionAlerts = e;
  this.$modal = o;
  this.stringservice = s;
  this.fifteenDigitCode = h;
  this.sevenDigitCode = c;
  this.referer = l;
  this.$q = a;
  this.regularExpressionProvider = v;
  this.roleService = y;
  this.p2pEnabled = p;
  this.CachingService = w;
  this.dialCodeService = b;
  this.dialCodeMatcher = k;
  this.showAlertsWarning = !1;
  this.templateUrl = this.$state.params.email == 'true' || !this.roleService.isAccessAllowed('EditSubscriptionInfo') ? 'Templates/Features/Profile/profile-email' : 'Templates/Features/Profile/profile';
  this.roleService.IsRetail() || (this.templateUrl = 'Templates/Features/Profile/profile-corporate');
  console.log(this.templateUrl);
  this.mobile = this.originalMobile = this.splitPhone(this.userSession.MobilePhone, 'mobile');
  this.tel1 = this.originalTel1 = this.splitPhone(this.userSession.Telephone, 'home');
  this.tel2 = this.originalTel2 = this.splitPhone(this.userSession.PrimaryTelephone, 'work');
  this.fax = this.originalFax = this.splitPhone(this.userSession.Fax, 'fax');
  this.originalEmail = this.userSession.Email;
  !this.roleService.IsRetail() && this.userSession.CompanyUserContacts && (this.originalCompanyUserPersonalEmail = this.userSession.CompanyUserContacts.Email, this.companyUserPersonalMobile = this.originalCompanyUserPersonalMobile = this.splitPhone(this.userSession.CompanyUserContacts.MobilePhone, 'companyUserPersonalMobile'));
  this.revertChanges()
}
return Object.defineProperty(t.prototype, 'dialCodes', {
  get: function () {
    return this.dialCodeService.dialCodes
  },
  enumerable: !0,
  configurable: !0
}),
t.prototype.splitPhone = function (n, t) {
  var i = this.dialCodeMatcher.splitPhone(n);
  return this.updateDialCode(i.dialCode, t),
  this.setPhoneValidation(t, this.dialCodeService.getValidation(i.dialCode)),
  i.phone
},
t.prototype.updateDialCode = function (n, t) {
  switch (t) {
    case 'mobile':
      this.mobileDc = this.originalMobileDc = n;
      break;
    case 'home':
      this.tel1Dc = this.originalTel1Dc = n;
      break;
    case 'work':
      this.tel2Dc = this.originalTel2Dc = n;
      break;
    case 'fax':
      this.faxDc = this.originalFaxDc = n;
      break;
    case 'companyUserPersonalMobile':
      this.companyUserPersonalMobileDC = this.originalCompanyUserPersonalMobileDC = n
  }
},
t.prototype.updatePhonePattern = function (n) {
  var t = null;
  switch (n) {
    case 'home':
      t = this.tel1Dc;
      break;
    case 'work':
      t = this.tel2Dc;
      break;
    case 'mobile':
      t = this.mobileDc;
      break;
    case 'fax':
      t = this.faxDc;
      break;
    case 'companyUserPersonalMobile':
      t = this.companyUserPersonalMobileDC
  }
  t && this.setPhoneValidation(n, this.dialCodeService.getValidation(t))
},
t.prototype.setPhoneValidation = function (n, t) {
  if (t) switch (n) {
    case 'home':
      this.homePattern = t.pattern;
      this.homePatternError = t.errorMessage;
      break;
    case 'work':
      this.workPattern = t.pattern;
      this.workPatternError = t.errorMessage;
      break;
    case 'mobile':
    case 'companyUserPersonalMobile':
      this.mobilePattern = t.pattern;
      this.mobilePatternError = t.errorMessage;
      break;
    case 'fax':
      this.faxPattern = t.pattern;
      this.faxPatternError = t.errorMessage
  }
},
t.prototype.canSubmit = function () {
  return !this.IsBusy && this.canEditValues && (this.fromPopup || this.emailChanged() || this.mobileChanged() || this.tel1Changed() || this.tel2Changed() || this.faxChanged())
},
t.prototype.hasChanges = function (n, t) {
  return n != t
},
t.prototype.confirmOnly = function () {
  return !this.emailChanged() && !this.mobileChanged() && !this.tel1Changed() && !this.tel2Changed() && !this.faxChanged()
},
t.prototype.mobileChanged = function () {
  return this.hasChanges(this.originalMobile, this.mobile) || this.hasChanges(this.originalMobileDc.Code, this.mobileDc.Code)
},
t.prototype.tel1Changed = function () {
  return this.hasChanges(this.originalTel1, this.tel1) || this.hasChanges(this.originalTel1Dc.Code, this.tel1Dc.Code)
},
t.prototype.tel2Changed = function () {
  return this.hasChanges(this.originalTel2, this.tel2) || this.hasChanges(this.originalTel2Dc.Code, this.tel2Dc.Code)
},
t.prototype.faxChanged = function () {
  return this.hasChanges(this.originalFax, this.fax) || this.hasChanges(this.originalFaxDc.Code, this.faxDc.Code)
},
t.prototype.emailChanged = function () {
  return this.hasChanges(this.originalEmail, this.model.Email)
},
t.prototype.companyUserPersonalEmailChanged = function () {
  return this.model.CompanyUserContacts ? this.hasChanges(this.originalCompanyUserPersonalEmail, this.model.CompanyUserContacts.Email)  : !1
},
t.prototype.companyUserPersonalMobileChanged = function () {
  return this.model.CompanyUserContacts ? this.hasChanges(this.originalCompanyUserPersonalMobile, this.companyUserPersonalMobile) || this.hasChanges(this.originalCompanyUserPersonalMobileDC.Code, this.companyUserPersonalMobileDC.Code)  : !1
},
Object.defineProperty(t.prototype, 'canEditValues', {
  get: function () {
    return !this.IsBusy && this.roleService.isAccessAllowed('EditSubscriptionInfo')
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(t.prototype, 'isOtpEnabled', {
  get: function () {
    return this.userSession.OTPStatus === 1 || this.userSession.OTPStatus === 0
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(t.prototype, 'canEditMobilePhone', {
  get: function () {
    return this.canEditValues && (this.isOtpEnabled || this.roleService.IsRetail())
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(t.prototype, 'canEditPersonalMobile', {
  get: function () {
    return !1
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(t.prototype, 'canEditEmail', {
  get: function () {
    return this.canEditValues && this.isOtpEnabled
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(t.prototype, 'canEditPersonalEmail', {
  get: function () {
    return !1
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(t.prototype, 'canEditExtraValues', {
  get: function () {
    return this.canEditValues && (this.isOtpEnabled || !this.roleService.IsRetail())
  },
  enumerable: !0,
  configurable: !0
}),
t.prototype.revertChanges = function () {
  this.model = angular.copy(this.userSession);
  this.model.Email = this.userSession.Email;
  this.showValidationErrors = !1
},
t.prototype.pushContactsToPayload = function (t, i) {
  if (this.Success) return i = i || {
    mobileToken: null,
    emailToken: null
  },
  t.Contacts = [
  ],
  (this.emailChanged() || this.confirmOnly()) && t.Contacts.push(new n.profile.Contact(4, this.model.Email, i.emailToken)),
  (this.faxChanged() || this.confirmOnly()) && (this.model.Fax = this.dialCodeService.fullPhone(this.fax, this.faxDc), t.Contacts.push(new n.profile.Contact(2, this.model.Fax, null))),
  (this.mobileChanged() || this.confirmOnly()) && (this.model.MobilePhone = this.dialCodeService.fullPhone(this.mobile, this.mobileDc), t.Contacts.push(new n.profile.Contact(3, this.model.MobilePhone, i.mobileToken))),
  (this.tel1Changed() || this.confirmOnly()) && (this.model.Telephone = this.dialCodeService.fullPhone(this.tel1, this.tel1Dc), t.Contacts.push(new n.profile.Contact(1, this.model.Telephone, null))),
  (this.tel2Changed() || this.confirmOnly()) && (this.model.PrimaryTelephone = this.dialCodeService.fullPhone(this.tel2, this.tel2Dc), t.Contacts.push(new n.profile.Contact(6, this.model.PrimaryTelephone, null))),
  t
},
t.prototype.validateMobile = function () {
  return !this.dialCodeService.hasDialCode(this.mobile, this.mobileDc)
},
t.$inject = [
  'model',
  '$scope',
  'SecurityService',
  '$state',
  'AppEventsService',
  'hasActiveAlerts',
  'hasTransactionAlerts',
  '$modal',
  'STRINGS',
  'fifteenDigitCode',
  'sevenDigitCode',
  'referer',
  '$q',
  'RegularExpressionService',
  'RoleService',
  'p2pEnabled',
  'CachingService',
  'DialCodeService',
  'dialCodeMatcher'
],
t
}();
t.ProfileController = i;
n.profile.mainModule.controller('ProfileController', i);
r = function () {
function t(t, i, r, u) {
  this.SecurityService = t;
  this.scope = i;
  this.stringService = r;
  this.eventService = u;
  this.eventsToPublish = [
    n.common.services.AppEventsService.InvalidateUserSessionInfo_Event
  ];
  this.password1 = '';
  this.password2 = '';
  this.oldPassword = '';
  this.showValidationErrors = !1;
  this.IsBusy = !1
}
return t.prototype.saveChanges = function () {
  var n = this;
  if (n.scope.form && n.scope.form.$valid) {
    if (n.IsBusy = !0, this.oldPassword === this.password1) {
      n.boxMessage = n.stringService.samePasswordError;
      n.boxMessageType = 'error';
      n.scope.form.$setPristine();
      n.IsBusy = !1;
      return
    }
    this.SecurityService.changePassword(this.oldPassword, this.password1).then(function (t) {
      t.ResultCode == 0 ? (n.eventsToPublish.forEach(function (t) {
        n.eventService.publish(t)
      }), n.boxMessage = n.stringService.successfulPwdModification, n.boxMessageType = 'success')  : (n.boxMessage = t.Error.Message, n.boxMessageType = 'error');
      n.scope.form.$setPristine();
      n.IsBusy = !1
    }, function () {
      n.boxMessage = 'system error';
      n.boxMessageType = 'error';
      n.scope.form.$setPristine();
      n.IsBusy = !1
    })
  } else n.showValidationErrors = !0
},
t.$inject = [
  'SecurityService',
  '$scope',
  'STRINGS',
  'AppEventsService'
],
t
}();
n.profile.mainModule.controller('ProfileChangePasswordController', r);
o = function (t) {
function i(i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b) {
  var k = t.call(this, r, u) || this;
  return k.securityService = i,
  k.$scope = r,
  k.$injector = u,
  k.stringService = f,
  k.eventService = e,
  k.modalService = o,
  k.stateService = s,
  k.logoffService = h,
  k.roleService = c,
  k.Consent = l,
  k.localeService = a,
  k.isInVersion = v,
  k.userInfo = y,
  k.GDPRData = p,
  k.shouldUpdateInform = w,
  k.updateGDPRDataResolver = b,
  k.questions = new n.model.GDPRChannelConsentQuestions,
  k.ConsentAnswers = [
  ],
  k.IsBusy = !1,
  k.showValidationErrors = !1,
  k.Locale = k.localeService.getLanguage().toLowerCase(),
  k.PDF = k.showPDF(k.Locale),
  k.isinversion = v,
  k.isinversion ? k.hasConsented = k.Consent : k.GDPRData.ResultCode == 0 && k.updateConsentUI(),
  k
}
return __extends(i, t),
i.prototype.rotate = function (n) {
  var t = angular.element(n.currentTarget).find('i');
  if (t.hasClass('arrowUp')) t.removeClass('arrowUp'),
  t.addClass('arrowDown');
   else if (t.hasClass('arrowDown')) t.removeClass('arrowDown'),
  t.addClass('arrowUp');
   else return
},
i.prototype.checkTrue = function (n) {
  return n == !0
},
i.prototype.checkIfAllAnwsersAreValid = function (n, t) {
  if (n.length < 4) return !1;
  var i = [
  ];
  return (n.forEach(function (n) {
    n.value && i.push(n.value)
  }), t) ? i.length >= 1 : t ? !1 : i.length == 0
},
i.prototype.StoreAnswer = function (t, i, r) {
  var f = this.ConsentAnswers.filter(function (n) {
    return n.code == r
  }) [0],
  u;
  if (!n.utils.isUndefinedOrNull(f)) {
    this.ConsentAnswers.forEach(function (n) {
      n.index == t && (n.value = i)
    });
    return
  }
  u = {
    index: t,
    value: i,
    hasBeenAnswered: !0,
    code: r
  };
  this.ConsentAnswers.push(u)
},
i.prototype.initialiseSteps = function () {
  var t = this,
  i = [
  ],
  u = {
    templateUrl: 'Templates/Features/Profile/GDPR/step1',
    title: 'Προστασία δεδομένων προσωπικού χαρακτήρα'
  },
  r;
  return u.processStep = [
    'qService',
    'SecurityService',
    '$scope',
    '$injector',
    'STRINGS',
    'AppEventsService',
    '$modal',
    '$state',
    'logoffService',
    'RoleService',
    function (i, r, u, f, e) {
      var c,
      o,
      s,
      h;
      return t.hasConsented != null ? (c = t.checkIfAllAnwsersAreValid(t.ConsentAnswers, t.hasConsented), c ? (o = {
      }, o.ConsentContactChannels = [
      ], t.ConsentAnswers.forEach(function (n) {
        var t = {
          ConsentContactCode: n.code,
          ConsentContactValue: n.value
        };
        o.ConsentContactChannels.push(t)
      }), s = {
      }, s.UpdateAction = 1, s.Consent = o, h = {
      }, h.InformChannel = t.GDPRData.Inform.InformChannel, s.Inform = h, o.ConsentStatus = t.hasConsented ? n.model.ConsentStatus.Consent : n.model.ConsentStatus.NotConsent, t.securityService.updateGDPRData(s).then(function (r) {
        return r.ResultCode == 0 && r.ApplicationID ? (t.isSuccess = !0, !0)  : (t.Model.HasErrors = !0, t.Model.ErrorMessage = n.utils.getErrorMsg(r), scroll(0, 0), i.reject(t.Model.ErrorMessage))
      }).catch (function (t) {
        var r = n.utils.getErrorMsg(t);
        return i.reject(r)
      }))  : (t.Model.HasErrors = !0, t.Model.ErrorMessage = t.hasConsented ? e.GDPR_Select_At_Least_One_Channel : e.GDPR_Consent_Before_Choosing, scroll(0, 0), i.reject(t.Model.ErrorMessage)))  : (t.Model.HasErrors = !0, t.Model.ErrorMessage = e.GDPR_NoInputError, scroll(0, 0), i.reject(t.Model.ErrorMessage))
    }
  ],
  i.push(u),
  r = {
    templateUrl: 'Templates/Features/Profile/GDPR/step2',
    title: 'Επιβεβαίωση Στοιχείων'
  },
  r.processStep = [
    '$q',
    'PaymentsService',
    'AppEventsService',
    'STRINGS',
    function () {
      var n = this
    }
  ],
  i.push(r),
  i
},
i.prototype.exportPDF = function () {
  var n = {
  },
  t;
  return n.PDFRequestType = 59,
  this.isInVersion ? n.Parameters = String(this.hasConsented)  : (t = {
    CDI: this.userInfo.CDINumber,
    Consent: this.hasConsented,
    FatherName: this.GDPRData.FatherName1,
    Name: this.GDPRData.FirstName1,
    Surname: this.GDPRData.LastName1,
    Channel: 3
  }, n.Parameters = JSON.stringify(t)),
  n
},
i.prototype.showPDF = function (n) {
  return n == 'el' ? 'https://apps.alpha.gr/gdpr/files/GDPR.pdf' : 'https://apps.alpha.gr/gdpr/files/GDPR_en.pdf'
},
i.prototype.updateConsentUI = function () {
  var t = this;
  t.GDPRData.Consent.ConsentStatus == n.model.ConsentStatus.Consent ? t.hasConsented = !0 : t.GDPRData.Consent.ConsentStatus == n.model.ConsentStatus.NotConsent ? t.hasConsented = !1 : t.GDPRData.Consent.ConsentStatus == n.model.ConsentStatus.NotDeclared && (t.hasConsented = undefined);
  t.loadSelections(t.GDPRData.Consent.ConsentContactChannels)
},
i.prototype.defaultConsentValues = function (n) {
  var t,
  i;
  for (this.questions.callConsent = n, this.questions.smsConsent = n, this.questions.emailConsent = n, this.questions.mailConsent = n, t = 0; t < 4; t++) i = '0' + (4 - t).toString(),
  this.StoreAnswer(t + 1, n, i)
},
i.prototype.loadSelections = function (n) {
  var t;
  if (n.length != 0 && n) {
    var i = n.filter(function (n) {
      return n.ConsentContactCode == '01'
    }) [0],
    r = n.filter(function (n) {
      return n.ConsentContactCode == '02'
    }) [0],
    u = n.filter(function (n) {
      return n.ConsentContactCode == '03'
    }) [0],
    f = n.filter(function (n) {
      return n.ConsentContactCode == '04'
    }) [0];
    for (this.questions.mailConsent = i.ConsentContactValue, this.questions.callConsent = r.ConsentContactValue, this.questions.emailConsent = u.ConsentContactValue, this.questions.smsConsent = f.ConsentContactValue, t = 0; t < 4; t++) this.StoreAnswer(t + 1, n[t].ConsentContactValue, n[t].ConsentContactCode)
  }
},
i.$inject = [
  'SecurityService',
  '$scope',
  '$injector',
  'STRINGS',
  'AppEventsService',
  '$modal',
  '$state',
  'logoffService',
  'RoleService',
  'Consent',
  'LanguageService',
  'isInVersion',
  'userInfo',
  'GDPRData',
  'ShouldUpdateInform',
  'UpdateGDPRDataResolver'
],
i
}(n.wizards.WizardController);
n.profile.mainModule.controller('GDPRConsentController', o);
s = function (t) {
function i(i, r, u, f, e, o, s, h) {
  var c = t.call(this, i, r, u, f) || this,
  l;
  return c.SecurityService = i,
  c.scope = r,
  c.stringService = u,
  c.eventService = f,
  c.modalService = e,
  c.stateService = o,
  c.logoffService = s,
  c.roleService = h,
  c.hasChanged = !1,
  c.MaxLengthPassword = 6,
  c.eventsToPublish = [
    n.common.services.AppEventsService.InvalidateUserSessionInfo_Event,
    n.common.services.AppEventsService.PasswordValidationSuccess_Event,
    n.common.services.AppEventsService.InvalidateCards_Event,
    n.common.services.AppEventsService.InvalidateLoans_Event
  ],
  l = c,
  f.subscribe(n.common.services.AppEventsService.PasswordValidationSuccess_Event, function () {
    l.hasChanged = !0
  }),
  c.MaxLengthPassword = h.IsRetail() ? 6 : 14,
  h.getRole() == 10 ? c.modalService.open({
    backdrop: 'static',
    keyboard: !1,
    templateUrl: 'Templates/Features/Profile/force-change-pwd-phonebanking-modal',
    controller: 'BoolResultModalInstanceCtrl as vm',
    size: 'sm',
    windowClass: 'custom'
  }).result.then(function (n) {
    n && l.logoffService.logoutAndRedirect('#logoutForm')
  })  : h.IsRetail() || (c.isCorporate = !0, h.IsAdminUser() ? c.adminFooter = !0 : c.approvalEndFooter = !0),
  c
}
return __extends(i, t),
i.prototype.back = function () {
  if (this.hasChanged) this.stateService.go('root.overview');
   else {
    var n = this;
    this.modalService.open({
      backdrop: 'static',
      keyboard: !1,
      templateUrl: 'Templates/Features/Profile/force-change-pwd-back-modal',
      controller: 'BoolResultModalInstanceCtrl as vm',
      size: 'sm',
      windowClass: 'custom'
    }).result.then(function (t) {
      t && n.logoffService.logoutAndRedirect('#logoutForm')
    })
  }
},
i.$inject = [
  'SecurityService',
  '$scope',
  'STRINGS',
  'AppEventsService',
  '$modal',
  '$state',
  'logoffService',
  'RoleService'
],
i
}(r);
n.profile.mainModule.controller('ProfileForceChangePasswordController', s);
h = function () {
function n(n, t, i, r) {
  this.SecurityService = n;
  this.scope = t;
  this.fifteenDigitCode = i;
  this.stringService = r;
  this.username1 = '';
  this.username2 = '';
  this.fifteenDigitCode == '' && (this.boxMessage = 'error', this.boxMessageType = 'error');
  this.showValidationErrors = !1;
  this.IsBusy = !1
}
return n.prototype.saveChanges = function () {
  var n = this;
  n.scope.form && n.scope.form.$valid ? (n.IsBusy = !0, this.SecurityService.changeUserName({
    NewUserName: n.username1
  }).then(function (t) {
    t.ResultCode == 0 ? (n.boxMessage = n.stringService.successfulUsernameModification, n.boxMessageType = 'success')  : (n.boxMessage = t.Error.Message, n.boxMessageType = 'error');
    n.scope.form.$setPristine();
    n.IsBusy = !1
  }))  : n.showValidationErrors = !0
},
n.$inject = [
  'SecurityService',
  '$scope',
  'fifteenDigitCode',
  'STRINGS'
],
n
}();
n.profile.mainModule.controller('ProfileChangeUsernameController', h);
c = function () {
function t(n, t, i, r, u, f, e, o, s) {
  this.SecurityService = n;
  this.scope = t;
  this.modal = i;
  this.name = r;
  this.accounts = u;
  this.cards = f;
  this.loans = e;
  this.stateService = o;
  this.roleService = s;
  this.showValidationErrors = !1;
  this.IsBusy = !1;
  this.isCorp = !1;
  this.warned = !1;
  this.isPhoneBanking = !1;
  this.showValidationErrors = !1;
  this.IsBusy = !1;
  this.isCorp = !s.IsRetail();
  var h = this;
  this.isCorp && n.getUserSessionInfo().then(function (n) {
    h.corpname = n.UserInfo.CompanyInfo.Name
  });
  s.getRole() == 10 && (this.isPhoneBanking = !0);
  this.accounts = this.accounts.filter(function (n) {
    return n.hasEstatementsActivated
  });
  this.cards = this.cards.filter(function (n) {
    return n.hasEstatementsActivated
  });
  this.loans = this.loans.filter(function (n) {
    return n.hasEstatementsActivated
  })
}
return t.prototype.saveChanges = function () {
  var n = this,
  t;
  this.isPhoneBanking && (n.scope.form.$valid = !0, n.disableReason = 'PhoneBanking');
  n.scope.form && n.scope.form.$valid ? (n.IsBusy = !0, t = this.modal.open({
    templateUrl: 'Templates/Features/Profile/disableSubscriptionModal',
    controller: 'DisableSubscriptionModalInstanceCtrl as vm',
    backdrop: 'static',
    size: 'sm',
    windowClass: 'custom',
    resolve: {
      disableReason: [
        function () {
          return n.disableReason
        }
      ],
      securityService: [
        function () {
          return n.SecurityService
        }
      ],
      name: [
        function () {
          return n.name
        }
      ]
    }
  }), t.result.then(function (t) {
    n.modalCloseDismiss(t)
  }, function (t) {
    n.modalCloseDismiss(t)
  }))  : n.showValidationErrors = !0
},
t.prototype.modalCloseDismiss = function (t) {
  var i = this;
  n.utils.isUndefinedOrNull(t.Error) ? this.isCorp && this.SecurityService.signOff().then(function () {
    i.stateService.reload()
  })  : this.errorMessage = t.Error.Message
},
t.prototype.showWarning = function () {
  if (!this.warned && (this.accounts.length > 0 || this.cards.length > 0 || this.loans.length > 0)) var n = this,
  t = this.modal.open({
    templateUrl: 'Templates/Features/Profile/estatements-warning',
    controller: 'EstatementsWarningModalInstanceCtrl as vm',
    size: 'lg',
    windowClass: 'custom',
    backdrop: 'static',
    keyboard: !1,
    resolve: {
      accounts: [
        function () {
          return n.accounts
        }
      ],
      cards: [
        function () {
          return n.cards
        }
      ],
      loans: [
        function () {
          return n.loans
        }
      ]
    }
  }).result.then(function (t) {
    n.warned = !0;
    t == 1 && n.stateService.go('root.services.estatements.accounts-list')
  })
},
t.$inject = [
  'SecurityService',
  '$scope',
  '$modal',
  'name',
  'accounts',
  'cards',
  'loans',
  '$state',
  'RoleService'
],
t
}();
n.profile.mainModule.controller('DeactivateAccountController', c);
l = function (t) {
function i(i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b) {
  var k = t.call(this, i, r) || this,
  g,
  nt,
  d,
  tt;
  return k.$scope = i,
  k.$injector = r,
  k.$stateService = u,
  k.securityService = f,
  k.userInfo = e,
  k.filterService = o,
  k.roleService = s,
  k.regularExpressionProvider = h,
  k.SharedDataService = c,
  k.cdiCustomerData = l,
  k.dialCodes = a,
  k.referer = v,
  k.stringservice = y,
  k.$modal = p,
  k.$q = w,
  k.documentUploadService = b,
  k.Model = {
    HasErrors: !1,
    ErrorMessage: '',
    HasFatalError: !1
  },
  k.hasChangedEmail = !1,
  k.hasChangedPhone = !1,
  k.editEmailInfo = !1,
  k.editPhoneInfo = !1,
  k.isAWBUser = !1,
  k.Success = !0,
  k.payload = {
  },
  k.fromPopup = k.$stateService.params.email != '',
  k.userInformation = k.userInfo,
  k.IsConfirmButtonActive = k.confirmContactDetailsInput = !1,
  g = k.roleService.IsIndividualUser(),
  nt = k.userInfo.Channel === 3,
  k.isAWBUser = g && nt,
  k.cdiCustomerData.ResultCode === 1 ? (k.Model.HasErrors = !0, k.cdiCustomerData.Error && (k.Model.ErrorMessage = k.cdiCustomerData.Error.Message))  : (k.greekCode = k.dialCodes.Data.filter(function (n) {
    return n.Code == '30'
  }), k.endPhoneValue = k.initialPhoneValue = k.splitPhone(k.cdiCustomerData.MobileNumber), d = '', k.cdiCustomerData.Email && (d = k.cdiCustomerData.Email.replace('`', '@')), k.endEmailValue = k.initialEmailValue = d, tt = c.GetControllerData(n.server.Controllers.ConfirmContactDetailsController, 'HasVisitedConfirmContactDetailsState'), tt && k.beginFileUpload()),
  k
}
return __extends(i, t),
i.prototype.UpdateConfirmButtonState = function () {
  this.IsConfirmButtonActive = this.editEmailInfo || this.editPhoneInfo ? !1 : this.confirmContactDetailsInput
},
i.prototype.needsToken = function (t) {
  return t.Email === '' && this.hasChanges(this.initialEmailValue, t.Email) && (this.hasChangedEmail = !0),
  t.Mobile === '' && this.hasChanges(this.initialPhoneValue, t.Mobile) && (this.hasChangedPhone = !0),
  !n.utils.isUndefinedOrNull(t.Email) && t.Email !== '' || !n.utils.isUndefinedOrNull(t.Mobile) && t.Mobile !== ''
},
i.prototype.process = function (t) {
  var i = this;
  i.showValidationErrors = !0;
  i.scope.form && i.scope.form.$valid && (i.IsBusy = !0, n.utils.forceValidation(i.scope.form), i.save(t).then(function () {
    switch (t) {
      case 'email':
        i.Success ? i.initialEmailValue = i.endEmailValue : i.endEmailValue = i.initialEmailValue;
        break;
      case 'phone':
        i.Success ? i.initialPhoneValue = i.endPhoneValue : i.endPhoneValue = i.initialPhoneValue
    }
    i.UpdateConfirmButtonState()
  })); i.IsBusy = !1
},
i.prototype.save = function (t) {
  var i = this,
  r,
  u,
  f;
  return i.Success = !0,
  i.Model.ErrorMessage = '',
  i.endPhoneValue && i.mobileDc && i.mobileDc.Code && i.endPhoneValue.indexOf(i.mobileDc.Code) == 0 && (i.Success = !1, i.Model.ErrorMessage = i.stringservice['profile.updateMobile.invalidPrefix.Error']),
  r = {
  },
  i.Success && (i.payload.Contacts = [
  ], i.emailChanged() && (r.Email = i.endEmailValue), u = n.utils.isUndefinedOrNullorWhiteSpace(i.endPhoneValue) ? '' : '00' + i.mobileDc.Code + i.endPhoneValue, i.mobileChanged() && (r.Mobile = u)),
  f = i.Success && i.needsToken(r) ? i.securityService.getSMSBankToken(r)  : i.$q.when({
    ResultCode: 1,
    Error: {
      Message: i.Model.ErrorMessage
    }
  }),
  f.then(function (u) {
    return u.ResultCode == 0 ? i.$modal.open({
      templateUrl: 'Templates/common/modals/confirmEmailMobileWithTokens',
      controller: 'ConfirmInfoWithTokensCtrl as vm',
      size: 'lg',
      windowClass: 'custom',
      backdrop: 'static',
      resolve: {
        email: function () {
          return r.Email
        },
        mobile: function () {
          return r.Mobile
        },
        btnDisabled: !0,
        smsInProgress: !0
      }
    }).result.then(function (r) {
      t == 'phone' ? (i.hasChangedPhone = !0, i.MobilePin = r.mobileToken)  : t == 'email' && (i.hasChangedEmail = !0, i.EmailPin = r.emailToken);
      i.payload.Contacts.push(new n.profile.Contact(4, i.endEmailValue, i.EmailPin));
      var u = n.utils.isUndefinedOrNullorWhiteSpace(i.endPhoneValue) ? '' : '00' + i.mobileDc.Code + i.endPhoneValue;
      return i.payload.Contacts.push(new n.profile.Contact(3, u, i.MobilePin)),
      r
    }, function () {
      t == 'phone' ? (i.endPhoneValue = i.initialPhoneValue, i.hasChangedPhone = !1)  : t == 'email' && (i.endEmailValue = i.initialEmailValue, i.hasChangedEmail = !1);
      return
    })  : u.ResultCode != 1 || n.utils.isUndefinedOrNull(u.Error) || n.utils.isUndefinedOrNullorWhiteSpace(u.Error.Message) ? null : (i.Success = !1, i.Model.ErrorMessage = u.Error.Message, null)
  }, function () {
    return i.Success = !1,
    i.Model.ErrorMessage = i.stringservice.systemError,
    null
  })
},
i.prototype.getPhonePattern = function () {
  this.mobilePattern = this.mobileDc.Code == '30' ? /^[0-9]{10,18}$/ : /^[0-9]{7,18}$/;
  this.mobilePatternError = this.mobileDc.Code == '30' ? this.stringservice.atLeast10Digits : this.stringservice.atLeast7Digits
},
i.prototype.splitPhone = function (t) {
  var r = this.greekCode[0],
  i = '',
  u;
  return t = !n.utils.isUndefinedOrNullorWhiteSpace(t) && t.substr(0, 2) == '00' ? '+' + t.substring(2)  : t,
  n.utils.isUndefinedOrNullorWhiteSpace(t) || t.substring(0, 1) != '+' ? (this.setCode(r), this.getPhonePattern(), t)  : (u = !1, i = t.substring(1, 2), i != '1' && i != '7' && (i = t.substring(1, 3), r = this.getIdCode(i), n.utils.isUndefinedOrNull(r) && (i = t.substring(1, 4), r = this.getIdCode(i))), n.utils.isUndefinedOrNull(r) || this.setCode(r), this.getPhonePattern(), t.substring(i.length + 1, t.length))
},
i.prototype.getIdCode = function (t) {
  var i = this.dialCodes.Data.filter(function (n) {
    return n.Code == t
  });
  return n.utils.isUndefinedOrNull(i) ? undefined : i[0]
},
i.prototype.setCode = function (n) {
  this.mobileDc = this.originalMobileDc = n
},
i.prototype.canSubmit = function () {
  return this.fromPopup || this.emailChanged() || this.mobileChanged()
},
i.prototype.hasChanges = function (n, t) {
  return n != t
},
i.prototype.confirmOnly = function () {
  return !this.emailChanged() && !this.mobileChanged()
},
i.prototype.mobileChanged = function () {
  return this.hasChanges(this.initialPhoneValue, this.endPhoneValue) || this.hasChanges(this.originalMobileDc.Code, this.mobileDc.Code)
},
i.prototype.emailChanged = function () {
  return this.hasChanges(this.initialEmailValue, this.endEmailValue)
},
i.prototype.editButtonClicked = function (n) {
  if (this.IsConfirmButtonActive = !1, n == 'email') {
    if (this.editPhoneInfo) return;
    this.editEmailInfo = !0
  } else if (n == 'phone') {
    if (this.editEmailInfo) return;
    this.editPhoneInfo = !0
  }
},
i.prototype.okButtonClicked = function (n) {
  this.forceValidation();
  this.scope.form.$valid && (n == 'email' ? (this.emailChanged() && this.process(n), this.editEmailInfo = !1)  : n == 'phone' && (this.mobileChanged() && this.process(n), this.editPhoneInfo = !1));
  this.UpdateConfirmButtonState()
},
i.prototype.beginFileUpload = function () {
  this.$stateService.go(n.constants.stateNames.profileDocumentUploadBegin)
},
i.prototype.ResetToInitialValues = function () {
  this.endPhoneValue = this.initialPhoneValue = this.splitPhone(this.cdiCustomerData.MobileNumber);
  var n = '';
  this.cdiCustomerData.Email && (n = this.cdiCustomerData.Email.replace('`', '@'));
  this.endEmailValue = this.initialEmailValue = n
},
i.prototype.initialiseSteps = function () {
  var t = this,
  i = [
  ],
  u = 0,
  r = {
    templateUrl: 'Templates/Features/Profile/DocumentUpload/confirm-contact-details-step1',
    title: '',
    index: u++,
    stateName: ''
  };
  return r.processStep = [
    'qService',
    function () {
      var i = t.qService.defer(),
      r,
      u;
      return n.utils.isUndefinedOrNullorWhiteSpace(t.endEmailValue) && n.utils.isUndefinedOrNullorWhiteSpace(t.endPhoneValue) ? i.reject(t.stringservice.docUploadConfirmContactDetailError)  : t.confirmContactDetailsInput ? t.isAWBUser ? (t.SharedDataService.SetGlobalControllerData(n.server.Controllers.ConfirmContactDetailsController, 'HasVisitedConfirmContactDetailsState', !0), i.resolve(!0), t.beginFileUpload())  : t.hasChangedEmail || t.hasChangedPhone ? (t.Success && t.payload.Contacts.length === 0 && (t.payload.Contacts.push(new n.profile.Contact(4, t.endEmailValue, t.EmailPin)), r = n.utils.isUndefinedOrNullorWhiteSpace(t.endPhoneValue) ? '' : '00' + t.mobileDc.Code + t.endPhoneValue, t.payload.Contacts.push(new n.profile.Contact(3, r, t.MobilePin))), u = t.Success ? t.securityService.changeContactsApplication(t.payload)  : t.$q.when({
        ResultCode: 1,
        Error: {
          Message: t.Model.ErrorMessage
        }
      }), u.then(function (i) {
        n.utils.isUndefinedOrNull(i) || (i.ResultCode == 0 ? t.Success = !0 : (t.Success = !1, t.Model.ErrorMessage = i.Error && i.Error.Message ? i.Error.Message : t.stringservice.failChange))
      }, function () {
        t.Success = !1
      }).finally (function () {
        var u,
        r;
        t.IsBusy = !1;
        t.Success || n.utils.isUndefinedOrNull(t.Model.ErrorMessage) ? (u = t.$modal.open({
          templateUrl: 'Templates/common/operationStatusModal',
          controller: 'OperationStatusModalController as vm',
          modalClass: 'custom',
          size: 'lg',
          backdrop: 'static',
          resolve: {
            model: function () {
              return {
                Success: t.Success,
                ErrorMessage: t.Model.ErrorMessage
              }
            },
            referer: function () {
              return t.referer
            }
          }
        }), t.SharedDataService.SetGlobalControllerData(n.server.Controllers.ConfirmContactDetailsController, 'HasVisitedConfirmContactDetailsState', !0), i.resolve(!0), t.beginFileUpload())  : (t.ResetToInitialValues(), r = t.Model.ErrorMessage ? t.Model.ErrorMessage : t.STRINGS.systemError, i.reject(r))
      }))  : t.documentUploadService.GetConfirmContactDetailStatus().then(function (r) {
        r.ResultCode == 0 ? (t.SharedDataService.SetGlobalControllerData(n.server.Controllers.ConfirmContactDetailsController, 'HasVisitedConfirmContactDetailsState', !0), i.resolve(!0), t.beginFileUpload())  : i.reject(t.STRINGS.systemError)
      }, function () {
        i.reject(t.STRINGS.systemError)
      })  : i.reject(t.stringservice.docUploadMustConfirmContactDetails),
      i.promise
    }
  ],
  i.push(r),
  i
},
i.$inject = [
  '$scope',
  '$injector',
  '$state',
  'SecurityService',
  'userInfo',
  '$filter',
  'RoleService',
  'RegularExpressionService',
  'SharedDataService',
  'cdiCustomerData',
  'dialCodes',
  'referer',
  'STRINGS',
  '$modal',
  '$q',
  'DocumentUploadService'
],
i
}(n.wizards.WizardController);
n.profile.mainModule.controller('ConfirmContactDetailsController', l);
a = function (t) {
function i(i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k) {
  var d = t.call(this, r, u) || this,
  tt,
  it,
  rt,
  nt,
  g;
  return d.upload = i,
  d.$scope = r,
  d.$injector = u,
  d.$stateService = f,
  d.securityService = e,
  d.userInfo = o,
  d.actionsTypesRelations = s,
  d.filterService = h,
  d.roleService = c,
  d.$http = l,
  d.SharedDataService = a,
  d.userApplications = v,
  d.documentUploadService = y,
  d.stringService = p,
  d.getDocUploadCustomerInformation = w,
  d.localeService = b,
  d.otpHandler = k,
  d.Model = {
    HasErrors: !1,
    ErrorMessage: '',
    HasFatalError: !1,
    HasIncompleteVerificationError: !1
  },
  d.CanShowWizard = !0,
  d.CanShowWizardError = '',
  d.UserActionChoice = null,
  d.UserDocumentTypeChoice = null,
  d.UserFileNameChoice = '',
  d.ValidActionsForDocumentType = [
  ],
  d.ValidActionsForDropdown = [
  ],
  d.ValidDocumentTypesForAction = [
  ],
  d.checkboxSelectionValues = [
  ],
  d.UpdatedUserPhone = '',
  d.UpdatedUserEmail = '',
  d.ApproveUseConditions = !1,
  d.VerifiedStatusValue = 3,
  d.isAWBUser = !1,
  d.needsContactDetailVerification = !1,
  d.showContinueBtn = !1,
  d.ShowExceedFileMaxSizeErrorMsg = !1,
  tt = d.roleService.IsIndividualUser(),
  d.OtherDocumentEnum = 6,
  it = d.userInfo.Channel === 3,
  d.isAWBUser = tt && it,
  d.DocUploadStepTitle = d.stringService.docUploadStepTitle,
  rt = d.SharedDataService.GetControllerData(n.server.Controllers.ConfirmContactDetailsController, 'HasVisitedConfirmContactDetailsState'),
  rt || d.isAWBUser ? d.getDocUploadCustomerInformation.ResultCode === 1 ? (d.Model.HasErrors = !0, d.getDocUploadCustomerInformation.Error && (d.Model.ErrorMessage = d.getDocUploadCustomerInformation.Error.Message))  : (nt = d.getDocUploadCustomerInformation.CdiData, nt && (n.utils.isUndefinedOrNullorWhiteSpace(nt.Email) && n.utils.isUndefinedOrNullorWhiteSpace(nt.MobileNumber) ? (d.needsContactDetailVerification = !0, d.Model.HasIncompleteVerificationError = !0)  : d.needsContactDetailVerification = !1, d.EmailToShow = nt.Email, d.MobilePhoneToShow = nt.MobileNumber), g = d.getDocUploadCustomerInformation.CustomerDetails, g && (d.HomeAddressToShow = g.HomeAddressToShow, d.WorkAddressToShow = g.WorkAddressToShow, d.AFMToShow = g.AFMToShow, d.ContactPhoneToShow = g.ContactPhoneToShow, d.ProfessionToShow = g.ProfessionToShow, d.FinancialDataToShow = g.FinancialDataToShow))  : d.$stateService.go(n.constants.stateNames.profileDocumentUploadConfirmDetails),
  d.ValidActionsForDropdown = d.getNotPendingActions(g),
  r.$on('$destroy', function () {
    d.keepOtpHandlerAlive && d.otpHandler.unregister()
  }),
  d
}
return __extends(i, t),
Object.defineProperty(i.prototype, 'hasUserOtpEnabled', {
  get: function () {
    return this.userInfo.OTPStatus === 1 || this.userInfo.OTPStatus === 0
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(i.prototype, 'otpCallerType', {
  get: function () {
    return this.otpHandler.caller
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(i.prototype, 'otpViewMode', {
  get: function () {
    return this.hasUserOtpEnabled ? n.common.services.OtpViewMode.Inline : n.common.services.OtpViewMode.Modal
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(i.prototype, 'keepOtpHandlerAlive', {
  get: function () {
    return !0
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(i.prototype, 'showNoCardsWarning', {
  get: function () {
    return this.otpHandler.showNoCardsWarning
  },
  enumerable: !0,
  configurable: !0
}),
i.prototype.ClearForm = function () {
  if (this.scope && this.scope.form) {
    var n = this.scope.form;
    n.$setPristine();
    n.$setUntouched();
    this.showValidationErrors = !1
  }
},
i.prototype.ShowContinueButton = function () {
  this.showContinueBtn = !0
},
i.prototype.HideContinueButton = function () {
  this.showContinueBtn = !1
},
i.prototype.UpdateUIValues = function () {
  var t = this;
  this.documentUploadService.DocUploadCustomerInformation({
  }).then(function (i) {
    var u,
    r;
    i.ResultCode == 0 && i.Error == null ? (u = i.CdiData, n.utils.isUndefinedOrNullorWhiteSpace(u.Email) && n.utils.isUndefinedOrNullorWhiteSpace(u.MobileNumber) ? (t.needsContactDetailVerification = !0, t.Model.HasIncompleteVerificationError = !0)  : t.needsContactDetailVerification = !1, t.EmailToShow = u.Email, t.MobilePhoneToShow = u.MobileNumber, r = i.CustomerDetails, t.ValidActionsForDropdown = t.getNotPendingActions(r), t.HomeAddressToShow = r.HomeAddressToShow, t.WorkAddressToShow = r.WorkAddressToShow, t.AFMToShow = r.AFMToShow, t.ContactPhoneToShow = r.ContactPhoneToShow, t.ProfessionToShow = r.ProfessionToShow, t.FinancialDataToShow = r.FinancialDataToShow)  : (t.Model.HasErrors = !0, t.Model.ErrorMessage = n.utils.getErrorMsg(i.Error))
  })
},
i.prototype.getNotPendingActions = function (n) {
  var t = [
  ],
  e = [
  ],
  i,
  u,
  f,
  r,
  o;
  if (n) {
    for (n.HomeAddressToShow.HasPendingApplication && t.push(n.HomeAddressToShow.Id), n.WorkAddressToShow.HasPendingApplication && t.push(n.WorkAddressToShow.Id), n.AFMToShow.HasPendingApplication && t.push(n.AFMToShow.Id), n.ContactPhoneToShow.HasPendingApplication && t.push(n.ContactPhoneToShow.Id), n.ProfessionToShow.HasPendingApplication && t.push(n.ProfessionToShow.Id), n.FinancialDataToShow.HasPendingApplication && t.push(n.FinancialDataToShow.Id), i = 0; i < this.actionsTypesRelations.AvailableUserActions.length; i++) {
      for (u = this.actionsTypesRelations.AvailableUserActions[i], f = !0, r = 0; r < t.length; r++) o = t[r],
      u.OptionKey == o && (f = !1);
      f == !0 && e.push(u)
    }
    return e
  }
  return this.actionsTypesRelations.AvailableUserActions
},
i.prototype.getDocumentTypeAvailableOptionsForAction = function (n) {
  var f = [
  ],
  t,
  i,
  e,
  r,
  u;
  if (this.actionsTypesRelations.ActionsTypesRelations && this.actionsTypesRelations.ActionsTypesRelations.length > 0 && this.actionsTypesRelations.AvailableDocumentTypes && this.actionsTypesRelations.AvailableDocumentTypes.length > 0 && (t = this.getDocumentTypesIdsForAction(n), t)) for (i = 0; i < t.length; i++) for (e = t[i], r = 0; r < this.actionsTypesRelations.AvailableDocumentTypes.length; r++) if (u = this.actionsTypesRelations.AvailableDocumentTypes[r], e === u.OptionKey) {
    f.push(u);
    break
  }
  return f
},
i.prototype.getDocumentTypesIdsForAction = function (n) {
  var r = [
  ],
  t,
  i;
  if (this.actionsTypesRelations.ActionsTypesRelations && this.actionsTypesRelations.ActionsTypesRelations.length > 0) for (t = 0; t < this.actionsTypesRelations.ActionsTypesRelations.length; t++) i = this.actionsTypesRelations.ActionsTypesRelations[t],
  i.UserAction === n && r.push(i.DocumentType);
  return r.filter(function (n, t, i) {
    return i.indexOf(n) == t
  })
},
i.prototype.getActionAvailableOptionsForDocumentType = function (n) {
  var f = [
  ],
  t,
  i,
  e,
  r,
  u;
  if (this.actionsTypesRelations.ActionsTypesRelations && this.actionsTypesRelations.ActionsTypesRelations.length > 0 && this.actionsTypesRelations.AvailableUserActions && this.actionsTypesRelations.AvailableUserActions.length > 0 && (t = this.getActionsIdsForDocumentType(n), t)) for (i = 0; i < t.length; i++) for (e = t[i], r = 0; r < this.actionsTypesRelations.AvailableUserActions.length; r++) if (u = this.actionsTypesRelations.AvailableUserActions[r], e === u.OptionKey) {
    f.push(u);
    break
  }
  return f
},
i.prototype.getActionsIdsForDocumentType = function (n) {
  var r = [
  ],
  t,
  i;
  if (this.actionsTypesRelations.ActionsTypesRelations && this.actionsTypesRelations.ActionsTypesRelations.length > 0) for (t = 0; t < this.actionsTypesRelations.ActionsTypesRelations.length; t++) i = this.actionsTypesRelations.ActionsTypesRelations[t],
  i.DocumentType === n && r.push(i.UserAction);
  return r.filter(function (n, t, i) {
    return i.indexOf(n) == t
  })
},
i.prototype.clearOtherActionFromCheckBoxOptions = function (n) {
  for (var i, r = [
  ], t = 0; t < n.length; t++) i = n[t],
  i.availableOption.OptionKey !== 6 && r.push(i);
  return r
},
i.prototype.clearPendingActionsFromCheckBoxOptions = function (n) {
  var r = [
  ],
  h = [
  ],
  u,
  e,
  o,
  f,
  t,
  s,
  i,
  a;
  if (this.userApplications.UserApplications) for (t = 0; t < this.userApplications.UserApplications.length; t++) if (u = this.userApplications.UserApplications[t], u.EFileStatus === 0 || u.EFileStatus === 1) for (i = 0; i < u.CertifiedAreas.length; i++) {
    var v = u.CertifiedAreas[i],
    c = {
    },
    l = {
    };
    l.OptionKey = v.OptionKey;
    c.availableOption = l;
    r.push(c)
  }
  for (e = {
  }, o = {
  }, o.OptionKey = 6, e.availableOption = o, r.push(e), r = r.filter(function (n, t, i) {
    return i.indexOf(n) == t
  }), f = !0, t = 0; t < n.length; t++) {
    for (s = n[t], f = !0, i = 0; i < r.length; i++) if (a = r[i], a.availableOption.OptionKey === s.availableOption.OptionKey) {
      f = !1;
      break
    }
    f && h.push(s)
  }
  return h
},
i.prototype.setSelectedFileName = function () {
  this.FileToUpload ? (this.Model.HasErrors = !1, this.Model.ErrorMessage = null, this.selectedFileName = this.getFileName())  : (this.Model.HasErrors = !0, this.Model.ErrorMessage = this.stringService.document_upload_not_valid_file, this.selectedFileName = '')
},
i.prototype.getFileName = function () {
  var r,
  t,
  i,
  e;
  if (!this.FileToUpload || !this.FileToUpload.name || (r = this.FileToUpload.name, !r)) return '';
  var n = r.split(' '),
  u = r.split('.'),
  f = '';
  if (u.length > 1 && (f = u[u.length - 1]), n[0] === '') return null;
  if (n.length === 1) return n[0].length > 14 ? n[0].slice(0, 9).concat('...' + f + '\n')  : n[0];
  for (t = '', i = 0; i < n.length; i++) {
    if (n[i].length > 9) {
      e = n[i].slice(0, 9).concat('...\n');
      t = t.concat(e);
      break
    } else t = t.concat(n[i] + '...\n');
    break
  }
  return t.concat(f)
},
i.prototype.getCheckboxNameValue = function (n) {
  for (var i = this.actionsTypesRelations.AvailableUserActions, t = 0; t < i.length; t++) if (i[t].OptionKey == n) return i[t].OptionValueCheckBoxes;
  return 'NAME_NOT_FOUND'
},
i.prototype.getTitleNameValue = function (n) {
  for (var i = this.actionsTypesRelations.AvailableUserActions, t = 0; t < i.length; t++) if (i[t].OptionKey == n) return i[t].OptionValueForMenu;
  return ''
},
i.prototype.getWizardTitleNameValue = function (n) {
  for (var i = this.actionsTypesRelations.AvailableUserActions, t = 0; t < i.length; t++) if (i[t].OptionKey == n) return i[t].OptionValueForWizard;
  return 'NAME_NOT_FOUND'
},
i.prototype.getStep5DocumentTypeNameValue = function (n) {
  for (var i = this.actionsTypesRelations.AvailableDocumentTypes, t = 0; t < i.length; t++) if (i[t].OptionKey == n) return i[t].OptionValue;
  return 'NAME_NOT_FOUND'
},
i.prototype.getWizardDocumentTypeName = function (n) {
  var t = '<br> <strong>' + n + '</strong>',
  i = this.stringService.documentTypeTitleWizard;
  return i + t
},
i.prototype.getWizardUploadedDocumentName = function (n) {
  var t = ' <strong>' + n + '</strong>',
  i = this.stringService.selectedDocumentTitleWizard;
  return i + t
},
i.prototype.isEnglish = function () {
  return this.localeService.getLanguage().toUpperCase() == 'EN'
},
i.prototype.openFileExplorer = function () {
  var n = this;
  $(window).on('focus', function () {
    n.resetBusy()
  })
},
i.prototype.resetBusy = function () {
  this.IsBusy = !1;
  $(window).off('focus')
},
i.prototype.GoToBeginning = function (n) {
  n === void 0 && (n = !1);
  this.Model.HasFatalError = !1;
  this.Model.HasIncompleteVerificationError = !1;
  this.Model.HasErrors = !1;
  this.Model.ErrorMessage = null;
  this.otpHandler.reset();
  this.Steps = this.initialiseSteps();
  this.UserActionChoice = undefined;
  this.UserDocumentTypeChoice = undefined;
  this.FileToUpload = null;
  this.selectedFileName = null;
  this.CurrentStepIndex = 0;
  this.ApproveUseConditions = !1;
  n && this.UpdateUIValues();
  this.ShowExceedFileMaxSizeErrorMsg = !1;
  this.HideContinueButton();
  this.ClearForm()
},
i.prototype.previousStep = function () {
  this.Model.HasFatalError = !1;
  this.Model.HasIncompleteVerificationError = !1;
  this.Model.HasErrors = !1;
  this.Model.ErrorMessage = null;
  switch (this.CurrentStepIndex) {
    case 1:
      this.UserActionChoice = undefined;
      break;
    case 2:
      this.UserDocumentTypeChoice = undefined;
      this.otpHandler.reset();
      break;
    case 3:
      this.FileToUpload = null;
      this.selectedFileName = null
  }
  this.HideContinueButton();
  t.prototype.previousStep.call(this)
},
i.prototype.checkForPendingAreaApplication = function (n) {
  var t = !1;
  return this.userApplications.UserApplications.forEach(function (i) {
    i.CertifiedAreas.forEach(function (r) {
      r.OptionKey == n && (i.EFileStatus == 0 || i.EFileStatus == 1) && (t = !0)
    })
  }),
  t
},
i.prototype.finalStepCheckForPendingAreaApplication = function () {
  var t = this,
  n = !1;
  return this.checkboxSelectionValues.forEach(function (i) {
    i.selected && (n = t.checkForPendingAreaApplication(i.availableOption.OptionKey))
  }),
  n
},
i.prototype.initialiseSteps = function () {
  var t = this,
  i = [
  ],
  r = 0,
  s = {
    templateUrl: 'Templates/Features/Profile/DocumentUpload/document-upload-step1',
    title: '',
    index: r++,
    stateName: ''
  },
  u,
  f,
  e,
  o;
  return i.push(s),
  u = {
    templateUrl: 'Templates/Features/Profile/DocumentUpload/document-upload-step2',
    index: r++,
    title: '',
    stateName: ''
  },
  u.processStep = [
    function () {
      return (t.ValidDocumentTypesForAction = t.getDocumentTypeAvailableOptionsForAction(t.UserActionChoice.OptionKey), t.HideContinueButton(), t.checkForPendingAreaApplication(t.UserActionChoice.OptionKey)) ? (t.Model.HasErrors = !0, t.Model.ErrorMessage = t.stringService.DocUploadAlreadyHaveAppl, !1)  : !0
    }
  ],
  i.push(u),
  f = {
    templateUrl: 'Templates/Features/Profile/DocumentUpload/document-upload-step3',
    index: r++,
    title: '',
    stateName: ''
  },
  f.processStep = [
    function () {
      var r,
      i;
      for (t.ValidActionsForDocumentType = t.getActionAvailableOptionsForDocumentType(t.UserDocumentTypeChoice.OptionKey), r = - 1, i = 0; i < t.ValidActionsForDocumentType.length; i++) if (t.ValidActionsForDocumentType[i].OptionKey == t.UserActionChoice.OptionKey) {
        r = i;
        break
      }
      return r > - 1 && t.ValidActionsForDocumentType.splice(r, 1),
      t.checkboxSelectionValues = t.ValidActionsForDocumentType.map(function (n) {
        return {
          availableOption: n,
          selected: !1
        }
      }),
      t.checkboxSelectionValues = t.clearOtherActionFromCheckBoxOptions(t.checkboxSelectionValues),
      t.otpHandler.reset({
        hints: {
          Requirement: String(t.hasUserOtpEnabled || t.UserDocumentTypeChoice.OptionKey === 68 ? 2 : 1),
          Method: String(t.hasUserOtpEnabled ? 1 : 2)
        },
        payload: t.buildOtpEnquiryPayload()
      }),
      t.otpHandler.enquire().catch (function (i) {
        return t.otpHandler.status === n.interfaces.services.OtpStatus.Unfulfillable && (i.customErrorHandling = !0),
        t.qService.reject(i)
      })
    }
  ],
  i.push(f),
  e = {
    templateUrl: 'Templates/Features/Profile/DocumentUpload/document-upload-step4',
    index: r++,
    title: '',
    stateName: ''
  },
  e.processStep = [
    function () {
      if (!t.ApproveUseConditions) return t.qService.reject(t.stringService.docUploadMustAcceptTermsAndConditions);
      if (t.finalStepCheckForPendingAreaApplication()) return t.qService.reject(t.stringService.DocUploadAlreadyHaveAppl);
      var i = t.resolveSelectedActions();
      return i.length === 1 && i[0] === 6 || i.length === 0 ? t.qService.reject(t.stringService.noActionSelected)  : t.otpHandler.result().catch (function (i) {
        return t.otpHandler.status === n.interfaces.services.OtpStatus.Unfulfillable && (i.customErrorHandling = !0),
        t.qService.reject(i)
      }).then(function () {
        return t.uploadFile(i)
      }).catch (function (n) {
        return t.FileToUpload = null,
        t.selectedFileName = null,
        t.qService.reject(n)
      }).finally (function () {
        t.ClearForm()
      })
    }
  ],
  i.push(e),
  o = {
    templateUrl: 'Templates/Features/Profile/DocumentUpload/document-upload-step5',
    index: r++,
    title: '',
    stateName: ''
  },
  i.push(o),
  i
},
i.prototype.resolveSelectedActions = function () {
  var t = this,
  n;
  return this.stepFiveActionsString = this.UserActionChoice.OptionKey !== 6 ? this.UserActionChoice.OptionValue.split(' ').slice(2).join(' ')  : '',
  n = this.checkboxSelectionValues.filter(function (n) {
    return n.selected
  }).map(function (n) {
    return t.stepFiveActionsString = t.stepFiveActionsString + ', ' + n.availableOption.OptionValue.split(' ').slice(2).join(' '),
    n.availableOption.OptionKey
  }),
  this.UserActionChoice.OptionKey !== 6 && n.push(this.UserActionChoice.OptionKey),
  n
},
i.prototype.uploadFile = function (t) {
  var i = this;
  return this.upload.upload({
    url: 'Upload/File/DocUpload',
    data: this.buildActualPayload(t),
    method: 'POST'
  }).then(function (n) {
    var t = null,
    r = null;
    if (n) try {
      t = JSON.parse(n)
    } catch (u) {
      r = u
    }
    return t ? t.HasErrors || t.Error ? i.qService.reject({
      Original: t.Error,
      IsFatal: !1,
      Error: t.Error
    })  : (i.UpdateUIValues(), t)  : i.qService.reject({
      Original: r,
      IsFatal: !0,
      Error: {
        Message: i.stringService['document.upload.error']
      }
    })
  }, function (n) {
    return i.qService.reject({
      Error: n,
      IsFatal: !0,
      Original: n
    })
  }).catch (function (t) {
    i.Model.HasFatalError = t.IsFatal;
    var r = n.utils.getErrorMsg(t);
    return i.Model.ErrorMessage = r,
    i.qService.reject(r)
  })
},
i.prototype.buildOtpEnquiryPayload = function () {
  return {
    AreasToCertify: this.resolveSelectedActions(),
    DocumentEFileType: this.UserDocumentTypeChoice.OptionKey
  }
},
i.prototype.buildActualPayload = function (n) {
  var t = {
    file: this.FileToUpload,
    type: this.UserDocumentTypeChoice.OptionKey,
    actions: n,
    __RequestVerificationToken: this.$http.defaults.headers.common['x-xsrf-token']
  };
  return this.otpHandler.appendExtraInfoToPayload(t, 'otpCode')
},
i.$inject = [
  'Upload',
  '$scope',
  '$injector',
  '$state',
  'SecurityService',
  'userInfo',
  'actionsTypesRelations',
  '$filter',
  'RoleService',
  '$http',
  'SharedDataService',
  'userApplications',
  'DocumentUploadService',
  'STRINGS',
  'getDocUploadCustomerInformation',
  'LanguageService',
  'otpHandler'
],
i
}(n.wizards.WizardController);
n.profile.mainModule.controller('DocumentUploadController', a);
v = function () {
function t(t, i, r) {
  this.$q = t;
  this.securityService = i;
  this.otpHandler = r;
  this.Model = new n.profile.UpdateTransferLimitVM;
  this.showLimit()
}
return Object.defineProperty(t.prototype, 'otpCallerType', {
  get: function () {
    return this.otpHandler.caller
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(t.prototype, 'showNoCardsWarning', {
  get: function () {
    return this.otpHandler.showNoCardsWarning
  },
  enumerable: !0,
  configurable: !0
}),
t.prototype.showLimit = function () {
  var t = this,
  i;
  this.Model.HasErrors = !1;
  this.Model.ErrorMessage = null;
  i = {
    GetDailyLimit: !0
  };
  this.IsBusy = !0;
  this.otpHandler.result().then(function () {
    return t.otpHandler.appendExtraInfoToPayload(i)
  }).then(function () {
    return t.securityService.getSetDailyLimit(i)
  }).then(function (n) {
    if (!n || n.ResultCode !== 0) return t.$q.reject(n);
    t.Model.DailyLimit = n.DailyLimit
  }).catch (function (i) {
    i = i || {
    };
    i.userCancel || i.customErrorHandling || (t.Model.HasErrors = !0, t.Model.ErrorMessage = n.utils.getErrorMsg(i))
  }).finally (function () {
    t.IsBusy = !1
  })
},
t.$inject = [
  '$q',
  'SecurityService',
  'otpHandler'
],
t
}();
n.profile.mainModule.controller('TransferLimitController', v);
y = function () {
function t(t, i, r, u, f) {
  var e = this,
  o;
  this.$modal = t;
  this.$q = i;
  this.otpHandler = u;
  this.SecurityService = f;
  this.userCancel = !1;
  this.Model = new n.profile.UpdateTransferLimitVM;
  o = r.$watch(function () {
    return e.Model.SetDailyLimit
  }, function () {
    return e.otpHandler.enquire(e.buildPayload())
  });
  r.$on('$destroy', function () {
    return o()
  })
}
return Object.defineProperty(t.prototype, 'Success', {
  get: function () {
    return !this.Model.HasErrors
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(t.prototype, 'Failed', {
  get: function () {
    return this.Model.HasErrors
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(t.prototype, 'otpCallerType', {
  get: function () {
    return this.otpHandler.caller
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(t.prototype, 'isOtpEnabled', {
  get: function () {
    return this.otpHandler.isRequired
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(t.prototype, 'showNoCardsWarning', {
  get: function () {
    return this.otpHandler.showNoCardsWarning
  },
  enumerable: !0,
  configurable: !0
}),
t.prototype.clearForm = function () {
  this.showValidationErrors = !1;
  this.Model.SetDailyLimit = undefined;
  this.Model.OTP = undefined;
  var t = this.form,
  n = t.otp;
  n && (n.$setViewValue(undefined), n.$setPristine(), n.$render());
  t.$setPristine();
  t.$setUntouched()
},
t.prototype.buildPayload = function () {
  return {
    GetDailyLimit: !1,
    SetDailyLimit: this.Model.SetDailyLimit
  }
},
t.prototype.allowSubmit = function () {
  return !this.Model.IsPristine(this.form) && this.otpHandler.canContinue
},
t.prototype.save = function () {
  var t = this,
  i,
  r;
  return (this.Model.HasErrors = !1, this.Model.ErrorMessage = null, this.showValidationErrors = !0, n.utils.forceValidation(this.form), !this.form || !this.form.$valid) ? this.$q.reject('Invalid form data')  : (i = this.buildPayload(), this.IsBusy = !0, r = this.otpHandler.result(this.buildPayload()).then(function (n) {
    return t.otpHandler.appendExtraInfoToPayload(i),
    n
  }), r.then(function () {
    return t.SecurityService.getSetDailyLimit(i)
  }).then(function (n) {
    return n && n.ResultCode == 0 ? t.$q.when(n)  : t.$q.reject({
      Error: {
        Message: n.Error.Message
      }
    })
  }).then(function (n) {
    t.Model.DailyLimit = n.DailyLimit;
    return t.SecurityService.getSetDailyLimit({
      GetDailyLimit: !0,
      GetSimpleDailyLimit: !0
    }).then(function (n) {
      return {
        hints: {
          Requirement: 'payload.SetDailyLimit > context.DailyLimit',
          Method: String(1),
          Context: JSON.stringify(n)
        },
        payload: null
      }
    }).then(function (n) {
      return t.otpHandler.reset(n)
    }).then(function () {
      return n
    })
  }, function (n) {
    return t.userCancel = Boolean(n.userCancel),
    t.Model.HasErrors = !0,
    t.Model.ErrorMessage = n.Error ? n.Error.Message : n.message,
    t.$q.reject(n)
  }).finally (function () {
    var n = t.userCancel ? t.$q.when(!0)  : t.$modal.open({
      templateUrl: 'Templates/Features/Profile/Limits/edit-limit-modal',
      controller: 'TransferLimitModalController as vm',
      modalClass: 'custom',
      size: 'lg',
      backdrop: 'static',
      resolve: {
        model: function () {
          return t
        }
      }
    }).result;
    return n.then(function () {
      t.userCancel = !1;
      t.IsBusy = !1
    })
  }))
},
t.$inject = [
  '$modal',
  '$q',
  '$scope',
  'otpHandler',
  'SecurityService'
],
t
}();
n.profile.mainModule.controller('TransferLimitEditController', y);
p = function () {
function n(n, t) {
  this.$modalInstance = n;
  this.model = t;
  this.scope = this.model
}
return n.prototype.finish = function () {
  this.model.clearForm();
  this.$modalInstance.close()
},
n.$inject = [
  '$modalInstance',
  'model'
],
n
}();
n.profile.mainModule.controller('TransferLimitModalController', p);
w = function () {
function t(t) {
  this.citiprodResponse = t;
  n.utils.isUndefinedOrNull(t) || t.ResultCode != 0 ? n.utils.isUndefinedOrNull(t.Error) || (this.error = t.Error.Message)  : (this.error = '', this.citiproducts = this.citiprodResponse.Data ? this.citiprodResponse.Data : [
  ])
}
return t.$inject = [
  'citiprodResponse'
],
t
}();
n.profile.mainModule.controller('CitiProductsMappingController', w);
b = function () {
function t(t) {
  this.emporikiprodResponse = t;
  n.utils.isUndefinedOrNull(t) || t.ResultCode != 0 ? n.utils.isUndefinedOrNull(t.Error) || (this.error = t.Error.Message)  : (this.error = '', this.emporikiproducts = this.emporikiprodResponse.Data ? this.emporikiprodResponse.Data : [
  ])
}
return t.$inject = [
  'emporikiprodResponse'
],
t
}();
n.profile.mainModule.controller('EmporikiProductsMappingController', b);
k = function () {
function n(n, t, i) {
  this.session = n;
  this.isInVersion = t;
  this.stateService = i;
  this.showCitiMenu = t && (n.OriginType == 3 || n.OriginType == 4);
  this.showEmporikiMenu = n.OriginType == 1
}
return n.prototype.GetClassByState = function (n) {
  return this.stateService.current.name.indexOf(n) >= 0 ? 'active' : ''
},
n.$inject = [
  'session',
  'isInVersion',
  '$state'
],
n
}();
n.profile.mainModule.controller('ProfileManagementController', k);
t.getUsersOfRole = g
}) (t = n.profile || (n.profile = {
}))
}(alpha || (alpha = {
})),
function (n) {
var t;
(function (t) {
var i = function () {
function t(n, t, i) {
  this.approvalTables = n;
  this.userInfo = t;
  this.STRINGS = i;
  this.ViwApprovalTables = [
  ];
  this.setApprovalTables(n.ApprovalTables)
}
return t.prototype.setApprovalTables = function (t) {
  var i = this;
  t && angular.forEach(t, function (t) {
    t.Title = i.STRINGS['FROM_RIGHTID_TITLE_' + t.RightId];
    t.Active ? i.displayApprovalTable(t.RightId) && i.ViwApprovalTables.push(t)  : i.ViwApprovalTables.push(n.utils.getEmptyApprovalTable(t.RightId, t.SubsId, 0))
  })
},
t.prototype.displayApprovalTable = function (n) {
  var t = !0,
  i = this.userInfo.UserInfo.CompanyInfo;
  switch (n) {
    case 1:
      i.MaxAmountLimitPerTransaction == 0 && (t = !1);
      break;
    case 2:
      i.MaxAmountLimitPerMultiJob == 0 && (t = !1)
  }
  return t
},
t.$inject = [
  'approvalTables',
  'userInfo',
  'STRINGS'
],
t
}();
t.ApprovalTablesController = i;
t.mainModule.controller('ApprovalTablesController', i)
}) (t = n.profile || (n.profile = {
}))
}(alpha || (alpha = {
})),
function (n) {
var t;
(function (t) {
'use strict';
t.mainModule.config(['$stateProvider',
'$urlRouterProvider',
function (t, i) {
i.when('/profile/usermanagement', 'profile/usermanagement/userManagementLandingPage');
i.when('/profile/security', [
  '$state',
  'RoleService',
  function (n, t) {
    var i = t.getRole();
    i == 8 ? n.go('root.profile.security.changeusername')  : n.go('root.profile.security.transferlimit')
  }
]);
t.state(n.constants.stateNames.profileEditPrivilegesUser, {
  url: '/editPrivilegesUser',
  templateUrl: 'Templates/Features/Profile/Limits/r_Corporate/edit-limit-modalCompanyAdminUser',
  controller: 'EditPrivilegesUser as vm',
  resolve: {
    userInfo: [
      'SecurityService',
      function (n) {
        return n.getUserSessionInfo()
      }
    ]
  }
}).state(n.constants.stateNames.profileEditChannelsUser, {
  url: '/editChannelsUser',
  templateUrl: 'Templates/Features/Profile/Limits/r_Corporate/edit-limit-modalCompanyAdminUser',
  controller: 'EditChannelsUser as vm',
  resolve: {
    userInfo: [
      'SecurityService',
      function (n) {
        return n.getUserSessionInfo()
      }
    ]
  }
}).state(n.constants.stateNames.profileUserManagement, {
  url: '/usermanagement',
  templateUrl: 'Templates/Features/Profile/UserManagement/r_Corporate/userManagement',
  resolve: {
    userInfo: [
      'SecurityService',
      function (n) {
        return n.getUserSessionInfo()
      }
    ]
  },
  controller: [
    '$scope',
    'userInfo',
    'RoleService',
    function (n, t, i) {
      n.displayApprovalTables = !1;
      t && t.UserInfo && t.UserInfo.CompanyInfo && (n.displayApprovalTables = !i.isEndUser() && t.UserInfo.CompanyInfo.IsSpecialSubscription)
    }
  ]
}).state(n.constants.stateNames.profileUsers, {
  url: '/userManagementLandingPage',
  templateUrl: 'Templates/Features/Profile/UserManagement/userManagementLandingPage',
  controller: 'UserManagementController as vm',
  resolve: {
    userInfo: [
      'SecurityService',
      function (n) {
        return n.getUserSessionInfo()
      }
    ]
  }
}).state(n.constants.stateNames.profileApprovalTables, {
  url: '/approvalTables',
  templateUrl: 'Templates/Features/Profile/UserManagement/r_Corporate/approvalTables',
  controller: 'ApprovalTablesController as vm',
  resolve: {
    approvalTables: [
      'SecurityService',
      function (n) {
        return n.getProfileApprovalTables({
          GetAllTables: !0
        })
      }
    ],
    userInfo: [
      'SecurityService',
      function (n) {
        return n.getUserSessionInfo()
      }
    ]
  }
}).state(n.constants.stateNames.profileUserDeletionResult, {
  url: '/userDeletionResult',
  templateUrl: 'Templates/Features/Profile/UserManagement/userDeletion',
  controller: 'UserDeletionController as vm',
  modal: !0,
  modalClass: 'custom'
}).state(n.constants.stateNames.profileNewUser, {
  url: '/new',
  templateUrl: 'Templates/Features/Profile/Limits/r_Corporate/edit-limit-modalCompanyAdminUser',
  controller: 'ProfileNewUserController as vm',
  resolve: {
    awitFlag: [
      'SecurityService',
      function (n) {
        return n.getUserSessionInfo().then(function (n) {
          return n.AWITFlag
        }).catch (function () {
          return null
        })
      }
    ]
  }
}).state(n.constants.stateNames.profileUserChangePassword, {
  url: '/ChangePass/:id',
  templateUrl: 'Templates/Features/Profile/UserManagement/ChangePass/pass-change',
  controller: 'UserPasswordResetController as vm',
  modal: !0
});
t.state(n.constants.stateNames.profileAdminUserDeactivate, {
  url: '/permanentlyDisable',
  templateUrl: 'Templates/Features/Profile/security/permanently-disable',
  controller: 'PermanentlyDisableController as vm',
  resolve: {
    userInfo: [
      'SecurityService',
      function (n) {
        return n.getUserSessionInfo()
      }
    ]
  }
}).state('root.profile.security.transferlimit', {
  url: '/transferlimit',
  templateUrl: 'Templates/Features/Profile/Limits/r_Corporate/show-limitCompanyAdminUser',
  controller: 'TransferLimitCompanyAdminUserController as vm',
  resolve: {
    userInfo: [
      'SecurityService',
      function (n) {
        return n.getUserSessionInfo()
      }
    ]
  }
});
t.state(n.constants.stateNames.settingsAlphaAccounts, {
  url: '/accounts-alpha',
  templateUrl: 'Templates/Features/Profile/Accounts/list-alpha',
  controller: 'ProfilePreferredProductsController as vm',
  resolve: {
    products: function () {
      return []
    },
    editState: function () {
      return n.constants.stateNames.settingsAccount
    }
  }
}).state(n.constants.stateNames.settingsGreekAccounts, {
  url: '/accounts-greek',
  templateUrl: 'Templates/Features/Profile/Accounts/list-greek',
  controller: 'ProfileProductsController as vm',
  resolve: {
    products: function () {
      return []
    },
    editState: function () {
      return n.constants.stateNames.settingsAccount
    }
  }
}).state(n.constants.stateNames.settingsOtherAccounts, {
  url: '/accounts-other',
  templateUrl: 'Templates/Features/Profile/Accounts/list-other',
  controller: 'ProfileProductsController as vm',
  resolve: {
    products: function () {
      return []
    },
    editState: function () {
      return n.constants.stateNames.settingsAccount
    }
  }
}).state('root.profile.security.changeusername', {
  url: '/username',
  templateUrl: 'Templates/Features/Profile/security/security-change-username',
  controller: 'ProfileChangeUsernameController as vm',
  resolve: {
    fifteenDigitCode: [
      'SecurityService',
      function (n) {
        return n.getUserSessionInfo().then(function (t) {
          return n.getSubscriptionInfo({
            LanguageSpecified: !0,
            GetUsersSpecified: !0,
            GetUsers: !0
          }).then(function (n) {
            return n.Users.filter(function (n) {
              return n.Id == t.Profile.UserID
            }) [0].UserNames.filter(function (n) {
              return n.Username.length == 15
            }) [0].Username
          }).catch (function () {
            return ''
          })
        })
      }
    ]
  }
}).state(n.constants.stateNames.settingsAccount, {
  url: '/account/edit/:id',
  templateUrl: 'Templates/Features/Profile/Accounts/account-settings',
  controller: 'ProductSettingsController as vm',
  resolve: {
    product: [
      'ProductsService',
      '$stateParams',
      'CachingService',
      '$q',
      function (t, i, r) {
        var f = i.id,
        e = r.getCachedProductWithBase64Id(f, n.server.CategoryGroupType.ACCOUNT),
        u = new n.model.AccountProduct(e);
        return u.CategoryGroupType = n.server.CategoryGroupType.ACCOUNT,
        u
      }
    ],
    productInfo: [
      '$q',
      'product',
      'ProductsService',
      function (t, i, r) {
        return i ? r.getProductInfo({
          Code: i.Code,
          ProductID: i.BankProduct.ProductID,
          Family: n.server.ProductTypeFamily.Account,
          TypeID: i.TypeID
        })  : t.reject('ProductNotFound')
      }
    ],
    validUsesForProduct: [
      'productInfo',
      'product',
      function (t) {
        return n.utils.isUndefinedOrNull(t) || t.ResultCode != 0 ? [
        ] : t.ProductInfo[0].ValidUses
      }
    ],
    sessionInfo: [
      'SecurityService',
      function (n) {
        return n.getUserSessionInfo()
      }
    ],
    cdimatch: [
      function () {
        return !0
      }
    ],
    otpHandler: [
      'OtpHandlerService',
      'product',
      function (n) {
        return n.retrieveHandler(4, {
          payload: null,
          uiContext: {
            isNewScreen: !0
          }
        })
      }
    ]
  }
})
}
]);
t.mainModule.filter('filterProducts', function () {
return function (t, i, r) {
  return n.utils.isEmptyArray(t) ? t : t.filter(function (t) {
    return !n.utils.isUndefinedOrNull(r) && r.value != 0 && t.Uses.indexOf(r.value) == - 1 ? !1 : i && t.Title.toLowerCase().indexOf(i.toLowerCase()) == - 1 && t.Code.toLowerCase().indexOf(i.toLowerCase()) == - 1 ? !1 : !0
  })
}
})
}) (t = n.profile || (n.profile = {
}))
}(alpha || (alpha = {
})),
function (n) {
var t;
(function (t) {
var i = function () {
function t(t, i, r, u, f, e, o) {
  this.scope = t;
  this.$injector = i;
  this.userInfo = r;
  this.userService = u;
  this.AppEventsService = f;
  this.logoffService = e;
  this.$state = o;
  this.model = new n.model.PermanentlyDisableUser
}
return t.prototype.logout = function () {
  this.logoffService.logout()
},
t.prototype.deactivateUser = function () {
  var t = this,
  i = {
    ID: this.userInfo.Profile.UserID
  };
  this.userService.deactivateUser(i).then(function (i) {
    0 == i.ResultCode ? (t.AppEventsService.publish(n.common.services.AppEventsService.InvalidateUserSessionInfo_Event), t.logout())  : (t.model.ErrorMessage = i.Error.Message, t.model.HasErrors = !0);
    t.lastStep = !0
  }, function (n) {
    t.lastStep = !0;
    t.model.ErrorMessage = n.Error.Message;
    t.model.HasErrors = !0
  })
},
t.$inject = [
  '$scope',
  '$injector',
  'userInfo',
  'UsersServiceProxy',
  'AppEventsService',
  'logoffService',
  '$state'
],
t
}();
t.PermanentlyDisableController = i;
t.mainModule.controller('PermanentlyDisableController', i)
}) (t = n.profile || (n.profile = {
}))
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(),
function (n) {
var t;
(function (t) {
var f = function (i) {
function r(n, t, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k, d, g) {
  var nt = i.call(this, n, t, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k, d) || this;
  return nt.userSession = n,
  nt.scope = t,
  nt.SecurityService = r,
  nt.$state = u,
  nt.AppEventsService = f,
  nt.hasActiveAlerts = e,
  nt.hasTransactionAlerts = o,
  nt.$modal = s,
  nt.stringservice = h,
  nt.fifteenDigitCode = c,
  nt.sevenDigitCode = l,
  nt.referer = a,
  nt.$q = v,
  nt.regularExpressionProvider = y,
  nt.roleService = p,
  nt.p2pEnabled = w,
  nt.CachingService = b,
  nt.otpHandlerService = g,
  nt.isSimpleUser = !1,
  nt.isSimpleUser = p.isEndUser(),
  g.retrieveHandler(nt.otpCallerType, {
    uiContext: {
      isNewScreen: !0
    }
  }),
  nt
}
return __extends(r, i),
Object.defineProperty(r.prototype, 'otpCallerType', {
  get: function () {
    return 27
  },
  enumerable: !0,
  configurable: !0
}),
r.prototype.buildContactsUpdatePayload = function () {
  var i = new n.profile.UpdateContactInfo;
  return i.Contacts.push(new t.DeltaContact(new n.profile.Contact(4, this.model.Email, null), 1, 2)),
  this.faxChanged() && (this.model.Fax = this.dialCodeService.fullPhone(this.fax, this.faxDc), i.Contacts.push(new t.DeltaContact(new n.profile.Contact(2, this.model.Fax, null), 1, 2))),
  this.mobileChanged() && (this.model.MobilePhone = this.dialCodeService.fullPhone(this.mobile, this.mobileDc), i.Contacts.push(new t.DeltaContact(new n.profile.Contact(3, this.model.MobilePhone, null), 1, 2))),
  this.tel1Changed() && (this.model.Telephone = this.dialCodeService.fullPhone(this.tel1, this.tel1Dc), i.Contacts.push(new t.DeltaContact(new n.profile.Contact(1, this.model.Telephone, null), 1, 2))),
  this.tel2Changed() && (this.model.PrimaryTelephone = this.dialCodeService.fullPhone(this.tel2, this.tel2Dc), i.Contacts.push(new t.DeltaContact(new n.profile.Contact(6, this.model.PrimaryTelephone, null), 1, 2))),
  this.canEditPersonalEmail && this.canEditPersonalMobile && (i.CompanyUserContacts.push(new t.DeltaContact(new n.profile.Contact(4, this.model.CompanyUserContacts.Email, null), 1, 2)), this.companyUserPersonalMobileChanged() && (this.model.CompanyUserContacts.MobilePhone = this.dialCodeService.fullPhone(this.companyUserPersonalMobile, this.companyUserPersonalMobileDC), i.CompanyUserContacts.push(new t.DeltaContact(new n.profile.Contact(3, this.model.CompanyUserContacts.MobilePhone, null), 1, 2)))),
  i
},
r.prototype.process = function () {
  var t = this,
  r,
  i;
  if (this.Success = !0, this.ErrorMessage = '', !this.validateMobile()) {
    this.Success = !1;
    this.ErrorMessage = this.stringservice['profile.updateMobile.invalidPrefix.Error'];
    return
  }
  return this.showValidationErrors = !0,
  this.scope.form && this.scope.form.$valid ? (this.IsBusy = !0, n.utils.forceValidation(this.scope.form), r = {
    payload: this.buildContactsUpdatePayload(),
    uiContext: {
      mobile: this.dialCodeService.fullPhone(this.mobile, this.mobileDc),
      email: this.model.Email || ''
    }
  }, i = this.otpHandlerService.retrieveHandler(this.otpCallerType, r), i.result().then(function () {
    return i.appendExtraInfoToPayload(t.buildContactsUpdatePayload())
  }).catch (function (i) {
    return (t.Success = !1, t.ErrorMessage = n.utils.getErrorMsg(i), i.userCancel) ? t.$q.reject(i)  : (t.revertChanges(), i)
  }).then(function (i) {
    var r = t.Success ? t.SecurityService.updateContactInfo(i)  : t.$q.when({
      ResultCode: 1,
      Error: {
        Message: t.ErrorMessage
      }
    });
    return r.then(function (i) {
      return i.ResultCode == 0 ? (t.AppEventsService.publish(n.common.services.AppEventsService.InvalidateUserSessionInfo_Event), t.Success = !0)  : (t.Success = !1, t.ErrorMessage = i.Error && i.Error.Message ? i.Error.Message : t.stringservice.failChange, t.revertChanges()),
      i
    }, function (n) {
      return t.Success = !1,
      t.ErrorMessage = t.stringservice.failChange,
      t.revertChanges(),
      n
    }).finally (function () {
      var n = t.$modal.open({
        templateUrl: 'Templates/common/operationStatusModal',
        controller: 'OperationStatusModalController as vm',
        modalClass: 'custom',
        size: 'lg',
        backdrop: 'static',
        resolve: {
          model: function () {
            return {
              Success: t.Success,
              ErrorMessage: t.ErrorMessage
            }
          },
          referer: function () {
            return t.referer
          },
          isRetail: function () {
            return t.roleService.IsRetail()
          }
        }
      });
      n.result.then(function (n) {
        n && t.$state.transitionTo(t.$state.current.name, null, {
          reload: !0
        })
      })
    })
  }).finally (function () {
    t.IsBusy = !1
  }))  : void 0
},
r.$inject = t.ProfileController.$inject.concat(['OtpHandlerService']),
r
}(t.ProfileController),
r,
i,
u;
n.profile.mainModule.controller('ProfileController', f);
r = function () {
function t(t, i, r, u, f, e, o, s, h) {
  var c = this;
  this.products = t;
  this.ProfileProductsService = i;
  this.stringService = r;
  this.modalService = u;
  this.editState = f;
  this.AppEventsService = e;
  this.qService = o;
  this.versionService = s;
  this.roleService = h;
  this.noProducts = !1;
  this.isRetailUser = !1;
  this.productsChanged = function (n, t) {
    c.products = t.products;
    c.productsCount = t.response.TotalRecords;
    c.toggleUses(c.products)
  };
  this.toggleUses = function () {
    if (n.utils.isEmptyArray(c.products)) c.noProducts = !0;
     else {
      var t = c.products[0].IsAlphaBankProduct,
      i = c.getProductCategory();
      c.uses = c.createUses(i);
      c.enableUseDropdown = t;
      c.selectedUse = c.uses[0]
    }
  };
  (!this.products || this.products.length <= 0) && f.indexOf('account') != - 1 ? (this.products = [
  ], this.AppEventsService.subscribe(n.common.services.AppEventsService.CustomUiSelectProductsChanged_Event, this.productsChanged))  : this.toggleUses(this.products)
}
return t.prototype.getProductCategory = function () {
  return this.products[0].CategoryGroupType
},
t.prototype.createUses = function (t) {
  var i = [
    {
      text: this.stringService['enum.ProductUses.all.dd.' + t],
      value: 0,
      count: this.products.length
    },
    {
      text: this.stringService['enum.ProductUses.2.dd.' + t],
      value: 2,
      count: this.products.filter(function (n) {
        return n.Uses.indexOf(2) != - 1
      }).length
    },
    {
      text: this.stringService['enum.ProductUses.3.dd.' + t],
      value: 3,
      count: this.products.filter(function (n) {
        return n.Uses.indexOf(3) != - 1
      }).length
    },
  ];
  return t == n.server.CategoryGroupType.ACCOUNT ? i.push({
    text: this.stringService['enum.ProductUses.1.dd.' + t],
    value: 1,
    count: this.products.filter(function (n) {
      return n.Uses.indexOf(1) != - 1
    }).length
  })  : i.push({
    text: this.stringService['enum.ProductUses.4.dd.' + t],
    value: 4,
    count: this.products.filter(function (n) {
      return n.Uses.indexOf(4) != - 1
    }).length
  }),
  i
},
t.prototype.getProductArrays = function () {
  return [this.products]
},
t.prototype.deleteProduct = function (t, i, r, u) {
  r === void 0 && (r = !1);
  u === void 0 && (u = !1);
  var f = this,
  e = {
    0: this.ProfileProductsService.getTransactionTemplates(0),
    1: this.ProfileProductsService.getTransactionTemplates(1),
    2: this.ProfileProductsService.getTransactionTemplates(1)
  };
  return this.versionService.IsInVersions(n.constants.versionFilters.DELETE_PRODUCT_CHECK_TEMPLATE).then(function (n) {
    return n && e[i] ? e[i] : f.qService.when({
      ResultCode: 0,
      Templates: [
      ]
    })
  }).then(function (n) {
    return (n.Templates || [
    ]).filter(function (n) {
      return n.Transaction.CreditProduct === t.BankProduct.Code
    })
  }).then(function (e) {
    var o,
    s;
    return null != e && e.length ? (s = e.map(function (n) {
      return n.Description
    }).join(', '), f.modalService.open({
      templateUrl: 'Templates/common/modals/systemMessage',
      controller: 'SystemMessageModalInstanceCtrl as vm',
      size: 'sm',
      resolve: {
        message: [
          function () {
            return f.stringService.deleteTemplate
          }
        ]
      }
    }).result)  : (o = f.modalService.open({
      templateUrl: 'Templates/Features/Profile/delete-product-modal',
      controller: 'DeleteProductModalInstanceController as vm',
      size: 'sm',
      resolve: {
        model: [
          function () {
            return t
          }
        ],
        type: [
          function () {
            return i
          }
        ],
        national: [
          function () {
            return r
          }
        ],
        international: [
          function () {
            return u
          }
        ]
      }
    }), o.result.then(function () {
      var i = f.stringService.failChange,
      r = !1;
      return f.ProfileProductsService.removeProduct(t).then(function (u) {
        var o,
        e,
        s;
        if (u && !n.utils.isUndefinedOrNull(u.Products) && u.Products.length > 0 && u.Products[0].Code == 1) for (f.ProfileProductsService.getProductByCode(u.Products[0].product.Code).then(function (t) {
          t ? f.AppEventsService.publish(t.InvalidateMessage)  : f.AppEventsService.publish(n.common.services.AppEventsService.InvalidateLookups_Event, [
            'PredefinedCodesForPaymentType_10046'
          ]);
          u.Products[0].product.Code && f.AppEventsService.publish(n.common.services.AppEventsService.InvalidateCustomUiSelectProduct, u.Products[0].product.Code)
        }), o = f.getProductArrays(), e = 0; e < o.length; e++) for (s = 0; s < o[e].length; s++) o[e][s].Code == t.Code && o[e].splice(s, 1);
        return u && ((u.Error && u.Error.Message || u.Products[0].Code != 1 && u.Products[0].Code != 6) && (i = u.Products[0].Message), r = u.ResultCode == 0 && (u.Products[0].Code == 1 || u.Products[0].Code == 6)),
        u
      }).finally (function () {
        f.modalService.open({
          templateUrl: 'Templates/common/operationStatusModal',
          controller: 'OperationStatusModalController as vm',
          modalClass: 'custom',
          size: 'lg',
          backdrop: 'static',
          resolve: {
            model: function () {
              return {
                Success: r,
                ErrorMessage: i
              }
            },
            referer: function () {
              return null
            },
            isRetail: function () {
              return f.roleService.IsRetail()
            }
          }
        })
      })
    }))
  })
},
t.$inject = [
  'products',
  'ProfileProductsService',
  'STRINGS',
  '$modal',
  'editState',
  'AppEventsService',
  '$q',
  'VersionFilterService',
  'RoleService'
],
t
}();
n.profile.mainModule.controller('ProfileProductsController', r);
i = function (t) {
function i(i, r, u, f, e, o, s, h, c, l) {
  var a = t.call(this, i, r, u, f, e, o, s, h, c) || this;
  return a.products = i,
  a.ProfileProductsService = r,
  a.modalService = f,
  a.editState = e,
  a.AppEventsService = o,
  a.roleService = c,
  a.cachingService = l,
  a.togglePreferredLoading = !1,
  a.orderSaving = !1,
  a.AppEventsService.subscribe(n.common.services.AppEventsService.InvalidateCustomUiSelectCategoryGroup, function (t, i) {
    i === n.server.CategoryGroupType.ACCOUNT ? a.getPreferedAccounts(!0)  : i === n.server.CategoryGroupType.CARD ? a.getPreferedCards(!0)  : i === n.server.CategoryGroupType.LOAN && a.getPreferedLoans(!0)
  }),
  (!a.products || a.products.length <= 0) && e.indexOf('account') != - 1 ? a.getPreferedAccounts(!1)  : a.productsPreferred = a.products.filter(function (n) {
    return n.IsPreferred
  }),
  a
}
return __extends(i, t),
i.prototype.getPreferedAccounts = function (n) {
  var t = this;
  n === void 0 && (n = !1);
  this.ProfileProductsService.getAccounts(!0, n).then(function (n) {
    t.productsPreferred = n.filter(function (n) {
      return n.IsPreferred
    });
    t.preferredProductsCount = t.productsPreferred ? t.productsPreferred.length : 0
  })
},
i.prototype.getPreferedCards = function (n) {
  var t = this;
  n === void 0 && (n = !1);
  this.ProfileProductsService.getCards(!0).then(function (n) {
    t.productsPreferred = n.filter(function (n) {
      return n.IsPreferred
    });
    t.preferredProductsCount = t.productsPreferred ? t.productsPreferred.length : 0
  })
},
i.prototype.getPreferedLoans = function (n) {
  var t = this;
  n === void 0 && (n = !1);
  this.ProfileProductsService.getLoans(!0).then(function (n) {
    t.productsPreferred = n.filter(function (n) {
      return n.IsPreferred
    });
    t.preferredProductsCount = t.productsPreferred ? t.productsPreferred.length : 0
  })
},
i.prototype.getProductArrays = function () {
  var n = t.prototype.getProductArrays.call(this);
  return n.push(this.productsPreferred),
  n
},
i.prototype.togglePreferred = function (t) {
  var i,
  r,
  u;
  (this.productsPreferred.length < 10 || t.IsPreferred == !0) && (i = this, i.togglePreferredLoading = !0, r = angular.copy(t.BankProduct), r.IsPreferred = !r.IsPreferred, r.IsPreferred ? (u = Math.max.apply(Math, i.productsPreferred.map(function (n) {
    return n.Order
  })), u === - Infinity && (u = 0), r.Order = u + 1)  : (r.Order = 0, r.Color = 0), this.ProfileProductsService.updateProductPreferences(new n.model.ProductBase(r)).then(function (u) {
    !n.utils.isUndefinedOrNull(u.Products) && u.Products.length >= 1 && u.Products[0].Code == 1 && (i.AppEventsService.publish(n.common.services.AppEventsService.InvalidateCustomUiSelectCategoryGroup, t.CategoryGroupType), t.BankProduct = r, r.IsPreferred && (i.productsPreferred = i.productsPreferred.concat([new n.model.AccountProduct(r)])), i.productsPreferred = i.productsPreferred.filter(function (n) {
      return n.Code == r.Code && (n.BankProduct = r),
      n.IsPreferred
    }), i.productsPreferred = i.productsPreferred.sort(function (n, t) {
      return n.BankProduct.Order - t.BankProduct.Order
    }), i.preferredProductsCount = i.productsPreferred.length)
  }, function () {
  }).finally (function () {
    i.togglePreferredLoading = !1
  }))
},
i.prototype.persistOrder = function (t, i) {
  return this.ProfileProductsService.reorderProducts(t, i).then(function (r) {
    !n.utils.isUndefinedOrNull(r.Products) && r.Products.length >= 1 && r.Products[0].Code == 1 && r.Products[1].Code == 1 || this.rollbackOrder(t, i)
  }, function () {
    this.rollbackOrder(t, i)
  })
},
i.prototype.canTogglePreferred = function (n) {
  return this.roleService.isAccessAllowed('EditOverviewProduct') ? n ? (n.IsPreferred || n.Uses.indexOf(3) != - 1 && !this.maxOverviewReached()) && !this.togglePreferredLoading && !n.IsDebit : !1 : !1
},
i.prototype.rollbackOrder = function (n, t) {
  var i = t.Order;
  t.Order = n.Order;
  n.Order = i
},
i.prototype.undoToggle = function (n) {
  n.IsPreferred = !n.IsPreferred
},
i.prototype.maxOverviewReached = function () {
  return this.preferredProductsCount >= n.constants.limits.maxOverviewProducts
},
i.$inject = [
  'products',
  'ProfileProductsService',
  'STRINGS',
  '$modal',
  'editState',
  'AppEventsService',
  '$q',
  'VersionFilterService',
  'RoleService',
  'CachingService'
],
i
}(r);
n.profile.mainModule.controller('ProfilePreferredProductsController', i);
u = function (t) {
function r(n, i, r, u, f, e, o, s, h) {
  var c = t.call(this, n, i, r, u, f, e, o, s, h) || this;
  return c.products = n,
  c.ProfileProductsService = i,
  c.modalService = u,
  c.editState = f,
  c.AppEventsService = e,
  c.roleService = h,
  c.mutuals = c.products.filter(function (n) {
    return n.IsMutual
  }),
  c.timeDeposits = c.products.filter(function (n) {
    return n.IsTimeDeposit
  }),
  c.alphaPrime = c.products.filter(function (n) {
    return n.IsAlphaPrime
  }),
  c.alphaPrivate = c.products.filter(function (n) {
    return n.IsAlphaPrivate
  }),
  c.stocks = c.products.filter(function (n) {
    return n.IsAlphaFinance
  }),
  c
}
return __extends(r, t),
r.prototype.getProductArrays = function () {
  var n = t.prototype.getProductArrays.call(this);
  return n.push(this.mutuals),
  n.push(this.timeDeposits),
  n.push(this.alphaPrime),
  n.push(this.alphaPrivate),
  n
},
r.prototype.getProductCategory = function () {
  return n.server.CategoryGroupType.TIME_DEPOSITE
},
r.$inject = i.$inject,
r
}(i);
n.profile.mainModule.controller('PreferredInvestmentProductsController', u)
}) (t = n.profile || (n.profile = {
}))
}(alpha || (alpha = {
})),
function (n) {
var t;
(function (t) {
var i = function () {
function t(t, i, r, u, f, e, o) {
  this.$scope = t;
  this.securityService = i;
  this.$uibModal = r;
  this.SharedDataService = u;
  this.userInfo = f;
  this.appEventsService = e;
  this.roleService = o;
  this.test = 'testVal';
  this.isSpecialSubscription = !1;
  this.companyName = '';
  var s = this;
  s.companyName = s.userInfo.UserInfo.CompanyInfo.Name;
  this.appEventsService.subscribe(n.common.services.AppEventsService.InvalidateUserSessionInfo_Event, function () {
    i.getUserSessionInfo().then(function (n) {
      s.userInfo = n
    })
  });
  this.canSeeSecondLevel = this.userInfo.UserInfo.CompanyInfo.MaxApprovalLevelForTransferPayment == 2 && this.roleService.isAccessAllowed('ViewLimits');
  f && f.UserInfo && f.UserInfo.CompanyInfo && (this.isSpecialSubscription = f.UserInfo.CompanyInfo.IsSpecialSubscription)
}
return t.prototype.showEditLimitModal = function (t, i) {
  this.SharedDataService.SetControllerData(this.$scope, n.server.Controllers.TransferLimitModalControllerCompanyAdminUser, 'LimitType', t);
  this.SharedDataService.SetControllerData(this.$scope, n.server.Controllers.TransferLimitModalControllerCompanyAdminUser, 'previousLimit', i);
  var r = {
    templateUrl: 'Templates/Features/Profile/Limits/r_Corporate/edit-limit-modalCompanyAdminUser',
    controller: 'TransferLimitModalControllerCompanyAdminUser as vm',
    size: 'lg',
    resolve: {
      otpHandler: [
        'OtpHandlerService',
        function (n) {
          var i = {
            LimitType: t
          };
          return n.activatedHandler(25, {
            payload: i
          })
        }
      ]
    }
  },
  u = this.$uibModal.open(r)
},
t.$inject = [
  '$scope',
  'SecurityService',
  '$uibModal',
  'SharedDataService',
  'userInfo',
  'AppEventsService',
  'RoleService'
],
t
}();
t.mainModule.controller('TransferLimitCompanyAdminUserController', i)
}) (t = n.profile || (n.profile = {
}))
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(),
function (n) {
var t;
(function (t) {
var i = function (t) {
function i(i, r, u, f, e, o, s, h, c, l) {
  var a = t.call(this, i, r) || this;
  return a.$q = u,
  a.$modalInstance = f,
  a.userService = e,
  a.SharedDataService = o,
  a.appEventsService = s,
  a.menuItemService = h,
  a.stringService = c,
  a.otpHandler = l,
  a.wizzardSteps = [
  ],
  a.changeModalOptions(),
  a.model = new n.model.limitTransfer,
  a.model.request.LimitType = o.GetControllerData(n.server.Controllers.TransferLimitModalControllerCompanyAdminUser, 'LimitType'),
  a.model.previousLimit = o.GetControllerData(n.server.Controllers.TransferLimitModalControllerCompanyAdminUser, 'previousLimit'),
  a.model.request.LimitType == 0 ? (a.maxLimitAllowed = 50000, a.MaxErrorMessage = c['valtip.nogreaterthan'] + '50000 EUR')  : (a.maxLimitAllowed = a.model.previousLimit, a.MaxErrorMessage = c.maxLimitError),
  i.$on('$locationChangeStart', function () {
    a.cancel()
  }),
  i.$on('$destroy', function () {
    a.keepOtpHandlerAlive && a.otpHandler.unregister()
  }),
  a
}
return __extends(i, t),
Object.defineProperty(i.prototype, 'otpKey', {
  get: function () {
    return this.otpHandler.caller
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(i.prototype, 'keepOtpHandlerAlive', {
  get: function () {
    return !0
  },
  enumerable: !0,
  configurable: !0
}),
i.prototype.cancel = function () {
  this.$modalInstance.dismiss()
},
i.prototype.changeModalOptions = function () {
  n.jobs.customizeModal.appendModalTo('#main > .content');
  n.jobs.customizeModal.disableScrollOfModal()
},
i.prototype.makeStep = function (n, t) {
  var i = n;
  i.processStep = t;
  this.wizzardSteps.push(i)
},
i.prototype.initialiseSteps = function () {
  return this.makeStep({
    templateUrl: 'Templates/Features/Profile/Limits/r_Corporate/edit-limit-modal-change-limit',
    title: 'Επιβεβαίωση Στοιχείων'
  }, this.step1),
  this.makeStep({
    templateUrl: 'Templates/Features/Profile/Limits/r_Corporate/edit-limit-modal-step3',
    title: 'Αποτελέσμα συναλλαγής'
  }, this.step2),
  this.wizzardSteps
},
i.prototype.step1 = function () {
  var t = this,
  i = this.$q.defer();
  return this.model.ErrorMessage = null,
  this.model.HasErrors = !1,
  this.otpHandler.result(this.model.request).then(function () {
    t.userService.setCorporateLimits(t.otpHandler.appendExtraInfoToPayload(t.model.request)).then(function (r) {
      0 == r.ResultCode ? (t.model.request.LimitValue == 0 && t.model.request.LimitType == 3 ? (t.menuItemService.DisablePermissionItems('ExecuteTransfers'), t.menuItemService.DisablePermissionItems('ExecutePayments'))  : t.model.request.LimitType == 3 && (t.menuItemService.EnablePermissionItems('ExecuteTransfers'), t.menuItemService.EnablePermissionItems('ExecutePayments')), t.appEventsService.publish(n.common.services.AppEventsService.InvalidateUserSessionInfo_Event), angular.noop)  : (t.model.ErrorMessage = r.Error.Message, t.model.HasErrors = !0);
      i.resolve(!0)
    }, function (r) {
      i.resolve(!0);
      t.model.ErrorMessage = n.utils.isUndefinedOrNull(r.statusText) ? n.utils.getErrorMsg(r)  : r.statusText;
      t.model.HasErrors = !0
    })
  }, function (n) {
    i.reject(n)
  }),
  i.promise
},
i.prototype.step2 = function () {
  var n = this.$q.defer();
  return n.resolve(!1),
  n.promise
},
i.$inject = [
  '$scope',
  '$injector',
  '$q',
  '$modalInstance',
  'UsersServiceProxy',
  'SharedDataService',
  'AppEventsService',
  'MenuItemsService',
  'STRINGS',
  'otpHandler'
],
i
}(n.wizards.WizardController);
t.mainModule.controller('TransferLimitModalControllerCompanyAdminUser', i)
}) (t = n.profile || (n.profile = {
}))
}(alpha || (alpha = {
})),
function (n) {
var t;
(function (t) {
var i = function () {
function t(t, i, r, u, f, e, o, s, h) {
  var c = this;
  this.scope = t;
  this.$injector = i;
  this.securityService = r;
  this.$uibModal = u;
  this.SharedDataService = f;
  this.appEventsService = e;
  this.userInfo = o;
  this.roleService = s;
  this.stringService = h;
  this.simpleUserActions = [
  ];
  this.adminUserActions = [
  ];
  this.simpleUsers = [
  ];
  this.approverUsers = [
  ];
  this.adminUsers = [
  ];
  this.hasMultiApprovers = !1;
  this.hasMultiAdmins = !1;
  this.canEditUserChannels = !1;
  this.IsBusy = !1;
  this.isDualAction = !1;
  this.getSimpleUserProductActions = function (n) {
    return c.simpleUserActions[n]
  };
  this.getAdminUserProductActions = function () {
    return c.adminUserActions
  };
  this.getUsers = function () {
    c.IsBusy = !0;
    c.securityService.getSubscriptionInfo({
      LanguageSpecified: !0,
      GetUsersSpecified: !0,
      GetUsers: !0
    }).then(function (t) {
      c.simpleUsers = n.profile.getUsersOfRole(t.Users, [
        8,
        11
      ]);
      c.approverUsers = n.profile.getUsersOfRole(t.Users, [
        13
      ]);
      c.adminUsers = n.profile.getUsersOfRole(t.Users, [
        5,
        6
      ]);
      c.hasMultiApprovers = c.approverUsers.length > 1;
      c.hasMultiAdmins = c.adminUsers.length > 1;
      c.simpleUsers.forEach(function (n) {
        n.LastSignOnDateTime = n.LastSignOnDateTime == '1/1/0001' ? c.stringService.never : n.LastSignOnDateTime;
        c.initSimpleUserActions(n.Id)
      }, c);
      c.approverUsers.forEach(function (n) {
        n.LastSignOnDateTime = n.LastSignOnDateTime == '1/1/0001' ? c.stringService.never : n.LastSignOnDateTime
      }, c);
      c.adminUsers.forEach(function (n) {
        n.LastSignOnDateTime = n.LastSignOnDateTime == '1/1/0001' ? c.stringService.never : n.LastSignOnDateTime
      }, c);
      c.IsBusy = !1
    })
  };
  this.model = new n.model.NewUserModel;
  this.initAdminUserActions();
  this.getUsers();
  this.isApprovalLevel2 = !!(o.UserInfo.CompanyInfo.MaxApprovalLevelForTransferPayment - 1);
  this.currentUserId = o.Profile.UserID;
  this.isQueryPermit = o.UserInfo.CompanyInfo.QueryRestricted;
  this.isGeneralInfo = o.UserInfo.CompanyInfo.GeneralInfoRestricted;
  this.isEditManagePermit = o.UserInfo.CompanyInfo.EditAccountRestricted;
  this.canEditUserChannels = o.AWITFlag == 2 && s.isAccessAllowed('EditChannelsSimpleUser');
  this.checkIfUserIsDualAction();
  e.subscribe(n.common.services.AppEventsService.UpdateUsers_Event, function () {
    e.publish(n.common.services.AppEventsService.InvalidateSubscriptionInfo_Event);
    c.getUsers()
  })
}
return t.prototype.checkIfUserIsDualAction = function () {
  this.userInfo.UserInfo.Role == 6 && (this.isDualAction = !0)
},
t.prototype.initSimpleUserActions = function (t) {
  (this.simpleUserActions[t] || (this.simpleUserActions[t] = [
  ]), this.simpleUserActions[t].length > 0) || (this.roleService.isAccessAllowed('DeleteSimpleUser') && this.simpleUserActions[t].push(new n.model.ProductMenuAction(n.constants.stateNames.profileUserDeletionResult, {
    id: t,
    productTypeScope: 'local',
    productTypeFamily: 'user'
  }, !0, 'deleteSimpleUser')), this.roleService.isAccessAllowed('ResetPassSimpleUser') && this.simpleUserActions[t].push(new n.model.ProductMenuAction(n.constants.stateNames.profileUserChangePassword, {
    id: t,
    productTypeScope: 'local',
    productTypeFamily: 'user'
  }, !0, 'ReIssuePassword')))
},
t.prototype.initAdminUserActions = function () {
  this.adminUserActions.push(new n.model.ProductMenuAction(n.constants.stateNames.profileAdminUserDeactivate, {
    productTypeScope: 'local',
    productTypeFamily: 'investment'
  }, !0, 'permanentlyDisableUser'))
},
t.prototype.saveUser = function (t) {
  this.SharedDataService.SetControllerData(this.scope, n.server.Controllers.UserDeletion, 'userToDelete', t)
},
t.prototype.isCashManagement = function (n) {
  return this.simpleUsers.filter(function (t) {
    return t.Id == n && t.Services.Service.indexOf('CashManagement') != - 1
  }).length == 1
},
t.prototype.IsApprovalUser = function () {
  return this.roleService.IsApprovalUser()
},
t.prototype.CanEditSimpleUserPriviledges = function () {
  return !this.userInfo.UserInfo.CompanyInfo.IsSpecialSubscription || this.simpleUsers && this.simpleUsers.length > 0
},
t.$inject = [
  '$scope',
  '$injector',
  'SecurityService',
  '$uibModal',
  'SharedDataService',
  'AppEventsService',
  'userInfo',
  'RoleService',
  'STRINGS'
],
t
}();
t.UserManagementController = i;
t.mainModule.controller('UserManagementController', i)
}) (t = n.profile || (n.profile = {
}))
}(alpha || (alpha = {
}));
alpha.app.constant('roleMenuJson', {
menuTree: {
children: [
{
  state: 'root.messages',
  inMenu: !1
},
{
  state: 'root.error',
  inMenu: !1
},
{
  state: 'root.cash.overview',
  stateResource: 'root.cash',
  parent: 'root',
  index: 2,
  level: 1,
  isAlsoFirstChild: !0,
  cssId: 'cashmanagement',
  permissions: [
    'CashManagement'
  ],
  children: [
    {
      isPreviousCopy: !0,
      stateResource: 'root.overview',
      level: 2,
      index: 1
    },
    {
      state: 'root.cash.accounts.transactions',
      level: 2,
      index: 2,
      stateResource: 'root.accounts.list',
      permissions: [
        'ViewAccounts',
        'ViewCheques'
      ],
      children: [
        {
          inMenu: !1,
          level: 3,
          state: 'root.cash.accounts.cheques'
        },
        {
          inMenu: !1,
          level: 3,
          state: 'root.cash.accounts.statements'
        },
        {
          inMenu: !1,
          state: 'root.cash.accounts.incomingOrders'
        },
        {
          inMenu: !1,
          state: 'root.cash.accounts.blocks'
        },
        ,
        {
          inMenu: !1,
          state: 'root.cash.accounts.withheld'
        },
        {
          inMenu: !1,
          state: 'root.cash.accounts.unclear'
        },
        {
          inMenu: !1,
          state: 'root.cash.accounts'
        }
      ]
    },
    {
      state: 'root.cash.pending.AccountAtBoG',
      stateResource: 'root.cash.pending.BetweenAlphaGroup',
      level: 2,
      index: 4,
      children: [
        {
          isPreviousCopy: !0,
          inMenu: !1,
          level: 3,
          index: 1,
          children: [
            {
              inMenu: !1,
              state: 'root.cash.pending.AccountAtBoG'
            },
            {
              inMenu: !1,
              state: 'root.cash.pending.toDomesticBankAccount'
            },
            {
              inMenu: !1,
              state: 'root.cash.pending.ToOtherBankOUTOfGreece'
            },
            {
              inMenu: !1,
              state: 'root.cash.pending.FromOtherBank'
            },
          ]
        },
        {
          inMenu: !1,
          state: 'root.cash.pending.history',
          level: 3,
          index: 2,
          stateResource: 'root.accounts.list'
        }
      ]
    },
  ]
},
{
  state: 'root.overview',
  parent: 'root',
  index: - 1,
  level: 1,
  cssId: 'overview'
},
{
  state: 'root.transfers',
  stateResource: 'root.transfers.new.intrabank',
  parent: 'root',
  index: 2,
  level: 1,
  cssId: 'transfers',
  inMenu: !0,
  isDisabled: !0
},
{
  state: 'root.payments',
  stateResource: 'root.payments.search',
  parent: 'root',
  index: 3,
  level: 1,
  cssId: 'payments',
  inMenu: !0,
  isDisabled: !0
},
{
  state: 'root.jobs.new.transfer.intrabank',
  stateResource: 'root.jobs',
  parent: 'root',
  index: 4,
  level: 1,
  cssId: 'jobs',
  permissions: [
    'AddJob',
    'AddMultiTransfers',
    'PrepareTransfers',
    'PrepareMultiTransfers',
    'ViewJobHistory',
    'PreparePayments',
    'PrepareMultiPayments'
  ],
  children: [
    {
      isPreviousCopy: !0,
      stateResource: 'root.jobs.new',
      level: 2,
      permissions: [
        'AddJob',
        'AddMultiTransfers',
        'PrepareTransfers',
        'PrepareMultiTransfers',
        'PreparePayments',
        'PrepareMultiPayments'
      ],
      children: [
        {
          permissions: [
            'PrepareTransfers',
            'PrepareMultiTransfers'
          ],
          isPreviousCopy: !0,
          inMenu: !0,
          children: [
            {
              state: 'root.jobs.new.transfer.intrabank',
              isPreviousCopy: !0,
              permissions: [
                'PrepareIntrabankTransfer'
              ],
              inMenu: !0,
              level: 4
            },
            {
              state: 'root.jobs.new.transfer.interbank',
              permissions: [
                'PrepareInterbankTransfer'
              ],
              inMenu: !0,
              level: 4
            },
            {
              state: 'root.jobs.new.transfer.international',
              permissions: [
                'PrepareInternationalTransfer'
              ],
              inMenu: !0,
              level: 4
            },
            {
              state: 'root.jobs.new.transfer.multi',
              permissions: [
                'PrepareMultiTransfers'
              ],
              inMenu: !0,
              level: 4
            },
            {
              state: 'root.jobs.new.transfer.eeimports',
              permissions: [
                'PrepareSimpleImportsTransfer'
              ],
              inMenu: !0,
              level: 4
            }
          ]
        },
        {
          state: 'root.jobs.new.payment.single',
          inMenu: !0,
          permissions: [
            'PreparePayments',
            'PrepareMultiPayments'
          ],
          level: 3,
          children: [
            {
              state: 'root.jobs.new.payment.single',
              permissions: [
                'PreparePayments'
              ],
              inMenu: !1,
              level: 4
            },
            {
              state: 'root.jobs.new.payment.multi',
              permissions: [
                'PrepareMultiPayments'
              ],
              inMenu: !1,
              level: 4
            }
          ]
        }
      ]
    },
    {
      state: 'root.jobs.history',
      index: 2,
      permissions: [
        'ViewJobHistory'
      ]
    },
    {
      state: 'root.jobs.new.payment',
      inMenu: !1,
      permissions: [
        'PreparePayments',
        'PrepareMultiPayments'
      ],
      level: 3
    }
  ]
},
{
  state: 'root.accounts.list',
  stateResource: 'root.accounts.list',
  parent: 'root',
  index: 5,
  level: 1,
  cssId: 'accounts',
  permissions: [
    'ViewAccounts',
    'ViewCheques'
  ],
  children: [
    {
      isPreviousCopy: !0,
      level: 2,
      permissions: [
        'ViewAccounts'
      ],
      children: [
        {
          state: 'root.accounts.details',
          level: 3,
          inMenu: !1,
          permissions: [
            'ViewAccounts'
          ]
        }
      ]
    },
    {
      state: 'root.accounts.add',
      level: 2,
      index: 2,
      isDisabled: !0,
      inMenu: !1
    },
    {
      state: 'root.accounts.chequebook',
      level: 2,
      index: 2,
      permissions: [
        'ViewCheques'
      ]
    },
    {
      state: 'root.accounts.fileTransfer.request',
      stateResource: 'root.accounts.fileTransfer',
      level: 2,
      index: 3,
      permissions: [
        'ViewAccounts'
      ],
      children: [
        {
          isPreviousCopy: !0,
          inMenu: !1
        },
        {
          state: 'root.accounts.fileTransfer.download',
          level: 3,
          inMenu: !1
        }
      ]
    }
  ]
},
{
  state: 'root.loans.list',
  stateResource: 'root.loans.list',
  parent: 'root',
  index: 6,
  level: 1,
  cssId: 'loans',
  inMenu: !0,
  permissions: [
    'ViewLoans'
  ],
  children: [
    {
      isPreviousCopy: !0,
      children: [
        {
          state: 'root.loans.details',
          level: 3,
          inMenu: !1
        }
      ]
    },
    {
      state: 'root.loans.fileTransfer.request',
      stateResource: 'root.loans.fileTransfer',
      level: 2,
      index: 2,
      children: [
        {
          isPreviousCopy: !0,
          inMenu: !1
        },
        {
          state: 'root.loans.fileTransfer.download',
          level: 3,
          inMenu: !1
        }
      ]
    }
  ]
},
{
  state: 'root.investments.list',
  stateResource: 'root.investments.list',
  parent: 'root',
  index: 7,
  level: 1,
  cssId: 'investments',
  permissions: [
    'ViewInvestments'
  ],
  children: [
    {
      isPreviousCopy: !0,
      children: [
        {
          state: 'root.investments.termDepositsdetails',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.investments.alphamutualsdetails',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.investments.alphaprime',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.investments.alphaprivate',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.investments.alphaFinancedetails',
          level: 3,
          inMenu: !1
        }
      ]
    }
  ]
},
{
  state: 'root.cards.list',
  parent: 'root',
  index: 8,
  level: 1,
  cssId: 'cards',
  permissions: [
    'ViewCards'
  ],
  children: [
    {
      isPreviousCopy: !0,
      children: [
        {
          state: 'root.cards.details',
          level: 2,
          inMenu: !1
        }
      ]
    },
    {
      state: 'root.cards.prepaid',
      level: 2,
      index: 2,
      isDisabled: !0,
      inMenu: !1,
      children: [
        {
          state: 'root.cards.prepaid.unload',
          isDisabled: !0
        }
      ]
    },
    {
      state: 'root.cards.bonus',
      level: 2,
      index: 3
    }
  ]
},
{
  state: 'root.services',
  stateResource: 'root.services.estatements.accounts-list',
  parent: 'root',
  index: 9,
  level: 1,
  cssId: 'services',
  permissions: [
    'ViewEstatements',
    'EditEstatements'
  ],
  isDisabled: !0
},
{
  state: 'root.profile.personal',
  parent: 'root',
  index: 10,
  level: 1,
  cssId: 'profile',
  permissions: [
    'ViewProfile',
    'ViewSubscriptionUsers',
    'EditPassword',
    'EditUsername'
  ],
  stateResource: 'root.profile.personal',
  children: [
    {
      isPreviousCopy: !0,
      stateResource: 'root.profile.personal.child.corp',
      permissions: [
        'ViewProfile'
      ]
    },
    {
      state: 'root.profile.products.accounts-list-alpha',
      level: 2,
      index: 2,
      permissions: [
        'ViewProfile'
      ],
      children: [
        {
          isPreviousCopy: !0,
          children: [
            {
              state: 'root.profile.products.account',
              level: 4,
              inMenu: !1
            },
            {
              state: 'root.profile.products.accounts-list-greek',
              level: 4,
              inMenu: !1
            },
            {
              state: 'root.profile.products.accounts-list-other',
              level: 4,
              inMenu: !1
            }
          ]
        },
        {
          state: 'root.profile.products.cards-list-alpha',
          level: 3,
          index: 2,
          params: {
            productTypeScope: 'local'
          },
          children: [
            {
              state: 'root.profile.products.cards-list-other',
              level: 4,
              inMenu: !1
            },
            {
              state: 'root.profile.products.card',
              level: 4,
              inMenu: !1
            }
          ]
        },
        {
          state: 'root.profile.products.add-account',
          level: 3,
          index: 3,
          params: {
            productTypeScope: 'local'
          }
        },
        {
          state: 'root.profile.products.loans-list',
          level: 3,
          index: 4,
          children: [
            {
              state: 'root.profile.products.loan',
              level: 4,
              inMenu: !1
            }
          ]
        },
        {
          state: 'root.profile.products.investments-list',
          level: 3,
          index: 5,
          children: [
            {
              state: 'root.profile.products.investment',
              level: 4,
              inMenu: !1
            }
          ]
        },
        {
          state: 'root.profile.products.citibank-list',
          level: 3,
          index: 6
        },
        {
          state: 'root.profile.products.emporiki-list',
          level: 3,
          index: 7
        }
      ]
    },
    {
      state: 'root.profile.usermanagement',
      level: 2,
      index: 2,
      permissions: [
        'ViewSubscriptionUsers'
      ],
      children: [
        {
          state: 'root.profile.usermanagement.userManagementLandingPage',
          level: 3,
          inMenu: !1
        }
      ]
    },
    {
      state: 'root.profile.security',
      level: 2,
      index: 3,
      stateResource: 'root.profile.security',
      permissions: [
        'EditPassword',
        'EditUsername'
      ],
      children: [
        {
          state: 'root.profile.security.changeusername',
          level: 3,
          permissions: [
            'EditUsername'
          ],
          inMenu: !0
        },
        {
          state: 'root.profile.security.changepassword',
          level: 3,
          permissions: [
            'EditPassword'
          ],
          inMenu: !0
        },
      ]
    }
  ]
}
]
}
});
alpha.app.constant('roleMenuJson', {
menuTree: {
children: [
{
  state: 'root.messages',
  inMenu: !1
},
{
  state: 'root.failedTrans',
  inMenu: !1
},
{
  state: 'root.overview',
  parent: 'root',
  index: 1,
  level: 1,
  cssId: 'overview'
},
{
  state: 'root.accounts.list',
  parent: 'root',
  index: 2,
  level: 1,
  cssId: 'accounts',
  children: [
    {
      isPreviousCopy: !0,
      children: [
        {
          state: 'root.accounts.details',
          level: 2,
          inMenu: !1
        }
      ]
    },
    {
      state: 'root.accounts.add',
      level: 2,
      index: 2,
      params: {
        productTypeFamily: 'account',
        productTypeScope: 'local'
      }
    },
    {
      state: 'root.accounts.chequebook',
      level: 2,
      index: 3
    }
  ]
},
{
  state: 'root.cards.list',
  parent: 'root',
  index: 3,
  level: 1,
  isAlsoFirstChild: !0,
  cssId: 'cards',
  children: [
    {
      isPreviousCopy: !0,
      children: [
        {
          state: 'root.cards.details',
          level: 2,
          inMenu: !1
        }
      ]
    },
    {
      state: 'root.cards.add',
      level: 2,
      index: 2,
      params: {
        productTypeFamily: 'card',
        productTypeScope: 'local'
      }
    },
    {
      state: 'root.cards.maintenance',
      inMenu: !1
    },
    {
      state: 'root.cards.maintenance.selection',
      level: 2,
      index: 3
    },
    {
      state: 'root.cards.prepaid',
      level: 2,
      index: 4
    },
    {
      state: 'root.cards.bonus',
      level: 2,
      index: 5
    }
  ]
},
{
  state: 'root.loans.list',
  parent: 'root',
  index: 4,
  level: 1,
  cssId: 'loans',
  children: [
    {
      isPreviousCopy: !0,
      children: [
        {
          state: 'root.loans.details',
          level: 3,
          inMenu: !1
        }
      ]
    },
    {
      state: 'root.loans.add',
      level: 2,
      index: 2,
      params: {
        productTypeFamily: 'loan',
        productTypeScope: 'local'
      }
    }
  ]
},
{
  state: 'root.investments.list',
  parent: 'root',
  index: 5,
  level: 1,
  cssId: 'investments',
  children: [
    {
      isPreviousCopy: !0,
      children: [
        {
          state: 'root.investments.termDepositsdetails',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.investments.alphamutualsdetails',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.investments.alphaprime',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.investments.alphaprivate',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.investments.alphaFinancedetails',
          level: 3,
          inMenu: !1
        }
      ]
    },
    {
      state: 'root.investments.e-timedeposit',
      level: 2,
      index: 2,
      children: [
        {
          state: 'root.investments.e-timedeposit.reqManage',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.investments.e-timedeposit.reqManage',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.investments.e-timedeposit.reqModify',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.investments.e-timedeposit.details',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.investments.e-timedeposit.newrequest',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.investments.e-timedeposit.edit',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.investments.e-timedeposit.withdraw',
          level: 3,
          inMenu: !1
        }
      ]
    },
    {
      state: 'root.investments.e-timedeposit-bonus',
      level: 2,
      index: 3,
      children: [
        {
          state: 'root.investments.e-timedeposit-bonus.reqManage',
          level: 2,
          inMenu: !1,
          parent: 'root.investments.e-timedeposit-bonus'
        },
        {
          state: 'root.investments.e-timedeposit-bonus.reqModify',
          level: 2,
          inMenu: !1,
          parent: 'root.investments.e-timedeposit-bonus'
        },
        {
          state: 'root.investments.e-timedeposit-bonus.newrequest',
          level: 2,
          inMenu: !1,
          parent: 'root.investments.e-timedeposit-bonus'
        },
        {
          state: 'root.investments.e-timedeposit-bonus.details',
          level: 2,
          inMenu: !1,
          parent: 'root.investments.e-timedeposit-bonus'
        },
        {
          state: 'root.investments.e-timedeposit-bonus.edit',
          level: 2,
          inMenu: !1,
          parent: 'root.investments.e-timedeposit-bonus'
        },
        {
          state: 'root.investments.e-timedeposit-bonus.withdraw',
          level: 2,
          inMenu: !1,
          parent: 'root.investments.e-timedeposit-bonus'
        }
      ]
    },
    {
      state: 'root.investments.add',
      level: 2,
      index: 4,
      params: {
        productTypeFamily: 'investment',
        productTypeScope: 'local'
      }
    }
  ]
},
{
  state: 'root.transfers.new.intrabank',
  parent: 'root',
  index: 6,
  level: 1,
  isAlsoFirstChild: !0,
  cssId: 'transfers',
  children: [
    {
      isPreviousCopy: !0,
      children: [
        {
          state: 'root.transfers.new.interbank',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.transfers.new.citibank',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.transfers.new.international',
          level: 3,
          inMenu: !1
        }
      ]
    },
    {
      state: 'root.transfers.myTransfers.list',
      level: 2,
      index: 2,
      children: [
        {
          state: 'root.transfers.myTransfers.addintrabank',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.transfers.myTransfers.addinterbank',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.transfers.myTransfers.addinternational',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.transfers.myTransfers.list.delete',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.transfers.myTransfers.edit',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.transfers.myTransfers.edit.intrabank',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.transfers.myTransfers.edit.interbank',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.transfers.myTransfers.edit.international',
          level: 3,
          inMenu: !1
        }
      ]
    },
    {
      state: 'root.transfers.recurring.list',
      level: 2,
      index: 3,
      children: [
        {
          state: 'root.transfers.recurring.new',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.transfers.recurring.details',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.transfers.recurring.delete',
          level: 3,
          inMenu: !1
        }
      ]
    },
    {
      state: 'root.transfers.history',
      level: 2,
      index: 4
    },
    {
      state: 'root.transfers.pending',
      level: 2,
      index: 5
    }
  ]
},
{
  state: 'root.payments.search',
  parent: 'root',
  index: 7,
  level: 1,
  cssId: 'payments',
  children: [
    {
      isPreviousCopy: !0,
      children: [
        {
          state: 'root.payments.new',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.payments.evoucherpay',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.payments.western-union',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.payments.eydap-prof',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.payments.donation',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.payments.donation-with-code',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.payments.custom',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.payments.new-group',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.payments.alpha-loans',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.payments.loans',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.payments.housing-loans',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.payments.cards',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.payments.interbank-cards',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.payments.e-voucher-issue',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.payments.labor-ticket',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.payments.vehicle-tax',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.payments.hellenic-american',
          level: 3,
          inMenu: !1
        }
      ]
    },
    {
      state: 'root.payments.mypayments.list',
      level: 2,
      index: 2,
      children: [
        {
          state: 'root.payments.mypayments.list.delete',
          level: 3,
          inMenu: !1,
          children: [
            {
              state: 'root.payments.mypayments.add-dynamic-withFixCode',
              level: 4,
              inMenu: !1
            }
          ]
        },
        {
          state: 'root.payments.mypayments.add-dynamic-withoutFixCode',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.payments.mypayments.add-card',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.payments.mypayments.add-loan',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.payments.mypayments.edit',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.payments.mypayments.edit.dynamic-with-code',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.payments.mypayments.edit.dynamic-without-code',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.payments.mypayments.edit.card',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.payments.mypayments.edit.loan',
          level: 3,
          inMenu: !1
        }
      ]
    },
    {
      state: 'root.payments.history',
      level: 2,
      index: 3,
      cssId: 'payments'
    },
    {
      state: 'root.payments.recurring.list',
      level: 2,
      index: 4,
      children: [
        {
          state: 'root.payments.recurring.details',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.payments.recurring.cancel',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.payments.recurring.confirm-cancelation',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.payments.recurring.new',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.payments.recurring.edit ',
          level: 3,
          inMenu: !1
        }
      ]
    },
    {
      state: 'root.payments.pending',
      level: 2,
      index: 5,
      cssId: 'payments'
    }
  ]
},
{
  state: 'root.services.estatements.accounts-list',
  parent: 'root',
  index: 8,
  level: 1,
  cssId: 'services',
  children: [
    {
      isPreviousCopy: !0,
      stateResource: 'root.services.estatements.accounts-list.child',
      children: [
        {
          isPreviousCopy: !0,
          stateResource: 'root.services.estatements.accounts-list.child.child',
          children: [
            {
              state: 'root.services.estatements.update.account',
              level: 4,
              inMenu: !1
            },
            {
              state: 'root.services.estatements.update.card',
              level: 4,
              inMenu: !1
            },
            {
              state: 'root.services.estatements.update.loan',
              level: 4,
              inMenu: !1
            }
          ]
        },
        {
          state: 'root.services.estatements.cards-list',
          level: 3,
          index: 2
        },
        {
          state: 'root.services.estatements.loans-list',
          level: 3,
          index: 3
        }
      ]
    },
    {
      state: 'root.services.alerts.accounts.list',
      level: 2,
      index: 2,
      children: [
        {
          isPreviousCopy: !0,
          stateResource: 'root.services.alerts.accounts.list.child',
          children: [
            {
              state: 'root.services.alerts.accounts.update',
              level: 4,
              inMenu: !1
            },
            {
              state: 'root.services.alerts.accounts.activate',
              level: 4,
              inMenu: !1
            }
          ]
        },
        {
          state: 'root.services.alerts.cards.list',
          level: 3,
          index: 2,
          children: [
            {
              state: 'root.services.alerts.cards.update',
              level: 4,
              inMenu: !1
            }
          ]
        },
        {
          state: 'root.services.alerts.alerts',
          level: 3,
          index: 3
        }
      ]
    },
    {
      state: 'root.services.otp',
      level: 2,
      index: 3,
      children: [
        {
          isPreviousCopy: !0
        }
      ]
    },
    {
      state: 'root.services.alphaphone',
      level: 2,
      index: 4,
      children: [
        {
          isPreviousCopy: !0
        }
      ]
    },
    {
      state: 'root.services.secureWeb',
      level: 2,
      index: 5
    }
  ]
},
{
  state: 'root.profile.personal',
  parent: 'root',
  index: 9,
  level: 1,
  cssId: 'profile',
  children: [
    {
      isPreviousCopy: !0,
      stateResource: 'root.profile.personal.child'
    },
    {
      state: 'root.profile.products.accounts-list-alpha',
      level: 2,
      index: 2,
      children: [
        {
          isPreviousCopy: !0,
          children: [
            {
              state: 'root.profile.products.account',
              level: 4,
              inMenu: !1
            },
            {
              state: 'root.profile.products.accounts-list-greek',
              level: 4,
              inMenu: !1
            },
            {
              state: 'root.profile.products.accounts-list-other',
              level: 4,
              inMenu: !1
            }
          ]
        },
        {
          state: 'root.profile.products.cards-list-alpha',
          level: 3,
          index: 2,
          params: {
            productTypeScope: 'local'
          },
          children: [
            {
              state: 'root.profile.products.cards-list-other',
              level: 4,
              inMenu: !1
            },
            {
              state: 'root.profile.products.card',
              level: 4,
              inMenu: !1
            }
          ]
        },
        {
          state: 'root.profile.products.add-account',
          level: 3,
          index: 3,
          params: {
            productTypeScope: 'local'
          }
        },
        {
          state: 'root.profile.products.loans-list',
          level: 3,
          index: 4,
          children: [
            {
              state: 'root.profile.products.loan',
              level: 4,
              inMenu: !1
            }
          ]
        },
        {
          state: 'root.profile.products.investments-list',
          level: 3,
          index: 5,
          children: [
            {
              state: 'root.profile.products.investment',
              level: 4,
              inMenu: !1
            }
          ]
        },
        {
          state: 'root.profile.products.citibank-list',
          level: 3,
          index: 6
        },
        {
          state: 'root.profile.products.emporiki-list',
          level: 3,
          index: 7
        }
      ]
    },
    {
      state: 'root.profile.security',
      level: 2,
      index: 3
    },
    {
      state: 'root.profile.transferlimit.show',
      stateResource: 'root.profile.transferlimit',
      level: 2,
      index: 5,
      children: [
        {
          isPreviousCopy: !0,
          stateResource: 'root.profile.transferlimit.show',
          level: 3,
          inMenu: !1
        },
        {
          state: 'root.profile.transferlimit.edit',
          level: 3,
          inMenu: !1
        }
      ]
    },
    {
      state: 'root.profile.deactivate',
      level: 2,
      index: 5
    }
  ]
},
{
  state: 'root.oauth.begin',
  parent: 'root',
  index: 10,
  level: 1,
  inMenu: !1
}
]
}
});
__extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(),
function (n) {
var t;
(function (t) {
var c = function () {
function n() {
  this.TimeZone = {
  };
  this.TimeZones = [
  ];
  this.Language = {
  };
  this.Languages = [
  ]
}
return n
}(),
i,
r,
u,
f,
e,
o,
s,
h;
t.AccountsAlertActivationInfo = c;
i = function () {
function t(n) {
  this.stateService = n;
  this.isBusy = !1;
  this.showValidationErrors = !1;
  this.hasError = !1;
  this.showConfirmation = !1
}
return t.prototype.hasValue = function (t) {
  return !n.utils.isUndefinedOrNullorWhiteSpace(t)
},
t.prototype.doWork = function () {
  throw Error('don\'t call me');
},
t.prototype.canSubmit = function () {
  return !(this.form.$pristine || this.isBusy)
},
t.prototype.canBack = function () {
  return !this.isBusy
},
t.prototype.back = function () {
  this.stateService.forceReload()
},
t.prototype.submit = function () {
  if (this.showValidationErrors = !0, n.utils.forceValidation(this.form), this.form && this.form.$valid) {
    this.isBusy = !0;
    var t = this,
    i = this.doWork();
    i ? i.finally (function () {
      t.isBusy = !1;
      t.form.$setPristine()
    })  : (t.isBusy = !1, t.form.$setPristine())
  }
},
t.$inject = [
  '$state'
],
t
}();
t.FormBaseController = i;
r = function (t) {
function r(n, i, r, u, f) {
  var e = t.call(this, n) || this;
  return e.windowService = n,
  e.model = i,
  e.session = r,
  e.eServicesService = u,
  e.roleService = f,
  e.isBusy = !1,
  e.model.ReceiveAlerts == !1 && (e.model.AlertsLang = undefined, e.model.Contact = {
  }),
  e
}
return __extends(r, t),
r.prototype.hasValue = function (t) {
  return !n.utils.isUndefinedOrNullorWhiteSpace(t)
},
r.prototype.doWork = function () {
  var n = this;
  return this.model.Contact.ContactType == 4 ? this.model.Contact.Description = this.session.Email : this.model.Contact.ContactType == 3 && (this.model.Contact.Description = this.session.MobilePhone),
  this.eServicesService.setAlerts({
    SetAlerts: this.model,
    GetAlerts: !1
  }).then(function (t) {
    return t.ResultCode == 0 ? (n.showConfirmation = !0, t)  : (n.error = t.Error.Message, t)
  }, function (t) {
    return n.error = t.Error.Message,
    t
  })
},
r.prototype.canSubmit = function () {
  return t.prototype.canSubmit.call(this) && this.roleService.isAccessAllowed('Alerts')
},
r.$inject = i.$inject.concat(['model',
'session',
'EServicesService',
'RoleService']),
r
}(i);
t.mainModule.controller('alertsController', r);
u = function () {
function n(n, t, i, r, u, f, e) {
  this.model = n;
  this.hasActiveAlerts = t;
  this.eServicesService = i;
  this.modalService = r;
  this.stateService = u;
  this.hasAccounts = f;
  this.otpHandlerService = e;
  this.updateState = 'root.services.alerts.accounts.update'
}
return Object.defineProperty(n.prototype, 'otpHandler', {
  get: function () {
    return this.otpHandlerService.retrieveHandler(9)
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(n.prototype, 'otpCallerType', {
  get: function () {
    return this.otpHandler.caller
  },
  enumerable: !0,
  configurable: !0
}),
n.prototype.deleteAlert = function (n) {
  var t = this;
  t.otpHandler.reset({
    hints: {
      Requirement: String(2),
      Method: String(1)
    },
    payload: n
  }).result().then(function () {
    return t.otpHandler.appendExtraInfoToPayload(n)
  }).then(function (n) {
    return t.modalService.open({
      controller: 'DeleteAccountAlertsModalInstanceController as vm',
      templateUrl: 'Templates/Features/Services/alerts/account-alerts-delete',
      size: 'sm',
      resolve: {
        model: function () {
          return n
        }
      }
    }).result.then(function () {
      return t.eServicesService.removeAccountAlerts(n).then(function () {
        t.stateService.forceReload()
      })
    })
  })
},
n.prototype.showTitle = function (n) {
  return n == 0 ? !0 : this.model[n - 1].Account != this.model[n].Account
},
n.$inject = [
  'model',
  'hasActiveAlerts',
  'EServicesService',
  '$modal',
  '$state',
  'hasAccounts',
  'OtpHandlerService'
],
n
}();
t.mainModule.controller('AccountAlertsListController', u);
f = function (t) {
function r(i, r, u, f, e, o, s, h) {
  var c = t.call(this, i) || this,
  l;
  return c.windowService = i,
  c.stateService = r,
  c.model = u,
  c.session = f,
  c.eServicesService = e,
  c.$document = s,
  c.stringService = h,
  c.creating = !1,
  c.listState = 'root.services.alerts.accounts.list',
  n.utils.isUndefinedOrNullorWhiteSpace(c.model.Account) && (c.creating = !0, l = c, o.getEnquiryAccounts().then(function (n) {
    l.accounts = n
  })),
  c.alertCategories = [
    {
      value: 0
    },
    {
      value: 1
    },
    {
      value: 2
    },
    {
      value: 3
    },
    {
      value: 4
    }
  ],
  c.selectedCategory = c.alertCategories[c.model.Category],
  c.model.email = f.Email,
  c.model.mobile = f.MobilePhone,
  c
}
return __extends(r, t),
r.prototype.showAmount = function () {
  return this.selectedCategory && (this.selectedCategory.value == 1 || this.selectedCategory.value == 2)
},
r.prototype.back = function () {
  this.stateService.go(this.listState, {
  }, {
    reload: !0
  })
},
r.prototype.doWork = function () {
  var t = this;
  if (!this.model.byEMail && !this.model.byMobile) {
    this.informationMessage = this.stringService['accountAlerts.infoMsg.1'];
    return
  }
  if (n.utils.isUndefinedOrNull(this.model.includeCreditCardTransactions)) {
    this.informationMessage = this.stringService['accountAlerts.infoMsg.2'];
    return
  }
  return this.model.Category = this.selectedCategory.value,
  this.creating ? (this.model.Account = this.selectedAccount.Code, t.eServicesService.createAccountAlerts(this.model).then(function (n) {
    return t.hasError = !1,
    t.$document.scrollTop(0),
    n.ResultCode != 0 ? (t.informationMessage = '', t.hasError = !0, t.error = n.Error.Message)  : (t.informationMessage = '', t.showConfirmation = !0),
    n
  }, function (n) {
    return t.informationMessage = '',
    t.$document.scrollTop(0),
    t.hasError = !0,
    t.error = n.Error.Message,
    n
  }))  : t.eServicesService.modifyAccountAlerts(this.model).then(function (n) {
    return t.informationMessage = '',
    t.hasError = !1,
    t.$document.scrollTop(0),
    n.ResultCode != 0 ? (t.hasError = !0, t.error = n.Error.Message)  : t.showConfirmation = !0,
    n
  }, function (n) {
    return t.$document.scrollTop(0),
    t.hasError = !0,
    t.error = n.Error.Message,
    n
  })
},
r.$inject = i.$inject.concat(['$state',
'alert',
'session',
'EServicesService',
'ProfileProductsService',
'$document',
'STRINGS']),
r
}(i);
t.mainModule.controller('AccountAlertsUpdateController', f);
e = function (n) {
function t(t, i, r, u, f, e) {
  e === void 0 && (e = !1);
  var o = n.call(this, t) || this;
  return o.windowsService = t,
  o.Model = i,
  o.EServicesService = r,
  o.$document = u,
  o.hasActiveAlerts = f,
  o.isRetailUserWithOtpEnabled = e,
  o.Model.Deactivate = !1,
  o
}
return __extends(t, n),
t.prototype.doWork = function () {
  var n = this,
  t;
  return t = this.Model.Deactivate ? 1 : 0,
  n.EServicesService.setAccountAlertInfo({
    Action: t,
    HasFirstSilenceHours: n.Model.HasFirstSilenceHours,
    HasSecondSilenceHours: n.Model.HasSecondSilenceHours,
    NotifyThisActionToMobile: n.Model.NotifyThisActionToMobile,
    NotifyThisActionToEMail: n.Model.NotifyThisActionToEMail,
    DebitAccount: n.Model.DebitAccount.Code,
    AlertLanguage: n.Model.Language.Key,
    TimeZone: n.Model.TimeZone.Title
  }).then(function (t) {
    return n.hasError = !1,
    n.$document.scrollTop(0),
    t.ResultCode != 0 ? (n.hasError = !0, t.Error && (n.error = t.Error.Message))  : n.showConfirmation = !0,
    t
  })
},
t.prototype.canSubmit = function () {
  return n.prototype.canSubmit.call(this)
},
t.$inject = i.$inject.concat(['Model',
'EServicesService',
'$document',
'hasActiveAlerts',
'isRetailUserWithOtpEnabled']),
t
}(i);
t.mainModule.controller('AccountAlertsActivateController', e);
o = function () {
function n(n, t, i, r, u, f) {
  this.model = n;
  this.hasCards = t;
  this.modalService = i;
  this.stateService = r;
  this.eServicesService = u;
  this.stringService = f;
  this.updateState = 'root.services.alerts.cards.update';
  this.fdhErrorMessage = '';
  var e = this;
  n.forEach(function (n) {
    if (n.HasFDHError) {
      e.fdhError = !0;
      e.fdhErrorMessage = e.stringService.fdhError;
      return
    }
  })
}
return n.$inject = [
  'model',
  'hasCards',
  '$modal',
  '$state',
  'STRINGS'
],
n
}();
t.mainModule.controller('CardAlertsController', o);
s = function (t) {
function i(i, r, u, f, e, o, s, h, c, l, a, v) {
  var y = t.call(this, r) || this,
  p,
  w;
  if (y.stateService = i, y.eServicesService = u, y.session = f, y.pps = e, y.cardAlertResponse = o, y.cards = s, y.AppEventsService = h, y.stringService = c, y.regularExpressionProvider = l, y.dialCodeService = a, y.dialCodeMatcher = v, y.listState = 'root.services.alerts.cards.list', y.languages = [
    {
      value: 'el',
      text: 'Ελληνικά'
    },
    {
      value: 'en',
      text: 'English'
    }
  ], y.thresholds = [
    {
      threshold: 0,
      text: y.stringService.allTransactions
    },
    {
      threshold: 1,
      text: y.stringService.over100
    },
    {
      threshold: 2,
      text: y.stringService.over300
    }
  ], y.ViaSms = !0, y.error = '', y.alertViewModels = [
    {
      Label: y.stringService.transInGreece,
      Enabled: !1,
      AlertType: 0,
      Threshold: angular.copy(y.thresholds[2]),
      IsNational: !0,
      ViaEmail: !1
    },
    {
      Label: '',
      Enabled: !1,
      AlertType: 1,
      Threshold: angular.copy(y.thresholds[0]),
      IsNational: !0,
      ViaEmail: !1
    },
    {
      Label: y.stringService.transAbroad,
      Enabled: !1,
      AlertType: 0,
      Threshold: angular.copy(y.thresholds[2]),
      IsNational: !1,
      ViaEmail: !1
    },
    {
      Label: '',
      Enabled: !1,
      AlertType: 1,
      Threshold: angular.copy(y.thresholds[0]),
      IsNational: !1,
      ViaEmail: !1
    },
  ], n.utils.isUndefinedOrNull(y.cardAlertResponse)) y.isCreating = !0,
  y.alertViewModels.forEach(function (n) {
    return n.Enabled = !0
  }),
  y.model = {
  },
  y.model.PhoneNumber = y.session.MobilePhone,
  y.model.EmailAddr = y.session.Email;
   else {
    if (p = y, !n.utils.isUndefinedOrNull(y.cardAlertResponse.Error)) return y.error = y.cardAlertResponse.Error.Message,
    y.isBusy = !0,
    y;
    y.model = y.cardAlertResponse.GetSubscriptionInfoAlerts;
    n.utils.isUndefinedOrNullorWhiteSpace(y.model.EmailAddr) || (y.ViaEmail = !0);
    n.utils.isUndefinedOrNull(y.model.AlertLanguage) || (y.selectedLang = y.model.AlertLanguage == 'el' ? {
      value: 'el',
      text: 'Ελληνικά'
    }
     : {
      value: 'en',
      text: 'English'
    });
    y.model.AlertDefinitions.forEach(function (n) {
      n.IsNational ? n.AlertType == 0 ? (p.alertViewModels[0].Enabled = !0, p.alertViewModels[0].Threshold = angular.copy(p.thresholds[n.CardAlertAmount]), n.DeviceType == 4 && (p.alertViewModels[0].ViaEmail = !0))  : (p.alertViewModels[1].Enabled = !0, p.alertViewModels[1].Threshold = angular.copy(p.thresholds[n.CardAlertAmount]), n.DeviceType == 4 && (p.alertViewModels[1].ViaEmail = !0))  : n.AlertType == 0 ? (p.alertViewModels[2].Enabled = !0, p.alertViewModels[2].Threshold = angular.copy(p.thresholds[n.CardAlertAmount]), n.DeviceType == 4 && (p.alertViewModels[2].ViaEmail = !0))  : (p.alertViewModels[3].Enabled = !0, p.alertViewModels[3].Threshold = angular.copy(p.thresholds[n.CardAlertAmount]), n.DeviceType == 4 && (p.alertViewModels[3].ViaEmail = !0))
    })
  }
  return w = y.cardAlertResponse && y.cardAlertResponse.GetSubscriptionInfoAlerts ? y.cardAlertResponse.GetSubscriptionInfoAlerts.DialCodeId : 0,
  y.mobileDc = y.dialCodeMatcher.getDialCodeById(w),
  y.model.PhoneNumber = y.dialCodeMatcher.splitPhone(y.model.PhoneNumber, y.mobileDc).phone,
  y.updatePhonePattern(),
  y
}
return __extends(i, t),
Object.defineProperty(i.prototype, 'dialCodes', {
  get: function () {
    return this.dialCodeService.dialCodes
  },
  enumerable: !0,
  configurable: !0
}),
i.prototype.updatePhonePattern = function () {
  this.mobileValidation = this.dialCodeService.getValidation(this.mobileDc)
},
i.prototype.selectCard = function (t) {
  this.model.ProductNumber = t.Code;
  this.isBusy = !0;
  var i = this;
  this.eServicesService.getCardAlerts({
    CCNumber: this.model.ProductNumber,
    ProductID: t.BankProduct.ProductID
  }).then(function (r) {
    r.ResultCode != 0 || n.utils.isUndefinedOrNull(r.GetSubscriptionInfoAlerts) ? i.error = n.utils.isUndefinedOrNull(r.Error) ? 'System Error | GetCardAlerts #1' : r.Error.Message : (i.model = r.GetSubscriptionInfoAlerts, i.model.ProductID = t.BankProduct.ProductID, i.isBusy = !1)
  }).catch (function () {
    i.error = 'System Error | GetCardAlerts #2'
  })
},
i.prototype.doWork = function () {
  var t = this,
  r,
  i,
  u,
  f;
  for (this.model.DialCodeId = this.mobileDc.IDC_ID, this.model.AlertLanguage = this.selectedLang.value, this.ViaEmail || (this.model.EmailAddr = ''), this.isCreating && (this.model.unsubscribed = !1, this.model.ProductNumber = this.selectedCard.BankProduct.Code), this.model.AlertDefinitions = [
  ], r = 0; r < this.alertViewModels.length; r++) i = this.alertViewModels[r],
  i.Enabled && (u = {
    AlertType: i.AlertType,
    CardAlertAmount: i.Threshold.threshold,
    IsNational: i.IsNational,
    DeviceType: 3
  }, this.model.AlertDefinitions.push(u), i.ViaEmail && (f = angular.copy(u), f.DeviceType = 4, this.model.AlertDefinitions.push(f)));
  return this.eServicesService.setCardAlerts({
    SetSubscriptionInfoAlerts: this.model
  }).then(function (i) {
    return i.ResultCode == 1 ? t.error = i.Error.Message : t.pps.getCardByCode(t.model.ProductNumber).then(function () {
      return t.AppEventsService.publish(n.common.services.AppEventsService.InvalidateCards_Event)
    }),
    t.showConfirmation = !0,
    i
  }, function (n) {
    return t.error = n.Error.Message,
    n
  })
},
i.prototype.back = function () {
  this.stateService.transitionTo(this.listState, {
  }, {
    reload: !0,
    inherit: !0,
    notify: !0
  })
},
i.$inject = [
  '$state',
  '$window',
  'EServicesService',
  'session',
  'ProfileProductsService',
  'cardAlertResponse',
  'cards',
  'AppEventsService',
  'STRINGS',
  'RegularExpressionService',
  'DialCodeService',
  'dialCodeMatcher'
],
i
}(i);
t.mainModule.controller('CardAlertsUpdateController', s);
h = function () {
function n() {
}
return n
}();
t.mainModule.controller('eBankingServicesController', h)
}) (t = n.eBankingServices || (n.eBankingServices = {
}))
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(),
function (n) {
var t;
(function (t) {
var f = function () {
function n(n, t, i, r) {
  this.model = n;
  this.cartolini = t;
  this.stateService = i;
  this.stringService = r
}
return n.$inject = [
  'model',
  'cartolini',
  '$state',
  'STRINGS'
],
n
}(),
r,
i,
u;
t.mainModule.controller('AlphaPhoneController', f);
r = function () {
function t(t, i, r, u, f, e, o) {
  if (this.model = t, this.cartoliniResp = i, this.postNewWindowService = r, this.Securityservice = u, this.roleService = o, this.cartoliniResp.ResultCode == 0 ? this.cartolini = this.cartoliniResp.Cartolini : this.error = n.utils.isUndefinedOrNull(this.cartoliniResp.Error) ? 'System error' : this.cartoliniResp.Error.Message, this.roleService.IsAdminUser()) {
    var s = this;
    this.Securityservice.getUserSessionInfo().then(function (n) {
      s.ordererName = n.OrdererName
    })
  }
  o.getRole() == 10 && (this.isPhoneBanking = !0);
  e.$parent.vm.menuItems = [
    {
      name: f['menuItem.cartolini'],
      state: 'root.services.alphaphone.cartolini'
    }
  ]
}
return t.prototype.print = function () {
  window.print()
},
t.prototype.exportPDF = function () {
  var n = {
  };
  return n.PDFRequestType = 29,
  n.Parameters = JSON.stringify({
  }),
  n
},
t.prototype.isAdminUser = function () {
  return this.roleService.IsAdminUser()
},
t.$inject = [
  'model',
  'cartolini',
  'postNewWindowService',
  'SecurityService',
  'STRINGS',
  '$scope',
  'RoleService'
],
t
}();
t.mainModule.controller('CartoliniController', r);
i = function (n) {
function t(t, i) {
  return n.call(this, t, i) || this
}
return __extends(t, n),
t.$inject = [
  '$scope',
  '$injector'
],
t
}(n.wizards.WizardController);
n.cards.mainModule.controller('BaseManagementController', i);
u = function (t) {
function i(n, i, r, u, f, e, o) {
  var s = t.call(this, n, i) || this;
  return s.scope = n,
  s.$injector = i,
  s.modal = r,
  s.stateService = u,
  s.cartoliniResp = f,
  s.userInfo = o,
  s.cartoliniResp.ResultCode == 0 && (s.cartolini = s.cartoliniResp.Cartolini),
  s.AgreedToTerms = undefined,
  n.$parent.vm.menuItems = [
    {
      name: e['menuItem.alphaphoneActivation'],
      state: 'root.services.alphaphone.activation'
    }
  ],
  s
}
return __extends(i, t),
i.prototype.completeActivation = function () {
  this.stateService.go('root.services.alphaphone', {
  }, {
    reload: !0
  })
},
i.prototype.initialiseSteps = function () {
  var t = this,
  i = [
  ],
  u = 0,
  f = {
    templateUrl: 'Templates/Features/Services/alphaPhone/activation-step1',
    title: '',
    index: u++,
    stateName: ''
  },
  r;
  return f.processStep = [
    'qService',
    function (n) {
      var i = n.defer(),
      r;
      return t.AgreedToTerms ? i.resolve(!0)  : (r = t.modal.open({
        templateUrl: 'Templates/Features/Services/alphaPhone/notAcceptedTermsModal',
        controller: 'AlphaphoneActivationModalInstanceCtrl as vm',
        size: 'sm',
        windowClass: 'custom'
      }), i.reject('')),
      i.promise
    }
  ],
  i.push(f),
  r = {
    templateUrl: 'Templates/Features/Services/alphaPhone/activation-step2',
    index: u++,
    title: '',
    stateName: ''
  },
  r.processStep = [
    'SecurityService',
    'qService',
    'AppEventsService',
    function (i, r, u) {
      var f = t.qService.defer(),
      e;
      return t.IsBusy = !0,
      e = i.changePassword(this.oldPassword, this.password1),
      e.then(function (r) {
        if (r.ResultCode == 0) {
          var e = [
          ];
          t.userInfo && t.userInfo.UserInfo && t.userInfo.UserInfo.CompanyInfo && t.userInfo.UserInfo.CompanyInfo.IsSpecialSubscription ? e.push({
            Action: 0,
            Channel: 5
          })  : e.push({
            Action: 0,
            Channel: 1
          });
          i.changeChannel(e).then(function (i) {
            if (i.ResultCode == 0) {
              var r = t.modal.open({
                controller: 'ActivatedAlphaPhoneModalInstanceCtrl as vm',
                templateUrl: 'Templates/Features/Services/alphaPhone/activated-modal',
                size: 'lg',
                backdrop: 'static',
                resolve: {
                  digit7: [
                    'ProductsService',
                    function () {
                      return n.utils.isUndefinedOrNull(t.cartolini) ? '' : t.cartolini.UserName7Digit
                    }
                  ]
                }
              });
              r.result.then(function () {
                u.publish(n.common.services.AppEventsService.InvalidateCartolini_Event);
                t.stateService.go('root.services.alphaphone', {
                }, {
                  reload: !0
                })
              });
              f.resolve(!0)
            } else f.reject(i.Error.Message)
          })
        } else n.utils.isUndefinedOrNull(r.Error) ? f.reject('system error')  : f.reject(r.Error.Message);
        t.IsBusy = !1
      }, function () {
        f.reject('system error');
        t.IsBusy = !1
      }),
      f.promise
    }
  ],
  i.push(r),
  i
},
i.$inject = [
  '$scope',
  '$injector',
  '$modal',
  '$state',
  'cartolini',
  'STRINGS',
  'userInfo'
],
i
}(i);
n.eBankingServices.mainModule.controller('AlphaphoneActivationController', u)
}) (t = n.eBankingServices || (n.eBankingServices = {
}))
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(),
function (n) {
var t;
(function (t) {
var u = function () {
function t(n, t, i) {
  this.eServicesService = n;
  this.model = t;
  this.type = i
}
return t.prototype.remove = function (t) {
  if (t.hasEstatementsActivated) {
    var i = {
      ProductCode: t.BankProduct.Code,
      ProductTypeID: t.BankProduct.TypeID,
      ProductID: t.BankProduct.ProductID,
      ContactType: 4,
      Medium: 0,
      Type: n.utils.convertCatGroupTypeToProdtReqType(t.CategoryGroupType)
    };
    this.eServicesService.setEstatements(i)
  }
},
t.prototype.getUpdateState = function () {
  switch (this.type) {
    case n.server.ProductRequestType.AccountsForEstatements:
      return 'root.services.estatements.update.account';
    case n.server.ProductRequestType.CardsForEStatements:
      return 'root.services.estatements.update.card';
    case n.server.ProductRequestType.MortgageLoansForEstatements:
      return 'root.services.estatements.update.loan'
  }
},
t.$inject = [
  'EServicesService',
  'model',
  'type'
],
t
}(),
i,
r;
t.mainModule.controller('EStatementsController', u);
i = function (i) {
function r(t, r, u, f, e, o, s) {
  var h = i.call(this, t) || this;
  return h.windowService = t,
  h.eServicesService = r,
  h.session = u,
  h.model = f,
  h.products = e,
  h.stateService = o,
  h.regularExpressionProvider = s,
  h.showResult = !1,
  h.estatements = h.model.BankProduct.HasEStatementsActivated,
  h.email = h.session.Email,
  h.isCard = h.getModelCategoryGroupType() == n.server.CategoryGroupType.CARD,
  h.isAccount = h.getModelCategoryGroupType() == n.server.CategoryGroupType.ACCOUNT,
  h.isLoan = h.getModelCategoryGroupType() == n.server.CategoryGroupType.LOAN,
  h.isCard || h.isLoan || (h.isAccount = !0),
  h.type = h.stateService.params.type,
  h.cdiNumberIsEqual = !0,
  h
}
return __extends(r, i),
r.prototype.trimLeadingZeroes = function (t) {
  return n.utils.isUndefinedOrNull(t) || (t = t.replace(/\b0+/g, '')),
  t
},
r.prototype.doWork = function () {
  var t = this,
  i = {
    ProductCode: this.model.BankProduct.Code,
    ProductTypeID: this.model.BankProduct.TypeID,
    ProductID: this.model.BankProduct.ProductID,
    ContactType: 4,
    ContactCode: this.email,
    Medium: this.estatements ? 5 : 0,
    Type: n.utils.convertCatGroupTypeToProdtReqType(this.getModelCategoryGroupType())
  };
  return this.getModelCategoryGroupType() == n.server.CategoryGroupType.LOAN && this.model.CategoryType == 201001 && this.model.TypeID != 2002 && (i.Type = n.server.ProductRequestType.CardsForEStatements),
  this.eServicesService.setEstatements(i).then(function (n) {
    return n.ResultCode == 0 ? (t.model.BankProduct.HasEStatementsActivated = t.estatements, t.showResult = !0, t.error = '', !0)  : (t.showResult = !1, t.error = n.Error.Message, !1)
  })
},
r.prototype.getModelCategoryGroupType = function () {
  return this.model.CategoryGroupType ? this.model.CategoryGroupType : n.utils.isUndefinedOrNull(this.model.BankProduct) || n.utils.isUndefinedOrNull(this.model.BankProduct.CategoryGroup) ? null : this.model.BankProduct.CategoryGroup
},
r.prototype.canBack = function () {
  return !this.isBusy
},
r.prototype.back = function () {
  this.isAccount ? this.stateService.go('root.services.estatements.accounts-list')  : this.isCard ? this.stateService.go('root.services.estatements.cards-list')  : this.stateService.go('root.services.estatements.loans-list')
},
r.prototype.selectProduct = function (n) {
  n && this.stateService.go(n.getUpdateEstatementsState(), {
    type: this.type,
    id: n.id
  })
},
r.$inject = t.FormBaseController.$inject.concat(['EServicesService',
'session',
'model',
'products',
'$state',
'RegularExpressionService']),
r
}(t.FormBaseController);
t.mainModule.controller('EStatementsUpdateController', i);
r = function (t) {
function r(i, r, u, f, e, o, s, h) {
  var c = t.call(this, i, r, u, f, e, o, s) || this;
  return (c.windowService = i, c.eServicesService = r, c.session = u, c.model = f, c.products = e, c.stateService = o, c.regularExpressionProvider = s, c.cardAlertResponse = h, c.cardAlertResponse.Error) ? (c.error = c.cardAlertResponse.Error.Message ? c.cardAlertResponse.Error.Message : 'System Error', c.isBusy = !0, c)  : (!n.utils.isUndefinedOrNull(c.cardAlertResponse) && c.estatements ? (c.alert = c.cardAlertResponse.GetSubscriptionInfoAlerts, c.email = c.alert.EmailAddr)  : c.email = '', c)
}
return __extends(r, t),
r.$inject = i.$inject.concat(['cardAlertResponse']),
r
}(i);
t.mainModule.controller('EStatementsCardUpdateController', r)
}) (t = n.eBankingServices || (n.eBankingServices = {
}))
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}();
__assign = this && this.__assign || Object.assign || function (n) {
for (var t, r, i = 1, u = arguments.length; i < u; i++) {
t = arguments[i];
for (r in t) Object.prototype.hasOwnProperty.call(t, r) && (n[r] = t[r])
}
return n
},
function (n) {
var t;
(function (t) {
var r = function () {
function n(n, t, i, r) {
  this.$q = n;
  this.roleService = t;
  this.securityService = i;
  this.stringProvider = r;
  this.showAcquireApplicationWhen = [
    0,
    6,
    7
  ]
}
return n.prototype.stateInfo = function () {
  var n = this;
  return this.$q.all([this.securityService.getUserSessionInfo(),
  this.securityService.tokenInfo()]).then(function (t) {
    var u = t[0],
    r = t[1],
    i = null;
    return n.showAcquireApplicationWhen.indexOf(r.TokenApplicationStatus) != - 1 && u.OriginType != 2 ? i = {
      redirectState: 'root.services.otp.acquire',
      menuItems: [
        {
          name: n.roleService.IsRetail() ? n.stringProvider['menuItem.acquireOtp'] : n.stringProvider['menuItem.acquireOtp.Corp'],
          state: 'root.services.otp.acquire'
        }
      ]
    }
     : r.TokenApplicationStatus == 1 ? i = {
      redirectState: 'root.services.otp.inprocess',
      menuItems: [
      ]
    }
     : r.TokenApplicationStatus == 2 ? i = {
      redirectState: 'root.services.otp.activate',
      menuItems: [
        {
          name: n.stringProvider['menuItem.activateOtp'],
          state: 'root.services.otp.activate'
        }
      ]
    }
     : r.TokenApplicationStatus == 4 || r.TokenApplicationStatus == 5 ? i = {
      redirectState: 'root.services.otp.status',
      menuItems: [
        {
          name: n.stringProvider['menuItem.statusOtp'],
          state: 'root.services.otp.status'
        }
      ]
    }
     : u.OriginType == 2 && (i = {
      redirectState: 'root.services.otp.status',
      menuItems: [
        {
          name: n.stringProvider['menuItem.statusEmporikiOtp'],
          state: 'root.services.otp.status'
        }
      ]
    }),
    i
  }).then(function (t) {
    return t ? n.$q.when(t)  : n.$q.reject('Could not resolve appropriate otp state')
  })
},
n.prototype.redirectState = function () {
  return this.stateInfo().then(function (n) {
    return n.redirectState
  })
},
n.prototype.menuItems = function () {
  return this.stateInfo().then(function (n) {
    return n.menuItems
  })
},
n.$inject = [
  '$q',
  'RoleService',
  'SecurityService',
  'STRINGS'
],
n
}(),
u,
f,
e,
o,
s,
h,
i;
t.OtpStateResolverService = r;
n.services.service('OtpStateResolverService', r);
u = function () {
function n(n, t, i) {
  var r = this;
  this.$q = n;
  this.otpStateResolverService = t;
  this.stringProvider = i;
  this.otpStateResolverService.menuItems().then(function (n) {
    return r.menuItems = n,
    n
  }).catch (function (n) {
    return r.error = n || r.stringProvider.systemError,
    r.$q.reject(n)
  })
}
return n.$inject = [
  '$q',
  'OtpStateResolverService',
  'STRINGS'
],
n
}();
t.OtpWrapperController = u;
f = function (n) {
function t(t, i, r, u, f, e, o, s) {
  var h = n.call(this, t, i) || this;
  return h.scope = t,
  h.$injector = i,
  h.modalService = r,
  h.securityService = u,
  h.tokenInfo = f,
  h.accounts = e,
  h.session = o,
  h.stateParams = s,
  h.isBusy = !1,
  h.showResult = !1,
  h.otpDevice = '',
  h
}
return __extends(t, n),
t.prototype.print = function () {
  window.print()
},
t.$inject = [
  '$scope',
  '$injector',
  '$modal',
  'SecurityService',
  'tokenInfo',
  'accounts',
  'session',
  '$stateParams'
],
t
}(n.wizards.WizardController);
t.OtpAcquireController = f;
e = function (t) {
function i(n, i, r, u) {
  var f = t.call(this, u) || this;
  return f.model = n,
  f.SecurityService = i,
  f.modalServiceInstance = r,
  f.windowService = u,
  f
}
return __extends(i, t),
i.prototype.doWork = function () {
  var t = this,
  i = new n.profile.UpdateContactInfo;
  return i.Contacts.push(new n.profile.DeltaContact(new n.profile.Contact(4, t.model.Email, null), 1, 2)),
  t.SecurityService.updateContactInfo(i).then(function (n) {
    n.ResultCode == 0 && t.modalServiceInstance.close()
  }, function (n) {
    return n
  })
},
i.$inject = [
  'model',
  'SecurityService',
  '$modalInstance',
  '$window'
],
i
}(n.eBankingServices.FormBaseController);
t.ProfileModalController = e;
o = function () {
function n(n) {
  this.tokenInfo = n;
  this.isDevice = this.tokenInfo.AuthenticationType == 2 || this.tokenInfo.AuthenticationType == 1;
  this.isAsa = this.tokenInfo.AuthenticationType == 3;
  this.isSms = this.tokenInfo.AuthenticationType == 5
}
return n.$inject = [
  'tokenInfo'
],
n
}();
t.OtpInProcessController = o;
s = function (t) {
function i(n, i, r, u, f, e) {
  var o = t.call(this, n, i) || this;
  return o.tokenInfo = r,
  o.securityService = u,
  o.modalService = f,
  o.AppEventsService = e,
  o.isAsa = o.tokenInfo.AuthenticationType == 3,
  o.isDevice = o.tokenInfo.AuthenticationType == 2 || o.tokenInfo.AuthenticationType == 1,
  o.model = {
  },
  o
}
return __extends(i, t),
i.prototype.initialiseSteps = function () {
  var i = [
  ],
  r = 0,
  t = this;
  return i.push({
    index: r++,
    stateName: '',
    templateUrl: 'Templates/Features/Services/otp/otp-activation-step1',
    processStep: function () {
      return t.securityService.tokenActivation(t.model).then(function (i) {
        return i.ResultCode == 0 ? (t.AppEventsService.publish(n.common.services.AppEventsService.InvalidateUserSessionInfo_Event), t.AppEventsService.publish(n.common.services.AppEventsService.InvalidateTokenInfo_Event), t.response = i, !0)  : (t.error = i.Error ? i.Error.Message || 'System Error' : 'System Error', !1)
      }, function (n) {
        return t.error = n.Error ? n.Error.Message || 'System Error' : 'System Error',
        !1
      })
    },
    title: ''
  }),
  i.push({
    index: r++,
    stateName: '',
    templateUrl: 'Templates/Features/Services/otp/otp-activation-step2',
    title: ''
  }),
  i
},
i.prototype.newApplicationModal = function () {
  var n = this;
  this.modalService.open({
    controller: 'NewOTPApplicationModalInstanceCtrl as vm',
    templateUrl: 'Templates/Features/Services/otp/otp-newapp-modal'
  })
},
i.prototype.forgotCodeModal = function () {
  var n = this;
  this.modalService.open({
    size: 'sm',
    controller: 'ForgotCodeModalInstanceCtrl as vm',
    templateUrl: 'Templates/Features/Services/otp/otp-forgotCode-modal'
  })
},
i.$inject = [
  '$scope',
  '$injector',
  'tokenInfo',
  'SecurityService',
  '$modal',
  'AppEventsService'
],
i
}(n.wizards.WizardController);
t.OtpActivationController = s;
h = function (n) {
function t(t, i, r, u, f, e, o) {
  var s = n.call(this, null) || this,
  h;
  return s.modalService = t,
  s.tokenInfo = i,
  s.securityService = r,
  s.stateService = u,
  s.stringService = f,
  s.session = e,
  s.$scope = o,
  s.isDevice = s.tokenInfo.AuthenticationType == 2 || s.tokenInfo.AuthenticationType == 1,
  s.isAsa = s.tokenInfo.AuthenticationType == 3,
  s.isSms = s.tokenInfo.AuthenticationType == 5,
  s.mobile = e.CompanyUserContacts ? e.CompanyUserContacts.MobilePhone : '',
  h = s,
  s.securityService.getUserSessionInfo().then(function (n) {
    h.isEmporiki = n.OriginType == 2
  }),
  s.IsAppDisabled && (s.deactivateExpanded = !0),
  s
}
return __extends(t, n),
Object.defineProperty(t.prototype, 'NeedsSyncing', {
  get: function () {
    return !this.tokenInfo.DeviceSyncStatus
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(t.prototype, 'IsEnabled', {
  get: function () {
    return this.tokenInfo.DeviceStatus == 0
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(t.prototype, 'IsDisabled', {
  get: function () {
    return this.tokenInfo.DeviceStatus == 1
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(t.prototype, 'IsLocked', {
  get: function () {
    return this.tokenInfo.DeviceStatus == 2
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(t.prototype, 'IsNew', {
  get: function () {
    return this.tokenInfo.DeviceStatus == 3
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(t.prototype, 'IsUnknown', {
  get: function () {
    return this.tokenInfo.DeviceStatus == 4
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(t.prototype, 'IsWrongSN', {
  get: function () {
    return this.tokenInfo.DeviceStatus == 5
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(t.prototype, 'IsInactive', {
  get: function () {
    return this.tokenInfo.DeviceStatus == 6
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(t.prototype, 'IsAppPending', {
  get: function () {
    return this.tokenInfo.TokenApplicationStatus == 1
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(t.prototype, 'IsAppApproved', {
  get: function () {
    return this.tokenInfo.TokenApplicationStatus == 2
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(t.prototype, 'IsAppNotUsed', {
  get: function () {
    return this.tokenInfo.TokenApplicationStatus == 3
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(t.prototype, 'IsAppActive', {
  get: function () {
    return this.tokenInfo.TokenApplicationStatus == 4
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(t.prototype, 'IsAppDisabled', {
  get: function () {
    return this.tokenInfo.TokenApplicationStatus == 5
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(t.prototype, 'IsAppRejected', {
  get: function () {
    return this.tokenInfo.TokenApplicationStatus == 6
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(t.prototype, 'IsAppDeactivated', {
  get: function () {
    return this.tokenInfo.TokenApplicationStatus == 7
  },
  enumerable: !0,
  configurable: !0
}),
t.prototype.newApplicationModal = function () {
  var n = this;
  this.modalService.open({
    controller: 'NewOTPApplicationModalInstanceCtrl as vm',
    templateUrl: 'Templates/Features/Services/otp/otp-newapp-modal',
    size: 'lg'
  })
},
t.$inject = [
  '$modal',
  'tokenInfo',
  'SecurityService',
  '$state',
  'STRINGS',
  'session',
  '$scope'
],
t
}(t.FormBaseController);
t.OtpStatusController = h;
i = function (t) {
function i(i, r, u, f, e, o, s, h, c, l, a) {
  var v = t.call(this, i, r) || this;
  return v.tokenInfo = u,
  v.securityService = f,
  v.stateParams = e,
  v.session = o,
  v.AppEventsService = s,
  v.modalService = h,
  v.otpHandler = c,
  v.roleService = l,
  v.menuItemsService = a,
  v.isBusy = !1,
  v.customError = null,
  v.currentIsAsa = v.tokenInfo.AuthenticationType == 3,
  v.currentIsDevice = v.tokenInfo.AuthenticationType == 2 || v.tokenInfo.AuthenticationType == 1,
  v.currentIsSms = v.tokenInfo.AuthenticationType == 5,
  v.model = {
  },
  v.to = v.stateParams.to,
  v.oldSN = v.tokenInfo.TokenSN,
  v.changeMedium = v.currentIsAsa && (v.to == 'device' || v.to == 'sms') || v.currentIsDevice && (v.to == 'asa' || v.to == 'sms') || v.currentIsSms && (v.to == 'asa' || v.to == 'device'),
  v.registeredMobile = !n.utils.isUndefinedOrNullorWhiteSpace(v.session.MobilePhone),
  v.otpHandler.enquire().catch (function (t) {
    return v.showNoCardsWarning || (v.Model.HasErrors = !0, v.Model.ErrorMessage = n.utils.getErrorMsg(t)),
    v.qService.reject(t)
  }),
  i.$on('$destroy', function () {
    v.keepOtpHandlerAlive && v.otpHandler.unregister()
  }),
  v
}
return __extends(i, t),
Object.defineProperty(i.prototype, 'otpKey', {
  get: function () {
    return this.otpHandler.caller
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(i.prototype, 'keepOtpHandlerAlive', {
  get: function () {
    return !0
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(i.prototype, 'showNoCardsWarning', {
  get: function () {
    return this.otpHandler.showNoCardsWarning
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(i.prototype, 'isOtpEnabled', {
  get: function () {
    return this.otpHandler && this.otpHandler.isEnabled
  },
  enumerable: !0,
  configurable: !0
}),
i.prototype.initialiseSteps = function () {
  var t = this,
  i = [
  ],
  r = 0;
  return i.push({
    index: r++,
    processStep: [
      function () {
        return t.otpHandler.result().then(function () {
          return t.otpHandler.appendExtraInfoToPayload(t.model, 'OldOTP')
        }).then(function () {
          return t.roleService.isDemo() ? t.qService.when({
            ResultCode: 0
          })  : t.securityService.tokenReplace(t.model)
        }).then(function (i) {
          if (i.ResultCode !== 0) return t.qService.reject(i.Error);
          t.response = i;
          t.AppEventsService.publish(n.common.services.AppEventsService.InvalidateUserSessionInfo_Event);
          t.AppEventsService.publish(n.common.services.AppEventsService.InvalidateTokenInfo_Event);
          t.menuItemsService.DisablePermissionItems('ViewOTP');
          var r = t.modalService.open({
            controller: 'ReplacedOtpModalInstanceCtrl as vm',
            templateUrl: 'Templates/Features/Services/otp/otp-replaced-modal',
            size: 'lg',
            backdrop: 'static',
            resolve: {
              changeMedium: function () {
                return t.changeMedium
              },
              currentIsAsa: function () {
                return t.currentIsAsa
              },
              to: function () {
                return t.to
              },
              currentIsDevice: function () {
                return t.currentIsDevice
              },
              currentIsSms: function () {
                return t.currentIsSms
              },
              oldSN: function () {
                return t.oldSN
              },
              model: function () {
                return t.model
              },
              session: function () {
                return t.session
              }
            }
          });
          return r.result
        }).catch (function (i) {
          return t.customError = n.utils.getErrorMsg(i),
          t.qService.reject(__assign({
          }, i, {
            customErrorHandling: !0
          }))
        })
      }
    ],
    templateUrl: 'Templates/Features/Services/otp/otp-replace-step1',
    title: '',
    stateName: ''
  }),
  i
},
i.prototype.gotoPreviousStep = function () {
  this.customError = null;
  t.prototype.gotoPreviousStep.call(this)
},
i.$inject = [
  '$scope',
  '$injector',
  'tokenInfo',
  'SecurityService',
  '$stateParams',
  'session',
  'AppEventsService',
  '$modal',
  'otpHandler',
  'RoleService',
  'MenuItemsService'
],
i
}(n.wizards.WizardController);
t.OtpReplaceController = i;
t.mainModule.controller('OtpReplaceController', i)
}) (t = n.eBankingServices || (n.eBankingServices = {
}))
}(alpha || (alpha = {
})),
function (n) {
var t;
(function (t) {
'use strict';
var i = function () {
function n(n, t, i, r, u) {
  this.cards = n;
  this.QueriesService = t;
  this.$q = i;
  this.otpHandler = r;
  this.session = u;
  this.HasErrors = !1;
  this.Step1 = 'Templates/Features/Services/secureWeb/secure-web-step1';
  this.Step2 = 'Templates/Features/Services/secureWeb/secure-web-step2';
  this.IsBusy = !1;
  this.showValidationErrors = !1;
  this.isAlphaPhone = !1;
  this.isAlphaPhone = this.session.UserInfo.Role == 10;
  this.StepTemplate = this.Step1
}
return Object.defineProperty(n.prototype, 'hasAnyCards', {
  get: function () {
    return this.cards.length > 0
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(n.prototype, 'otpKey', {
  get: function () {
    return this.otpHandler.caller
  },
  enumerable: !0,
  configurable: !0
}),
n.prototype.canSubmit = function () {
  return !this.IsBusy && !this.form.$pristine && !this.isAlphaPhone
},
n.prototype.nextStep = function () {
  var n = this,
  t;
  this.showValidationErrors = !0;
  this.form && this.form.$valid && (this.IsBusy = !0, t = {
    ProductCode: this.selectedCard.Code,
    ProductTypeId: this.selectedCard.TypeID,
    ProductID: this.selectedCard.BankProduct.ProductID
  }, this.otpHandler.result().then(function () {
    return n.otpHandler.appendExtraInfoToPayload(t)
  }).then(function () {
    return n.QueriesService.verifiedByVisa(t)
  }).then(function (t) {
    if (t.ResultCode == 0) n.VerificationNumber = t.VerificationNumber,
    n.StepTemplate = n.Step2;
     else return n.$q.reject(t)
  }).catch (function (t) {
    n.HasErrors = !0;
    n.ErrorMessage = t.Error.Message
  }).finally (function () {
    n.IsBusy = !1
  }))
},
n.$inject = [
  'cards',
  'QueriesService',
  '$q',
  'otpHandler',
  'session'
],
n
}();
t.SecureWebController = i;
n.eBankingServices.mainModule.controller('SecureWebController', i)
}) (t = n.eBankingServices || (n.eBankingServices = {
}))
}(alpha || (alpha = {
})),
function (n) {
var t;
(function (t) {
'use strict';
t.mainModule.config(['$stateProvider',
'$urlRouterProvider',
function (t) {
t.state('root.services.estatements.update', {
  abstract: !0,
  url: '/update/{type}/{id}',
  template: '<div data-ui-view=""></div>',
  resolve: {
    model: [
      '$stateParams',
      'ProfileProductsService',
      'session',
      '$q',
      'CachingService',
      function (t, i, r, u, f) {
        var e,
        o,
        s;
        return t.type == n.server.ProductRequestType.AccountsForEstatements ? (o = f.getCachedProductWithBase64Id(t.id, n.server.CategoryGroupType.ACCOUNT), s = new n.model.AccountProduct(o), u.when(s))  : (t.type == n.server.ProductRequestType.CardsForEStatements ? e = i.getCard(t.id)  : t.type == n.server.ProductRequestType.MortgageLoansForEstatements && (e = i.getLoan(t.id)), e ? e.then(function (n) {
          return n && n.BankProduct ? u.when(n)  : u.reject('ProductNotFound')
        })  : u.reject('ProductNotFound'))
      }
    ],
    products: [
      '$stateParams',
      'ProfileProductsService',
      function (t, i) {
        return t.type == n.server.ProductRequestType.AccountsForEstatements ? [
        ] : t.type == n.server.ProductRequestType.CardsForEStatements ? i.getCardsByRequestType(n.server.ProductRequestType.CardsForEStatements)  : t.type == n.server.ProductRequestType.MortgageLoansForEstatements ? i.getLoansByRequestType(n.server.ProductRequestType.MortgageLoansForEstatements)  : void 0
      }
    ]
  }
}).state('root.services.p2pactive', {
  url: '/p2p',
  templateUrl: 'Templates/Features/Services/p2p/p2p-wrapper',
  controller: 'P2PController as vm',
  resolve: {
    debitProducts: [
      'ProfileProductsService',
      function (t) {
        return t.getAccountsByRequestType(n.server.ProductRequestType.DebitAccounts)
      }
    ],
    creditProducts: [
      'ProfileProductsService',
      function (t) {
        return t.getAccountsByRequestType(n.server.ProductRequestType.CreditAccounts)
      }
    ],
    P2PSettings: [
      'QueriesService',
      function (n) {
        return n.getP2PSettings({
        })
      }
    ],
    otpHandler: [
      'OtpHandlerService',
      function (n) {
        return n.retrieveHandler(22, {
          uiContext: {
            isNewScreen: !0
          }
        })
      }
    ]
  }
}).state('root.services.p2pactive.edit', {
  url: '/edit',
  templateUrl: 'Templates/Features/Services/p2p/edit',
  controller: 'P2PController as vm'
}).state('root.services.p2pactive.disable', {
  url: '/disable',
  templateUrl: 'Templates/Features/Services/p2p/disable',
  controller: 'P2PDisableController as vm'
}).state('root.services.p2pactivecorp.enable', {
  url: '/enable',
  templateUrl: 'Templates/Features/Services/p2pcorp/enable',
  controller: 'P2PEnableControllerCorp as vm',
  resolve: {
    P2PSettings: [
      'QueriesService',
      function (n) {
        return n.getP2PSettings({
        })
      }
    ],
    creditProducts: [
      'ProfileProductsService',
      function (t) {
        return t.getAccountsByRequestType(n.server.ProductRequestType.CreditAccounts)
      }
    ],
    otpHandler: [
      'OtpHandlerService',
      function (n) {
        return n.retrieveHandler(37, {
          uiContext: {
            isNewScreen: !0
          }
        })
      }
    ]
  }
}).state('root.services.p2pactivecorp', {
  url: '/p2pcorp',
  templateUrl: 'Templates/Features/Services/p2pcorp/p2p-wrapper',
  controller: 'P2PControllerCorp as vm',
  resolve: {
    P2PSettings: [
      'QueriesService',
      function (n) {
        return n.getP2PSettings({
        })
      }
    ],
    creditProducts: [
      'ProfileProductsService',
      'P2PSettings',
      function (n, t) {
        return n.getAccountsByIDs([t.CreditProductID])
      }
    ],
    otpHandler: [
      'OtpHandlerService',
      function (n) {
        return n.retrieveHandler(22, {
          uiContext: {
            isNewScreen: !0
          }
        })
      }
    ]
  }
}).state('root.services.p2pactivecorp.edit', {
  url: '/edit',
  templateUrl: 'Templates/Features/Services/p2pcorp/edit',
  controller: 'P2PControllerCorp as vm',
  resolve: {
    otpHandler: [
      'OtpHandlerService',
      function (n) {
        return n.activatedHandler(22, {
          uiContext: {
            isNewScreen: !0
          }
        })
      }
    ]
  }
}).state('root.services.p2pactivecorp.disable', {
  url: '/disable',
  templateUrl: 'Templates/Features/Services/p2pcorp/disable',
  controller: 'P2PDisableControllerCorp as vm'
}).state('root.services.otp.acquire', {
  controller: 'OtpAcquireController as vm',
  templateUrl: 'Templates/Features/Services/otp/otp-acquire-wrapper',
  url: '/acquire/{rejectExisting}/{lostDevice}',
  resolve: {
    tokenInfo: [
      'SecurityService',
      function (n) {
        return n.tokenInfo()
      }
    ],
    accounts: [
      'ProfileProductsService',
      function (t) {
        return t.getAccounts().then(function (t) {
          return t ? t.filter(function (t) {
            return t.BankProduct.RequestTypes.indexOf(n.server.ProductRequestType.AccountsForTokenCharges) != - 1
          })  : [
          ]
        })
      }
    ],
    session: [
      'SecurityService',
      function (n) {
        return n.getUserSessionInfo()
      }
    ]
  }
})
}
])
}) (t = n.eBankingServices || (n.eBankingServices = {
}))
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(),
function (n) {
var t;
(function (t) {
var s = function (n) {
function t(t, i, r) {
  return n.call(this, t, i, r) || this
}
return __extends(t, n),
t.$inject = [
  '$q',
  'OtpStateResolverService',
  'STRINGS'
],
t
}(t.OtpWrapperController),
i,
r,
u,
f,
e,
o;
t.mainModule.controller('OtpWrapperController', s);
i = function (t) {
function i(i, r, u, f, e, o, s, h) {
  var c = t.call(this, i, r, u, f, e, o, s, h) || this;
  return c.modalService = u,
  c.securityService = f,
  c.tokenInfo = e,
  c.accounts = o,
  c.session = s,
  c.stateParams = h,
  c.registeredMobile = !n.utils.isUndefinedOrNullorWhiteSpace(c.session.MobilePhone),
  c.model = {
  },
  c.model.ContactInfo = {
    Telephone1Morning: s.MobilePhone,
    Telephone2Morning: s.Telephone,
    Telephone1Evening: s.PrimaryTelephone
  },
  c.stateParams.rejectExisting && (c.model.DisableFirst = c.stateParams.rejectExisting.toLowerCase() === 'true'),
  c.stateParams.lostDevice && (c.lostOrDestroyed = c.stateParams.lostDevice.toLowerCase() === 'true'),
  c.model.DisableFirst && (c.currentIsAsa = c.tokenInfo.AuthenticationType == 3, c.currentIsSms = c.tokenInfo.AuthenticationType == 5),
  c.otpDevice = 'asa',
  c
}
return __extends(i, t),
i.prototype.initialiseSteps = function () {
  var t = this,
  i = [
  ],
  r = 0;
  return i.push({
    index: r++,
    processStep: [
      function () {
        return n.utils.isUndefinedOrNull(t.selectedAccount) || (t.model.ProductCode = t.selectedAccount.Code, t.model.ProductTypeID = t.selectedAccount.TypeID),
        !0
      }
    ],
    templateUrl: 'Templates/Features/Services/otp/otp-acquire-step1',
    title: '',
    stateName: ''
  }),
  i.push({
    index: r++,
    processStep: [
      function () {
        var i = t.qService.defer();
        return t.otpDevice == 'sms' && (t.model.CredentialID = null, t.model.AcquireSMSOTP = {
          MobilePhoneUsage: 0
        }),
        t.securityService.tokenAcquire(t.model).then(function (r) {
          r.ResultCode == 0 ? (t.AppEventsService.publish(n.common.services.AppEventsService.InvalidateUserSessionInfo_Event), t.AppEventsService.publish(n.common.services.AppEventsService.InvalidateTokenInfo_Event), t.response = r, i.resolve(r), t.documentData = t.model, t.documentData.DocumentRequestType = 14, t.documentData.IsAsa = t.otpDevice == 'asa')  : i.reject(r.Error.Message)
        }),
        i.promise
      }
    ],
    templateUrl: 'Templates/Features/Services/otp/otp-acquire-step2',
    title: '',
    stateName: ''
  }),
  i.push({
    index: r++,
    templateUrl: 'Templates/Features/Services/otp/otp-acquire-step3',
    title: '',
    stateName: ''
  }),
  i
},
i.prototype.sendCode = function () {
  var n = this,
  t;
  this.session.PrimaryEmail || this.session.Email ? this.securityService.sendTokenActivationCode().then(function (t) {
    n.emailSent = t.ResultCode == 0
  })  : (t = this.modalService.open({
    controller: 'ProfileModalController as vm',
    templateUrl: 'Templates/Features/Services/otp/save-email-modal',
    size: 'lg',
    resolve: {
      model: function () {
        return n.session
      }
    }
  }), t.result.then(function () {
    n.securityService.sendTokenActivationCode().then(function (t) {
      n.emailSent = t.ResultCode == 0
    })
  }))
},
i.prototype.requiredTel = function () {
  return n.utils.isUndefinedOrNullorWhiteSpace(this.model.ContactInfo.Telephone2Morning) && n.utils.isUndefinedOrNullorWhiteSpace(this.model.ContactInfo.Telephone1Evening) && n.utils.isUndefinedOrNullorWhiteSpace(this.model.ContactInfo.Telephone2Evening)
},
i.$inject = [
  '$scope',
  '$injector',
  '$modal',
  'SecurityService',
  'tokenInfo',
  'accounts',
  'session',
  '$stateParams'
],
i
}(t.OtpAcquireController);
t.mainModule.controller('OtpAcquireController', i);
r = function (n) {
function t(t, i, r, u) {
  var f = n.call(this, t, i, r, u) || this;
  return f.model = t,
  f.SecurityService = i,
  f.modalServiceInstance = r,
  f.windowService = u,
  f
}
return __extends(t, n),
t.$inject = [
  'model',
  'SecurityService',
  '$modalInstance',
  '$window'
],
t
}(t.ProfileModalController);
n.profile.mainModule.controller('ProfileModalController', r);
u = function (n) {
function t(t) {
  var i = n.call(this, t) || this;
  return i.tokenInfo = t,
  i.isDevice = !0,
  i
}
return __extends(t, n),
t.$inject = [
  'tokenInfo'
],
t
}(t.OtpInProcessController);
t.mainModule.controller('OtpInProcessController', u);
f = function (n) {
function t(t, i, r, u, f, e) {
  var o = n.call(this, t, i, r, u, f, e) || this;
  return u.getUserSessionInfo().then(function (n) {
    o.TokenRequiredBeforeActivation = n.UserInfo.CompanyInfo.TokenRequiredBeforeActivation
  }),
  o
}
return __extends(t, n),
t.$inject = [
  '$scope',
  '$injector',
  'tokenInfo',
  'SecurityService',
  '$modal',
  'AppEventsService'
],
t
}(t.OtpActivationController);
t.mainModule.controller('OtpActivationController', f);
e = function (t) {
function i(i, r, u, f, e, o, s, h) {
  var c = t.call(this, i, r, u, f, e, o, h) || this;
  return s.SetControllerData(c.$scope, n.server.Controllers.OtpStatusControllerCorporate, 'DeviceSerialNumber', c.tokenInfo.TokenSN),
  c
}
return __extends(i, t),
i.prototype.doWork = function () {
  var t = this;
  return this.securityService.tokenSync(this.firstOtp, this.secondOtp, this.tokenInfo.TokenSN).then(function (i) {
    return i.ResultCode == 0 ? (t.tokenInfo.DeviceSyncStatus = !1, t.modalService.open({
      templateUrl: 'Templates/Features/Services/otp/otp-status-sync-success',
      modalClass: 'custom',
      size: 'lg',
      backdrop: 'static',
      controller: 'SyncModalController as vm'
    }), t.stateService.go('root.services.otp.status', {
    }, {
      reload: !0
    }))  : t.syncResult = n.utils.isUndefinedOrNull(i.Error) ? t.stringService.synchronizationFailed : i.Error.Message,
    !0
  })
},
i.$inject = [
  '$modal',
  'tokenInfo',
  'SecurityService',
  '$state',
  'STRINGS',
  'session',
  'SharedDataService',
  '$scope',
  'RoleService'
],
i
}(t.OtpStatusController);
t.mainModule.controller('OtpStatusController', e);
o = function (t) {
function i(i, r) {
  var u = t.call(this, i) || this;
  return u.modalInstance = i,
  u.deviceSerialNumber = r.GetControllerData(n.server.Controllers.OtpStatusControllerCorporate, 'DeviceSerialNumber'),
  u
}
return __extends(i, t),
i.$inject = [
  '$modalInstance',
  'SharedDataService'
],
i
}(n.BaseModalController);
t.mainModule.controller('SyncModalController', o)
}) (t = n.eBankingServices || (n.eBankingServices = {
}))
}(alpha || (alpha = {
}));
P2PControllerCorp = function () {
function n(n, t, i, r, u, f, e, o) {
var s = this;
this.windowService = n;
this.stateService = t;
this.stringsService = i;
this.creditProducts = r;
this.P2PSettings = u;
this.QueriesService = f;
this.modal = e;
this.otpHandler = o;
this.showValidationErrors = !1;
this.openFailureModal = function (n) {
s.modal.open({
  template: '<div class="alert status status-error alert-dismissible lean-bottom" role="alert"><h2 class="error text-center" ><span class="status_indicator"></span><span class="title">' + s.stringsService['expiration.prompt.header'] + '</span> </h2> <div class="status-body text-center" ><p>' + n.Message + '</p><div class="text-center padbottom10" ><a class="btn return red" data-ng-click="vm.closeModal()" >' + s.stringsService.backLabel + '</a></div></div></div>',
  modalClass: 'custom',
  size: 'lg',
  backdrop: 'static',
  controller: 'BaseModalController as vm'
})
};
this.P2PSettings.MaxDailyReceivedAmount ? this.P2PSettings.MaxDailyReceivedAmount : this.P2PSettings.MaxDailyReceivedAmount = 1000;
u.IsActive ? (this.stateService.go('root.services.p2pactivecorp.edit'), this.menuItems = [
{
  name: this.stringsService['root.services.p2pactivecorp.edit'],
  state: 'root.services.p2pactivecorp.edit'
},
{
  name: this.stringsService['root.services.p2pactivecorp.disable'],
  state: 'root.services.p2pactivecorp.disable'
}
])  : this.stateService.go('root.services.p2pactivecorp.enable');
this.P2PSettings.P2PDiasInfo.Status != 3 && (this.creditProduct = this.creditProducts[0], this.precreditProduct = this.creditProduct);
alpha.utils.isUndefinedOrNullorWhiteSpace(this.P2PSettings.Phone) || this.P2PSettings.Phone.length >= 10 && (this.P2PSettings.Phone = this.P2PSettings.Phone.substr(this.P2PSettings.Phone.length - 10, 10));
this.maxlimit = this.P2PSettings.MaxDailyReceivedAmount;
this.DiasStatus = this.P2PSettings.P2PDiasInfo.Status
}
return Object.defineProperty(n.prototype, 'otpCallerType', {
get: function () {
return this.otpHandler.caller
},
enumerable: !0,
configurable: !0
}),
n.prototype.forceValidation = function () {
var n = this;
n.form && alpha.utils.forceValidation(n.form)
},
n.prototype.removeDifCurrencyError = function () {
this.creditProduct.CurrencyEnum !== alpha.server.Currency.EUR ? this.form.credAcc2.$setValidity('difcurrency', !1)  : this.form.credAcc2.$setValidity('difcurrency', !0)
},
n.prototype.submit = function () {
var n = this,
t;
if (this.forceValidation(), this.form.$invalid) this.showValidationErrors = !0;
 else return this.showValidationErrors = !1,
t = this.creditProduct != null ? {
DebitProductID: 0,
CreditProductID: this.creditProduct.BankProduct.ProductID,
MaxDailyReceivedAmount: this.P2PSettings.MaxDailyReceivedAmount,
MaxDailyTransactions: this.P2PSettings.MaxDailyTransactions,
MaxDailySendAmount: 0.01,
MaxTransactionAmount: 0.01,
AFM: this.P2PSettings.AFM,
FacebookUID: this.P2PSettings.FacebookUser != null ? this.P2PSettings.FacebookUser.Id : '0'
}
 : {
DebitProductID: 0,
CreditProductID: 0,
MaxDailyReceivedAmount: this.P2PSettings.MaxDailyReceivedAmount,
MaxDailyTransactions: this.P2PSettings.MaxDailyTransactions,
MaxDailySendAmount: 0.01,
MaxTransactionAmount: 0.01,
AFM: this.P2PSettings.AFM,
FacebookUID: this.P2PSettings.FacebookUser != null ? this.P2PSettings.FacebookUser.Id : '0'
},
this.creditProduct != null && (t.CreditProductID = this.creditProduct.BankProduct.ProductID),
this.otpHandler.reset({
payload: t
}).result().then(function () {
return n.otpHandler.appendExtraInfoToPayload(t, 'OTP')
}).then(function () {
return n.QueriesService.updateP2P(t)
}).then(function (t) {
return t.ResultCode == 0 ? (n.DiasStatus == 3 && n.creditProduct == null ? n.modal.open({
  templateUrl: 'Templates/Features/Services/p2pcorp/success-modal-edit',
  modalClass: 'custom',
  size: 'lg',
  backdrop: 'static',
  controller: 'BaseModalController as vm'
})  : n.DiasStatus == 3 && n.creditProduct != null && n.precreditProduct == null ? n.modal.open({
  templateUrl: 'Templates/Features/Services/p2pcorp/success-modal-edit-dias-change',
  modalClass: 'custom',
  size: 'lg',
  backdrop: 'static',
  controller: 'BaseModalController as vm'
})  : n.modal.open({
  templateUrl: 'Templates/Features/Services/p2pcorp/success-modal-edit',
  modalClass: 'custom',
  size: 'lg',
  backdrop: 'static',
  controller: 'BaseModalController as vm'
}), n.error = '', n.maxlimit = n.P2PSettings.MaxDailyReceivedAmount, n.DiasStatus = n.P2PSettings.P2PDiasInfo.Status, n.precreditProduct = n.creditProduct, !0)  : (n.openFailureModal(t.Error), n.error = t.Error.Message, !1)
}, function (t) {
return t.userCancel || n.openFailureModal(t),
n.error = t,
!1
})
},
n.$inject = [
'$window',
'$state',
'STRINGS',
'creditProducts',
'P2PSettings',
'QueriesService',
'$modal',
'otpHandler'
],
n
}();
alpha.profile.mainModule.controller('P2PControllerCorp', P2PControllerCorp);
P2PEnableControllerCorp = function () {
function n(n, t, i, r, u, f, e, o, s) {
var h = this;
this.windowService = n;
this.stateService = t;
this.stringsService = i;
this.creditProducts = r;
this.P2PSettings = u;
this.SecurityService = f;
this.QueriesService = e;
this.modal = o;
this.otpHandler = s;
this.showValidationErrors = !1;
this.openFailureModal = function (n) {
h.modal.open({
  template: '<div class="alert status status-error alert-dismissible lean-bottom" role="alert"><h2 class="error text-center" ><span class="status_indicator"></span><span class="title">' + h.stringsService['expiration.prompt.header'] + '</span> </h2> <div class="status-body text-center" ><p>' + n.Message + '</p><div class="text-center padbottom10" ><a class="btn return red" data-ng-click="vm.closeModal()" >' + h.stringsService.backLabel + '</a></div></div></div>',
  modalClass: 'custom',
  size: 'lg',
  backdrop: 'static',
  controller: 'BaseModalController as vm'
})
};
this.stateService.go('root.services.p2pactivecorp.enable');
this.P2PSettings.MaxDailyReceivedAmount = 1000;
this.P2PSettings.MaxDailyTransactions = 50;
this.maxlimit = this.P2PSettings.MaxDailyReceivedAmount;
f.getUserSessionInfo().then(function (n) {
h.P2PSettings.AFM = n.VAT;
alpha.utils.isUndefinedOrNullorWhiteSpace(n.MobilePhone) || n.MobilePhone.length >= 10 && (h.P2PSettings.Phone = n.MobilePhone.substr(n.MobilePhone.length - 10, 10))
})
}
return Object.defineProperty(n.prototype, 'otpCallerType', {
get: function () {
return this.otpHandler.caller
},
enumerable: !0,
configurable: !0
}),
n.prototype.forceValidation = function () {
var n = this;
n.form && alpha.utils.forceValidation(n.form)
},
n.prototype.removeDifCurrencyError = function () {
this.creditProduct.CurrencyEnum !== alpha.server.Currency.EUR ? this.form.credAcc2.$setValidity('difcurrency', !1)  : this.form.credAcc2.$setValidity('difcurrency', !0)
},
n.prototype.submit = function () {
var n = this,
t;
if (this.forceValidation(), this.form.$invalid) this.showValidationErrors = !0;
 else return this.showValidationErrors = !1,
t = this.creditProduct != null ? {
DebitProductID: 0,
CreditProductID: this.creditProduct.BankProduct.ProductID,
MaxDailyReceivedAmount: this.P2PSettings.MaxDailyReceivedAmount,
MaxDailyTransactions: this.P2PSettings.MaxDailyTransactions,
MaxDailySendAmount: 0.01,
MaxTransactionAmount: 0.01,
AFM: this.P2PSettings.AFM,
IsDiasRegistration: !0,
FacebookUID: this.P2PSettings.FacebookUser != null ? this.P2PSettings.FacebookUser.Id : '0'
}
 : {
DebitProductID: 0,
CreditProductID: 0,
MaxDailyReceivedAmount: this.P2PSettings.MaxDailyReceivedAmount,
MaxDailyTransactions: this.P2PSettings.MaxDailyTransactions,
MaxDailySendAmount: 0.01,
MaxTransactionAmount: 0.01,
IsDiasRegistration: !0,
AFM: this.P2PSettings.AFM,
FacebookUID: this.P2PSettings.FacebookUser != null ? this.P2PSettings.FacebookUser.Id : '0'
},
this.otpHandler.reset({
payload: t
}).result().then(function () {
return n.otpHandler.appendExtraInfoToPayload(t, 'OTP')
}).then(function () {
return n.QueriesService.registerP2P(t)
}).then(function (t) {
return t.ResultCode == 0 ? (n.modal.open({
  templateUrl: 'Templates/Features/Services/p2pcorp/enable-modal',
  modalClass: 'custom',
  size: 'lg',
  backdrop: 'static',
  controller: 'EnablePayNowModalController as vm'
}), n.error = '', !0)  : (n.openFailureModal(t.Error), n.error = t.Error.Message, !1)
}, function (t) {
return t.userCancel || n.openFailureModal(t),
n.error = t,
!1
})
},
n.$inject = [
'$window',
'$state',
'STRINGS',
'creditProducts',
'P2PSettings',
'SecurityService',
'QueriesService',
'$modal',
'otpHandler'
],
n
}();
alpha.profile.mainModule.controller('P2PEnableControllerCorp', P2PEnableControllerCorp);
P2PDisableControllerCorp = function () {
function n(n, t, i, r, u) {
var f = this;
this.windowService = n;
this.stateService = t;
this.stringsService = i;
this.QueriesService = r;
this.modal = u;
this.openFailureModal = function (n) {
f.modal.open({
  template: '<div class="alert status status-error alert-dismissible lean-bottom" role="alert"><h2 class="error text-center" ><span class="status_indicator"></span><span class="title">' + f.stringsService['expiration.prompt.header'] + '</span> </h2> <div class="status-body text-center" ><p>' + n.Message + '</p><div class="text-center padbottom10" ><a class="btn return red" data-ng-click="vm.closeModal()" >' + f.stringsService.backLabel + '</a></div></div></div>',
  modalClass: 'custom',
  size: 'lg',
  backdrop: 'static',
  controller: 'BaseModalController as vm'
})
};
this.stateService.go('root.services.p2pactivecorp.disable');
this.menuItems = [
{
  name: this.stringsService['root.services.p2pactivecorp.edit'],
  state: 'root.services.p2pactivecorp.edit'
},
{
  name: this.stringsService['root.services.p2pactivecorp.disable'],
  state: 'root.services.p2pactivecorp.disable'
}
]
}
return n.prototype.submit = function () {
var n = this,
t = this;
return this.QueriesService.unregisterP2P({
}).then(function (n) {
return n.ResultCode == 0 ? (t.modal.open({
  templateUrl: 'Templates/Features/Services/p2pcorp/success-modal',
  modalClass: 'custom',
  size: 'lg',
  backdrop: 'static',
  controller: 'DisablePayNowModalController as vm'
}), this.error = '', !0)  : (this.openFailureModal(n.Error), this.error = n.Error.Message, !1)
}, function (t) {
return t.userCancel || n.openFailureModal(t),
n.error = t,
!1
})
},
n.prototype.canSubmit = function () {
return !0
},
n.prototype.closeModal = function () {
self.close()
},
n.$inject = [
'$window',
'$state',
'STRINGS',
'QueriesService',
'$modal'
],
n
}();
alpha.profile.mainModule.controller('P2PDisableControllerCorp', P2PDisableControllerCorp),
function (n) {
var t;
(function (n) {
var t = function () {
function n() {
}
return n.$inject = [
  '$scope'
],
n
}();
n.ApprovalsController = t
}) (t = n.transactions || (n.transactions = {
}))
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(),
function (n) {
var t;
(function (t) {
var i = function () {
function i(i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k) {
  var d,
  tt,
  it,
  nt,
  g,
  rt,
  ut;
  this.$state = i;
  this.$stateParams = r;
  this.$modalInstance = f;
  this.transfersService = e;
  this.profileProductsService = h;
  this.STRINGS = c;
  this.QueriesService = l;
  this.filterService = a;
  this.AppEventsService = v;
  this.languageService = y;
  this.sharedDataService = p;
  this.$q = w;
  this.menuItemsService = b;
  this.productsService = k;
  this.hasError = !1;
  this.errorMessage = '';
  this.isBusy = !1;
  this.isCompleted = !1;
  this.title = this.STRINGS['transaction.cancel.title'];
  this.headerClass = 'regular-notice';
  this.channel = 'Alpha Web Banking';
  this.creditProductCodeLabel = '';
  this.creditProductCode = '';
  this.displayCreditProductCode = !0;
  this.resolvedType = !1;
  this.HasVisibleDetails = !1;
  this.DetailValues = {
  };
  this.transferCategories = [
  ];
  this.paymentType = null;
  this.hasCreditReason = !1;
  this.creditReason = null;
  this.orderNumber = null;
  this.m_CurrencyTransferInfo = null;
  d = this;
  d.countries = p.GetControllerData(n.server.Controllers.TransactionsHistoryController, 'countries');
  this.languages = [
    {
      lang: this.STRINGS['Languages.English'],
      val: 'EN'
    },
    {
      lang: this.STRINGS['Languages.Greek'],
      val: 'EL'
    }
  ];
  d.creditProductCodeLabel = d.STRINGS['transaction.details.ToAccount'];
  this.roleService = o;
  tt = this.languageService.getLanguage().toUpperCase();
  this.$stateParams.language == 'NA' ? this.selectedLang = this.languages.filter(function (n) {
    return n.val == tt
  }) [0] : (it = this.$stateParams.language == 'EL' ? 'el-GR' : 'en-US', this.selectedLang = this.languages.filter(function (n) {
    return n.val == d.$stateParams.language
  }) [0]);
  nt = null;
  this.$stateParams.hasOwnProperty('language') && this.$stateParams.language != 'NA' ? (rt = new n.common.services.TransferTransactionActionsService(h, c, s, b), nt = this.QueriesService.getTransactions(this.QueriesService.getTransactionsRequest(1, null, null, null, null, null, null, null, null, this.$stateParams.id, it)).then(function (t) {
    var i = t.Transactions,
    r = i.map(function (t) {
      var i = new n.model.TransactionViewModel(t),
      r;
      return d.roleService.getRole() == 10 && t.Status == n.server.TransactionStatus.Succeded && t.Type == 1 && (i.CanCancel = !0),
      r = d.$state.current.name.indexOf('root.transfers.history') != - 1 ? 'root.transfers.history' : 'root.payments.history',
      rt.decorateTransactionViewModel(i, t, r),
      i
    });
    return d.Transaction = r[0],
    !0
  }))  : (g = p.GetControllerModel(n.server.Controllers.TransactionsHistoryController), g = g ? g : [
  ], g && (d.Transaction = g.filter(function (n) {
    return n.Item.TransactionUN == d.$stateParams.id
  }) [0]));
  ut = nt != null ? nt : d.$q.when(!0);
  ut.then(function () {
    var i,
    r,
    u,
    e,
    f;
    d.Transaction && d.Transaction.Item && (d.$stateParams.id = d.Transaction.Item.TransactionAUN, d.creditProductCode = d.Transaction.Item.CreditProduct, s.getChannels().then(function (n) {
      d.channel = n[d.Transaction.Channel]
    }), n.utils.isUndefinedOrNull(d.Transaction.Item.CreditProduct) ? d.displayCreditProductCode = !1 : (h.getCardByCode(d.Transaction.Item.CreditProduct).then(function (t) {
      var i,
      r;
      !d.resolvedType && t && (d.resolvedType = !0, d.creditProductCodeLabel = d.STRINGS['transaction.details.ToCard'], i = d.documentData.KeyValueDictionary.filter(function (n) {
        return n.Key == 'creditProductCodeLabel'
      }), !n.utils.isUndefinedOrNull(i) && i.length > 0 ? i[0].Value = d.creditProductCodeLabel : (r = new n.model.KeyValue, r.Key = 'creditProductCodeLabel', r.Value = d.creditProductCodeLabel, d.documentData.KeyValueDictionary.push(r)))
    }), h.getLoanByCode(d.Transaction.Item.CreditProduct).then(function (t) {
      var i,
      r;
      !d.resolvedType && t && (d.resolvedType = !0, d.creditProductCodeLabel = d.STRINGS['transaction.details.ToLoan'], i = d.documentData.KeyValueDictionary.filter(function (n) {
        return n.Key == 'creditProductCodeLabel'
      }), !n.utils.isUndefinedOrNull(i) && i.length > 0 ? i[0].Value = d.creditProductCodeLabel : (r = new n.model.KeyValue, r.Key = 'creditProductCodeLabel', r.Value = d.creditProductCodeLabel, d.documentData.KeyValueDictionary.push(r)))
    }), d.Transaction.Item.CreditProductTypeID && s.getPaymentTypes().then(function (n) {
      var t = n.filter(function (n) {
        return n.Item.ProductTypeId == d.Transaction.Item.CreditProductTypeID
      });
      return null != t && t.length ? t[0] : null
    }).then(function (i) {
      null != i ? s.getPaymentTypeByProductTypeId(d.Transaction.Item.CreditProductTypeID).then(function (i) {
        if (i && !d.resolvedType) {
          d.paymentType = i;
          d.creditProductCodeLabel = i.Info.CodePrompt;
          var r = d.documentData.KeyValueDictionary.filter(function (n) {
            return n.Key == 'creditProductCodeLabel'
          });
          r.length > 0 && (r[0].Value = d.creditProductCodeLabel);
          d.Transaction.Item.Type == 17 && (d.creditProductCode = d.creditProductCode || t.TransactionUtils.getDetailValue(d.Transaction.Item, n.server.DetailName.NumberPaymentStatus));
          d.populateVisibleDetails(i)
        }
      })  : d.resolvedType || d.productsService.getProductType({
        ProductTypeId: d.Transaction.Item.CreditProductTypeID
      }).then(function (n) {
        n.ResultCode == 0 && (n.IsCard && (d.creditProductCodeLabel = d.STRINGS['transaction.details.ToCard']), n.IsLoan && (d.creditProductCodeLabel = d.STRINGS['transaction.details.ToLoan']))
      })
    })), n.utils.isUndefinedOrNull(d.Transaction.Item.DebitProduct) || h.getCardByCode(d.Transaction.Item.DebitProduct).then(function (n) {
      if (n) {
        d.Transaction.FromCard = !0;
        d.Transaction.DebitProductLabel = d.STRINGS['Intrabank.Details.CardDebitProductLabel'];
        var t = d.documentData.KeyValueDictionary.filter(function (n) {
          return n.Key == 'debitProductLabel'
        });
        t[0].Value = d.Transaction.DebitProductLabel
      }
    }), d.Transaction.Details && d.Transaction.Details.BOP_ID_INTERNAL && parseInt(d.Transaction.Details.BOP_ID_INTERNAL) != NaN && s.getTransferReasons().then(function (n) {
      var t = n.filter(function (n) {
        return n.Id == d.Transaction.Details.BOP_ID_INTERNAL
      });
      t.length > 0 && (d.Transaction.Details.BOP_CODE = t[0].Title)
    }), d.Transaction.Item.TransferCategory && s.getTransferCategory().then(function (n) {
      var t = n.filter(function (n) {
        return n.Value == d.Transaction.Item.TransferCategory
      }) [0];
      t && (d.Transaction.DetailsTransferType = t.Title)
    }), d.documentData = {
      TransactionAUN: d.Transaction.Item.TransactionAUN
    }, d.documentData.KeyValueDictionary = [
    ], i = new n.model.KeyValue, i.Key = 'debitProductLabel', i.Value = d.Transaction.DebitProductLabel, d.documentData.KeyValueDictionary.push(i), d.Transaction.ShowDebitProductType && (r = new n.model.KeyValue, r.Key = 'debitProductTypeLabel', r.Value = d.Transaction.DebitProductTypeLabel, d.documentData.KeyValueDictionary.push(r)), this.displayCreditProductCode && (u = new n.model.KeyValue, u.Key = 'creditProductCodeLabel', u.Value = d.creditProductCodeLabel, d.documentData.KeyValueDictionary.push(u)), d.documentData.DocumentRequestType = d.CalcDocumentType());
    e = null != d.Transaction && null != d.Transaction.Item && null != d.Transaction.Item.Details ? d.Transaction.Item.Details.filter(function (t) {
      return t.Name == n.server.DetailName.CreditReason && null != t.Value && t.Value.length > 0
    }) [0] : null;
    null != e && (d.hasCreditReason = !0, d.creditReason = e.Value);
    f = null != d.Transaction && null != d.Transaction.Item && null != d.Transaction.Item.Details ? d.Transaction.Item.Details.filter(function (t) {
      return t.Name == n.server.DetailName.MyBankOrderNumber && null != t.Value && t.Value.length > 0
    }) [0] : null;
    f || d.Transaction.Item.Type != 30 || (d.orderNumber = d.Transaction.Item.TransactionAUN);
    null != f && (d.orderNumber = f.Value)
  })
}
return i.prototype.CalcDocumentType = function () {
  return this.Transaction.Item.Type == 25 || this.Transaction.Item.Type == 26 ? 29 : this.Transaction.Item.IsTransfer ? 15 : 16
},
i.prototype.populateVisibleDetails = function (n) {
  var i = this;
  i.DetailValues = {
  };
  i.VisibleDetails = [
  ];
  n.Fields.forEach(function (n) {
    i.DetailValues[n.DetailName] = t.TransactionUtils.getDetailValue(i.Transaction.Item, n.TransactionDetailName || n.DetailName);
    n.DetailVisibility && (i.HasVisibleDetails = !0, i.VisibleDetails.push({
      DisplayName: n.DisplayName,
      FieldName: n.FieldName,
      getValue: function () {
        var r,
        u,
        t;
        return this.IsDate ? i.filterService('date') (i.DetailValues[n.DetailName], 'dd/MM/yyyy')  : this.IsDropDown ? (r = JSON.parse(n.ListValues).Items.filter(function (t) {
          return t.Val == i.DetailValues[n.DetailName]
        }) [0], u = r ? r.Txt : i.DetailValues[n.DetailName], u)  : this.IsAmount ? (t = i.DetailValues[this.DetailName], t && t.length > 0) ? parseFloat(t.slice(0, - 2) + '.' + t.slice( - 2))  : 0 : i.DetailValues[n.DetailName]
      },
      IsDate: n.FieldType == 3 || n.FieldType == 5,
      IsAmount: n.FieldName == 'Amount',
      IsDropDown: n.FieldType == 4,
      DisplayInDataEntry: n.DetailVisibility && (n.DetailVisibility == 2 || n.DetailVisibility == 6),
      DisplayInConfirmation: n.DetailVisibility && (n.DetailVisibility == 4 || n.DetailVisibility == 6),
      Info: n.Info
    }))
  })
},
i.prototype.print = function () {
  window.print()
},
i.prototype.changeLang = function () {
  var n = {
    ReloadForLang: !0,
    language: this.selectedLang.val,
    id: this.Transaction.Item.TransactionAUN,
    forceToReload: !1
  };
  this.$modalInstance.close(n)
},
i.prototype.close = function () {
  var n = this;
  this.$modalInstance.close(n.isCompleted)
},
i.prototype.cancelTransfer = function () {
  var t = this,
  i,
  r;
  t.isBusy = !0;
  t.title = t.STRINGS['transaction.cancel.executing'];
  i = this.Transaction.Item.Type == 23 ? this.Transaction.Item.TransactionUN : this.Transaction.Item.TransactionAUN;
  r = this.Transaction.Item.Type == 23 ? 13 : 5;
  this.roleService.getRole() == 10 && (this.Transaction.Item.Type == 1 ? (r = 3, i = this.Transaction.Item.TransactionUN)  : this.Transaction.Item.Type == 7 && (r = 4, i = this.Transaction.Item.TransactionUN));
  this.transfersService.CancelTransaction(i, r).then(function (r) {
    var u = r;
    u.ResultCode == 0 ? (t.title = t.STRINGS['transaction.cancel.successfully'], t.hasError = !1, t.errorMessage = '', t.isCompleted = !0, t.Transaction.CancellationUN = u.CancellationUN, t.Transaction.CancellationRequestDate = u.RequestedDate, t.Transaction.Item.Status = 5, t.Transaction.Item.StatusDescription = t.STRINGS['chequebook.status.canceled'], t.AppEventsService.publish(n.common.services.AppEventsService.TransactionCancelled_Event, {
      TransactionUN: i,
      CancellationUN: u.CancellationUN
    }), t.AppEventsService.publish(n.common.services.AppEventsService.InvalidateAccounts_Event), t.AppEventsService.publish(n.common.services.AppEventsService.InvalidateCards_Event), t.AppEventsService.publish(n.common.services.AppEventsService.InvalidateLoans_Event), t.AppEventsService.publish(n.common.services.AppEventsService.InvalidateLookups_Event))  : (t.title = t.STRINGS['transaction.cancel.error'], t.hasError = !0, t.errorMessage = u.Error ? u.Error.Message : t.STRINGS['transaction.executing.error'], t.isCompleted = !1);
    t.isBusy = !1
  }, function () {
    t.title = this.STRINGS['transaction.cancel.error'];
    t.hasError = !0;
    t.errorMessage = t.STRINGS['transaction.executing.error'];
    t.isCompleted = !1;
    t.isBusy = !1
  })
},
i.prototype.getDifferentCurrencyTransfer = function () {
  return null == this.m_CurrencyTransferInfo && (this.m_CurrencyTransferInfo = this.Transaction.Item.IsTransfer ? (new n.transfers.ExchangeRate).build(this.STRINGS, this.Transaction.Item.Details, this.Transaction.Item.Amount, this.Transaction.Item.AmountCurrency, this.Transaction.Item.DebitProductCurrency, this.Transaction.Item.CreditProductCurrency)  : {
    enabled: !1
  }),
  this.m_CurrencyTransferInfo
},
Object.defineProperty(i.prototype, 'isDynamicPayment', {
  get: function () {
    return null != this.paymentType
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(i.prototype, 'isDonationPayment', {
  get: function () {
    return this.isDynamicPayment && [
      n.constants.dynamicPaymentTags.DONATION,
      n.constants.dynamicPaymentTags.DONATION_WITH_CODE
    ].indexOf(this.paymentType.Tags) > - 1
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(i.prototype, 'isDonationPaymentWithoutCode', {
  get: function () {
    return this.isDynamicPayment && n.constants.dynamicPaymentTags.DONATION == this.paymentType.Tags
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(i.prototype, 'isPaymentWithCharges', {
  get: function () {
    var i,
    t;
    return !n.utils.isUndefinedOrNull(this.Transaction.Fees) && (i = this.Transaction.Fees.split(' '), i[0] && (t = parseFloat(i[0].replace(',', '.')), !n.utils.isUndefinedOrNull(t) && !isNaN(t) && t > 0)) ? !0 : !1
  },
  enumerable: !0,
  configurable: !0
}),
i.prototype.createDocumentData = function () {
  var n = {
  };
  return n.PDFRequestType = 26,
  n.Parameters = JSON.stringify({
    Channel: this.channel,
    TransactionN: this.Transaction.Item.TransactionUN,
    TransferDate: this.Transaction.Item.TransferDate,
    TransactionStatus: this.Transaction.Item.StatusDescription,
    ClearingSystem: this.Transaction.Details.ClearingSystem,
    SenderBicCode: 'CRBAGRAAXXX',
    ReceiverBicCode: this.Transaction.Details.BIC_CODE,
    TransactionId: this.Transaction.Details.TransferIdNumber,
    SettlementDate: this.Transaction.Item.ValeurDate,
    OrderAmount: this.Transaction.Item.Amount,
    AmountCurrency: this.Transaction.Item.AmountCurrency,
    InstructedAmount: isNaN(this.Transaction.Details.DebitCurrencyAmount) ? '' : parseFloat(this.Transaction.Details.DebitCurrencyAmount).toFixed(2).replace('.', ','),
    FeeType: this.Transaction.Details.FeeType,
    DebtorAccount: this.Transaction.Item.DebitProduct,
    DebtorName: this.Transaction.Details.ORDERER_NAME,
    DebtorAddress: this.Transaction.Details.ORDERER_ADDRESS,
    CreditorAccount: this.Transaction.Item.CreditProduct + ' ' + this.Transaction.Item.BankName,
    CreditorName: this.Transaction.Details.BENEFICIARY_NAME,
    CreditorAddress: this.Transaction.Details.ADDRESS,
    RemittanceInformation: this.Transaction.Details.CreditReason,
    SelectedLanguage: this.$stateParams.language == 'NA' ? null : this.$stateParams.language
  }),
  n
},
i.$inject = [
  '$state',
  '$stateParams',
  '$scope',
  '$modalInstance',
  'TransfersService',
  'RoleService',
  'LookupsService',
  'ProfileProductsService',
  'STRINGS',
  'QueriesService',
  '$filter',
  'AppEventsService',
  'LanguageService',
  'SharedDataService',
  '$q',
  'MenuItemsService',
  'ProductsService'
],
i
}(),
r,
u;
t.TransactionDetailsController = i;
n.transactions.mainModule.controller('TransactionDetailsController', i);
r = function (t) {
function r(i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b) {
  var k = t.call(this, i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, null) || this,
  d,
  g;
  return k.Transaction.Details.IsInAlpha = k.Transaction.Details.SICOM_TRANSFER_TYPE === 'SIMPLE_IMPORTS_WITHIN_BANK',
  d = k.Transaction.Details.SICOM_INVOICE_DATE,
  k.Transaction.Details.InvoiceDate = n.utils.formatString('{0}/{1}/{2}', [
    d.substring(6),
    d.substring(4, 6),
    d.substring(0, 4)
  ]),
  k.Transaction.Details.IsInAlpha || (g = k.Transaction.Details.VALUE_DATE, k.Transaction.Details.ValuerDate = n.utils.formatString('{0}/{1}/{2}', [
    g.substring(6),
    g.substring(4, 6),
    g.substring(0, 4)
  ]), k.Transaction.Details.IsUrgent = k.Transaction.Details.SICOM_URGENT_FLAG === '1'),
  k
}
return __extends(r, t),
r.$inject = i.$inject,
r
}(i);
n.transactions.mainModule.controller('SimpleImportTransactionDetailsController', r);
u = function (n) {
function i(t, i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b) {
  var k = n.call(this, t, i, r, u, f, e, o, s, h, c, l, a, v, y, w, b, null) || this;
  return k.securityServiceConfig = p,
  k.$q = w,
  k
}
return __extends(i, n),
i.prototype.populateVisibleDetails = function (n) {
  var i = this;
  i.DetailValues = {
  };
  i.VisibleDetails = [
  ];
  n.Fields.forEach(function (n) {
    if (i.DetailValues[n.DetailName] = t.TransactionUtils.getDetailValue(i.Transaction.Item, n.TransactionDetailName || n.DetailName), n.DetailVisibility) {
      i.HasVisibleDetails = !0;
      var r = {
        DisplayName: n.DisplayName,
        FieldName: n.FieldName,
        FieldValue: '',
        IsDate: n.FieldType == 3 || n.FieldType == 5,
        IsAmount: n.FieldName == 'Amount',
        IsDropDown: n.FieldType == 4,
        DisplayInDataEntry: n.DetailVisibility && (n.DetailVisibility == 2 || n.DetailVisibility == 6),
        DisplayInConfirmation: n.DetailVisibility && (n.DetailVisibility == 4 || n.DetailVisibility == 6),
        Info: n.Info
      };
      r.FieldValue = i.getFieldValue(r, n, i);
      i.VisibleDetails.push(r)
    }
  })
},
i.prototype.getFieldValue = function (n, t, i) {
  var u,
  f,
  r;
  return n.FieldName == 'SocialSecurity' ? (this.socialSecurity = this.securityServiceConfig.items.filter(function (n) {
    return n.key == i.DetailValues[t.DetailName]
  }) [0], this.socialSecurity.text)  : n.FieldName == 'SocialSecurityService' ? this.socialSecurity ? this.socialSecurity.items.filter(function (n) {
    return n.key.replace(/^[0]+/g, '') == i.DetailValues[t.DetailName]
  }) [0].text : '' : n.IsDate ? this.filterService('date') (i.DetailValues[t.DetailName], 'dd/MM/yyyy')  : n.IsDropDown ? (u = JSON.parse(t.ListValues).Items.filter(function (n) {
    return n.Val == i.DetailValues[t.DetailName]
  }) [0], f = u ? u.Txt : i.DetailValues[t.DetailName], f)  : n.IsAmount ? (r = i.DetailValues[n.DetailName], r && r.length > 0) ? parseFloat(r.slice(0, - 2) + '.' + r.slice( - 2))  : 0 : i.DetailValues[t.DetailName]
},
i.$inject = [
  '$state',
  '$stateParams',
  '$scope',
  '$modalInstance',
  'TransfersService',
  'RoleService',
  'LookupsService',
  'ProfileProductsService',
  'STRINGS',
  'QueriesService',
  '$filter',
  'AppEventsService',
  'LanguageService',
  'SharedDataService',
  'securityServiceConfig',
  '$q',
  'MenuItemsService'
],
i
}(i);
n.transactions.mainModule.controller('LaborTicketTransactionDetailsController', u)
}) (t = n.transactions || (n.transactions = {
}))
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(),
function (n) {
var t;
(function (t) {
var r = function () {
function t(t, i, r, u, f, e, o, s, h, c, l, a, v, y) {
  this.$stateService = r;
  this.queriesService = u;
  this.queryTypes = f;
  this.channels = e;
  this.countries = o;
  this.transactionSearchHelper = h;
  this.transactionTypes = c;
  this.sharedDataService = l;
  this.$scope = a;
  this.failedBehavior = v;
  this.isBusy = !1;
  this.pageSize = 30;
  this.lastPageIndex = '';
  this.totalRecords = 0;
  this.replyRecords = 0;
  this.hasMore = !1;
  this.today = new Date(Date.now());
  this.forCancellation = !1;
  this.searchTerm = null;
  this.searchMessage = '';
  this.IsPhoneBanking = !1;
  this.dateFormat = 'dd/MM/yyyy';
  this.dateOptions = {
    formatYear: 'yyyy',
    startingDay: 1,
    showWeeks: 'false',
    maxMode: 'day'
  };
  var p = this;
  this.forCancellation = y ? y : !1;
  this.roleService = t;
  l.SetControllerData(a, n.server.Controllers.TransactionsHistoryController, 'countries', o);
  this.vmMap = function (i) {
    var u = new n.model.TransactionViewModel(i),
    f,
    h;
    if (t.getRole() == 10 && (i.Status == n.server.TransactionStatus.Succeded || i.Status == n.server.TransactionStatus.Executing) && (i.Type == 1 || i.Type == 7)) {
      var r = i.TransferDate,
      e = r.indexOf('/'),
      o = r.lastIndexOf('/'),
      c = new Date(Number(r.substring(o + 1)), Number(r.substring(e + 1, o)) - 1, Number(r.substring(0, e)), 23, 59, 59),
      l = new Date;
      u.CanCancel = c.getTime() >= l.getTime() ? !0 : !1;
      u.IsPhoneBanking = !0
    }
    return f = p.$stateService.current.name.split('.'),
    h = f[0] + '.' + f[1] + '.' + f[2],
    s.decorateTransactionViewModel(u, i, h),
    u
  };
  this.queryType = this.queryTypes[0];
  this.sortOptions = h.createSortOptions();
  this.toDate = this.today;
  this.fromDate = this.today.addDays( - 30);
  this.search();
  this.documentData = {
    DocumentRequestType: 2,
    ByDate: 0,
    ForCancellation: !1,
    FromDate: '',
    LastPageIndex: '',
    MaxRecords: 10000000,
    ProductTypeID: 0,
    QueryType: 0,
    ToDate: '',
    CreditProductSearchTerm: this.searchTerm
  };
  i.subscribe(n.common.services.AppEventsService.TransactionCancelled_Event, function (n, t) {
    p.items && (p.items = p.items.map(function (n) {
      return t && t.TransactionUN && t.CancellationUN && n.Item.TransactionAUN == t.TransactionUN && (n.Item.TransactionAUN = t.CancellationUN),
      n.Item
    }).map(p.vmMap))
  })
}
return Object.defineProperty(t.prototype, 'sortOption', {
  get: function () {
    return this.m_sortOption
  },
  set: function (n) {
    this.m_sortOption = n;
    var t = this.transactionSearchHelper.createDateRanges(n.Sorting);
    this.fromDate = t.fromDate;
    this.toDate = t.toDate
  },
  enumerable: !0,
  configurable: !0
}),
t.prototype.loadMore = function () {
  return this.search(this.lastPageIndex || '')
},
Object.defineProperty(t.prototype, 'showSearchPanel', {
  get: function () {
    return !0
  },
  enumerable: !0,
  configurable: !0
}),
t.prototype.search = function (t) {
  var r = this;
  r.isBusy = !0;
  var f = r.fromDate ? n.utils.toShortDateString(r.fromDate)  : '',
  e = r.toDate ? n.utils.toShortDateString(r.toDate)  : '',
  o = this.queryType ? this.queryType.TransferType : 1,
  u = this.sortOption ? this.sortOption.Sorting : 5,
  s = r.searchTerm ? parseInt(r.searchTerm)  : 0;
  return r.queriesService.getTransactions(r.queriesService.getTransactionsRequest(r.pageSize, t, f, e, o, u, this.forCancellation, s, null, null, undefined, null, this.failedBehavior)).then(function (h) {
    var c = h;
    c.ResultCode == 0 ? (r.lastPageIndex = c.CurrentPageIndex, r.hasMore = c.HasMore, r.replyRecords = c.ReplyRecords, r.totalRecords = c.TotalRecords, r instanceof i && (u = 0), r.searchMessage = r.transactionSearchHelper.createSearchHeader(f, e, u, ''), !n.utils.isUndefinedOrNull(c.Transactions) && c.Transactions.length > 0 && (r.documentData.Type = c.Transactions.some(function (n) {
      return n.IsTransfer == !0
    }) ? 0 : 1, r.documentData.ByDate = u, r.documentData.FromDate = f, r.documentData.ToDate = e, r.documentData.QueryType = o, r.documentData.CreditProductSearchTerm = null, r.documentData.ProductTypeID = s, r.items = r.items && t ? r.items.concat(c.Transactions.map(r.vmMap))  : c.Transactions.map(r.vmMap), r instanceof i && (r.items = r.items.filter(function (t) {
      return t.Item.Status !== n.server.TransactionStatus.Succeded
    }), r.totalRecords = r.items.length), r.sharedDataService.SetControllerModel(r.$scope, n.server.Controllers.TransactionsHistoryController, r.items)), r.isBusy = !1)  : r.isBusy = !1
  }, function () {
    r.isBusy = !1
  })
},
t.prototype.CancelTransaction = function (t) {
  var i = {
    id: t
  },
  r = this.$stateService.current.name + n.constants.stateNames.transactionCancel;
  this.$stateService.go(r, i)
},
t.$inject = [
  'RoleService',
  'AppEventsService',
  '$state',
  'QueriesService',
  'queryTypes',
  'channels',
  'countries',
  'TransactionActionsService',
  'transactionSearchHelper',
  'transactionTypes',
  'SharedDataService',
  '$scope',
  'failedBehavior'
],
t
}(),
i,
u,
f;
t.TransactionsHistoryController = r;
i = function (n) {
function t(t, i, r, u, f, e, o, s, h, c, l, a) {
  var v = n.call(this, t, i, r, u, f, e, o, s, h, c, l, a, null, !0) || this;
  return v.$stateService = r,
  v.queriesService = u,
  v.queryTypes = f,
  v.channels = e,
  v.countries = o,
  v.transactionSearchHelper = h,
  v.documentData.DocumentRequestType = 6,
  v.documentData.ForCancellation = !0,
  v
}
return __extends(t, n),
Object.defineProperty(t.prototype, 'showSearchPanel', {
  get: function () {
    return !1
  },
  enumerable: !0,
  configurable: !0
}),
t
}(r);
t.PendingTransactionsController = i;
n.transactions.mainModule.controller('PendingTransactionsController', i);
u = function () {
function n() {
  this.IsCard = !1;
  this.isAccount = !1;
  this.DebitProduct = {
  }
}
return n
}();
t.GetDebitProductResult = u;
f = function () {
function t() {
}
return t.TransactionToBogTransferInfo = function (i, r, u, f, e) {
  return r.CreditAccount = e.match(f, i.CreditProduct, i.CreditProductID),
  r.DebitProduct = e.match(u, i.DebitProduct, i.DebitProductID),
  r.Amount = i.Amount,
  r.DebitReason = t.getDetailValue(i, n.server.DetailName.DebitReason),
  r.DebitReason && r.DebitReason.length > 20 && (r.DebitReason = r.DebitReason.substring(0, 20)),
  r.CreditReason = t.getDetailValue(i, n.server.DetailName.CreditReason),
  r.CreditReason && r.CreditReason.length > 20 && (r.CreditReason = r.CreditReason.substring(0, 20)),
  r
},
t.TemplateToIntraBankTransferInfo = function (i, r, u, f, e, o, s, h) {
  return r.CreditAccount = h.match(e, i.CreditProduct, i.CreditProductID) || h.match(o, i.CreditProduct, i.CreditProductID),
  r.Amount = i.Amount,
  r.DebitReason = t.getDetailValue(i, n.server.DetailName.DebitReason),
  r.DebitReason && r.DebitReason.length > 20 && (r.DebitReason = r.DebitReason.substring(0, 20)),
  r.CreditReason = t.getDetailValue(i, n.server.DetailName.CreditReason),
  r.CreditReason && r.CreditReason.length > 20 && (r.CreditReason = r.CreditReason.substring(0, 20)),
  r.RemittanceInfo = t.getDetailValue(i, n.server.DetailName.RemmitanceInfo),
  r
},
t.InProfileWithUses = function (n, t) {
  return null == n ? {
    inProfile: !1,
    product: null
  }
   : n.Uses.indexOf(t) > - 1 ? {
    inProfile: !0,
    product: n
  }
   : {
    inProfile: !0,
    product: null
  }
},
t.TransactionToIntraBankTransferInfo = function (i, r, u, f, e, o, s, h) {
  var c,
  l;
  return r.DebitProduct || (r.TransferMethodImmediate = i.Type == 1, r.DebitProduct = t.InProfileWithUses(r.TransferMethodImmediate ? h.match(u, i.DebitProduct, i.DebitProductID)  : h.match(f, i.DebitProduct, i.DebitProductID), 2).product),
  c = t.InProfileWithUses(r.TransferMethodImmediate ? h.match(e, i.CreditProduct, i.CreditProductID)  : h.match(o, i.CreditProduct, i.CreditProductID), 1),
  c.inProfile ? r.CreditAccount = c.product : (r.UseProfileProduct = !1, r.CreditAccountCode = i.CreditProduct),
  r.DebitReason = t.getDetailValue(i, n.server.DetailName.DebitReason),
  r.CreditReason = t.getDetailValue(i, n.server.DetailName.CreditReason),
  r.RemittanceInfo = t.getDetailValue(i, n.server.DetailName.RemmitanceInfo),
  r.Description = i.Description,
  r.Details.push(new n.model.Detail(n.model.DetailName.DebitCurrencyAmount, n.model.DetailDataType.String, t.getDetailValue(i, n.server.DetailName.DebitCurrencyAmount))),
  i.TransferCategory || (i.TransferCategory = 0),
  l = s.filter(function (n) {
    return n.Value === i.TransferCategory
  }),
  l.length && (r.TransferCategory = l[0]),
  r.Amount = i.Amount,
  r
},
t.TransactionToCardLoanPaymentInfo = function (n, i, r, u, f, e) {
  if (!e) {
    i.DebitProduct = t.InProfileWithUses(f.match(r, n.DebitProduct, n.DebitProductID), 2).product;
    i.Amount = n.Amount;
    i.IsAmountBlocked = n.IsAmountBlocked;
    var o = f.match(u, n.CreditProduct, n.CreditProductID);
    null != o ? (i.UseProfileProduct = !0, i.CreditAccount = o)  : (i.UseProfileProduct = !1, i.CreditAccountCode = n.CreditProduct)
  }
  return i
},
t.TransactionToDonationPaymentInfo = function (i, r, u) {
  r.TransferSource = 0;
  var f = t.getProduct(u, i.DebitProduct);
  return r.DebitProduct = f,
  r.Amount = i.Amount,
  r.IsAmountBlocked = n.utils.isUndefinedOrNull(i.IsAmountBlocked) ? !0 : i.IsAmountBlocked,
  r.IsAnonymous = t.getDetailValue(i, n.server.DetailName.ANONYMOUS) == '1',
  r.VAT = t.getDetailValue(i, n.server.DetailName.VAT),
  r.Region = t.getDetailValue(i, n.server.DetailName.REGION),
  r.PostCode = t.getDetailValue(i, n.server.DetailName.POSTCODE),
  r.Phone = t.getDetailValue(i, n.server.DetailName.PHONE),
  r.Street = t.getDetailValue(i, n.server.DetailName.STREET),
  r.StreetNumber = t.getDetailValue(i, n.server.DetailName.STREET_NUMBER),
  r.FirstName = t.getDetailValue(i, n.server.DetailName.FIRSTNAME),
  r.LastName = t.getDetailValue(i, n.server.DetailName.LASTNAME),
  r.Comments = t.getDetailValue(i, n.server.DetailName.COMMENTS),
  r.IsPassport = !n.utils.isUndefinedOrNull(t.getDetailValue(i, n.server.DetailName.PASSPORT)),
  r.IsPassport ? r.Passport = t.getDetailValue(i, n.server.DetailName.PASSPORT)  : r.Identity = t.getDetailValue(i, n.server.DetailName.IDENTITY),
  r
},
t.TransactionToDynamicPaymentInfo = function (i, r, u, f, e, o, s) {
  var c,
  h;
  return i.IsFromOverview == !0 ? !n.utils.isUndefinedOrNull(e) && e.length > 0 ? (r.UseProfilePaymentCode = !0, h = t.getProduct(e, i.CreditProduct))  : r.UseProfilePaymentCode = !1 : (r.UseProfilePaymentCode = !1, c = t.getProductFromTwoSources(u, f, i.DebitProduct), h = t.getProduct(e, i.CreditProduct), r.TransferSource = c.IsCard ? 1 : 0, r.DebitProduct = s ? null : c.DebitProduct),
  h ? (r.PredefinedPaymentCode = h, r.UseProfilePaymentCode = !0)  : s || (r.UseProfilePaymentCode = !1, r.DynamicValues.Code = i.CreditProduct, r.Amount = i.Amount, r.IsAmountBlocked = i.IsAmountBlocked),
  r
},
t.TransactionToInterBankTransferInfo = function (i, r, u, f, e, o, s) {
  var h,
  l,
  c;
  return r.DebitProduct = f ? null : t.InProfileWithUses(u.match(e, i.DebitProduct, i.DebitProductID), 2).product,
  r.Amount = i.Amount,
  h = t.InProfileWithUses(u.match(o, i.CreditProduct, i.CreditProductID), 1),
  h.inProfile ? r.CreditAccount = h.product : (r.UseProfileProduct = !1, r.CreditAccountCode = i.CreditProduct, r.CreditAccountBeneficiary = t.getDetailValue(i, n.server.DetailName.BENEFICIARY_NAME), l = s.filter(function (n) {
    return n.TypeName == i.BankName
  }), r.SelectedBank = l[0]),
  r.TransferMethodImmediate = i.Type == 23,
  r.DebitReason = t.getDetailValue(i, n.server.DetailName.DebitReason),
  r.CreditReason = t.getDetailValue(i, n.server.DetailName.CreditReason),
  c = t.getDetailValue(i, n.server.DetailName.FeeType),
  c == 'SHA' ? r.FeeType = 0 : c == 'OUR' && (r.FeeType = 1),
  r
},
t.TransactionToInternationalTransferInfo = function (i, r, u, f, e, o, s, h, c) {
  var l,
  a,
  v;
  return r.DebitProduct = h ? null : t.InProfileWithUses(s.match(u, i.DebitProduct, i.DebitProductID), 2).product,
  r.Amount = i.Amount,
  l = t.InProfileWithUses(s.match(f, i.CreditProduct, i.CreditProductID), 1),
  l.inProfile ? (r.CreditAccount = l.product, r.CreditAccountBankCountry.Name = t.getDetailValue(i, n.server.DetailName.CountryDescrEl))  : (r.UseProfileProduct = !1, r.CreditAccountCode = i.CreditProduct, r.CreditAccountBankCountry = c.filter(function (r) {
    return r.GreekName == t.getDetailValue(i, n.server.DetailName.CountryDescrEl)
  }) [0]),
  r.Currency = t.getCurrency(e, i.AmountCurrency),
  r.DebitReason = t.getDetailValue(i, n.server.DetailName.DebitReason),
  r.CreditReason = t.getDetailValue(i, n.server.DetailName.CreditReason),
  r.ContactNumber = t.getDetailValue(i, n.server.DetailName.ContactNumber),
  r.CreditAccountBeneficiary = t.getDetailValue(i, n.server.DetailName.BENEFICIARY_NAME),
  r.CreditAccountBeneficiaryAddress = t.getDetailValue(i, n.server.DetailName.ADDRESS),
  r.BicCode = t.getDetailValue(i, n.server.DetailName.BIC_CODE),
  a = t.getDetailValue(i, n.server.DetailName.BOP_ID_INTERNAL),
  v = o.filter(function (n) {
    return n.Id == a
  }),
  r.TransferReason = v[0],
  r
},
t.TransactionToSimpleEUImportTransferInfo = function (i, r, u, f, e, o, s, h, c) {
  var l,
  a;
  return this.TransactionToInternationalTransferInfo(i, r, u, f, e, s, h, c, o),
  r.ImportToEUAccount = r.CreditAccount && r.CreditAccount.IsAlphaBankProduct || r.CreditAccountCode && r.CreditAccountCode.slice(0, 2) == 'GR' ? !1 : !0,
  l = t.getDetailValue(i, n.server.DetailName.SICOM_URGENT_FLAG),
  r.IsUrgent = l == '0' ? !1 : !0,
  n.server.DetailName.SICOM_URGENT_FLAG && (r.ImportedGood.Name = t.getDetailValue(i, n.server.DetailName.SICOM_MERCH_DESCR)),
  a = t.getDetailValue(i, n.server.DetailName.SICOM_MERCH_COUNTRY),
  r.ImportedGood.Country = t.getCountry(o, a),
  r.CreditAccountCountry = t.getCountry(o, t.getDetailValue(i, n.server.DetailName.CountryISOCode)),
  r.ImportedGood.ReceiptDate = undefined,
  r
},
t.getDetailValue = function (n, t) {
  if (n && n.Details) {
    var i = n.Details.filter(function (n) {
      return n.Name == t
    });
    if (i && i.length > 0) return i[i.length - 1].Value
  }
  return null
},
t.getDetail = function (n, t) {
  if (n) {
    var i = n.filter(function (n) {
      return n.Name == t
    });
    if (i && i.length > 0) return i[i.length - 1]
  }
  return null
},
t.setDetailValue = function (t, i, r, u) {
  if (t && t.Details) {
    var f = t.Details.filter(function (n) {
      return n.Name == i
    });
    f && f.length > 0 ? f[0].Value = u : t.Details.push(new n.model.Detail(i, r, u))
  }
},
t.deleteDetail = function (n, t) {
  for (var r, i = 0; i < n.Details.length; i++) n.Details[i].Name == t && (r = i);
  n.Details.splice(r, 1)
},
t.getProduct = function (n, t) {
  if (n && n.length > 0) {
    var i = n.filter(function (n) {
      return n.Code == t
    });
    return i && i.length > 0 ? i[0] : null
  }
  return null
},
t.getCurrency = function (t, i) {
  var u = n.server.Currency[i],
  r;
  return t && t.length > 0 ? (r = t.filter(function (n) {
    return n.Currency == u
  }), r && r.length > 0 ? r[0] : null)  : null
},
t.getCountry = function (n, t) {
  if (n && n.length > 0) {
    var i = n.filter(function (n) {
      return n.CountryIso == t || n.Name == t
    });
    return i && i.length > 0 ? i[0] : null
  }
  return null
},
t.getProductFromTwoSources = function (t, i, r) {
  var f,
  u = new n.transactions.GetDebitProductResult,
  e;
  return t && t.length > 0 || i && i.length > 0 ? (f = t.filter(function (n) {
    return n.Code == r
  }), f.length > 0 && (u.isAccount = !0, u.IsCard = !1), f.length == 0 && (i && i.length > 0 && (f = i.filter(function (n) {
    return n.Code == r
  })), f.length > 0 ? (u.isAccount = !1, u.IsCard = !0)  : (u.isAccount = !1, u.IsCard = !1)), e = f && f.length > 0 ? f[0] : null, u.DebitProduct = e, u)  : u
},
t
}();
t.TransactionUtils = f
}) (t = n.transactions || (n.transactions = {
}))
}(alpha || (alpha = {
})),
function (n) {
var t;
(function () {
var t = function () {
function n(n, t, i) {
  this.SwiftMT103 = t;
  this.$modalInstance = i
}
return n.prototype.close = function () {
  var n = this;
  this.$modalInstance.close()
},
n.prototype.print = function () {
  window.print()
},
n.$inject = [
  '$stateParams',
  'SwiftMT103',
  '$modalInstance'
],
n
}();
n.transactions.mainModule.controller('SwiftMT103DetailsController', t)
}) (t = n.transactions || (n.transactions = {
}))
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(),
function (n) {
var t;
(function (t) {
var i = function () {
function t() {
}
return t.fromOtherBank = {
  debitAccounts: [
    'providersIds',
    'ProfileProductsService',
    function (n, t) {
      return t.getCashManagementProducts().then(function (n) {
        return n.filter(function (n) {
          return ~n.Uses.indexOf(2) && ~n.Uses.indexOf(5) && n.IsCMOtherBank
        })
      })
    }
  ],
  creditAccounts: [
    'ProfileProductsService',
    function (n) {
      return n.getCashManagementProducts().then(function (n) {
        return n.filter(function (n) {
          return n.Uses.indexOf(1) > - 1 && n.CategoryType == 10001
        })
      })
    }
  ],
  banks: [
    'LookupsService',
    function (n) {
      return n.getBanks()
    }
  ],
  countries: [
    'LookupsService',
    function (n) {
      return n.getCountries()
    }
  ],
  currencies: [
    'LookupsService',
    function (n) {
      return n.getCurrenciesForTransfers()
    }
  ],
  transferReasons: [
    'LookupsService',
    function (n) {
      return n.getTransferReasons()
    }
  ]
},
t.commonInternationalBankStateResolve = {
  debitAccounts: [
    'ProfileProductsService',
    '$stateParams',
    'StateHelperService',
    function (t, i, r) {
      var o = i.key,
      u = r.getStateData(o),
      f = undefined,
      e;
      return u && (e = u.Transaction ? u.Transaction : u, f = e.DebitProduct),
      t.getAccountsByRequestType(n.server.ProductRequestType.DebitAccounts, f)
    }
  ],
  debitAccountsForOrderedTransfer: [
    'ProfileProductsService',
    '$stateParams',
    'StateHelperService',
    function (t, i, r) {
      var o = i.key,
      u = r.getStateData(o),
      f = undefined,
      e;
      return u && (e = u.Transaction ? u.Transaction : u, f = e.DebitProduct),
      t.getAccountsByRequestType(n.server.ProductRequestType.DebitAccountsForOrderedTransfer, f)
    }
  ],
  internationalCreditAccounts: [
    'ProfileProductsService',
    '$stateParams',
    'StateHelperService',
    function (t, i, r) {
      var o = i.key,
      u = r.getStateData(o),
      f = undefined,
      e;
      return u && (e = u.Transaction ? u.Transaction : u, f = e.CreditProduct),
      t.getAccountsByRequestType(n.server.ProductRequestType.INTERNATIONAL_CREDIT_ACCOUNTS, f)
    }
  ],
  banks: [
    'LookupsService',
    function (n) {
      return n.getBanks()
    }
  ],
  countries: [
    'LookupsService',
    function (n) {
      return n.getCountries()
    }
  ],
  currencies: [
    'LookupsService',
    function (n) {
      return n.getCurrenciesForTransfers()
    }
  ],
  transferReasons: [
    'LookupsService',
    function (n) {
      return n.getTransferReasons()
    }
  ]
},
t.commonInternationalCMBankStateResolve = {
  debitAccounts: [
    'products',
    function (n) {
      return n.filter(function (n) {
        return n.Uses.some(function (n) {
          return n == 2
        })
      })
    }
  ],
  internationalCreditAccounts: [
    'ProfileProductsService',
    '$q',
    'products',
    function (t, i, r) {
      return t.getAccountsByRequestType(n.server.ProductRequestType.INTERNATIONAL_CREDIT_ACCOUNTS).then(function () {
        return r = r.filter(function (n) {
          return n.Uses.some(function (n) {
            return n == 1 || n == 5
          }) && !n.IsAlphaBankProduct && n.BankProduct.ProviderID != 11 && n.BankProduct.ProviderID != 12
        })
      })
    }
  ],
  banks: [
    'LookupsService',
    function (n) {
      return n.getBanks()
    }
  ],
  countries: [
    'LookupsService',
    function (n) {
      return n.getCountries()
    }
  ],
  currencies: [
    'LookupsService',
    function (n) {
      return n.getCurrenciesForTransfers()
    }
  ],
  transferReasons: [
    'LookupsService',
    function (n) {
      return n.getTransferReasons()
    }
  ]
},
t.commonInterBankCMStateResolve = {
  behaviorConfig: function () {
    return {
      hasFees: !0
    }
  },
  debitAccounts: [
    'products',
    function (n) {
      return n.filter(function (n) {
        return n.Uses.some(function (n) {
          return n == 2
        })
      })
    }
  ],
  debitAccountsForOrderedTransfer: [
    'ProfileProductsService',
    function (t) {
      return t.getAccountsByRequestType(n.server.ProductRequestType.DebitAccountsForOrderedTransfer)
    }
  ],
  banks: [
    'LookupsService',
    function (n) {
      return n.getBanks()
    }
  ],
  interbankCreditAccounts: [
    'ProfileProductsService',
    function (t) {
      return t.getAccountsByRequestType(n.server.ProductRequestType.INTERBANK_ACCOUNTS).then(function (n) {
        return t.getCashManagementProducts().then(function (t) {
          return t.concat(n).filter(function (n) {
            return n.Uses.some(function (n) {
              return n == 1
            }) && n.Uses.every(function (n) {
              return n != 5
            }) && !n.IsAlphaBankProduct
          })
        })
      })
    }
  ]
},
t.commonInterBankStateResolve = {
  behaviorConfig: function () {
    return {
      hasFees: !0
    }
  },
  debitAccounts: [
    'ProfileProductsService',
    '$stateParams',
    'StateHelperService',
    'RoleService',
    function (t, i, r) {
      var o = i.key,
      u = r.getStateData(o),
      f = undefined,
      e;
      return u && (e = u.Transaction ? u.Transaction : u, f = e.DebitProduct),
      t.getAccountsByRequestType(n.server.ProductRequestType.DebitAccounts, f)
    }
  ],
  debitAccountsForOrderedTransfer: [
    'ProfileProductsService',
    function (t) {
      return t.getAccountsByRequestType(n.server.ProductRequestType.DebitAccountsForOrderedTransfer)
    }
  ],
  banks: [
    'LookupsService',
    function (n) {
      return n.getBanks()
    }
  ],
  interbankCreditAccounts: [
    'ProfileProductsService',
    '$stateParams',
    'StateHelperService',
    function (t, i, r) {
      var o = i.key,
      u = r.getStateData(o),
      f = undefined,
      e;
      return u && (e = u.Transaction ? u.Transaction : u, f = e.CreditProduct),
      t.getAccountsByRequestType(n.server.ProductRequestType.INTERBANK_ACCOUNTS, f)
    }
  ]
},
t.commonIntraBankStateResolve = {
  debitAccounts: [
    'ProfileProductsService',
    '$stateParams',
    'StateHelperService',
    function (t, i, r) {
      var o = i.key,
      u = r.getStateData(o),
      f = undefined,
      e;
      return u && (e = u.Transaction ? u.Transaction : u, f = e.DebitProduct),
      t.getAccountsByRequestType(n.server.ProductRequestType.DebitAccounts, f).then(function (i) {
        return f ? t.getAccountsByRequestType(n.server.ProductRequestType.DebitAccounts)  : i
      }).catch (function () {
        return new Error('Account data can\'t be retrieved')
      })
    }
  ],
  debitAccountsForOrderedTransfer: [
    'ProfileProductsService',
    '$stateParams',
    'StateHelperService',
    function (t, i, r) {
      var o = i.key,
      u = r.getStateData(o),
      f = undefined,
      e;
      return u && (e = u.Transaction ? u.Transaction : u, f = e.DebitProduct),
      t.getAccountsByRequestType(n.server.ProductRequestType.DebitAccountsForOrderedTransfer, f).then(function (i) {
        return f ? t.getAccountsByRequestType(n.server.ProductRequestType.DebitAccountsForOrderedTransfer)  : i
      })
    }
  ],
  cardsForCashAdvance: [
    'ProfileProductsService',
    function (t) {
      return t.getCardsByRequestType(n.server.ProductRequestType.CardsForCashAdvance).then(function (n) {
        return n.length > 0 ? n.filter(function (n) {
          return n.CategoryType != 104
        })  : n
      }).catch (function () {
        return new Error('Card data can\'t be retrieved')
      })
    }
  ],
  loansForCashAdvance: [
    'ProfileProductsService',
    function (t) {
      return t.getLoansByRequestType(n.server.ProductRequestType.LoansForCashAdvance).catch (function () {
        return new Error('Loan data can\'t be retrieved')
      })
    }
  ],
  hasDataErrors: [
    'debitAccounts',
    'cardsForCashAdvance',
    'loansForCashAdvance',
    function (n, t, i) {
      return {
        0: n instanceof Error,
        1: t instanceof Error,
        2: i instanceof Error
      }
    }
  ],
  creditAccounts: [
    'ProfileProductsService',
    '$stateParams',
    'StateHelperService',
    function (t, i, r) {
      var o = i.key,
      u = r.getStateData(o),
      f = undefined,
      e;
      return u && (e = u.Transaction ? u.Transaction : u, f = e.CreditProduct),
      t.getAccountsByRequestType(n.server.ProductRequestType.CreditAccounts, f)
    }
  ],
  creditAccountsForOrderedTransfer: [
    'ProfileProductsService',
    '$stateParams',
    'StateHelperService',
    function (t, i, r) {
      var o = i.key,
      u = r.getStateData(o),
      f = undefined,
      e;
      return u && (e = u.Transaction ? u.Transaction : u, f = e.CreditProduct),
      t.getAccountsByRequestType(n.server.ProductRequestType.CreditAccountsForOrderedTransfer, f)
    }
  ],
  transferCategories: [
    'LookupsService',
    function (n) {
      return n.getTransferCategory()
    }
  ],
  isCitiOnline: [
    'VersionFilterService',
    function (t) {
      return t.IsInVersions(n.constants.versionFilters.CITI_ONLINE)
    }
  ]
},
t
}(),
f,
r,
e,
h,
u,
o,
s;
t.getFromOthersBankStateResolve = function (t) {
return n.utils.merge({
}, i.fromOtherBank, t)
};
t.getInterBankAndCashManagement = function (t) {
return n.utils.merge({
}, i.commonInterBankCMStateResolve, t)
};
t.getInternationalBankStateResolve = function (t) {
return n.utils.merge({
}, i.commonInternationalBankStateResolve, t)
};
t.getInternationalCMBankStateResolve = function (t) {
return n.utils.merge({
}, i.commonInternationalCMBankStateResolve, t)
};
t.getInterBankStateResolve = function (t) {
return n.utils.merge({
}, i.commonInterBankStateResolve, t)
};
t.getIntraBankStateResolve = function (t) {
return n.utils.merge({
}, i.commonIntraBankStateResolve, t)
};
f = function () {
function t(n) {
  this.roleService = n
}
return t.prototype.set = function (n, t) {
  var r = 0,
  i;
  if (n.stateService.params && n.stateService.params.type && (r = parseInt(n.stateService.params.type), r > 0 && n.setTransferSource(r)), n.stateService.params && n.stateService.params.id) {
    i = n.stateService.params.id;
    switch (r) {
      case 0:
        this.roleService.IsRetail() ? this.resolveAccount(i, n, t)  : this.resolveAccountCorporate(i, n, t);
        break;
      case 1:
        this.resolveCard(i, n, t);
        break;
      case 2:
        this.resolveLoan(i, n, t)
    }
  }
},
t.prototype.resolveAccount = function (t, i) {
  i.profileProductService.getAccount(t).then(function (t) {
    var u,
    r,
    f;
    t && (u = t.BankProduct.RequestTypes.indexOf(n.server.ProductRequestType.DebitAccountsForOrderedTransfer) != - 1, r = t, u ? (i.Model.DebitProduct = r, i.Model.TransferMethodImmediate = !0, i.Model.Online || (i.Model.TransferMethodImmediate = !1))  : (f = t.BankProduct.RequestTypes.indexOf(n.server.ProductRequestType.DebitAccounts) != - 1, f && (i.Model.DebitProduct = r)))
  })
},
t.prototype.resolveAccountCorporate = function (t, i) {
  var r = i.profileProductService,
  u = window.atob(t);
  r.getAccountsByIDs([ + u]).then(function (t) {
    var u,
    r,
    f;
    t[0] && (u = t[0].BankProduct.RequestTypes.indexOf(n.server.ProductRequestType.DebitAccountsForOrderedTransfer) != - 1, r = t[0], u ? (i.Model.DebitProduct = r, i.Model.TransferMethodImmediate = !0, i.Model.Online || (i.Model.TransferMethodImmediate = !1))  : (f = t[0].BankProduct.RequestTypes.indexOf(n.server.ProductRequestType.DebitAccounts) != - 1, f && (i.Model.DebitProduct = r)))
  })
},
t.prototype.resolveCard = function (n, t, i) {
  t.profileProductService.getCard(n).then(function (n) {
    n && (t.Model.DebitProduct = i.match(t.cardsForCashAdvance, n.Code, n.BankProduct.ProductID))
  })
},
t.prototype.resolveLoan = function (n, t, i) {
  t.profileProductService.getLoan(n).then(function (n) {
    n && (t.Model.DebitProduct = i.match(t.loansForCashAdvance, n.Code, n.BankProduct.ProductID))
  })
},
t.$inject = [
  'RoleService'
],
t
}();
t.DebitSourceResolver = f;
r = function (t) {
function i(n, i, r, u, e, o, s, h, c, l, a, v, y, p, w, b) {
  var k = t.call(this, o, s) || this,
  g,
  d,
  nt;
  return k.Model = n,
  k.debitAccounts = i,
  k.debitAccountsForOrderedTransfer = r,
  k.stateService = u,
  k.modal = e,
  k.scope = o,
  k.$injector = s,
  k.userInfo = h,
  k.profileProductService = c,
  k.stateHelperService = l,
  k.$q = a,
  k.parseService = v,
  k.productMatchingService = y,
  k.roleService = p,
  k.$window = w,
  k.otpHandler = b,
  k.today = new Date,
  k.showTitle = !0,
  k.canShowWizard = !1,
  k.wizardError = '',
  k.dateFormat = 'dd/MM/yyyy',
  k.dateOptions = {
    formatYear: 'yyyy',
    startingDay: 1,
    showWeeks: 'false',
    maxMode: 'day'
  },
  k.keepOtpHandlerAlive = Boolean(k.otpHandler),
  k.otpHandler || (g = s.get('OtpHandlerService'), k.otpHandler = g.retrieveHandler(1)),
  k.canViewAccountBalance = h.UserInfo.Permissions.indexOf('ViewAccountGrossBalance') > - 1,
  d = k,
  d.parentScope = o.$parent.hasOwnProperty('vm') ? o.$parent : d.scope,
  d.showTransferMenu = !0,
  d.setCanShowWizard(),
  new f(p).set(k, y),
  nt = h.OTPStatus === 0 || h.OTPStatus === 1,
  o.$on('$destroy', function () {
    k.keepOtpHandlerAlive && k.otpHandler.unregister()
  }),
  k
}
return __extends(i, t),
Object.defineProperty(i.prototype, 'userHasOtpEnabled', {
  get: function () {
    return this.userInfo.OTPStatus == 1 || this.userInfo.OTPStatus == 0
  },
  enumerable: !0,
  configurable: !0
}),
Object.defineProperty(i.prototype, 'otpKey', {
  get: function () {
    return this.otpHandler.caller
  },
  enumerable: !0,
  configurable: !0
}),
i.prototype.addEventsPublishingForCorporate = function (t) {
  this.roleService.IsRetail() || (t.publish(n.common.services.AppEventsService.InvalidateCustomUiSelectProduct, this.Model.DebitProduct.Code), this.Model.CreditAccount != null && t.publish(n.common.services.AppEventsService.InvalidateCustomUiSelectProduct, this.Model.CreditAccount.BankProduct.Code))
},
i.prototype.preExecute = function (n) {
  n.DebitProductID = this.Model.DebitProduct.BankProduct.ProductID;
  n.CreditProductID = this.Model.UseProfileProduct ? this.Model.CreditAccount.BankProduct.ProductID : - 1
},
i.prototype.getCreditProductId = function () {
  return this.Model.UseProfileProduct ? this.Model.CreditAccount.BankProduct.ProductID : n.constants.pci.defaultProductId
},
i.prototype.getErrorMessage = function (n, t) {
  return this.parseService(t) (n) || this.STRINGS.failedTransaction
},
i.prototype.OnStepChanged = function (i, r) {
  this.showTransferMenu = i == 0;
  r == n.wizards.StepDirection.Backward && 'OTP' in this.Model && (this.Model.OTP = '');
  t.prototype.OnStepChanged.call(this, i, r)
},
Object.defineProperty(i.prototype, 'showTransferMenu', {
  get: function () {
    return this.getShowTransferMenu()
  },
  set: function (n) {
    this.scope.$parent && this.scope.$parent.hasOwnProperty('vm') && (this.parentScope.vm.showTransferMenu = n)
  },
  enumerable: !0,
  configurable: !0
}),
i.prototype.getShowTransferMenu = function () {
  return this.scope.$parent && this.scope.$parent.hasOwnProperty('vm') ? this.parentScope.vm.showTransferMenu : !1
},
i.prototype.setCanShowWizard = function () {
  var n = this;
  n.wizardError = '';
  n.canShowWizard = !0
},
i.prototype.print = function () {
  window.print()
},
i.prototype.setTransactionStatus = function (t) {
  var r = !1,
  i = this;
  return t.ResultCode == 0 ? (i.Model.TransactionUN = t.TransactionUN, i.Model.ProcessDate = t.ProcessDate, i.Model.ProcessDateLiteral = t.ProcessDateLiteral, i.Model.TransactionStatus = n.server.TransactionStatus.Succeded, i.Model.TransactionAUN = t.TransactionAUN, i.Model.SubmittedTimeStamp = t.SubmittedTimeStamp, i.documentData = {
    TransactionAUN: i.Model.TransactionAUN
  }, i.documentData.DocumentRequestType = 0, r = !0)  : (t.Error.Code == 9 && (this.roleService.isAccessAllowed('EditLimits') ? this.Model.HasExceededLimit = !0 : this.Model.HasExceededLimitOtherThanAdmin = !0), i.Model.TransactionStatus = n.server.TransactionStatus.Failed, i.Model.HasErrors = !0, i.Model.ErrorMessage = t.Error ? t.Error.Message : i.STRINGS.failedTransactionSystemError),
  i.tryPublishTransactionEventForBITelemetry(r, r ? null : i.Model.ErrorMessage),
  r
},
i.prototype.isProfileProduct = function () {
  var r = this,
  t = this,
  i = t.$q.defer();
  return t.Model.UseProfileProduct ? (t.Model.IsProfileProduct = !0, i.resolve(!0))  : this.roleService.IsRetail() ? this.profileProductService.getProductByCode(this.Model.CreditAccountCode).then(function (n) {
    t.Model.IsProfileProduct = n ? !0 : !1;
    i.resolve(t.Model.IsProfileProduct)
  }).finally (function () {
    var r = n.utils.isUndefinedOrNull(t.Model.IsProfileProduct) ? !0 : t.Model.IsProfileProduct;
    i.resolve(r)
  })  : this.profileProductService.getAccountByCodeCorporate(this.Model.CreditAccountCode, n.server.ProductRequestType.AllAccounts).then(function (n) {
    if (n.Products.length > 0) {
      var u = n.Products[0].Code;
      u == r.Model.CreditAccountCode && (t.Model.IsProfileProduct = !0)
    } else t.Model.IsProfileProduct = !1;
    i.resolve(t.Model.IsProfileProduct)
  }).finally (function () {
    var r = n.utils.isUndefinedOrNull(t.Model.IsProfileProduct) ? !0 : t.Model.IsProfileProduct;
    i.resolve(r)
  }),
  i.promise
},
i.prototype.displayExpensesCalcButton = function () {
  var n = this.Model;
  if (n.DebitProduct && n.DebitProduct.Code && n.DebitProduct.TypeID) if (n.CreditAccount && n.CreditAccount.Code && n.CreditAccount.TypeID) {
    if (n.Amount) return !0
  } else if (n.CreditAccountCode && n.SelectedBank && n.Amount) return !0;
  return !1
},
i.prototype.expensesForSpecificTypes = function () {
  var n = !1,
  t = this.Model;
  if (t.UseProfileProduct && t.CreditAccountBank) switch (t.CreditAccountBank.TypeID) {
    case 20042:
      n = !0;
      break;
    default:
      n = !1
  } else switch (t.SelectedBank.TypeID) {
    case 20042:
      n = !0;
      break;
    default:
      n = !1
  }
  return n
},
i.prototype.addProductToProfile = function () {
var f = this,
r = this.Model.getTransactionType(),
t = new n.model.AddProductViewModel,
e,
u,
i;
t.comesFromSuccessfullTransactionScreen = !0;
(r == 1 || r == 2) && (e = this.Model, t.product.BankProduct.Code = e.CreditAccountCode, t.product.CategoryGroupType = n.server.CategoryGroupType.ACCOUNT, t.product.BankProduct.Uses = [
], t.product.BankProduct.Details = [
], f.stateHelperService.go(n.constants.stateNames.settingsAddAccountInAccountsState, {
  productTypeFamily: 'account',
  productTypeScope: 'local'
}, t));
r == 4 && (u = this.Model, t.product.BankProduct.Code = u.CreditAccountCode, t.product.CategoryGroupType = n.server.CategoryGroupType.ACCOUNT, t.selectedBank = u.SelectedBank, t.beneficiary = u.CreditAccountBeneficiary, t.product.BankProduct.Uses = [
], t.product.Uses = [
], t.product.BankProduct.Details = [
], f.stateHelperService.go(n.constants.stateNames.settingsAddAccountInAccountsState, {
  productTypeFamily: 'account',
  productTypeScope: 'national'
}, t));
(r == 10 || r == 12) && (i = this.Model, t.product.BankProduct.Code = i.CreditAccountCode, t.product.CategoryGroupType = n.server.CategoryGroupType.ACCOUNT, t.selectedCountry = i.CreditAccountBankCountry, t.ibanValidationResult.RelatedBIC = i.BicCode, t.beneficiary = i.CreditAccountBeneficiary, t.beneficiaryAddress = i.CreditAccountBeneficiaryAddress, t.product.Uses = [
], t.product.BankProduct.Uses = [
], t.product.BankProduct.Details = [
], f.stateHelperService.go(n.constants.stateNames.settingsAddAccountInAccountsState, {
  productTypeFamily: 'account',
  productTypeScope: 'international'
}, t))
},
i.prototype.addToReccuringTransfers = function () {
var r = this,
i = this.Model,
t = new n.model.NewRecurringTransferVM;
t.StandingOrder.Amount = i.Amount;
t.DebitAccount = i.DebitProduct;
t.CreditAccount = i.CreditAccount;
t.StandingOrder.FromReason = i.DebitReason;
t.StandingOrder.ToReason = i.CreditReason;
t.StandingOrder.RemittanceInfo = i.RemittanceInfo;
r.stateHelperService.go('root.transfers.recurring.new', null, t)
},
i.prototype.addToMyTransfers = function () {
var t = this,
o = t.Model.DebitReason,
s = t.Model.CreditReason,
h,
u,
i,
f,
r,
e;
(t.Model.DebitReason == '' || t.Model.DebitReason == undefined) && (h = t.Model.UseProfileProduct ? t.Model.CreditAccount.Code : t.Model.CreditAccountCode, o = 'AWB ' + h.substr( - 15));
(t.Model.CreditReason == '' || t.Model.CreditReason == undefined) && (s = 'AWB ' + t.userInfo.Name + ' ' + t.userInfo.SurName);
t.Model.Details.push(new n.model.Detail(n.model.DetailName.CreditReason, n.model.DetailDataType.String, s));
t.Model.Details.push(new n.model.Detail(n.model.DetailName.DebitReason, n.model.DetailDataType.String, o));
i = this.Model.getTransactionType();
i == 4 ? (r = this.Model, r.FeeType == 0 ? r.Details.push(new n.model.Detail(n.model.DetailName.FeeType, n.model.DetailDataType.String, 'SHA'))  : r.Details.push(new n.model.Detail(n.model.DetailName.FeeType, n.model.DetailDataType.String, 'OUR')), r.Details.push(new n.model.Detail(n.model.DetailName.DebitFees, n.model.DetailDataType.Decimal, (t.Model.Fees.DebitProviderFeesAmount + t.Model.Fees.CreditProviderFeesAmount).toString().replace('.', ','))), e = r.UseProfileProduct ? r.CreditAccountBank.TypeName : r.SelectedBank.TypeName, u = new n.model.NewTransaction(r, i, r.UseProfileProduct, e))  : i == 10 ? (f = this.Model, f.Details.push(new n.model.Detail(n.model.DetailName.DebitFees, n.model.DetailDataType.Decimal, (t.Model.Fees.DebitProviderFeesAmount + t.Model.Fees.InterbankProviderFeesAmount).toString().replace('.', ','))), e = f.UseProfileProduct ? f._CreditAccount.Bank : f.BICName, u = new n.model.NewTransaction(f, i, f.UseProfileProduct, e))  : i == 22 ? (r = this.Model, e = r.UseProfileProduct ? r.CreditAccountBank.TypeName : r.SelectedBank.TypeName, u = new n.model.NewTransaction(r, i, r.UseProfileProduct, e))  : u = new n.model.NewTransaction(this.Model, i, this.Model.UseProfileProduct);
u.comesFromSuccessfullTransactionScreen = !0;
(i == 1 || i == 2 || i == 11 || i == 14) && t.stateHelperService.go('root.transfers.myTransfers.addintrabank', null, u);
(i == 4 || i == 22) && t.stateHelperService.go('root.transfers.myTransfers.addinterbank', null, u);
i == 10 && t.stateHelperService.go('root.transfers.myTransfers.addinternational', null, u);
i == 12 && t.stateHelperService.go('root.transfers.myTransfers.addEUImports', null, u)
},
i.prototype.displayExpensesInfo = function (n) {
var u = this.Model.UseProfileProduct ? this.Model.CreditAccount.Code : this.Model.CreditAccountCode,
f = this.Model,
s = this.Model.UseProfileProduct ? this.Model.CreditAccount.TypeID : f.SelectedBank.TypeID,
r = this.createExpensesPayload(n, u, s),
t = this,
e = t.Model.getTransactionType(),
i,
o,
h;
switch (e) {
case 4:
i = 'Templates/Features/Transfers/expensesModal';
break;
case 12:
i = 'Templates/Features/Transfers/expensesSicomModal';
break;
default:
i = 'Templates/Features/Transfers/expensesInternationalModal'
}
o = e == 4 ? 'expensesModal' : 'custom';
h = this.modal.open({
templateUrl: i,
controller: 'ExpensesModalInstanceCtrl as vm',
size: 'sm',
windowClass: o,
resolve: {
feeAmounts: [
'TransfersService',
'QueriesService',
function (n, i) {
  var f = t.Model.TransferMethodImmediate ? i.checkIBAN({
    InIBAN: u
  })  : t.$q.when({
    ResultCode: 0
  });
  return f.then(function (i) {
    return i.ResultCode == 0 ? (t.Model.TransferMethodImmediate && (r.BICCode = i.RelatedBIC, r.Country = 'GR'), n.GetTransferExpenses(r).then(function (n) {
      return n.ResultCode == 0 ? n.Fees : {
        HasErrors: !0,
        ErrorMessage: n.Error ? n.Error.Message : t.STRINGS.failedTransactionSystemError
      }
    }))  : {
      HasErrors: !0,
      ErrorMessage: i.Error ? i.Error.Message : t.STRINGS.failedTransactionSystemError
    }
  })
}
],
feeType: [
function () {
  return t.Model.FeeType
}
],
rates: [
function () {
  var n = t.Model;
  return n.hasOwnProperty('Rates') ? n.Rates : null
}
],
amount: [
function () {
  return t.Model.Amount
}
],
currency: [
function () {
  var n = t.Model;
  return n.hasOwnProperty('Currency') ? {
    transactionCurrency: n.Currency.Currency,
    debitAccountCurrency: f.DebitProduct.CurrencyEnum
  }
   : null
}
]
}
})
},
i.prototype.createExpensesPayload = function (n, t, i) {
var u = this,
r = {
},
e,
f;
return n == 'interbank' ? (r.Amount = u.Model.Amount, r.DebitAccountNumber = u.Model.DebitProduct.Code, r.DebitAccountType = u.Model.DebitProduct.TypeID, r.CreditAccountNumber = t, r.CreditAccountType = i, r.ExpensesServiceType = u.Model.TransferMethodImmediate ? 12 : u.Model.ExpensesServiceType, r.Currency = u.Model.DebitProduct.CurrencyEnum, r.FeeType = u.Model.FeeType)  : n == 'international' ? (e = u.Model, r.Amount = u.Model.Amount, r.DebitAccountNumber = e.DebitProduct.Code, r.DebitAccountType = e.DebitProduct.TypeID, r.CreditAccountNumber = t, r.CreditAccountType = e.CreditAccountTypeID, r.ExpensesServiceType = e.ExpensesServiceType, r.Currency = e.Currency.Currency, r.FeeType = 0, r.BICCode = e.BicCode, r.Country = e.UseProfileProduct ? e.CreditAccountCountry.CountryIso : e.CreditAccountBankCountry.CountryIso)  : n == 'simpleImports' ? (f = u.Model, r.Amount = f.Amount, r.DebitAccountNumber = f.DebitProduct.Code, r.DebitAccountType = f.DebitProduct.TypeID, r.CreditAccountNumber = t, r.CreditAccountType = 0, r.ExpensesServiceType = f.ExpensesServiceType, r.Currency = f.Currency.Currency, r.FeeType = 0, r.BICCode = f.BicCode ? f.BicCode : '', r.Country = f.UseProfileProduct && f.CreditAccountCountry ? f.CreditAccountCountry.CountryIso : f.CreditAccountBankCountry.CountryIso, r.Urgent = f.IsUrgent ? !0 : !1)  : n == 'interbankBankOfGreece' && (u.Model.FeeType = 0, r.Amount = u.Model.Amount, r.DebitAccountNumber = u.Model.DebitProduct.Code, r.DebitAccountType = u.Model.DebitProduct.TypeID, r.CreditAccountNumber = t, r.CreditAccountType = i, r.ExpensesServiceType = u.Model.TransferMethodImmediate ? 12 : u.Model.ExpensesServiceType, r.Currency = u.Model.DebitProduct.CurrencyEnum, r.FeeType = u.Model.FeeType),
r
},
i.prototype.createExecuteRequest = function () {
return null
},
i.$inject = [
'Model',
'debitAccounts',
'debitAccountsForOrderedTransfer',
'$state',
'$modal',
'$scope',
'$injector',
'userInfo',
'ProfileProductsService',
'StateHelperService',
'$q',
'$parse',
'ProductMatchingService',
'RoleService',
'$window',
'otpHandler'
],
i
}(n.wizards.WizardController);
t.TransferWizardController = r;
e = function (t) {
function i(i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k, d, g, nt, tt, it, rt, ut, ft, et, ot, st, ht) {
var ct = t.call(this, i, r, u, c, l, a, v, y, p, w, k, tt, rt, ut, ft, ht) || this,
lt,
vt,
at,
yt;
return ct.Model = i,
ct.debitAccounts = r,
ct.debitAccountsForOrderedTransfer = u,
ct.creditAccounts = f,
ct.creditAccountsForOrderedTransfer = e,
ct.cardsForCashAdvance = o,
ct.loansForCashAdvance = s,
ct.ProductsService = h,
ct.stateService = c,
ct.modal = l,
ct.scope = a,
ct.$injector = v,
ct.userInfo = y,
ct.profileProductService = p,
ct.transferCategories = b,
ct.$q = k,
ct.isCitiOnline = d,
ct.queriesService = g,
ct.transfersService = nt,
ct.hasDataErrors = it,
ct.roleService = ut,
ct.m_isInDifferentCurrencyContext = !1,
ct.currencies = [
],
ct.ignoreAtm24 = !1,
ct.showNoCardsWarning = !1,
ct.m_OnlyIntegerInAmount = !1,
ct.Model.TransferMethodImmediate = !0,
lt = ct,
n.utils.isUndefinedOrNull(lt.Model.DebitProduct) || n.utils.isUndefinedOrNull(lt.Model.CreditAccount) && n.utils.isUndefinedOrNull(lt.Model.CreditAccountCode) || lt.onProductChange(),
ct.ignoreAtm24 = !0,
ct.Model.CanSelectImmediate = ct.ignoreAtm24,
ct.Model.TransactionDate = ct.TransferPromptDateValue = n.utils.parseDateString(ct.Model.TransferPromptDate),
lt.setCanShowWizard(),
lt.setCanShowEachWizard(0),
vt = lt.stateHelperService.getStateData(),
vt && (at = null, yt = null, vt.Transaction ? (at = vt.Transaction, yt = n.transactions.TransactionUtils.TemplateToIntraBankTransferInfo)  : (at = vt, yt = n.transactions.TransactionUtils.TransactionToIntraBankTransferInfo), lt.Model = yt(at, lt.Model, r, u, f, e, ct.transferCategories, ct.productMatchingService), ct.isRetail || n.transactions.TransactionUtils.getDetailValue(at, n.server.DetailName.COMPANY) && lt.Model.CreditReason == '' && (lt.Model.CreditReason = n.transactions.TransactionUtils.getDetailValue(at, n.server.DetailName.COMPANY).slice(0, 20))),
ct.canShowProfileProducts = ct.setCanShowProfileProducts(),
ct.canShowProfileProducts || (lt.Model.UseProfileProduct = !1),
ot.IsInVersions(n.constants.versionFilters.CAPITAL_CONTROLS).then(function (n) {
lt.capitalControls = n
}),
a.$watch(function () {
return ct.Model.UseProfileProduct
}, function () {
return ct.onProductChange()
}),
ct
}
return __extends(i, t),
Object.defineProperty(i.prototype, 'transferSource', {
get: function () {
return this.Model && this.Model.TransferSourse ? this.Model.TransferSourse : 0
},
set: function (n) {
this.Model.DebitProduct = null;
this.Model.TransferSourse = n;
this.Model.TransferSourse != 0 && (this.Model.TransferMethodImmediate = !0);
this.setCanShowWizard()
},
enumerable: !0,
configurable: !0
}),
i.prototype.setTransferSource = function (n) {
this.transferSource = n
},
Object.defineProperty(i.prototype, 'isInDifferentCurrencyContext', {
get: function () {
return this.m_isInDifferentCurrencyContext
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(i.prototype, 'isRetail', {
get: function () {
return this.roleService.IsRetail()
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(i.prototype, 'allowProfileProducts', {
get: function () {
return !this.IsBusy && this.hasCreditAccounts && this.canShowProfileProducts
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(i.prototype, 'allowNonProfileProducts', {
get: function () {
return !this.IsBusy && (this.isRetail || this.userHasOtpEnabled || this.Model.IsJobSubmission)
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(i.prototype, 'hasDebitAccounts', {
get: function () {
return this.debitAccounts && this.debitAccounts.length > 0
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(i.prototype, 'hasCreditAccounts', {
get: function () {
return this.creditAccounts && this.creditAccounts.length > 0
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(i.prototype, 'hasCardsForCashAdvance', {
get: function () {
return this.cardsForCashAdvance && this.cardsForCashAdvance.length > 0
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(i.prototype, 'hasLoansForCashAdvance', {
get: function () {
return this.loansForCashAdvance && this.loansForCashAdvance.length > 0
},
enumerable: !0,
configurable: !0
}),
i.prototype.getShowTransferMenu = function () {
return this.isRetail ? t.prototype.getShowTransferMenu.call(this)  : !1
},
i.prototype.getAccountFromNewContext = function (t, i, r) {
var f,
u;
if (t && t.Code != undefined) if (this.isRetail) u = i.filter(function (n) {
return n.Code == t.Code
}),
f = u ? u[0] : null;
 else return this.profileProductService.getAccountByCodeCorporate(t.Code, r).then(function (t) {
return new n.model.AccountProduct(t.Products[0])
});
return this.$q.when(f)
},
i.prototype.setCanShowProfileProducts = function () {
return this.Model.TransferMethodImmediate || this.creditAccountsForOrderedTransfer.length != 0 ? !0 : !1
},
i.prototype.onExecMethodChange = function () {
this.setCanShowProfileProducts()
},
i.prototype.onRatesClick = function () {
var t = this;
this.modal.open({
templateUrl: 'Templates/Features/Transfers/ratesModal',
controller: 'RatesModalController as vm',
size: 'sm',
resolve: {
Rates: [
'QueriesService',
function (i) {
return i.getRates({
  InCurrency: t.Model.DebitProduct.CurrencyEnum,
  OutCurrency: t.Model.UseProfileProduct ? t.Model.CreditAccount.CurrencyEnum : t.currencies[1].value,
  Amount: 1,
  AmountPosition: t.Model.DebitProduct.CurrencyEnum == t.currencyIn.value ? 1 : 0
}).then(function (i) {
  var r = {
    buy: '',
    sell: ''
  };
  return 1 != i.BuyRate && (r.buy = n.utils.formatString('1 {0} = {1} {2}', [
    n.model.Currency[n.model.Currency.EUR],
    n.utils.toGreekLocale(i.BuyRate),
    t.Model.DebitProduct.Currency
  ])),
  1 != i.SellRate && (r.sell = n.utils.formatString('1 {0} = {1} {2}', [
    n.model.Currency[n.model.Currency.EUR],
    n.utils.toGreekLocale(i.SellRate),
    t.Model.UseProfileProduct ? t.Model.CreditAccount.Currency : t.currencies[1].text
  ])),
  r
})
}
]
}
})
},
i.prototype.onProductChange = function () {
var n,
t;
this.isCitiOnline && (n = this, n.IsBusy = !0, t = n.getFactory(), t.isInCrossCurrency(n).then(function (t) {
return n.m_isInDifferentCurrencyContext = t,
t
}).then(function (i) {
i && t.getCrossCurrencies(n).then(function (t) {
n.Model.TransferMethodImmediate = !0;
n.currencies = t;
n.currencyIn = n.currencies[0]
})
}).catch (function () {
n.m_isInDifferentCurrencyContext = !1
}).finally (function () {
n.IsBusy = !1
}))
},
i.prototype.getFactory = function () {
return this.Model.UseProfileProduct ? new c : new l
},
Object.defineProperty(i.prototype, 'onlyIntegerInAmount', {
get: function () {
var t = this.isCitiOnline && this.isInDifferentCurrencyContext && this.currencies.some(function (t) {
return t.value == n.model.Currency.JPY
});
return t != this.m_OnlyIntegerInAmount && (this.Model.Amount = 0, this.m_OnlyIntegerInAmount = t),
t
},
enumerable: !0,
configurable: !0
}),
i.prototype.updateDocumentData = function () {
var i = this.documentData.KeyValueDictionary || [
],
r = new n.model.KeyValue,
t;
r.Key = 'debitMessage';
r.Value = this.Model.DifferentCurrencyInfo.DebitMessage;
i.push(r);
t = new n.model.KeyValue;
t.Key = 'creditMessage';
t.Value = this.Model.DifferentCurrencyInfo.CreditMessage;
i.push(t);
this.documentData.KeyValueDictionary = i
},
i.prototype.searchBeneficiaries = function () {
var t = this,
i = t.Model.UseProfileProduct ? t.Model.CreditAccount.Code : t.Model.CreditAccountCode,
r = this.getCreditProductId(),
u;
(i != null || i != '') && (t = this, u = this.modal.open({
templateUrl: 'Templates/Features/Transfers/beneficiariesModal',
controller: 'BeneficiariesModalInstanceCtrl as vm',
windowClass: 'beneficiariesModal',
resolve: {
productInfo: [
function () {
return t.ProductsService.getProductInfo({
  Code: i,
  ProductID: r,
  Family: n.server.ProductTypeFamily.Account,
  Scope: n.server.ProductTypeScope.Local
}).then(function (n) {
  return n.ProductInfo[0]
})
}
]
}
}))
},
i.prototype.setCanShowWizard = function () {
switch (this.transferSource) {
case 0:
this.wizardError = this.STRINGS.noAccounts;
this.canShowWizard = this.hasDebitAccounts;
break;
case 1:
this.wizardError = this.STRINGS.noCards;
this.canShowWizard = this.hasCardsForCashAdvance;
break;
case 2:
this.wizardError = this.STRINGS.noLoans;
this.canShowWizard = this.hasLoansForCashAdvance
}
},
i.prototype.setCanShowEachWizard = function (n) {
switch (n) {
case 0:
this.Model.UseProfileProduct = this.hasCreditAccounts;
this.canShowAccountWizard = this.hasDebitAccounts;
break;
case 1:
this.Model.UseProfileProduct = this.hasCreditAccounts;
this.canShowCardWizard = (this.Model.Online || this.ignoreAtm24) && this.hasCardsForCashAdvance && this.hasCreditAccounts;
break;
case 2:
this.Model.UseProfileProduct = this.hasCreditAccounts;
this.canShowLoanWizard = (this.Model.Online || this.ignoreAtm24) && this.hasLoansForCashAdvance && this.hasCreditAccounts
}
},
i.prototype.onTransferSrcChange = function (n) {
this.transferSource = n;
this.setCanShowEachWizard(n)
},
Object.defineProperty(i.prototype, 'transferType', {
get: function () {
switch (this.transferSource) {
case 0:
return 0;
case 1:
return 3;
case 2:
return 4;
default:
return 0
}
},
enumerable: !0,
configurable: !0
}), i.prototype.createExecuteRequest = function () {
var t = {
},
i,
r,
u;
return t.DebitProductCode = this.Model.DebitProduct.Code,
t.DebitProductType = this.Model.DebitProduct.TypeID,
t.DebitReason = this.Model.DebitReason,
t.CreditProductCode = this.Model.UseProfileProduct ? this.Model.CreditAccount.Code : this.Model.CreditAccountCode,
t.CreditProductType = this.Model.UseProfileProduct ? this.Model.CreditAccount.TypeID : 0,
t.CreditReason = this.Model.CreditReason,
this.Model.TransferMethodImmediate ? (t.TransferDate = null, t.Block = null)  : (t.TransferDate = n.utils.toShortDateString(this.Model.TransactionDate), t.Block = this.Model.IsAmountBlocked),
t.TransferCategory = this.Model.DebitProduct.IsCorporate ? this.Model.TransferCategory.Value : 0,
t.Amount = this.Model.Amount,
t.DebitProductCurrency = this.amountCurrency,
t.TransferType = this.transferType,
(t.DebitReason == '' || t.DebitReason == undefined) && (i = this.Model.UseProfileProduct ? this.Model.CreditAccount.Code : this.Model.CreditAccountCode, t.DebitReason = 'AWB ' + i.substr( - 15)),
(t.CreditReason == '' || t.CreditReason == undefined) && (t.CreditReason = this.isRetail ? 'AWB ' + this.userInfo.Name + ' ' + this.userInfo.SurName : this.userInfo.UserInfo.CompanyInfo.Name ? this.userInfo.UserInfo.CompanyInfo.Name : this.userInfo.OrdererName),
t.TransferDetails = [
],
r = this.Model.CreditAccountBeneficiaries.length > 0 ? this.Model.Details.push(new n.model.Detail(n.model.DetailName.BENEFICIARY_NAME, n.model.DetailDataType.String, this.Model.CreditAccountBeneficiaries[0].DisplayName))  : this.Model.Details.push(new n.model.Detail(n.model.DetailName.BENEFICIARY_NAME, n.model.DetailDataType.String, '')),
this.Model.RemittanceInfo && (u = this.Model.Details.push(new n.model.Detail(n.model.DetailName.RemmitanceInfo, n.model.DetailDataType.String, this.Model.RemittanceInfo))),
t.TransferDetails = this.Model.Details,
t
}, i.prototype.initialiseSteps = function () {
var t = [
],
u = {
templateUrl: 'Templates/Features/transfers/intrabank/step1',
title: 'Στοιχεία Μεταφοράς'
},
i,
r;
return u.processStep = [
'STRINGS',
'QueriesService',
'$q',
'ProductsService',
'SecurityService',
'CrossCurrencyModelDecorator',
function (t, i, r, u, f, e) {
var o = this,
s = o.Model,
h = r.defer(),
w = o.transferType,
c = s.UseProfileProduct ? s.CreditAccount.Code : s.CreditAccountCode,
a = s.UseProfileProduct ? s.CreditAccount.TypeID : 0,
l = null;
if (s.UseProfileProduct || (l = n.utils.CheckAlphaIban(c)).valid) {
var v = u.getProductInfo({
Code: c,
ProductID: o.getCreditProductId(),
Family: n.server.ProductTypeFamily.Account,
Scope: n.server.ProductTypeScope.Local
}),
y = o.isInDifferentCurrencyContext ? r.when(!1)  : o.transfersService.GetTransferExpenses({
Amount: s.Amount,
DebitAccountNumber: s.DebitProduct.Code,
DebitAccountType: s.DebitProduct.TypeID,
CreditAccountNumber: c,
CreditAccountType: a,
ExpensesServiceType: s.ExpensesServiceType,
Currency: s.DebitProduct.CurrencyEnum,
FeeType: 2
}),
p = o.isInDifferentCurrencyContext ? i.getRates({
InCurrency: o.currencies[0].value,
OutCurrency: o.currencies[1].value,
Amount: s.Amount,
AmountPosition: s.DebitProduct.CurrencyEnum == o.currencyIn.value ? 1 : 0
})  : r.when(!1);
r.all({
productInfo: v,
expenses: y,
rates: p
}).then(function (t) {
var u = {
},
f,
r,
i;
t.productInfo && t.productInfo.ProductInfo.length > 0 ? n.utils.isUndefinedOrNullorWhiteSpace(t.productInfo.ProductInfo[0].ErrorMessage) ? (f = t.productInfo.ProductInfo[0].Owners, f && (s.CreditAccountBeneficiaries = [
], f.forEach(function (t) {
  s.CreditAccountBeneficiaries.push(new n.model.AccountBeneficiary(t))
})), u.productInfo = t.productInfo.ProductInfo[0], t.expenses ? (r = t.expenses, r.Error && r.Error.Code && (o.Model.HasErrors = !0, o.Model.ErrorMessage = r.Error.Message, h.reject(o.Model.ErrorMessage)), s.AmountLiteral = r.Fees.DebitAmountLiteral, s.Details = [
], u.expensesInfo = r.Fees)  : (i = t.rates, i.Error && i.Error.Code && (o.Model.HasErrors = !0, o.Model.ErrorMessage = i.Error.Message, h.reject(o.Model.ErrorMessage)), s.AmountLiteral = i.TransferAmountDescription, e.updateCurrencyInfo(s, s.Amount, i, o.currencyIn.value, o.currencies), u.ratesInfo = i), o.amountCurrency = o.isCitiOnline && o.isInDifferentCurrencyContext ? o.Model.DifferentCurrencyInfo.AmountCurrency : o.Model.DebitProduct.CurrencyEnum, u.amountCurrency = o.amountCurrency, h.resolve(!0))  : (o.Model.HasErrors = !0, o.Model.ErrorMessage = n.utils.isUndefinedOrNull(t.productInfo.Error) ? t.productInfo.ProductInfo[0].ErrorMessage : t.productInfo.Error.Message, h.reject(o.Model.ErrorMessage))  : (o.Model.HasErrors = !0, o.Model.ErrorMessage = t.productInfo ? t.productInfo.Error.Message : o.STRINGS.systemError, h.reject(o.Model.ErrorMessage))
}, function (n) {
o.Model.HasErrors = !0;
o.Model.ErrorMessage = n;
h.reject(n)
})
} else s.HasErrors = !0,
s.ErrorMessage = l.isLocal ? o.STRINGS.wrongAlphaAccount : o.STRINGS.notAlphaIban,
h.reject(s.ErrorMessage);
return h.promise.then(function () {
return o.isProfileProduct()
}).then(function (n) {
return o.getOtpPayload(n, o.transfersService)
}).then(function (n) {
return o.otpHandler.reset({
hints: {
  Requirement: String(2),
  Method: String(1)
},
payload: n
}).enquire()
})
}
],
t.push(u),
i = {
templateUrl: 'Templates/Features/transfers/intrabank/step2',
title: 'Επιβεβαίωση Στοιχείων'
},
i.processStep = [
'$q',
'TransfersService',
'LookupsService',
'AppEventsService',
function (t, i, r, u) {
var f = this,
e = f.Model,
o = t.defer(),
h = function () {
var t = [
];
f.transferSource == 0 ? (t.push(n.common.services.LookupsService.DebitAccounts_CacheKey), t.push(n.common.services.LookupsService.DebitAccountsForOrderedTransfer_CacheKey))  : f.transferSource == 1 ? (t.push(n.common.services.LookupsService.CardsForCashAdvance_CacheKey), u.publish(n.common.services.AppEventsService.InvalidateCards_Event))  : (t.push(n.common.services.LookupsService.LoansForCashAdvance_CacheKey), u.publish(n.common.services.AppEventsService.InvalidateLoans_Event));
f.Model.UseProfileProduct && (t.push(n.common.services.LookupsService.CreditAccounts_CacheKey), t.push(n.common.services.LookupsService.CreditAccountsForOrderedTransfer_CacheKey));
u.publish(n.common.services.AppEventsService.InvalidateAccounts_Event);
u.publish(n.common.services.AppEventsService.InvalidateLookups_Event, t)
},
s = f.createExecuteRequest();
return f.preExecute(s),
this.Model.documentData = s,
f.otpHandler.result().then(function () {
return f.otpHandler.appendExtraInfoToPayload(s),
f.isProfileProduct()
}, function (t) {
var i = n.utils.getErrorMsg(t);
return o.reject(i),
f.$q.reject(i)
}).then(function () {
e.UseProfileProduct ? i.ExecuteAlphaProfileAccountTransfer(s, e.Online).then(function (t) {
var r = f.setTransactionStatus(t),
i;
r && (f.updateDocumentData(), f.Model.CreditAccountBeneficiaries = [
], i = t.CreditProductOwners, i && i.forEach(function (t) {
  f.Model.CreditAccountBeneficiaries.push(new n.model.AccountBeneficiary(t))
}), h(), f.addEventsPublishingForCorporate(u));
o.resolve(!0)
}, function (t) {
e.HasErrors = !0;
e.ErrorMessage = f.STRINGS.failedTransactionSystemError;
n.utils.isUndefinedOrNull(t.Error) && t.data.Message == 'TimeoutError' ? e.ErrorMessage = f.STRINGS.promptForCheckErrorMsg : n.utils.isUndefinedOrNull(t.Error) || n.utils.isUndefinedOrNull(t.Error.Message) || (e.ErrorMessage = t.Error.Message);
o.reject(e.ErrorMessage)
})  : i.ExecuteAlphaAccountTransfer(s, e.Online).then(function (t) {
var r = f.setTransactionStatus(t),
i;
r && (f.updateDocumentData(), f.Model.CreditAccountBeneficiaries = [
], i = t.CreditProductOwners, i && i.forEach(function (t) {
  f.Model.CreditAccountBeneficiaries.push(new n.model.AccountBeneficiary(t))
}), h());
o.resolve(!0)
}, function (t) {
e.HasErrors = !0;
e.ErrorMessage = f.STRINGS.failedTransactionSystemError;
n.utils.isUndefinedOrNull(t.Error) && t.data.Message == 'TimeoutError' ? e.ErrorMessage = f.STRINGS.promptForCheckErrorMsg : n.utils.isUndefinedOrNull(t.Error) || n.utils.isUndefinedOrNull(t.Error.Message) || (e.ErrorMessage = t.Error.Message);
o.reject(e.ErrorMessage)
})
}),
o.promise
}
],
t.push(i),
r = {
templateUrl: 'Templates/Features/transfers/intrabank/step3',
title: 'Αποτελέσμα συναλλαγής'
},
r.processStep = [
'$q',
function (n) {
var i = this,
r = i.Model,
t = n.defer();
return t.resolve(!1),
t.promise
}
],
t.push(r),
t
}, i.prototype.getOtpPayload = function (n, t) {
var i = this.createExecuteRequest();
return this.preExecute(i),
n ? t.TransformAlphaProfileAccountTransferRequest(i, this.Model.Online)  : t.TransformAlphaAccountTransferRequest(i, this.Model.Online)
}, i.prototype.isAlphaPhone = function () {
return this.roleService.isAlphaPhone()
}, i.$inject = [
'Model',
'debitAccounts',
'debitAccountsForOrderedTransfer',
'creditAccounts',
'creditAccountsForOrderedTransfer',
'cardsForCashAdvance',
'loansForCashAdvance',
'ProductsService',
'$state',
'$modal',
'$scope',
'$injector',
'userInfo',
'ProfileProductsService',
'StateHelperService',
'transferCategories',
'$q',
'isCitiOnline',
'QueriesService',
'TransfersService',
'$parse',
'hasDataErrors',
'ProductMatchingService',
'RoleService',
'$window',
'AppEventsService',
'VersionFilterService',
'$rootScope',
'otpHandler'
], i
}(r);
t.IntraBankTransferWizard = e;
var c = function () {
function n() {
}
return n.prototype.isInCrossCurrency = function (n) {
return n.qService.when(0 == n.transferSource && null != n.Model.DebitProduct && null != n.Model.CreditAccount && n.Model.DebitProduct.CurrencyEnum != n.Model.CreditAccount.CurrencyEnum)
},
n.prototype.getCrossCurrencies = function (n) {
return n.qService.when([{
text: n.Model.DebitProduct.Currency,
value: n.Model.DebitProduct.CurrencyEnum
},
{
text: n.Model.CreditAccount.Currency,
value: n.Model.CreditAccount.CurrencyEnum
}
])
},
n
}(),
l = function () {
function t() {
this.m_CreditCurrency = null
}
return t.prototype.isInCrossCurrency = function (t) {
if (null == t.Model.DebitProduct || null == t.Model.CreditAccountCode) return t.qService.when(!1);
var i = this;
return t.queriesService.getAccountCurrency(t.Model.CreditAccountCode).then(function (r) {
return r && r.ResultCode == 0 && null != r.Currency && n.server.Currency.NA != r.Currency ? (i.m_CreditCurrency = r.Currency, i.m_CreditCurrency != t.Model.DebitProduct.CurrencyEnum)  : !1
}).catch (function () {
return !1
})
},
t.prototype.getCrossCurrencies = function (t) {
return t.qService.when([{
text: t.Model.DebitProduct.Currency,
value: t.Model.DebitProduct.CurrencyEnum
},
{
text: n.server.Currency[this.m_CreditCurrency],
value: this.m_CreditCurrency
}
])
},
t
}(),
a = function () {
function t() {
}
return t.prototype.build = function (t, i, r, u, f, e) {
var s = n.transactions.TransactionUtils.getDetail(i, n.server.DetailName.BuyRate_IN),
h = n.transactions.TransactionUtils.getDetail(i, n.server.DetailName.SellRate_OUT);
if (null != s && null != h && 1 != parseFloat(s.Value.replace(',', '.')) * parseFloat(h.Value.replace(',', '.'))) {
var o = n.model.Currency[f],
c = n.model.Currency[e],
l = n.model.Currency[n.model.Currency.EUR],
a = n.transactions.TransactionUtils.getDetail(i, n.server.DetailName.DebitCurrencyAmount).Value;
return {
enabled: !0,
debitMessage: n.utils.formatString('{0} {1}', [
u == o ? n.utils.toGreekLocale(r)  : a,
o
]),
creditMessage: n.utils.formatString('{0} {1}', [
u == o ? a : n.utils.toGreekLocale(r),
c
]),
buyRate: s.Value,
sellRate: h.Value,
buyRateMessage: n.utils.formatString(t['transfers.exchange.rates.buy.message'], [
o,
l
]),
sellRateMessage: n.utils.formatString(t['transfers.exchange.rates.sell.message'], [
c,
l
])
}
}
return {
enabled: !1
}
},
t
}();
t.ExchangeRate = a;
h = function () {
function n(n, t) {
this.Rates = n;
this.modalInstance = t
}
return n.prototype.onClose = function () {
this.modalInstance.dismiss()
},
n.$inject = [
'Rates',
'$modalInstance'
],
n
}();
u = function (t) {
function i(i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k, d, g, nt, tt, it, rt) {
var ut = t.call(this, i, r, u, h, c, l, a, v, p, y, w, d, g, nt, tt, rt) || this,
ft,
et,
ot;
return ut.Model = i,
ut.debitAccounts = r,
ut.debitAccountsForOrderedTransfer = u,
ut.banks = f,
ut.interbankCreditAccounts = e,
ut.queriesServiceProxy = o,
ut.transfersService = s,
ut.stateService = h,
ut.modal = c,
ut.scope = l,
ut.$injector = a,
ut.userInfo = v,
ut.stateHelperService = y,
ut.profileProductService = p,
ut.$q = w,
ut.behaviorConfig = b,
ut.regularExpressionProvider = k,
ut.roleService = nt,
ut.isImmediateExecutionTime = !0,
ft = ut,
ft.companyInfo = ut.roleService.IsRetail() ? ft.userInfo.OrdererName : ft.userInfo.UserInfo.CompanyInfo.Name,
et = ft.stateHelperService.getStateData(),
et && (ot = et.Transaction ? et.Transaction : et, ut.Model = n.transactions.TransactionUtils.TransactionToInterBankTransferInfo(ot, ut.Model, ut.productMatchingService, null != et.Transaction, r, e, f)),
ut.interbankCreditAccounts.length == 0 && (ut.Model.UseProfileProduct = !1),
ut.Model.TransactionDate = ut.TransferPromptDateValue = n.utils.parseDateString(ut.Model.DIASPromptDate),
ut.queriesServiceProxy.isImmediateExecutionTime({
}).then(function (n) {
0 == n.ResultCode && (ft.isImmediateExecutionTime = n.isTime)
}),
ut
}
return __extends(i, t),
Object.defineProperty(i.prototype, 'allowProfileProducts', {
get: function () {
return !this.IsBusy && this.interbankCreditAccounts.length > 0
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(i.prototype, 'allowNonProfileProducts', {
get: function () {
return !this.IsBusy && (this.userHasOtpEnabled || this.Model.IsJobSubmission)
},
enumerable: !0,
configurable: !0
}),
i.prototype.isBeneficiaryEditable = function () {
return !this.Model.UseProfileProduct || this.Model.UseProfileProduct && null != this.Model.CreditAccount && null == this.Model.getAccountDetailValue(this.Model.CreditAccount.BankProduct, n.server.DetailName.BENEFICIARY_NAME)
},
i.prototype.createExecuteRequest = function () {
var t = {
},
i,
r,
u;
t.DebitProductCode = this.Model.DebitProduct.Code;
t.DebitProductType = this.Model.DebitProduct.TypeID;
t.DebitReason = this.Model.DebitReason;
t.CreditProductCode = this.Model.UseProfileProduct ? this.Model.CreditAccount.Code : this.Model.CreditAccountCode;
t.CreditProductType = this.Model.UseProfileProduct ? this.Model.CreditAccount.TypeID : this.Model.SelectedBank.TypeID;
t.CreditReason = this.Model.CreditReason;
t.DebitProductCurrency = this.Model.DebitProduct.CurrencyEnum;
t.Amount = this.Model.Amount;
t.AmountCurrency = t.DebitProductCurrency;
t.TransferType = this.Model.TransferMethodImmediate ? 6 : this.Model.TransferType;
t.Block = this.Model.IsAmountBlocked;
this.Model.TransferMethodImmediate || (t.TransferDate = n.utils.toShortDateString(this.Model.TransactionDate));
t.FeeType = this.Model.FeeType;
t.Fees = this.Model.Fees;
(t.DebitReason == '' || t.DebitReason == undefined) && (i = this.Model.UseProfileProduct ? this.Model.CreditAccount.Code : this.Model.CreditAccountCode, t.DebitReason = 'AWB ' + i.substr( - 15));
(t.CreditReason == '' || t.CreditReason == undefined) && (t.CreditReason = this.roleService.IsRetail() ? 'AWB ' + this.userInfo.Name + ' ' + this.userInfo.SurName : this.userInfo.UserInfo.CompanyInfo.Name ? this.userInfo.UserInfo.CompanyInfo.Name : this.userInfo.OrdererName);
t.TransferDetails = [
];
var f = t.TransferDetails.push(new n.model.Detail(n.model.DetailName.BENEFICIARY_NAME, n.model.DetailDataType.String, this.Model.CreditAccountBeneficiary)),
e = t.TransferDetails.push(new n.model.Detail(n.model.DetailName.RegistrationNumber, n.model.DetailDataType.String, this.userInfo.VAT)),
o = t.TransferDetails.push(new n.model.Detail(n.model.DetailName.ORDERER_NAME, n.model.DetailDataType.String, this.userInfo.OrdererName));
return this.Model.TransferMethodImmediate && (r = t.TransferDetails.push(new n.model.Detail(n.model.DetailName.BANK_NAME, n.model.DetailDataType.String, this.Model.UseProfileProduct ? this.Model.CreditAccountBank.TypeName : this.Model.SelectedBank.TypeName)), u = t.TransferDetails.push(new n.model.Detail(n.model.DetailName.BIC_CODE, n.model.DetailDataType.String, this.Model.BicCode))),
t
},
i.prototype.initialiseSteps = function () {
var t = this,
i = [
],
u = {
templateUrl: 'Templates/Features/transfers/interbank/step1',
title: 'Στοιχεία Μεταφοράς'
},
r,
f;
return u.processStep = [
'$q',
'ProductsService',
'QueriesService',
function (i, r, u) {
var f = t.Model,
e = i.defer();
if (f.TransferMethodImmediate && !t.Model.Online) e.reject(t.STRINGS.transfersInformationMessageDetail);
 else {
var c = f.TransferType,
o = f.UseProfileProduct ? f.CreditAccount.Code : f.CreditAccountCode,
s = f.UseProfileProduct ? f.CreditAccount.TypeID : f.SelectedBank.TypeID,
h = u.checkIBAN({
InIBAN: o
});
h.then(function (n) {
var r,
i,
u;
if (null != n && n.ResultCode == 0) if (!f.TransferMethodImmediate || n.BIC_Online || n.BIC_Online_AVAIL) if (f.TransferMethodImmediate && !n.BIC_Online_AVAIL) r = t.STRINGS.b2bNotAvailErrorCutOff,
e.reject(r);
 else if (f.TransferMethodImmediate && !n.BIC_Online) r = t.STRINGS.b2bNotAvailErrorBank,
e.reject(r);
 else return s == 20042 && (f.FeeType = 0),
f.BIC_Online = n.BIC_Online,
f.BIC_Online_AVAIL = n.BIC_Online_AVAIL,
i = {
},
i.Amount = f.Amount,
i.DebitAccountNumber = f.DebitProduct.Code,
i.DebitAccountType = f.DebitProduct.TypeID,
i.CreditAccountNumber = o,
i.CreditAccountType = s,
i.ExpensesServiceType = f.TransferMethodImmediate ? 12 : f.ExpensesServiceType,
i.Currency = f.DebitProduct.CurrencyEnum,
i.FeeType = f.FeeType,
f.TransferMethodImmediate && (f.BicCode = i.BICCode = n.RelatedBIC, i.Country = 'GR'),
t.transfersService.GetTransferExpenses(i).then(function (n) {
  n.Fees ? (f.AmountLiteral = n.Fees.DebitAmountLiteral, f.Fees = n.Fees, e.resolve(!0))  : (r = t.getErrorMessage(n, 'Error.Message'), e.reject(r))
}, function (n) {
  var i = t.getErrorMessage(n, 'Error.Message');
  e.reject(i)
});
 else r = t.STRINGS.b2bNotAvailErrorBank,
e.reject(r);
 else u = t.getErrorMessage(n, 'Error.Message'),
e.reject(u)
}, function (n) {
var i = t.getErrorMessage(n, 'Error.Message');
e.reject(i)
})
}
return e.promise.then(function () {
return t.getOtpPayload()
}).then(function (n) {
return t.otpHandler.reset({
hints: {
  Requirement: String(2),
  Method: String(1)
},
payload: n
}).enquire()
}).catch (function (i) {
return t.$q.reject(n.utils.getErrorMsg(i))
})
}
],
i.push(u),
r = {
templateUrl: 'Templates/Features/transfers/interbank/step2',
title: 'Επιβεβαίωση Στοιχείων'
},
r.processStep = [
'$q',
'TransfersService',
'AppEventsService',
function (i, r, u) {
var f = t.Model,
e = i.defer();
return t.otpHandler.result().then(function () {
var i = t.createExecuteRequest(),
o,
s;
f.Details = i.TransferDetails;
o = function () {
u.publish(n.common.services.AppEventsService.InvalidateLookups_Event, [
  n.common.services.LookupsService.DebitAccounts_CacheKey,
  n.common.services.LookupsService.DebitAccountsForOrderedTransfer_CacheKey
]);
u.publish(n.common.services.AppEventsService.InvalidateAccounts_Event)
};
s = f.TransferMethodImmediate ? r.CheckFTSPayment(f.Amount, f.DebitProduct.CurrencyEnum, i.CreditProductCode, '', f.CreditAccountBeneficiary, f.BicCode, 'GR', '', !0)  : t.$q.when({
ResultCode: 0,
BICName: '',
BICAddress: '',
BIC_Online: !1,
BIC_Online_AVAIL: !1
});
t.preExecute(i);
t.isProfileProduct().finally (function () {
s.then(function (s) {
  if (s.ResultCode != 0 || (n.utils.isUndefinedOrNull(s) || !s.BIC_Online_AVAIL) && f.TransferMethodImmediate) s.ResultCode == 1 ? (f.HasErrors = !0, e.reject(s.Error.Message))  : (f.HasErrors = !0, e.reject(t.STRINGS.temporarilyUnavailable));
   else return r.ExecuteAlphaAccountTransfer(t.otpHandler.appendExtraInfoToPayload(i), f.Online).then(function (n) {
    var i = t.setTransactionStatus(n);
    i && (o(), t.addEventsPublishingForCorporate(u));
    e.resolve(!0)
  }, function (i) {
    f.HasErrors = !0;
    f.ErrorMessage = t.STRINGS.failedTransactionSystemError;
    n.utils.isUndefinedOrNull(i.Error) && i.data.Message == 'TimeoutError' ? f.ErrorMessage = t.STRINGS.promptForCheckErrorMsg : n.utils.isUndefinedOrNull(i.Error) || n.utils.isUndefinedOrNull(i.Error.Message) || (f.ErrorMessage = i.Error.Message);
    e.reject(f.ErrorMessage)
  })
}, function (n) {
  var i = t.getErrorMessage(n, 'Error.Message');
  e.reject(i)
})
})
}, function (n) {
e.reject(n)
}),
e.promise
}
],
i.push(r),
f = {
templateUrl: 'Templates/Features/transfers/interbank/step3',
title: 'Αποτελέσμα συναλλαγής'
},
i.push(f),
i
},
i.prototype.isCorporate = function () {
return !this.roleService.IsRetail()
},
i.prototype.getOtpPayload = function () {
var n = this.createExecuteRequest();
return this.preExecute(n),
n
},
i.$inject = [
'Model',
'debitAccounts',
'debitAccountsForOrderedTransfer',
'banks',
'interbankCreditAccounts',
'QueriesServiceProxy',
'TransfersService',
'$state',
'$modal',
'$scope',
'$injector',
'userInfo',
'StateHelperService',
'ProfileProductsService',
'$q',
'behaviorConfig',
'RegularExpressionService',
'$parse',
'ProductMatchingService',
'RoleService',
'$window',
'$rootScope',
'otpHandler'
],
i
}(r);
t.InterBankTransferWizard = u;
o = function (t) {
function i(i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k, d, g, nt, tt, it, rt) {
var ut = t.call(this, i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k, d, g, nt, tt, it, rt) || this,
et,
ft,
ot;
return ut.Model = i,
ut.debitAccounts = r,
ut.debitAccountsForOrderedTransfer = u,
ut.banks = f,
ut.interbankCreditAccounts = e,
ut.queriesServiceProxy = o,
ut.stateService = h,
ut.modal = c,
ut.scope = l,
ut.$injector = a,
ut.userInfo = v,
ut.stateHelperService = y,
ut.profileProductService = p,
ut.$q = w,
ut.behaviorConfig = b,
et = ut,
ft = et.stateHelperService.getStateData(),
ft && (ot = ft.Transaction ? ft.Transaction : ft, ut.Model = n.transactions.TransactionUtils.TransactionToInterBankTransferInfo(ot, ut.Model, ut.productMatchingService, null != ft.Transaction, r, e)),
ut.Model.FeeType = 1,
ut.Model.getTransactionType = function () {
return 22
},
null != e && e.length > 0 && (ut.Model.CreditAccount = e[0]),
ut
}
return __extends(i, t),
i.prototype.initialiseSteps = function () {
var n = t.prototype.initialiseSteps.call(this);
return n[0].templateUrl = 'Templates/Features/transfers/citibank/step1',
n
},
i.$inject = [
'Model',
'debitAccounts',
'debitAccountsForOrderedTransfer',
'banks',
'interbankCreditAccounts',
'QueriesServiceProxy',
'TransfersService',
'$state',
'$modal',
'$scope',
'$injector',
'userInfo',
'StateHelperService',
'ProfileProductsService',
'$q',
'behaviorConfig',
'RegularExpressionService',
'$parse',
'ProductMatchingService',
'RoleService',
'$window',
'$rootScope',
'otpHandler'
],
i
}(u);
t.CitiBankTransferWizard = o;
s = function (t) {
function i(i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k, d, g, nt, tt, it, rt, ut, ft) {
var et = t.call(this, i, r, u, l, a, v, y, p, w, b, d, g, tt, nt, rt, ft) || this,
ot,
st,
ht;
return et.Model = i,
et.debitAccounts = r,
et.debitAccountsForOrderedTransfer = u,
et.internationalCreditAccounts = f,
et.banks = e,
et.countries = o,
et.currencies = s,
et.transferReasons = h,
et.transfersService = c,
et.stateService = l,
et.modal = a,
et.scope = v,
et.$injector = y,
et.userInfo = p,
et.profileProductService = w,
et.queriesService = k,
et.$q = d,
et.parseService = g,
et.roleService = nt,
et.regularExpressionProvider = it,
et.productRequestType = n.server.ProductRequestType.INTERNATIONAL_CREDIT_ACCOUNTS,
et.isDateLocked = !1,
ot = et,
st = ot.stateHelperService.getStateData(),
st && (ht = st.Transaction ? et.queriesService.getTransactionTemplates(et.queriesService.getTransactionTemplatesRequest(st.ID, 0))  : et.$q.when({
ResultCode: 0,
Templates: [
{
Transaction: st
}
]
}), ht.then(function (t) {
t.ResultCode == 0 && (ot.Model = n.transactions.TransactionUtils.TransactionToInternationalTransferInfo(t.Templates[0].Transaction, ot.Model, ot.debitAccounts, ot.internationalCreditAccounts, ot.currencies, ot.transferReasons, ot.productMatchingService, null != st.Transaction, ot.countries))
})),
et.Model.TransactionDate = et.TransferPromptDateValue = n.utils.parseDateString(et.Model.DIASPromptDate),
et.internationalCreditAccounts.length == 0 && (et.Model.UseProfileProduct = !1),
et
}
return __extends(i, t),
Object.defineProperty(i.prototype, 'allowProfileProducts', {
get: function () {
return !this.IsBusy && this.internationalCreditAccounts.length > 0
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(i.prototype, 'allowNonProfileProducts', {
get: function () {
return !this.IsBusy && (this.userHasOtpEnabled || this.Model.IsJobSubmission)
},
enumerable: !0,
configurable: !0
}),
i.prototype.openTermsModal = function () {
var n = this;
n.modal.open({
templateUrl: 'Templates/Features/Transfers/TermsAndConditions',
controller: 'TermsAndConditionsModal as vm',
size: 'lg',
windowClass: 'custom terms'
})
},
i.prototype.GroupTransferReason = function (n) {
return ['460',
'470',
'480',
'490'].indexOf(n.Id) != - 1 ? n.Group : [
'500',
'510',
'520',
'530'
].indexOf(n.Id) != - 1 ? n.Group : [
'540',
'550',
'560',
'570',
'580'
].indexOf(n.Id) != - 1 ? n.Group : void 0
},
i.prototype.searchBic = function () {
var t = this,
i;
n.utils.isUndefinedOrNullorWhiteSpace(t.Model.CreditAccountCode) || (t.IsBusy = !0, i = t.modal.open({
templateUrl: 'Templates/common/modals/searchBic',
controller: 'SearchBicModalInstanceCtrl as vm',
windowClass: 'bicModal',
size: 'sm',
resolve: {
response: [
function () {
return t.queriesService.checkIBAN({
  InIBAN: t.Model.CreditAccountCode
})
}
]
}
}), i.result.then(function (n) {
t.Model.IbanValidationResult = n;
t.Model.BicCode = t.Model.IbanValidationResult.RelatedBIC
}).finally (function () {
t.IsBusy = !1
}))
},
i.prototype.canGetExpenses = function () {
return this.Model.Currency && this.Model.DebitProduct && this.Model.DebitProduct.Code && this.Model.DebitProduct.TypeID && (this.Model.CreditAccount && this.Model.CreditAccount.Code && this.Model.CreditAccount.TypeID && this.Model.CreditAccountCountry || this.Model.CreditAccountCode && this.Model.SelectedBank && this.Model.CreditAccountBankCountry.CountryIso && this.Model.BicCode) && this.Model.Amount && this.Model.FeeType != undefined
},
i.prototype.createExecuteRequest = function () {
var i = this.Model.UseProfileProduct ? this.Model.CreditAccount.Code : this.Model.CreditAccountCode,
f = this.Model.UseProfileProduct ? this.Model._CreditAccount.Beneficiary : this.Model.CreditAccountBeneficiary,
e = this.Model.UseProfileProduct ? this.Model.CreditAccountCountry.CountryIso : this.Model.CreditAccountBankCountry.CountryIso,
o = this.Model.UseProfileProduct ? this.Model.CreditAccountCountry.EnglishName : this.Model.CreditAccountBankCountry.EnglishName,
s = this.Model.UseProfileProduct ? this.Model.CreditAccountCountry.GreekName : this.Model.CreditAccountBankCountry.GreekName,
h = this.Model.UseProfileProduct ? this.Model._CreditAccount.Bank : this.Model.BICName,
t = {
},
r,
u,
c;
t.DebitProductCode = this.Model.DebitProduct.Code;
t.DebitProductType = this.Model.DebitProduct.TypeID;
t.DebitReason = this.Model.DebitReason;
t.CreditProductCode = i;
t.CreditProductType = this.Model.CreditAccountTypeID;
t.CreditReason = this.Model.CreditReason;
t.Amount = this.Model.Amount;
t.DebitProductCurrency = this.Model.DebitProduct.CurrencyEnum;
t.AmountCurrency = this.Model.Currency.Currency;
t.TransferType = this.Model.TransferType;
t.FeeType = 0;
t.Fees = this.Model.Fees;
t.Block = this.Model.IsAmountBlocked;
t.TransferDate = n.utils.toShortDateString(this.Model.TransactionDate);
r = t.DebitProductCurrency == 1 && this.Model.Currency.Currency == 1 ? 0 : 1;
(t.DebitReason == '' || t.DebitReason == undefined) && (i = this.Model.UseProfileProduct ? this.Model.CreditAccount.Code : this.Model.CreditAccountCode, t.DebitReason = 'AWB ' + i.substr( - 15));
(t.CreditReason == '' || t.CreditReason == undefined) && (t.CreditReason = this.roleService.IsRetail() ? 'AWB ' + this.userInfo.Name + ' ' + this.userInfo.SurName : this.userInfo.UserInfo.CompanyInfo.Name ? this.userInfo.UserInfo.CompanyInfo.Name : this.userInfo.OrdererName);
u = this.Model.Rates.AmountInUSD || 0;
t.TransferDetails = [
];
var l = t.TransferDetails.push(new n.model.Detail(n.server.DetailName.DebitCurrencyAmount, 2, this.Model.Rates.AmountInCurrency.toString().replace('.', ','))),
a = t.TransferDetails.push(new n.model.Detail(n.server.DetailName.AmountInEUR, 2, this.Model.Rates.AmountInEUR.toString().replace('.', ','))),
v = t.TransferDetails.push(new n.model.Detail(n.server.DetailName.AmountInUSD, 2, u.toString().replace('.', ','))),
y = t.TransferDetails.push(new n.model.Detail(n.server.DetailName.BuyRate_IN, 2, this.Model.Rates.BuyRate.toString().replace('.', ','))),
p = t.TransferDetails.push(new n.model.Detail(n.server.DetailName.SellRate_OUT, 2, this.Model.Rates.SellRate.toString().replace('.', ','))),
w = t.TransferDetails.push(new n.model.Detail(n.server.DetailName.MTFRate_IN, 2, this.Model.Rates.BaseRate.toString().replace('.', ','))),
b = t.TransferDetails.push(new n.model.Detail(n.server.DetailName.DebitCurrencyExpenses, 2, this.Model.Fees.DebitProviderFeesAmount.toString().replace('.', ','))),
k = t.TransferDetails.push(new n.model.Detail(n.server.DetailName.ConvertionFlag, 1, r)),
d = t.TransferDetails.push(new n.model.Detail(n.server.DetailName.ADDRESS, 0, this.Model.CreditAccountBeneficiaryAddress)),
g = t.TransferDetails.push(new n.model.Detail(n.server.DetailName.BANK_NAME, 0, h)),
nt = t.TransferDetails.push(new n.model.Detail(n.server.DetailName.ContactNumber, 0, this.Model.ContactNumber)),
tt = t.TransferDetails.push(new n.model.Detail(n.server.DetailName.CountryISOCode, 0, e)),
it = t.TransferDetails.push(new n.model.Detail(n.server.DetailName.CountryDescrEn, 0, o)),
rt = t.TransferDetails.push(new n.model.Detail(n.server.DetailName.CountryDescrEl, 0, s)),
ut = t.TransferDetails.push(new n.model.Detail(n.server.DetailName.BIC_CODE, 0, this.Model.BicCode)),
ft = t.TransferDetails.push(new n.model.Detail(n.server.DetailName.BENEFICIARY_NAME, 0, f)),
et = t.TransferDetails.push(new n.model.Detail(n.server.DetailName.ORDERER_NAME, 0, this.userInfo.OrdererName));
return null != this.Model.TransferReason && (t.TransferDetails.push(new n.model.Detail(n.server.DetailName.BOP_CODE, 0, this.Model.TransferReason.Code)), t.TransferDetails.push(new n.model.Detail(n.server.DetailName.BOP_ID_INTERNAL, 0, this.Model.TransferReason.Id))),
c = t.TransferDetails.push(new n.model.Detail(n.server.DetailName.RegistrationNumber, 0, this.userInfo.VAT)),
t
},
i.prototype.initialiseSteps = function () {
var t = [
],
u = {
templateUrl: 'Templates/Features/transfers/international/step1',
title: 'Στοιχεία Μεταφοράς'
},
i,
r;
return u.processStep = [
'$q',
'ProductsService',
'QueriesService',
'STRINGS',
function (t, i, r) {
var u = this,
f = t.defer(),
e;
return !u.roleService.isDemo() && !n.utils.isUndefinedOrNullorWhiteSpace(u.Model.BicCode) && !n.utils.isUndefinedOrNullorWhiteSpace(u.Model.CreditAccountBankCountry.CountryIso) && u.Model.CreditAccountBankCountry.CountryIso != u.Model.BicCode.substring(4, 6) ? (f.reject(u.STRINGS.internationalBicCodeCountryValidation), f.promise)  : (e = n.utils.isUndefinedOrNullorWhiteSpace(u.Model.BicCode) && u.Model.CreditAccountBankCountry.EUFlag ? u.queriesService.checkIBAN({
InIBAN: u.Model.CreditAccountCode
})  : u.$q.when({
ResultCode: 1,
Error: {
Message: ''
},
RelatedBIC: ''
}), e.then(function (i) {
var s,
e,
l,
a;
if (i.ResultCode == 0 ? (u.Model.BicCode = i.RelatedBIC, n.utils.isUndefinedOrNullorWhiteSpace(u.Model.BicCode) && (f.reject(u.STRINGS.noBicCodeError), s = !0))  : n.utils.isUndefinedOrNullorWhiteSpace(u.Model.BicCode) && u.Model.CreditAccountBankCountry.EUFlag && (n.utils.isUndefinedOrNull(i.Error) || n.utils.isUndefinedOrNullorWhiteSpace(i.Error.Message) ? f.reject(u.STRINGS.systemError)  : f.reject(i.Error.Message), s = !0), s) return f.promise;
e = u.Model;
8 == e.BicCode.trim().length && (e.BicCode = e.BicCode.trim() + 'XXX');
var b = u.Model.TransferType,
h = e.UseProfileProduct ? e.CreditAccount.Code : e.CreditAccountCode,
k = e.UseProfileProduct ? e.CreditAccount.TypeID : 0,
v = r.checkProduct(r.getCheckProductRequest(h, e.BicCode)),
y = r.getRates({
InCurrency: e.DebitProduct.CurrencyEnum,
OutCurrency: e.Currency.Currency,
Amount: e.Amount
}),
p = e.UseProfileProduct ? e._CreditAccount.Beneficiary : e.CreditAccountBeneficiary,
c = e.UseProfileProduct ? e.CreditAccountCountry.CountryIso : e.CreditAccountBankCountry.CountryIso,
w = u.transfersService.CheckFTSPayment(e.Amount, e.Currency.Currency, h, e.CreditAccountBeneficiaryAddress, p, e.BicCode, c, e.ContactNumber),
o = {
};
o.Amount = e.Amount;
o.DebitAccountNumber = e.DebitProduct.Code;
o.DebitAccountType = e.DebitProduct.TypeID;
o.CreditAccountNumber = h;
o.CreditAccountType = e.CreditAccountTypeID;
o.ExpensesServiceType = e.ExpensesServiceType;
o.Currency = e.Currency.Currency;
o.FeeType = e.FeeType;
o.BICCode = e.BicCode;
o.Country = c;
l = u.transfersService.GetTransferExpenses(o);
a = function (n) {
return u.transfersService.AmountAnalysis(n)
};
t.all({
checkProduct: v,
expenses: l,
rates: y,
fts: w
}).then(function (n) {
var i = n.checkProduct,
o,
r,
t;
if (i.IsValid || u.Model.CreditAccountBankCountry.SupportsIBAN != !0 || (u.Model.HasErrors = !0, o = i.Error ? i.Error.Message : u.STRINGS.failedTransaction, f.reject(o)), n.expenses.Fees) r = n.expenses,
e.AmountLiteral = r.Fees.DebitAmountLiteral,
e.Fees = r.Fees;
 else return e.HasErrors = !0,
e.ErrorMessage = n.expenses.Error ? n.expenses.Error.Message : u.STRINGS.failedTransaction,
window.scrollTo(0, 0),
f.reject(e.ErrorMessage),
f.promise;
n.rates.AmountInEUR ? e.Rates = n.rates : (e.HasErrors = !0, e.ErrorMessage = n.rates.Error ? n.rates.Error.Message : u.STRINGS.failedTransactionSystemError, window.scrollTo(0, 0), f.reject(e.ErrorMessage));
n.fts.ResultCode != 0 ? (u.Model.HasErrors = !0, u.Model.ErrorMessage = n.fts.Error.Message, f.reject(n.fts.Error.Message))  : (e.FTSPayment = n.fts, e.BICName = e.FTSPayment.BICName, e.BICAddress = e.FTSPayment.BICAddress);
u.Model.HasErrors = !1;
u.Model.ErrorMessage = '';
u.Model.HasErrors ? f.resolve(!0)  : (t = {
}, t.BuyRate_IN = e.Rates.BuyRate, t.DebiCurrencyAmount = e.Rates.AmountInCurrency, t.DebitAccountCurrency = e.DebitProduct.CurrencyEnum, t.Fees = e.Fees, t.MTFRate_IN = e.Rates.BaseRate, t.OrderAmount = e.Amount, t.OrderAmountCurrency = e.Currency.Currency, t.SellRate_OUT = e.Rates.SellRate, a(t).then(function (n) {
  n.ResultCode == 0 ? (e.AmountAnalysis = n, f.resolve(!0))  : (e.HasErrors = !0, e.ErrorMessage = n.Error.Message, f.resolve(!0))
}, function (n) {
  e.HasErrors = !0;
  e.ErrorMessage = n.Error.Message;
  f.resolve(!0)
}))
}, function (n) {
var t = u.getErrorMessage(n, 'Error.Message');
f.reject(t)
})
}, function (n) {
var t = u.getErrorMessage(n, 'Error.Message');
f.reject(t)
}), f.promise.then(function () {
return u.getOtpPayload()
}).then(function (n) {
return u.otpHandler.reset({
hints: {
  Requirement: String(2),
  Method: String(1)
},
payload: n
}).enquire()
}).catch (function (t) {
return u.$q.reject(n.utils.getErrorMsg(t))
}))
}
],
t.push(u),
i = {
templateUrl: 'Templates/Features/transfers/international/step2',
title: 'Επιβεβαίωση Στοιχείων'
},
i.processStep = [
'$q',
'AppEventsService',
function (t, i) {
var r = this,
u = r.Model,
f = t.defer();
return r.otpHandler.result().then(function () {
var t = r.createExecuteRequest(),
e;
u.Details = t.TransferDetails;
e = function () {
i.publish(n.common.services.AppEventsService.InvalidateLookups_Event, [
  n.common.services.LookupsService.DebitAccounts_CacheKey,
  n.common.services.LookupsService.DebitAccountsForOrderedTransfer_CacheKey
]);
i.publish(n.common.services.AppEventsService.InvalidateAccounts_Event)
};
r.preExecute(t);
r.isProfileProduct().finally (function () {
r.transfersService.ExecuteAlphaAccountTransferInternational(r.otpHandler.appendExtraInfoToPayload(t)).then(function (n) {
  var t = r.setTransactionStatus(n);
  t && (e(), r.addEventsPublishingForCorporate(i));
  f.resolve(!0)
}, function (t) {
  u.HasErrors = !0;
  u.ErrorMessage = r.STRINGS.failedTransactionSystemError;
  n.utils.isUndefinedOrNull(t.Error) && t.data.Message == 'TimeoutError' ? u.ErrorMessage = r.STRINGS.promptForCheckErrorMsg : n.utils.isUndefinedOrNull(t.Error) || n.utils.isUndefinedOrNull(t.Error.Message) || (u.ErrorMessage = t.Error.Message);
  f.reject(u.ErrorMessage)
})
})
}, function (n) {
f.reject(n)
}),
f.promise
}
],
t.push(i),
r = {
templateUrl: 'Templates/Features/transfers/international/step3',
title: 'Αποτελέσμα συναλλαγής'
},
r.processStep = [
'$q',
function (n) {
var i = this,
r = i.Model,
t = n.defer();
return t.resolve(!1),
t.promise
}
],
t.push(r),
t
},
i.prototype.onCurrencyChange = function () {
this.Model.Currency.Currency !== n.server.Currency.EUR ? (this.Model.TransactionDate = this.TransferPromptDateValue, this.isDateLocked = !0)  : this.isDateLocked = !1
},
i.prototype.getOtpPayload = function () {
var n = this.createExecuteRequest();
return this.preExecute(n),
n
},
i.$inject = [
'Model',
'debitAccounts',
'debitAccountsForOrderedTransfer',
'internationalCreditAccounts',
'banks',
'countries',
'currencies',
'transferReasons',
'TransfersService',
'$state',
'$modal',
'$scope',
'$injector',
'userInfo',
'ProfileProductsService',
'StateHelperService',
'QueriesService',
'$q',
'$parse',
'RoleService',
'ProductMatchingService',
'RegularExpressionService',
'$window',
'$rootScope',
'otpHandler'
],
i
}(r);
t.InternationalTransferWizard = s;
n.transfers.mainModule.controller('RatesModalController', h);
n.transfers.mainModule.controller('IntraBankTransferWizard', e);
n.transfers.mainModule.controller('InterBankTransferWizard', u);
n.transfers.mainModule.controller('InternationalTransferWizard', s);
n.transfers.mainModule.controller('CitiBankTransferWizard', o)
}) (t = n.transfers || (n.transfers = {
}))
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(),
function (n) {
var t;
(function (t) {
var f = function () {
function n(n, t) {
this.ID = n;
this.Priority = t
}
return n
}(),
r,
i,
u;
t.DataForUpdateOrderOnly = f;
r = function () {
function n() {
this.OTP = '';
this.ProductTitle = ''
}
return n
}();
t.AddProductFromTemplateToProfile = r;
i = function () {
function t(n) {
this.Actions = [
];
this.HasErrors = !1;
this.ErrorMessage = '';
n ? this.Template = n : (this.Actions = [
], this.Template = {
Transaction: {
Details: [
]
}
})
}
return Object.defineProperty(t.prototype, 'Order', {
get: function () {
return this.Template.Priority
},
set: function (n) {
this.Template.Priority = n
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(t.prototype, 'DebitReason', {
get: function () {
return this.Template ? n.transactions.TransactionUtils.getDetailValue(this.Template.Transaction, n.server.DetailName.DebitReason)  : ''
},
set: function (t) {
n.transactions.TransactionUtils.setDetailValue(this.Template.Transaction, n.server.DetailName.DebitReason, 0, t)
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(t.prototype, 'CreditReason', {
get: function () {
return this.Template ? n.transactions.TransactionUtils.getDetailValue(this.Template.Transaction, n.server.DetailName.CreditReason)  : ''
},
set: function (t) {
n.transactions.TransactionUtils.setDetailValue(this.Template.Transaction, n.server.DetailName.CreditReason, 0, t)
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(t.prototype, 'RemmitanceInfo', {
get: function () {
return this.Template ? n.transactions.TransactionUtils.getDetailValue(this.Template.Transaction, n.server.DetailName.RemmitanceInfo)  : ''
},
set: function (t) {
n.transactions.TransactionUtils.setDetailValue(this.Template.Transaction, n.server.DetailName.RemmitanceInfo, 0, t)
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(t.prototype, 'BeneficiaryName', {
get: function () {
return this.Template ? n.transactions.TransactionUtils.getDetailValue(this.Template.Transaction, n.server.DetailName.BENEFICIARY_NAME)  : ''
},
set: function (t) {
n.transactions.TransactionUtils.setDetailValue(this.Template.Transaction, n.server.DetailName.BENEFICIARY_NAME, 0, t)
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(t.prototype, 'RegistrationNumber', {
get: function () {
return this.Template ? n.transactions.TransactionUtils.getDetailValue(this.Template.Transaction, n.server.DetailName.RegistrationNumber)  : ''
},
set: function (t) {
n.transactions.TransactionUtils.setDetailValue(this.Template.Transaction, n.server.DetailName.RegistrationNumber, 0, t)
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(t.prototype, 'OrdererName', {
get: function () {
return this.Template ? n.transactions.TransactionUtils.getDetailValue(this.Template.Transaction, n.server.DetailName.ORDERER_NAME)  : ''
},
set: function (t) {
n.transactions.TransactionUtils.setDetailValue(this.Template.Transaction, n.server.DetailName.ORDERER_NAME, 0, t)
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(t.prototype, 'FeeType', {
get: function () {
return this.Template ? n.transactions.TransactionUtils.getDetailValue(this.Template.Transaction, n.server.DetailName.FeeType)  : ''
},
set: function (t) {
n.transactions.TransactionUtils.setDetailValue(this.Template.Transaction, n.server.DetailName.FeeType, 0, t)
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(t.prototype, 'DebitFees', {
get: function () {
return this.Template ? n.transactions.TransactionUtils.getDetailValue(this.Template.Transaction, n.server.DetailName.DebitFees)  : ''
},
set: function (t) {
n.transactions.TransactionUtils.setDetailValue(this.Template.Transaction, n.server.DetailName.DebitFees, 2, t)
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(t.prototype, 'Company', {
get: function () {
return this.Template ? n.transactions.TransactionUtils.getDetailValue(this.Template.Transaction, n.server.DetailName.COMPANY)  : ''
},
set: function (t) {
n.transactions.TransactionUtils.setDetailValue(this.Template.Transaction, n.server.DetailName.COMPANY, 0, t)
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(t.prototype, 'ContactNumber', {
get: function () {
return this.Template ? n.transactions.TransactionUtils.getDetailValue(this.Template.Transaction, n.server.DetailName.ContactNumber)  : ''
},
set: function (t) {
n.transactions.TransactionUtils.setDetailValue(this.Template.Transaction, n.server.DetailName.ContactNumber, 0, t)
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(t.prototype, 'CountryDescrEn', {
get: function () {
return this.Template ? n.transactions.TransactionUtils.getDetailValue(this.Template.Transaction, n.server.DetailName.CountryDescrEn)  : ''
},
set: function (t) {
n.transactions.TransactionUtils.setDetailValue(this.Template.Transaction, n.server.DetailName.CountryDescrEn, 0, t)
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(t.prototype, 'OrdererAddress', {
get: function () {
return this.Template ? n.transactions.TransactionUtils.getDetailValue(this.Template.Transaction, n.server.DetailName.ORDERER_ADDRESS)  : ''
},
set: function (t) {
n.transactions.TransactionUtils.setDetailValue(this.Template.Transaction, n.server.DetailName.ORDERER_ADDRESS, 0, t)
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(t.prototype, 'BeneficiaryAddress', {
get: function () {
return this.Template ? n.transactions.TransactionUtils.getDetailValue(this.Template.Transaction, n.server.DetailName.ADDRESS)  : ''
},
set: function (t) {
n.transactions.TransactionUtils.setDetailValue(this.Template.Transaction, n.server.DetailName.ADDRESS, 0, t)
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(t.prototype, 'BicCode', {
get: function () {
return this.Template ? n.transactions.TransactionUtils.getDetailValue(this.Template.Transaction, n.server.DetailName.BIC_CODE)  : ''
},
set: function (t) {
n.transactions.TransactionUtils.setDetailValue(this.Template.Transaction, n.server.DetailName.BIC_CODE, 0, t)
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(t.prototype, 'ImportedGoodName', {
get: function () {
return this.Template ? n.transactions.TransactionUtils.getDetailValue(this.Template.Transaction, n.server.DetailName.SICOM_MERCH_DESCR)  : ''
},
set: function (t) {
n.transactions.TransactionUtils.setDetailValue(this.Template.Transaction, n.server.DetailName.SICOM_MERCH_DESCR, 0, t)
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(t.prototype, 'ImportedGoodCountry', {
get: function () {
return this.Template ? n.transactions.TransactionUtils.getDetailValue(this.Template.Transaction, n.server.DetailName.SICOM_MERCH_COUNTRY)  : ''
},
set: function (t) {
n.transactions.TransactionUtils.setDetailValue(this.Template.Transaction, n.server.DetailName.SICOM_MERCH_COUNTRY, 0, t)
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(t.prototype, 'ImportedGoodReceiptNumber', {
get: function () {
return this.Template ? n.transactions.TransactionUtils.getDetailValue(this.Template.Transaction, n.server.DetailName.SICOM_INVOICE_NO)  : ''
},
set: function (t) {
n.transactions.TransactionUtils.setDetailValue(this.Template.Transaction, n.server.DetailName.SICOM_INVOICE_NO, 0, t)
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(t.prototype, 'ImportedGoodReceiptDate', {
get: function () {
return this.Template ? n.transactions.TransactionUtils.getDetailValue(this.Template.Transaction, n.server.DetailName.SICOM_INVOICE_DATE)  : ''
},
set: function (t) {
n.transactions.TransactionUtils.setDetailValue(this.Template.Transaction, n.server.DetailName.SICOM_INVOICE_DATE, 0, t)
},
enumerable: !0,
configurable: !0
}),
t
}();
t.MyTransferTemplatesBase = i;
u = function (t) {
function i() {
var i = t.call(this) || this;
return i.TemplateID = '',
i.AUN = '',
i.TemplateDescription = '',
i.TemplateType = 0,
i.AddProductFromTemplateToProfile = new n.model.AddProductFromTemplateToProfile,
i
}
return __extends(i, t),
i
}(i);
t.AddMyTransferTemplateViewModel = u
}) (t = n.model || (n.model = {
}))
}(alpha || (alpha = {
})),
function (n) {
var t;
(function (t) {
var i = function () {
function n() {
this.IsBusy = !1;
this.showValidationErrors = !1;
this.showNoRecordsFound = !1;
this.HasErrors = !1;
this.ErrorMessage = '';
this.HasMore = !1;
this.TotalRecords = 0;
this.ReplyRecords = 0;
this.LastPageIndex = ''
}
return n
}(),
r,
u,
f,
e;
t.MyTransfersControllerBase = i;
r = function (t) {
function i(i, r, u, f, e, o, s) {
var c = t.call(this) || this,
h;
return c.$scope = i,
c.QueriesService = r,
c.$stateParams = u,
c.transactionActionsService = f,
c.ProfileProductsService = e,
c.AppEventsService = o,
c.SharedDataService = s,
c.Templates = [
],
c.Model = [
],
h = c,
h.IsBusy = !0,
e.getTransactionTemplates(0).then(function (t) {
t.ReplyRecords > 0 && (h.HasMore = t.HasMore, h.TotalRecords = t.TotalRecords, h.LastPageIndex = t.CurrentPageIndex, h.ReplyRecords = t.ReplyRecords, t.Templates.map(function (t) {
var i = new n.model.MyTransferTemplatesBase(t);
h.transactionActionsService.decorateTransactionTemplateViewModel(i, t);
h.Templates.push(i)
}), h.Model = h.Templates, s.SetControllerModel(h.$scope, n.server.Controllers.MyTransfersController, h.Model))
}, function (n) {
h.HasErrors = !0;
h.ErrorMessage = n.Error.Message
}).finally (function () {
h.IsBusy = !1
}),
c
}
return __extends(i, t),
i.prototype.persistOrder = function (t, i) {
var r = new n.model.DataForUpdateOrderOnly(t.Template.ID, t.Order),
u = new n.model.DataForUpdateOrderOnly(i.Template.ID, i.Order),
f = [
r,
u
],
e = this;
return this.QueriesService.setTransactionTemplateOrder(3, f).then(function (r) {
r.ResultCode == 0 ? e.AppEventsService.publish(n.common.services.AppEventsService.InvalidateTransferTemplates_Event)  : this.rollbackOrder(t, i)
}, function () {
this.rollbackOrder(t, i)
})
},
i.prototype.rollbackOrder = function (n, t) {
var i = t.Order;
t.Order = n.Order;
n.Order = i
},
i.$inject = [
'$scope',
'QueriesService',
'$stateParams',
'TransactionActionsService',
'ProfileProductsService',
'AppEventsService',
'SharedDataService'
],
i
}(i);
t.MyTransfersController = r;
n.transfers.mainModule.controller('MyTransfersController', r);
u = function (t) {
function i(i, r, u, f, e, o, s, h, c, l) {
var a = t.call(this) || this;
return a.QueriesService = i,
a.StateHelperService = r,
a.$q = u,
a.$scope = f,
a.$state = e,
a.AppEventsService = o,
a.profileProductsService = s,
a.Model = h,
a.countries = c,
a.otpHandler = l,
a.Model.Template.Transaction.Details.forEach(function (t) {
t.Name == n.server.DetailName.CountryISOCode && (a.countryCode = t.Value)
}),
a
}
return __extends(i, t),
Object.defineProperty(i.prototype, 'otpKey', {
get: function () {
return this.otpHandler.caller
},
enumerable: !0,
configurable: !0
}),
i.prototype.saveTemplate = function () {
var t = this,
i;
return this.HasErrors = !1,
this.showValidationErrors = !0,
n.utils.forceValidation(this.$scope.form),
this.$scope.form.$invalid ? void 0 : (this.IsBusy = !0, i = this.Model.AddProductFromTemplateToProfile, this.otpHandler.result().then(function () {
return i ? t.otpHandler.appendExtraInfoToPayload(i)  : i
}).then(function (n) {
return t.QueriesService.setTransactionTemplate(0, t.Model.Template.ID, t.Model.Template, t.Model.Template.Transaction.TransactionAUN, t.Model.TemplateDescription, 0, n)
}).then(function (i) {
if (i.ResultCode !== 0) return t.$q.reject(i);
t.AppEventsService.publish(n.common.services.AppEventsService.InvalidateTransferTemplates_Event);
t.Model.AddProductFromTemplateToProfile && t.AppEventsService.publish(n.common.services.AppEventsService.InvalidateAccounts_Event);
t.$state.go('root.transfers.myTransfers.list', {
}, {
location: 'replace'
})
}).catch (function (i) {
t.HasErrors = !0;
t.ErrorMessage = n.utils.getErrorMsg(i)
}).finally (function () {
t.IsBusy = !1
}))
},
i.$inject = [
'QueriesService',
'StateHelperService',
'$q',
'$scope',
'$state',
'AppEventsService',
'ProfileProductsService',
'Model',
'countries',
'otpHandler'
],
i
}(i);
t.MyTransfersAddController = u;
n.transfers.mainModule.controller('MyTransfersAddController', u);
f = function (t) {
function i(i, r, u, f, e, o) {
var s = t.call(this) || this;
s.QueriesService = i;
s.$state = r;
s.$modalInstance = u;
s.$stateParams = f;
s.AppEventsService = e;
s.SharedDataService = o;
var a = s,
h = f.id,
c = o.GetControllerModel(n.server.Controllers.MyTransfersController),
l = c.filter(function (n) {
return n.Template.ID == h
});
return s.Model = l[0],
s
}
return __extends(i, t),
i.prototype.close = function () {
this.$modalInstance.close()
},
i.prototype.deleteTemplate = function () {
var t = this;
t.IsBusy = !0;
t.QueriesService.setTransactionTemplate(2, t.Model.Template.ID, t.Model.Template, t.Model.Template.Transaction.TransactionAUN, t.Model.Template.Description, 0).then(function () {
t.IsBusy = !1;
t.AppEventsService.publish(n.common.services.AppEventsService.InvalidateTransferTemplates_Event);
t.$modalInstance.close(!0)
}, function (n) {
t.IsBusy = !1;
t.HasErrors = !0;
t.ErrorMessage = n.Error.Message
})
},
i.$inject = [
'QueriesService',
'$state',
'$modalInstance',
'$stateParams',
'AppEventsService',
'SharedDataService'
],
i
}(i);
t.MyTransfersDeleteController = f;
n.transfers.mainModule.controller('MyTransfersDeleteController', f);
e = function (t) {
function i(i, r, u, f, e, o, s) {
var h = t.call(this) || this;
return h.QueriesService = i,
h.$state = r,
h.Model = u,
h.$scope = f,
h.countries = e,
h.AppEventsService = o,
h.STRINGS = s,
h.Model.Template.Transaction.Details.forEach(function (t) {
t.Name == n.server.DetailName.CountryISOCode && (h.countryCode = t.Value)
}),
h
}
return __extends(i, t),
i.prototype.updateTemplate = function () {
var t = this;
t.showValidationErrors = !0;
n.utils.forceValidation(t.form);
t.form.$invalid || (t.IsBusy = !0, t.QueriesService.setTransactionTemplate(1, t.Model.Template.ID, t.Model.Template, t.Model.Template.Transaction.TransactionAUN, t.Model.Template.Description, 0).then(function (i) {
i.ResultCode == 0 ? (t.IsBusy = !1, t.AppEventsService.publish(n.common.services.AppEventsService.InvalidateTransferTemplates_Event), t.$state.go('root.transfers.myTransfers.list'))  : (t.IsBusy = !1, t.HasErrors = !0, t.ErrorMessage = n.utils.isUndefinedOrNull(i.Error) ? t.STRINGS.failedTransaction : i.Error.Message)
}, function (i) {
t.IsBusy = !1;
t.HasErrors = !0;
t.ErrorMessage = n.utils.isUndefinedOrNull(i.Error) ? t.STRINGS.systemError : i.Error.Message
}))
},
i.$inject = [
'QueriesService',
'$state',
'Model',
'$scope',
'countries',
'AppEventsService',
'STRINGS'
],
i
}(i);
t.MyTransfersEditController = e;
n.transfers.mainModule.controller('MyTransfersEditController', e)
}) (t = n.transfers || (n.transfers = {
}))
}(alpha || (alpha = {
})),
function (n) {
var t;
(function (t) {
var i = function () {
function t(t) {
this.showTransferMenu = !0;
this.showCitibankTransfers = !1;
this.showTransferMenu = !0;
var i = this;
t.IsInVersions(n.constants.versionFilters.CITIBANK_TRANSFERS).then(function (n) {
i.showCitibankTransfers = n
})
}
return t.$inject = [
'VersionFilterService'
],
t
}();
t.NewTransferController = i;
n.transfers.mainModule.controller('NewTransferController', i)
}) (t = n.transfers || (n.transfers = {
}))
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(),
function (n) {
var t;
(function (t) {
var i = function () {
function n() {
this.HasErrors = !1;
this.ErrorMessage = ''
}
return n
}(),
u,
r,
f;
t.RecurringTransferBase = i;
u = function (n) {
function t(t) {
var i = n.call(this) || this;
return i.productsService = t,
i.HasMore = !1,
i.TotalRecords = 0,
i.ReplyRecords = 0,
i.MaxRecords = 0,
i.LastPageIndex = '',
i.DocumentRequestType = 4,
i.StandingOrders = [
],
i.documentData = i.productsService.getStandingOrdersRequest('', i.MaxRecords, i.LastPageIndex),
i.documentData.DocumentRequestType = i.DocumentRequestType,
i
}
return __extends(t, n),
t
}(i);
t.RecurringTransfersViewModel = u;
r = function (n) {
function t() {
var t = n.call(this) || this;
return t.OTP = '',
t.StandingOrder = {
},
t
}
return __extends(t, n),
t
}(i);
t.RecurringTransferVM = r;
f = function (t) {
function i() {
var n = t.call(this) || this;
return n.StandingOrder = {
},
n.DebitAccount = undefined,
n.CreditAccount = undefined,
n.CreditAccountCode = '',
n.Response = {
},
n.UseProfileProduct = !0,
n.Online = !1,
n
}
return __extends(i, t),
Object.defineProperty(i.prototype, 'CurrentWorkingDate', {
get: function () {
return this._CurrentWorkingDate
},
set: function (t) {
this._CurrentWorkingDate = t;
this.CurrentWorkingDateValue = n.utils.parseDateString(t)
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(i.prototype, 'NextWorkingDate', {
get: function () {
return this._NextWorkingDate
},
set: function (t) {
this._NextWorkingDate = t;
this.NextWorkingDateValue = n.utils.parseDateString(t)
},
enumerable: !0,
configurable: !0
}),
i
}(r);
t.NewRecurringTransferVM = f
}) (t = n.model || (n.model = {
}))
}(alpha || (alpha = {
})),
function (n) {
var t;
(function (t) {
var i = function () {
function n() {
this.HasErrors = !1;
this.ErrorMessage = '';
this.IsBusy = !1;
this.showValidationErrors = !1
}
return Object.defineProperty(n.prototype, 'allowProfileProducts', {
get: function () {
return !this.IsBusy
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(n.prototype, 'allowNonProfileProducts', {
get: function () {
return !this.IsBusy
},
enumerable: !0,
configurable: !0
}),
n
}(),
u,
r,
f,
e,
o;
t.TransfersRecurringControllerBase = i;
u = function (n) {
function t(t, i, r, u) {
var f = n.call(this) || this;
return f.Model = t,
f.QueriesService = i,
f.SharedDataService = r,
f.$scope = u,
f
}
return __extends(t, n),
t.prototype.loadMore = function () {
var n = this,
t = n.QueriesService.getStandingOrders(n.QueriesService.getStandingOrdersRequest('', 10, n.Model.LastPageIndex)).then(function (t) {
return n.Model.StandingOrders = n.Model.StandingOrders.concat(t.StandingOrders),
n.Model.HasMore = t.HasMore,
n.Model.ReplyRecords = n.Model.ReplyRecords + t.ReplyRecords,
n.Model.TotalRecords = n.Model.TotalRecords + t.TotalRecords,
n.Model.LastPageIndex = t.CurrentPageIndex,
this.Model
}, function () {
return n.Model.HasErrors = !0,
n.Model.ErrorMessage = 'Could not get recurring transfers information.',
this.Model
})
},
t.$inject = [
'Model',
'QueriesService',
'SharedDataService',
'$scope'
],
t
}(i);
t.TransfersRecurringController = u;
n.transfers.mainModule.controller('TransfersRecurringController', u);
r = function (n) {
function t(t, i) {
var r = n.call(this) || this;
return r.Model = t,
r.$state = i,
r.SupportsDeletion = !1,
r
}
return __extends(t, n),
t.$inject = [
'Model',
'$state',
'SharedDataService',
'$scope'
],
t
}(i);
t.TransfersRecurringDetailsController = r;
n.transfers.mainModule.controller('TransfersRecurringDetailsController', r);
f = function (t) {
function i(i, r, u, f) {
var e = t.call(this, i, r) || this;
return e.Model = i,
e.$state = r,
e.SharedDataService = u,
e.$scope = f,
e.SharedDataService.SetControllerModel(e.$scope, n.server.Controllers.TransferRecurringDeleteController, i),
e.SupportsDeletion = !0,
e
}
return __extends(i, t),
i.$inject = [
'Model',
'$state',
'SharedDataService',
'$scope'
],
i
}(r);
t.TransferRecurringDeleteController = f;
n.transfers.mainModule.controller('TransferRecurringDeleteController', f);
e = function (t) {
function i(n, i, r, u, f) {
var e = t.call(this) || this;
return e.$modalInstance = n,
e.TransfersService = i,
e.$state = r,
e.$scope = u,
e.SharedDataService = f,
e.Success = !1,
e.Failed = !1,
e
}
return __extends(i, t),
i.prototype.close = function () {
this.$modalInstance.close()
},
i.prototype.finish = function () {
this.Success ? this.onSuccess()  : this.onFailed()
},
i.prototype.onFailed = function () {
this.close()
},
i.prototype.onSuccess = function () {
this.$modalInstance.close(!0)
},
i.prototype.deleteItem = function () {
var t = this,
r = this.SharedDataService.GetControllerModel(n.server.Controllers.TransferRecurringDeleteController),
i,
u;
t.showValidationErrors = !0;
n.utils.forceValidation(t.form);
t.form.$invalid || (t.IsBusy = !0, i = {
}, i.Action = 2, i.StandingOrderNumber = r.StandingOrder.StandingOrderNumber, i.OTP = r.OTP, u = t.TransfersService.ModifyStandingOrders(i).then(function (n) {
n && 0 == n.ResultCode ? t.Success = !0 : t.Failed = !0
}, function () {
t.Failed = !0
}).finally (function () {
t.IsBusy = !1
}))
},
i.$inject = [
'$modalInstance',
'TransfersService',
'$state',
'$scope',
'SharedDataService'
],
i
}(i);
t.TransfersRecurringDeleteConfirmationController = e;
n.transfers.mainModule.controller('TransfersRecurringDeleteConfirmationController', e);
o = function (t) {
function i(n, i, r, u, f, e, o, s, h, c, l, a) {
var v = t.call(this) || this,
p,
y;
for (v.$q = n, v.userInfo = i, v.debitAccountsForStandingOrders = r, v.creditAccountsForOrderedTransfer = u, v.Model = f, v.TransfersService = e, v.$scope = o, v.$state = s, v.stringService = h, v.roleService = c, v.stateHelperService = l, v.otpHandler = a, v.Months = [
], v.Days = [
], v.dateFormat = 'dd/MM/yyyy', v.dateOptions = {
formatYear: 'yyyy',
startingDay: 1,
showWeeks: 'false',
maxMode: 'day'
}, v.MAX_DATE = 1201, v.StepTemplate = 'Templates/Features/Transfers/Recurring/transfersRecurringNew', v.IsRetail = c.IsRetail(), v.tooltipText = v.IsRetail ? v.stringService.detailsForBeneficiaryTooltip : v.stringService.detailsForBeneficiaryTooltipCorporate, p = 1; p <= 31; p++) p <= 12 && v.Months.push(p),
v.Days.push(p);
return v.maxFutureValidDateTime = v.ComputeMaxValidDate(),
v.maxFutureValidDateCustomError = v.GetCustomMaxDateValidError(v.maxFutureValidDateTime),
y = v.stateHelperService.getStateData(),
y && (v.Model.DebitAccount = y.DebitAccount, v.Model.CreditAccount = y.CreditAccount, v.Model.StandingOrder.FromReason = y.StandingOrder.FromReason, v.Model.StandingOrder.ToReason = y.StandingOrder.ToReason, v.Model.StandingOrder.RemittanceInfo = y.StandingOrder.RemittanceInfo, v.Model.StandingOrder.Amount = y.StandingOrder.Amount),
v.Model.UseProfileProduct = v.hasCreditAccounts,
v
}
return __extends(i, t),
Object.defineProperty(i.prototype, 'otpKey', {
get: function () {
return this.otpHandler.caller
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(i.prototype, 'userHasOtpEnabled', {
get: function () {
return this.userInfo.OTPStatus == 1 || this.userInfo.OTPStatus == 0
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(i.prototype, 'hasCreditAccounts', {
get: function () {
return this.creditAccountsForOrderedTransfer && this.creditAccountsForOrderedTransfer.length > 0
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(i.prototype, 'allowProfileProducts', {
get: function () {
return !this.IsBusy && this.hasCreditAccounts
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(i.prototype, 'allowNonProfileProducts', {
get: function () {
return !this.IsBusy && (this.roleService.IsRetail() || this.userHasOtpEnabled)
},
enumerable: !0,
configurable: !0
}),
i.prototype.ComputeMaxValidDate = function () {
var t = this.MAX_DATE,
n = new Date;
return n.setMonth((new Date).getMonth() + t),
n
},
i.prototype.GetCustomMaxDateValidError = function (t) {
var i = t.getDate() + '/' + (t.getMonth() + 1) + '/' + t.getFullYear() + '.';
return n.utils.formatString('{0} {1}', [
this.stringService.maxValidDateForRecurringTransfer,
i
])
},
i.prototype.CreateRecurring = function () {
var t = this,
i;
this.HasErrors = !1;
this.ErrorMessage = '';
this.showValidationErrors = !0;
this.IsValidDateDiff() ? (n.utils.forceValidation(this.$scope.form), this.$scope.form.$invalid || (this.IsBusy = !0, i = this.buildPayload(), this.otpHandler.reset({
payload: i
}).result().then(function () {
return t.otpHandler.appendExtraInfoToPayload(i, 'OTP')
}).then(function () {
return t.TransfersService.ModifyStandingOrders(i)
}).then(function (n) {
if (n.ResultCode !== 0) return t.$q.reject(n);
t.Model.Response = n;
t.showConfirmation()
}).catch (function (i) {
i = i || {
};
i.userCancel || i.customErrorHandling || (t.HasErrors = !0, t.ErrorMessage = n.utils.getErrorMsg(i), t.showConfirmation())
}).finally (function () {
t.IsBusy = !1
})))  : (this.HasErrors = !0, this.ErrorMessage = this.stringService.recurringTransferFrequencyError, this.showConfirmation())
},
i.prototype.IsValidDateDiff = function () {
if (!n.utils.isUndefinedOrNull(this.Model.DateEnd)) {
var i = new Date,
t = Math.round(Math.abs(this.Model.DateEnd.getTime() - (new Date).getTime()) / 86400000);
if (t < this.Model.StandingOrder.MonthlyFrequency * 30) return !1
}
return !0
},
i.prototype.previousStep = function () {
this.StepTemplate = 'Templates/Features/Transfers/Recurring/transfersRecurringNew'
},
i.prototype.showConfirmation = function () {
this.StepTemplate = 'Templates/Features/Transfers/Recurring/transfersRecurringNewConfirm'
},
i.prototype.buildPayload = function () {
return {
Action: 0,
NewStandingOrder: {
Amount: this.Model.StandingOrder.Amount,
Currency: this.Model.DebitAccount.CurrencyEnum,
ExecutionMonthDay: this.Model.StandingOrder.ExecutionMonthDay,
FromProductCode: this.Model.DebitAccount.Code,
FromProductTypeID: this.Model.DebitAccount.TypeID,
FromReason: this.Model.StandingOrder.FromReason,
MonthlyFrequency: this.Model.StandingOrder.MonthlyFrequency,
RemittanceInfo: this.Model.StandingOrder.RemittanceInfo,
ToProductCode: this.Model.UseProfileProduct ? this.Model.CreditAccount.Code : this.Model.CreditAccountCode,
ToProductTypeID: this.Model.UseProfileProduct ? this.Model.CreditAccount.TypeID : 0,
ToReason: this.Model.StandingOrder.ToReason,
DateEnd: n.utils.toShortDateString(this.Model.DateEnd),
DateStart: this.Model.CurrentWorkingDate
}
}
},
i.$inject = [
'$q',
'userInfo',
'debitAccountsForStandingOrders',
'creditAccountsForOrderedTransfer',
'Model',
'TransfersService',
'$scope',
'$state',
'STRINGS',
'RoleService',
'StateHelperService',
'otpHandler'
],
i
}(i);
t.TransfersRecurringNewController = o;
n.transfers.mainModule.controller('TransfersRecurringNewController', o)
}) (t = n.transfers || (n.transfers = {
}))
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(),
function (n) {
var t;
(function (t) {
function r(t) {
var i = {
simpleImportsInfo: [
'InquiryServiceProxy',
function (n) {
return n.getsimpleImportsInfo({
}).then(function (n) {
return n
})
}
],
debitAccounts: [
'ProfileProductsService',
'$stateParams',
'StateHelperService',
function (t, i, r) {
var o = i.key,
u = r.getStateData(o),
f = undefined,
e;
return u && (e = u.Transaction ? u.Transaction : u, f = e.DebitProduct),
t.getAccountsByRequestType(n.server.ProductRequestType.DebitAccounts, f).then(function (t) {
return t.filter(function (t) {
return t.IsCorporate && t.CurrencyEnum == n.server.Currency.EUR && t.Uses.indexOf(2) != - 1 && t.IsAlphaBankProduct
})
})
}
],
debitAccountsForOrderedTransfer: [
'ProfileProductsService',
'$stateParams',
'StateHelperService',
function (t, i, r) {
var o = i.key,
u = r.getStateData(o),
f = undefined,
e;
return u && (e = u.Transaction ? u.Transaction : u, f = e.DebitProduct),
t.getAccountsByRequestType(n.server.ProductRequestType.DebitAccounts, f).then(function (t) {
return t.filter(function (t) {
return t.IsCorporate && t.CurrencyEnum == n.server.Currency.EUR && t.Uses.indexOf(2) != - 1 && t.IsAlphaBankProduct
})
})
}
],
internationalCreditAccounts: [
'ProfileProductsService',
'$stateParams',
'StateHelperService',
function (t, i, r) {
var o = i.key,
u = r.getStateData(o),
f = undefined,
e;
return u && (e = u.Transaction ? u.Transaction : u, f = e.CreditProduct),
t.getAccountsByRequestType(n.server.ProductRequestType.INTERNATIONAL_CREDIT_ACCOUNTS, f)
}
],
intrabankCreditAccounts: [
'ProfileProductsService',
'$stateParams',
'StateHelperService',
function (t, i, r) {
var o = i.key || undefined,
u = r.getStateData(o),
f = undefined,
e;
return u && (e = u.Transaction ? u.Transaction : u, f = e.CreditProduct),
t.getAccountsByRequestType(n.server.ProductRequestType.AllAlphaBankAccounts, f).then(function (t) {
return t.filter(function (t) {
return t.CurrencyEnum == n.server.Currency.EUR && t.Uses.indexOf(1) != - 1 && t.IsAlphaBankProduct
})
})
}
],
banks: [
'LookupsService',
function (n) {
return n.getBanks()
}
],
countries: [
'LookupsService',
function (n) {
return n.getCountries().then(function (n) {
return n.filter(function (n) {
return n.EUFlag
})
})
}
],
currencies: [
'LookupsService',
function (n) {
return n.getCurrenciesForTransfers()
}
],
transferReasons: [
'LookupsService',
function (n) {
return n.getTransferReasons()
}
]
};
return n.utils.merge({
}, i, t)
}
t.getEUImportResolve = r;
var i = function (t) {
function i(i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k, d, g, nt, tt, it, rt, ut, ft, et, ot, st) {
var ht = t.call(this, i, r, u, a, v, y, p, w, b, k, g, nt, tt, ft, ot, st) || this,
ct;
return ht.Model = i,
ht.debitAccounts = r,
ht.debitAccountsForOrderedTransfer = u,
ht.internationalCreditAccounts = f,
ht.intrabankCreditAccounts = e,
ht.banks = o,
ht.countries = s,
ht.currencies = h,
ht.transferReasons = c,
ht.transfersService = l,
ht.stateService = a,
ht.modal = v,
ht.scope = y,
ht.$injector = p,
ht.userInfo = w,
ht.profileProductService = b,
ht.queriesService = d,
ht.$q = g,
ht.$filter = it,
ht.appEventsService = rt,
ht.UsersServiceProxy = ut,
ht.simpleImportsInfo = et,
ht.showAlphaFooter = !1,
ht.showCharges = !0,
ht.productRequestType = n.server.ProductRequestType.INTERNATIONAL_CREDIT_ACCOUNTS,
ht.IsUrgentSelect = !1,
ht.wizzardSteps = [
],
ht.DefaultExecutionDate = new Date(Date.parse(ht.simpleImportsInfo.DefaultExecutionDate)),
ht.DefaultExecutionDatePlus3Month = new Date(Date.parse(ht.simpleImportsInfo.DefaultExecutionDate)),
ht.DefaultExecutionDatePlus3Month.setMonth(ht.DefaultExecutionDatePlus3Month.getMonth() + 3),
ht.Model.TransactionDate = ht.DefaultExecutionDate,
ht.Model.IsUrgentSelect = ht.simpleImportsInfo.Urgent,
ct = ht,
ht.UsersServiceProxy.getCounselorInfo({
}).then(function (n) {
ht.isBankTrade = n.IsBankTrade;
ht.stateHelperService.getStateData() && (ht.isGettingDataFromTemplate = !0);
ht.isBankTrade && (ht.setCurrency(), ht.Model.TransferType = 11, ht.Model.ExpensesServiceType = 9, ht.switchTransferType(), ht.openTermsModal(), ht.showTitle = !0);
ht.showTitle = !1;
ht.fromAccount = ht.debitAccounts
}, function () {
ht.isBankTrade = !1
}).then(function () {
var t = ht.stateHelperService.getStateData(),
i;
t ? (i = t.Transaction ? ct.queriesService.getTransactionTemplates(ct.queriesService.getTransactionTemplatesRequest(t.ID, 0))  : ct.$q.when({
ResultCode: 0,
Templates: [
{
Transaction: t
}
]
}), i.then(function (i) {
i.ResultCode == 0 && (ct.Model = n.transactions.TransactionUtils.TransactionToSimpleEUImportTransferInfo(i.Templates[0].Transaction, ct.Model, ct.debitAccounts, ct.internationalCreditAccounts.concat(ct.intrabankCreditAccounts), ct.currencies, ct.countries, ct.transferReasons, ct.productMatchingService, null != t.Transaction));
ct.switchTransferType(!1)
}))  : ct.Model.ImportedGood.ReceiptDate = undefined
}),
ht.documentData || (ht.documentData = {
}),
ct.Model.IsSimpleUser = ft.getRole() == 8,
ht
}
return __extends(i, t),
Object.defineProperty(i.prototype, 'allowProfileProducts', {
get: function () {
return !this.IsBusy && (!this.Model.ImportToEUAccount || this.internationalCreditAccounts.length > 0 || this.intrabankCreditAccounts.length > 0)
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(i.prototype, 'allowNonProfileProducts', {
get: function () {
return !this.IsBusy && (this.userHasOtpEnabled || this.Model.IsJobSubmission)
},
enumerable: !0,
configurable: !0
}),
i.prototype.setCurrency = function () {
this.Model.Currency || (this.Model.Currency = this.currencies.filter(function (t) {
return t.Currency == n.server.Currency.EUR
}) [0])
},
i.prototype.checkIfCreditIsEU = function () {
return !this.isCreditCountryInEU() && this.Model.ImportToEUAccount ? (this.Model.HasErrors = !0, this.Model.ErrorMessage = this.STRINGS.SimpleImports_CountryNotAvailable, !1)  : (this.Model.HasErrors = !1, !0)
},
i.prototype.switchTransferType = function (t) {
var i = this;
if (t === void 0 && (t = !0), this.Model.ImportToEUAccount) {
if (this.Model.TransferType = 11, this.Model.ExpensesServiceType = 9, this.productRequestType = n.server.ProductRequestType.INTERNATIONAL_CREDIT_ACCOUNTS, this.showAlphaFooter = !1, this.showCharges = !0, this.fromAccount = this.debitAccounts, this.isGettingDataFromTemplate) {
this.isGettingDataFromTemplate = !1;
return
}
t && (this.Model.CreditAccount = undefined);
this.profileProductService.getAccountsByRequestType(n.server.ProductRequestType.INTERNATIONAL_CREDIT_ACCOUNTS).then(function (n) {
i.Model.UseProfileProduct = n.length > 0
})
} else {
if (this.Model.TransferType = 10, this.Model.ExpensesServiceType = 10, this.productRequestType = n.server.ProductRequestType.CreditAccountsForOrderedTransfer, this.Model.CreditAccountBankCountry = {
}, this.Model.CreditAccountBankCountry.CountryIso = 'GR', this.showAlphaFooter = !0, this.showCharges = !1, this.fromAccount = this.debitAccounts, this.isGettingDataFromTemplate) {
this.isGettingDataFromTemplate = !1;
return
}
t && (this.Model.CreditAccount = undefined);
this.profileProductService.getAccountsByRequestType(n.server.ProductRequestType.CreditAccountsForOrderedTransfer).then(function (n) {
i.Model.UseProfileProduct = n.length > 0
})
}
},
i.prototype.openTermsModal = function () {
this.modal.open({
templateUrl: 'Templates/Features/transfers/EUImports/TermsAndConditions',
backdrop: 'static',
controller: 'AcceptDeclineConditionsModal as vm',
size: 'lg',
windowClass: 'custom terms'
})
},
i.prototype.disabledDays = function (n, t) {
return (console.log('Date: ' + n + ' | Mode: ' + t), this.roleService.isDemo()) ? !1 : t === 'day' && (n.getDay() === 0 || n.getDay() === 6)
},
i.prototype.searchBic = function () {
var t = this,
i;
n.utils.isUndefinedOrNullorWhiteSpace(this.Model.CreditAccountCode) || (this.IsBusy = !0, i = this.modal.open({
templateUrl: 'Templates/common/modals/searchBic',
controller: 'SearchBicModalInstanceCtrl as vm',
windowClass: 'bicModal',
size: 'sm',
resolve: {
response: [
function () {
return t.queriesService.checkIBAN({
InIBAN: t.Model.CreditAccountCode
})
}
]
}
}), i.result.then(function (n) {
t.Model.IbanValidationResult = n;
t.Model.BicCode = t.Model.IbanValidationResult.RelatedBIC;
t.bankName = n.BIC_Name
}).finally (function () {
t.IsBusy = !1
}))
},
i.prototype.makeStep = function (n, t) {
var i = n;
i.processStep = t;
this.wizzardSteps.push(i)
},
i.prototype.initialiseSteps = function () {
return this.makeStep({
templateUrl: 'Templates/Features/transfers/EUImports/step1',
title: 'Στοιχεία Μεταφοράς'
}, [
'ProductsService',
this.step1
]),
this.makeStep({
templateUrl: 'Templates/Features/transfers/EUImports/step2',
title: 'Επιβεβαίωση Στοιχείων'
}, this.step2),
this.makeStep({
templateUrl: 'Templates/Features/transfers/EUImports/step3',
title: 'Αποτελέσμα συναλλαγής'
}, this.step3),
this.wizzardSteps
},
i.prototype.selectCountry = function (n) {
this.Model.IbanPattern = n.IBANSize
},
i.prototype.step1 = function () {
var t = this,
i = this.$q.defer();
return !this.isBicCodeEmpty() && !this.isCountryISOEmpty() && !this.isCountryISOAndBicCodeFromSameCountry() ? (i.reject(this.STRINGS.internationalBicCodeCountryValidation), i.promise)  : (this.isIBANValidate().then(function (r) {
if (r.ResultCode == 0) {
if (t.Model.BicCode = r.RelatedBIC, t.isBicCodeEmpty()) return i.reject(t.STRINGS.noBicCodeError),
i.promise
} else if (t.isBicCodeEmpty() && t.isCreditCountryInEU()) return n.utils.isUndefinedOrNull(r.Error) || n.utils.isUndefinedOrNullorWhiteSpace(r.Error.Message) ? i.reject(t.STRINGS.systemError)  : i.reject(r.Error.Message),
i.promise;
t.predefinedBranchCode();
t.loadQueries().then(function (n) {
var u = n.checkProduct,
e,
f,
r;
if (u.IsValid || t.Model.CreditAccountBankCountry.SupportsIBAN != !0 || (t.Model.HasErrors = !0, e = u.Error ? u.Error.Message : t.STRINGS.failedTransaction, i.reject(e)), n.expenses.Fees) f = n.expenses,
t.Model.AmountLiteral = f.Fees.DebitAmountLiteral,
t.Model.Fees = f.Fees;
 else return t.Model.HasErrors = !0,
t.Model.ErrorMessage = n.expenses.Error ? n.expenses.Error.Message : t.STRINGS.failedTransaction,
window.scrollTo(0, 0),
i.reject(t.Model.ErrorMessage),
i.promise;
n.rates.AmountInEUR ? t.Model.Rates = n.rates : (t.Model.HasErrors = !0, t.Model.ErrorMessage = n.rates.Error ? n.rates.Error.Message : t.STRINGS.failedTransactionSystemError, window.scrollTo(0, 0), i.reject(t.Model.ErrorMessage));
n.ipq.ResultCode != 0 ? (t.Model.HasErrors = !0, t.Model.ErrorMessage = n.ipq.Error.Message, i.reject(n.ipq.Error.Message))  : t.Model.ValueDate = n.ipq.ValueDate;
t.Model.HasErrors = !1;
t.Model.ErrorMessage = '';
t.Model.HasErrors ? i.resolve(!0)  : (r = {
}, r.BuyRate_IN = t.Model.Rates.BuyRate, r.DebiCurrencyAmount = t.Model.Rates.AmountInCurrency, r.DebitAccountCurrency = t.Model.DebitProduct.CurrencyEnum, r.Fees = t.Model.Fees, r.MTFRate_IN = t.Model.Rates.BaseRate, r.OrderAmount = t.Model.Amount, r.OrderAmountCurrency = t.Model.Currency.Currency, r.SellRate_OUT = t.Model.Rates.SellRate, t.amountAnalysisPromise(r).then(function (n) {
n.ResultCode == 0 ? (t.Model.AmountAnalysis = n, i.resolve(!0))  : (t.Model.HasErrors = !0, t.Model.ErrorMessage = n.Error.Message, i.resolve(!0))
}, function (n) {
t.Model.HasErrors = !0;
t.Model.ErrorMessage = n.Error.Message;
i.resolve(!0)
}))
}, function (n) {
var r = t.getErrorMessage(n, 'Error.Message');
i.reject(r)
})
}, function (n) {
var r = t.getErrorMessage(n, 'Error.Message');
i.reject(r)
}), i.promise.then(function () {
return t.getOtpPayload()
}).then(function (n) {
return t.otpHandler.reset({
hints: {
Requirement: String(2),
Method: String(1)
},
payload: n
}).enquire()
}).catch (function (n) {
return t.$q.reject(n)
}))
},
i.prototype.formatValueDate = function (n) {
return n.replace(/(\d{4})(\d{2})(\d{2})/, '$3/$2/$1')
},
i.prototype.amountAnalysisPromise = function (n) {
return this.transfersService.AmountAnalysis(n)
},
i.prototype.isBicCodeEmpty = function () {
return n.utils.isUndefinedOrNullorWhiteSpace(this.Model.BicCode)
},
i.prototype.isCountryISOEmpty = function () {
return n.utils.isUndefinedOrNullorWhiteSpace(this.Model.CreditAccountBankCountry.CountryIso)
},
i.prototype.isCountryISOAndBicCodeFromSameCountry = function () {
return this.Model.CreditAccountBankCountry.CountryIso == this.Model.BicCode.substring(4, 6)
},
i.prototype.isCreditCountryInEU = function () {
var t = this.Model.UseProfileProduct ? this.Model.CreditAccountCountry : this.Model.CreditAccountBankCountry;
return !n.utils.isUndefinedOrNull(t) && t.EUFlag
},
i.prototype.isIBANValidate = function () {
if (this.isBicCodeEmpty() && this.isCreditCountryInEU()) {
var t = n.utils.isUndefinedOrNull(this.Model.CreditAccountCode) ? this.Model.CreditAccount.Code : this.Model.CreditAccountCode;
return this.queriesService.checkIBAN({
InIBAN: t
})
}
return this.$q.when({
ResultCode: 1,
Error: {
Message: ''
},
RelatedBIC: ''
})
},
i.prototype.predefinedBranchCode = function () {
this.Model.TransferType == 11 ? this.Model.BicCode.trim().length == 8 && (this.Model.BicCode = this.Model.BicCode.trim() + 'XXX')  : this.Model.BicCode = ''
},
i.prototype.loadQueries = function () {
var n,
i,
t,
h,
u,
f;
this.Model.UseProfileProduct ? (n = this.Model.CreditAccount.Code, i = this.Model.CreditAccount.TypeID)  : (n = this.Model.CreditAccountCode, i = this.Model.CreditAccountTypeID);
switch (this.Model.TransferType) {
case 11:
t = this.Model.UseProfileProduct ? this.Model.CreditAccountCountry.CountryIso : this.Model.CreditAccountBankCountry.CountryIso;
break;
default:
t = 'GR'
}
var e = this.queriesService.checkProduct(this.queriesService.getCheckProductRequest(n, this.Model.BicCode)),
o = this.queriesService.getRates({
InCurrency: this.Model.DebitProduct.CurrencyEnum,
OutCurrency: this.Model.Currency.Currency,
Amount: this.Model.Amount
}),
s = {
Amount: this.Model.Amount,
AmountCurrency: this.Model.Currency.Currency,
CountryIsoCode: t,
ExecutionDate: this.$filter('date') (this.Model.TransactionDate, 'yyyyMMdd'),
TransferType: this.Model.TransferType,
BIC: this.Model.BicCode,
Urgent: this.Model.IsUrgent
},
r = this.transfersService.ExecuteSimpleImportsPreQuery(s);
return this.roleService.isDemo() && (h = new Date, r = this.qService.when({
ResultCode: 0,
ValueDate: '20201230'
})),
u = {
Amount: this.Model.Amount,
DebitAccountNumber: this.Model.DebitProduct.Code,
DebitAccountType: this.Model.DebitProduct.TypeID,
CreditAccountNumber: n,
CreditAccountType: 0,
ExpensesServiceType: this.Model.ExpensesServiceType,
Currency: this.Model.Currency.Currency,
FeeType: this.Model.FeeType,
BICCode: this.Model.BicCode,
Country: t,
Urgent: this.Model.IsUrgent
},
f = this.transfersService.GetTransferExpenses(u),
this.$q.all({
checkProduct: e,
expenses: f,
rates: o,
ipq: r
})
},
i.prototype.createExecuteRequest = function () {
var f,
e,
h,
o,
s,
r,
u,
t,
c,
i,
l;
this.Model.UseProfileProduct ? (i = this.Model.CreditAccount.Code, f = this.Model._CreditAccount.Beneficiary, e = this.Model._CreditAccount.Bank)  : (i = this.Model.CreditAccountCode, f = this.Model.CreditAccountBeneficiary, r = this.Model.CreditAccountBankCountry.EnglishName, u = this.Model.CreditAccountBankCountry.GreekName, e = n.utils.isUndefinedOrNull(this.bankName) ? this.Model.BicCode : this.bankName);
h = this.$filter('date') (this.Model.ImportedGood.ReceiptDate, 'yyyyMMdd');
t = {
};
switch (this.Model.TransferType) {
case 11:
r = this.Model.UseProfileProduct ? this.Model.CreditAccountCountry.EnglishName : this.Model.CreditAccountBankCountry.CountryIso;
u = this.Model.UseProfileProduct ? this.Model.CreditAccountCountry.GreekName : this.Model.CreditAccountBankCountry.CountryIso;
s = 'SIMPLE_IMPORTS_WITHIN_EU';
o = this.Model.UseProfileProduct ? this.Model.CreditAccountCountry.CountryIso : this.Model.CreditAccountBankCountry.CountryIso;
t.CreditProductType = 0;
break;
default:
r = 'GR';
u = 'EL';
s = 'SIMPLE_IMPORTS_WITHIN_BANK';
o = 'GR';
t.CreditProductType = this.Model.UseProfileProduct ? this.Model.CreditAccount.TypeID : 0
}
return t.DebitProductCode = this.Model.DebitProduct.Code,
t.DebitProductType = this.Model.DebitProduct.TypeID,
t.DebitProductTitle = this.Model.DebitProduct.Title,
t.DebitReason = this.Model.DebitReason,
t.CreditProductCode = i,
t.CreditReason = this.Model.CreditReason,
t.Amount = this.Model.Amount,
t.DebitProductCurrency = this.Model.DebitProduct.CurrencyEnum,
t.AmountCurrency = this.Model.Currency.Currency,
t.TransferType = this.Model.TransferType,
t.FeeType = 0,
t.Fees = this.Model.Fees,
t.TransferDate = n.utils.toShortDateString(this.Model.TransactionDate),
c = t.DebitProductCurrency == 1 && this.Model.Currency.Currency == 1 ? 0 : 1,
(t.DebitReason == '' || t.DebitReason == undefined) && (i = this.Model.UseProfileProduct ? this.Model.CreditAccount.Code : this.Model.CreditAccountCode, t.DebitReason = 'AWB ' + i.substr( - 15)),
(t.CreditReason == '' || t.CreditReason == undefined) && (t.CreditReason = this.Model.ImportToEUAccount ? 'TRANSFER IN COMPLIANCE WITH LEGISLATIVE ACT OF JULY 18TH GREEK GOVERNMENT GAZETTE A 84 18 07 2015 AS IN FORCE' : 'AWB ' + this.userInfo.OrdererName),
l = this.Model.Rates.AmountInUSD || 0,
this.Model.Details = t.TransferDetails = this.getTransferDetails(l, c, e, o, r, u, f, h, t.CreditReason, s),
t
},
i.prototype.step2 = function () {
var n = this,
t = this.$q.defer();
return this.otpHandler.result().then(function () {
var i = n.createExecuteRequest();
n.preExecute(i);
n.isProfileProduct().finally (function () {
n.transfersService.ExecuteAlphaAccountTransferInternational(n.otpHandler.appendExtraInfoToPayload(i)).then(function (i) {
var r = n.setTransactionStatus(i);
n.updateDocumentData();
r ? (n.invalidateCache(), n.addEventsPublishingForCorporate(n.appEventsService), t.resolve(!0))  : t.reject(i.Error.Message)
}, function (i) {
var r = i.Error ? i.Error.Message : n.STRINGS.failedTransaction;
t.reject(r)
})
})
}, function (n) {
t.reject(n)
}),
t.promise
},
i.prototype.invalidateCache = function () {
this.appEventsService.publish(n.common.services.AppEventsService.InvalidateLookups_Event, [
n.common.services.LookupsService.DebitAccounts_CacheKey,
n.common.services.LookupsService.DebitAccountsForOrderedTransfer_CacheKey
]);
this.appEventsService.publish(n.common.services.AppEventsService.InvalidateAccounts_Event)
},
i.prototype.getTransferDetails = function (t, i, r, u, f, e, o, s, h, c) {
var l = [
],
v = l.push(new n.model.Detail(n.server.DetailName.DebitCurrencyAmount, 2, this.Model.Rates.AmountInCurrency.toString().replace('.', ','))),
y = l.push(new n.model.Detail(n.server.DetailName.AmountInEUR, 2, this.Model.Rates.AmountInEUR.toString().replace('.', ','))),
p = l.push(new n.model.Detail(n.server.DetailName.AmountInUSD, 2, t.toString().replace('.', ','))),
w = l.push(new n.model.Detail(n.server.DetailName.BuyRate_IN, 2, this.Model.Rates.BuyRate.toString().replace('.', ','))),
b = l.push(new n.model.Detail(n.server.DetailName.SellRate_OUT, 2, this.Model.Rates.SellRate.toString().replace('.', ','))),
k = l.push(new n.model.Detail(n.server.DetailName.MTFRate_IN, 2, this.Model.Rates.BaseRate.toString().replace('.', ','))),
d = l.push(new n.model.Detail(n.server.DetailName.DebitCurrencyExpenses, 2, this.Model.Fees.DebitProviderFeesAmount.toString().replace('.', ','))),
g = l.push(new n.model.Detail(n.server.DetailName.ConvertionFlag, 1, i)),
a;
n.utils.isUndefinedOrNull(this.Model.CreditAccountBeneficiaryAddress) || (a = l.push(new n.model.Detail(n.server.DetailName.ADDRESS, 0, this.Model.CreditAccountBeneficiaryAddress)));
var nt = l.push(new n.model.Detail(n.server.DetailName.BANK_NAME, 0, r)),
tt = l.push(new n.model.Detail(n.server.DetailName.CountryISOCode, 0, u)),
it = l.push(new n.model.Detail(n.server.DetailName.CountryDescrEn, 0, f)),
rt = l.push(new n.model.Detail(n.server.DetailName.CountryDescrEl, 0, e)),
ut = l.push(new n.model.Detail(n.server.DetailName.BIC_CODE, 0, this.Model.BicCode)),
ft = l.push(new n.model.Detail(n.server.DetailName.BENEFICIARY_NAME, 0, o)),
et = l.push(new n.model.Detail(n.server.DetailName.ORDERER_NAME, 0, this.userInfo.OrdererName)),
ot = l.push(new n.model.Detail(n.server.DetailName.RegistrationNumber, 0, this.userInfo.VAT)),
st = l.push(new n.model.Detail(n.server.DetailName.SICOM_URGENT_FLAG, 0, this.Model.IsUrgent ? '1' : '0')),
ht = l.push(new n.model.Detail(n.server.DetailName.SICOM_MERCH_DESCR, 0, this.Model.ImportedGood.Name)),
ct = l.push(new n.model.Detail(n.server.DetailName.SICOM_INVOICE_NO, 0, this.Model.ImportedGood.ReceiptNumber)),
lt = l.push(new n.model.Detail(n.server.DetailName.SICOM_INVOICE_DATE, 0, s)),
at = l.push(new n.model.Detail(n.server.DetailName.SICOM_MERCH_COUNTRY, 0, this.Model.ImportedGood.Country.Name)),
vt = l.push(new n.model.Detail(n.server.DetailName.SICOM_TRANSFER_TYPE, 0, c)),
yt = l.push(new n.model.Detail(n.server.DetailName.VALUE_DATE, 0, this.Model.ValueDate)),
pt = l.push(new n.model.Detail(n.server.DetailName.SICOM_APPLIC_CUSTOMER_NAME, 0, this.userInfo.Name + ' ' + this.userInfo.SurName)),
wt = l.push(new n.model.Detail(n.server.DetailName.COMMENTS, 0, 'True')),
bt = l.push(new n.model.Detail(n.server.DetailName.CurrencyName, 0, 'EUR')),
kt = l.push(new n.model.Detail(n.server.DetailName.RemmitanceInfo, 0, '')),
dt = l.push(new n.model.Detail(n.server.DetailName.SICOM_APPROVAL_CODE, 0, this.Model.ApprovalCode)),
gt = l.push(new n.model.Detail(n.server.DetailName.SICOM_AFM, 0, this.userInfo.VAT));
return l
},
i.prototype.step3 = function () {
var n = this.$q.defer();
return n.resolve(!1),
n.promise
},
i.prototype.updateDocumentData = function () {
this.documentData.ImportToEUAccount = this.Model.ImportToEUAccount
},
i.prototype.getOtpPayload = function () {
var n = this.createExecuteRequest();
return this.preExecute(n),
n
},
i.$inject = [
'Model',
'debitAccounts',
'debitAccountsForOrderedTransfer',
'internationalCreditAccounts',
'intrabankCreditAccounts',
'banks',
'countries',
'currencies',
'transferReasons',
'TransfersService',
'$state',
'$modal',
'$scope',
'$injector',
'userInfo',
'ProfileProductsService',
'StateHelperService',
'QueriesService',
'$q',
'$parse',
'ProductMatchingService',
'$filter',
'AppEventsService',
'UsersServiceProxy',
'RoleService',
'simpleImportsInfo',
'$window',
'otpHandler'
],
i
}(t.TransferWizardController);
t.EUImportTransferWizard = i;
n.transfers.mainModule.controller('EUImportTransferWizard', i)
}) (t = n.transfers || (n.transfers = {
}))
}(alpha || (alpha = {
})); __extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(), function (n) {
var t;
(function (t) {
var i = function () {
function n() {
}
return n.setAlphaCards = function (n, t) {
var i = n.qService.defer(),
r;
return n.stateService && n.stateService.params.id ? (r = n.stateService.params.id, n.ProfileProductsService.getCard(r).then(function (r) {
return r && (n.Model.CreditAccount = t.match(n.cards, r.Code, r.BankProduct.ProductID)),
i.resolve(!0),
r
}))  : (i.reject(), i.promise)
},
n.setInterCards = function (n, t) {
var i = n.qService.defer(),
r;
return n.stateService && n.stateService.params.id ? (r = n.stateService.params.id, n.ProfileProductsService.getCard(r).then(function (r) {
r && (n.Model.CreditAccount = t.match(n.cards, r.Code, r.BankProduct.ProductID));
i.resolve(!0)
}))  : i.reject(),
i.promise
},
n.setAlphaLoans = function (n, t) {
var i = n.qService.defer(),
r;
return n.stateService && n.stateService.params.id ? (r = n.stateService.params.id, n.ProfileProductsService.getLoan(r).then(function (r) {
n.Model.CreditAccount = t.match(n.loans, r.Code, r.BankProduct.ProductID);
i.resolve(!0)
}))  : i.reject(),
i.promise
},
n.setConsumerLoans = function (n, t) {
var i = n.qService.defer(),
r;
return n.stateService && n.stateService.params.id ? (r = n.stateService.params.id, n.ProfileProductsService.getLoan(r).then(function (r) {
n.Model.CreditAccount = t.match(n.loans, r.Code, r.BankProduct.ProductID);
i.resolve(!0)
}))  : i.reject(),
i.promise
},
n
}(),
b,
k,
f,
e,
o,
s,
h,
c,
r,
l,
a,
u,
v,
y,
p,
d,
w;
t.CreditSourceResolver = i;
b = function () {
function t() {
}
return t.apply = function (t, i) {
(t.ProductTypeId == n.constants.payments.citibankVisa_productTypeId || t.ProductTypeId == n.constants.payments.citibankDiners_productTypeId) && (i.DocumentRequestType = 26)
},
t
}();
k = function (t) {
function i(i, r, u, f, e, o, s, h, c, l, a, v) {
var y = t.call(this, i, r, u, f, e, o, s, h, a, undefined, v) || this,
w,
p;
if (y.Model = i, y.scope = r, y.injector = u, y.STRINGS = e, y.modalService = o, y.PaymentTypeService = s, y.StateHelperService = h, y.debitAccounts = c, y.cards = l, y.securityService = null, y.window = null, y.redirectBackToSeller = !1, y.AXA_PolicyId = '', w = a.getRolePermissions(), y.canViewAccountBalance = w.indexOf('ViewAccountGrossBalance') > - 1, p = angular.element('meta[name = \'IgnoreAtm24\']'), p && p.attr('content') == 'true' && (y.ignoreAtm24 = !0), p = angular.element('meta[name="PaymentData"]'), p && p.attr('content') && (y.paymentData = JSON.parse(p.attr('content')), y.isDirectPay = !0, y.paymentData.PaymentId == n.constants.payments.axa_special_productTypeId.toString())) {
var b = y.qService.defer(),
k = y,
d = u.get('VersionFilterService');
d.IsInVersions(n.constants.versionFilters.ASA_REDIRECTION).then(function (n) {
k.redirectBackToSeller = n;
b.resolve(!0)
});
y.RedirectionUrl = y.paymentData.RedirectUrl;
y.redirectBackToSeller = y.redirectBackToSeller && !n.utils.isUndefinedOrNullorWhiteSpace(y.RedirectionUrl)
}
return y.setCanShowWizard(),
y.footer = y.Model.SupportsAllMethods && !n.utils.isUndefinedOrNullorWhiteSpace(y.ViewInfo.AltPrompt) ? y.ViewInfo.AltPrompt : y.ViewInfo.Prompt,
y
}
return __extends(i, t),
Object.defineProperty(i.prototype, 'paymentType', {
get: function () {
return this._paymentType
},
set: function (n) {
n && (this._paymentType = n, this.initializePaymentType())
},
enumerable: !0,
configurable: !0
}),
i.prototype.signOff = function () {
return this.securityService.signOff()
},
i.prototype.redirectToSeller = function () {
var n = this;
n.securityService && n.window && this.signOff(n.securityService).then(function (n) {
return n.ResultCode
}).then(function (t) {
t == 0 && n.injector.invoke(['$http',
function (t) {
n.paymentData.Code1 = n.AXA_PolicyId;
t.post('/login/axaResponse', JSON.stringify(n.paymentData)).then(function (n) {
$('#ng-app').html(n);
$('form[name=\'axaForm\']').submit()
}).catch (function () {
console.error('Error on post/axaResponse')
})
}
])
}).catch (function () {
n.Model.HasErrors = !0;
n.Model.ErrorMessage = 'Error logging out'
})
},
i.prototype.execMethodChanged = function () {
this.footer = this.Model.TransferMethodImmediate && !n.utils.isUndefinedOrNullorWhiteSpace(this.ViewInfo.AltPrompt) ? this.ViewInfo.AltPrompt : this.ViewInfo.Prompt
},
i.prototype.setCanShowWizard = function () {
(!this.Model.Online && this.paymentType && (this.paymentType.ExecutionMethod == 2 || this.paymentType.ExecutionMethod == 8) && this.paymentType.ProductTypeId != n.constants.payments.vehicle_tax_productTypeId && this.paymentType.ProductTypeId != 10275 ? (this.CanShowWizard = !1, this.CanShowWizardError = this.STRINGS.paymenttypeavailability1 + this.paymentType.Name + this.STRINGS.paymenttypeavailability2)  : this.CanShowWizard = !0, null != this.paymentType) && (this.debitAccounts && this.debitAccounts.length != 0 || (this.Model.TransferSource = 1, this.paymentType.PaymentFromCardAllowed && this.cards.length == 0 ? (this.CanShowWizard = !1, this.showNoDebitAccountsError = !0)  : this.paymentType.PaymentFromCardAllowed ? this.CanShowWizard = !0 : (this.CanShowWizard = !1, this.showNoDebitAccountsError = !0)))
},
i.prototype.checkDigits = function () {
var i,
r;
if (this.Model.HasErrors = !1, this.Model.ErrorMessage = '', i = '', i = this.Model.UseProfilePaymentCode ? n.utils.isUndefinedOrNull(this.Model.PredefinedPaymentCode) ? '' : this.Model.PredefinedPaymentCode.Code : this.Model.DynamicValues.Code, this.paymentType.IsParent && i != this.previousCode && (this.previousCode = i, this.childProductTypeId = undefined, this.childFees = undefined, r = this.paymentType.Fields.filter(function (n) {
return n.FieldName == 'Code'
}) [0], !n.utils.isUndefinedOrNull(i) && i.match(r.Regex))) {
if (n.utils.isUndefinedOrNull(this.paymentType.ProductTypeChilds) || this.paymentType.ProductTypeChilds.length == 0) {
this.Model.HasErrors = !0;
this.Model.ErrorMessage = this.STRINGS.systemError;
return
}
this.IsBusy = !0;
var f = n.utils.CreatePaymentMask(i, this.paymentType),
t = this,
u = !1;
this.paymentType.ProductTypeChilds.forEach(function (i) {
if (n.utils.isUndefinedOrNull(t.childProductTypeId) || u) if (n.utils.isUndefinedOrNullorWhiteSpace(i.OrganizationCodeMask)) t.childProductTypeId = i.ProductTypeId,
t.childFees = i.FeeAmounts,
u = !0;
 else {
var r = i.OrganizationCodeMask.split(':');
if (r.length < 2) {
t.Model.HasErrors = !0;
t.Model.ErrorMessage = t.STRINGS.systemError;
t.IsBusy = !1;
return
}
f.substr(parseInt(r[0]), parseInt(r[1])) == i.OrganizationCode && (t.childProductTypeId = i.ProductTypeId, t.childFees = i.FeeAmounts)
}
});
n.utils.isUndefinedOrNull(this.childProductTypeId) && (t.Model.HasErrors = !0, t.Model.ErrorMessage = t.STRINGS.wrongPaymentCode);
this.IsBusy = !1
}
},
i.prototype.addToMyPayments = function () {
var t = this,
i = new n.model.NewPaymentTransaction(this.Model, 7, this.paymentType.ProductTypeId.toString(), this.Model.UseProfilePaymentCode, this.Model.PaymentCode, this.paymentType.FixedCodePayment);
t.paymentType.FixedCodePayment ? t.StateHelperService.go('root.payments.mypayments.add-dynamic-withFixCode', null, i)  : t.StateHelperService.go('root.payments.mypayments.add-dynamic-withoutFixCode', null, i)
},
i.prototype.openImgModal = function () {
var n = this;
this.modalService.open({
templateUrl: 'Templates/Features/Payments/modal-image',
controller: 'ImageModalControler as vm',
windowClass: 'custom',
size: 'sm',
resolve: {
imgUrl: function () {
return 'Content/Images/Payments/' + n.getHelpImageUrl()
}
}
})
},
i.prototype.getHelpImageUrl = function () {
return this.paymentType.HelpImageUrl
},
i.prototype.selectCard = function (n) {
n.IsPrepaid && (this.Model.WantsInstallments = !1)
},
i.prototype.preExecute = function (n, t) {
t === void 0 && (t = this.Model);
t.DebitProduct && t.DebitProduct.BankProduct && (n.DebitProductID = t.DebitProduct.BankProduct.ProductID)
},
i.prototype.createExecutionPayload = function (t, i) {
var r,
u;
return t === void 0 && (t = this.Model),
i === void 0 && (i = this.paymentType),
this.isDirectPay && this.paymentData.PaymentId == n.constants.payments.axa_special_productTypeId.toString() && (t.PaymentType = 12, t.Details.push(new n.model.Detail(n.server.DetailName.Token, n.model.DetailDataType.String, this.paymentData.AppToken)), t.Details.push(new n.model.Detail(n.server.DetailName.SessionId, n.model.DetailDataType.String, this.paymentData.AuditInfo)), t.Details.push(new n.model.Detail(n.server.DetailName.ReceiptNumber, n.model.DetailDataType.String, this.paymentData.ReceiptNumber))),
r = {
},
r.Amount = t.Amount,
r.Block = t.IsAmountBlocked,
u = t.DebitProduct || {
},
r.DebitProductCode = u.Code,
r.DebitProductType = u.TypeID,
r.Currency = u.CurrencyEnum,
r.PaymentDetails = t.Details,
r.CreditProductCode = t.PaymentCode,
r.CreditProductType = n.utils.isUndefinedOrNull(this.childProductTypeId) ? i.ProductTypeId : this.childProductTypeId,
t.TransferSource == 0 && t.SupportsScheduledMethod && !t.TransferMethodImmediate && (r.PaymentDate = n.utils.toShortDateString(t.TransactionDate)),
r.Fees = t.Fees,
r.PaymentType = t.SupportsDct ? 8 : t.PaymentType,
r.FeeType = 1,
r.NumberOfInstalments = t.WantsInstallments ? t.Installments : 1,
r.IsParentPayment = i.IsParent || !1,
r
},
i.prototype.areStep1DataValid = function (n) {
var t,
i,
r;
return this.Model.TransferSource == 1 && this.Model.WantsInstallments && (t = this.paymentType.MinInstallmentsAmount == 0 || this.Model.Amount > this.paymentType.MinInstallmentsAmount, !t) ? (i = this.STRINGS['MinInstallmentsAmountInfo.Prefix'] + ' ' + this.paymentType.MinInstallmentsAmount + ' ' + this.Model.DebitProduct.Currency, n.reject(i), !1)  : this.paymentType.ProductTypeId == 10084 && this.Model.DynamicValues && this.Model.DynamicValues.ExpirationDates && this.Model.DynamicValues.Code1.substr(0, 1) != '2' && this.Model.TransactionDate > this.Model.DynamicValues.ExpirationDates || this.paymentType.ProductTypeId == 10494 && this.expirationDates && this.Model.TransactionDate > this.expirationDates ? (r = this.STRINGS.ExpirationDateErrorMessage, n.reject(r), !1)  : !0
},
i.prototype.createPaymentMaskCode = function (n, t) {
n.UseProfilePaymentCode ? (n.PurePaymentCode = '', n.PaymentCode = n.PredefinedPaymentCode.Code)  : n.CreatePaymentMask(t)
},
i.prototype.copyDynamicAmountToViewModel = function (n) {
if (n.DynamicValues.hasOwnProperty('Amount')) {
var t = n.DynamicValues.Amount;
t && t.length > 0 && (n.Amount = parseFloat(t.slice(0, - 2) + '.' + t.slice( - 2)))
}
},
i.prototype.getTransferExpenses = function (t, i, r) {
var u = {
};
return u.Amount = i.Amount,
u.Currency = i.DebitProduct.CurrencyEnum,
u.DebitAccountNumber = i.DebitProduct.Code,
u.DebitAccountType = i.DebitProduct.TypeID,
u.DebitProductID = i.DebitProduct.BankProduct.ProductID,
u.CreditAccountNumber = i.PaymentCode,
u.CreditAccountType = n.utils.isUndefinedOrNull(this.childProductTypeId) ? r.ProductTypeId : this.childProductTypeId,
u.ExpensesServiceType = i.ExpensesServiceType,
u.FeeType = 1,
t.GetTransferExpenses(u)
},
i.prototype.initialiseSteps = function () {
var n = this,
t = [
],
r = {
templateUrl: 'Templates/Features/Payments/dynamic/step1',
title: 'Στοιχεία Πληρωμής'
},
i,
u;
return r.processStep = [
'$q',
'TransfersService',
function (t, i) {
var f = n.paymentType,
r = n.Model,
u = t.defer();
return n.areStep1DataValid(u) && (n.createPaymentMaskCode(r, f), n.copyDynamicAmountToViewModel(r), r.PopulateDetails(f), n.getTransferExpenses(i, r, f).then(function (n) {
var t = n;
t.Fees != undefined ? (r.Fees = t.Fees, r.AmountLiteral = t.Fees.DebitAmountLiteral, u.resolve(!0))  : u.reject(t.Error.Message)
}, function (t) {
n.Model.HasErrors = !0;
n.Model.ErrorMessage = t.Error.Message;
u.reject(t.Error.Message)
})),
u.promise.then(function () {
return n.getOtpPayload()
}).then(function (t) {
return n.otpHandler.reset({
hints: {
Requirement: String(2),
Method: String(1)
},
payload: t
}).enquire()
})
}
],
t.push(r),
i = {
templateUrl: 'Templates/Features/Payments/dynamic/step2',
title: 'Επιβεβαίωση Στοιχείων'
},
i.processStep = [
'$q',
'PaymentsService',
'AppEventsService',
'STRINGS',
'$injector',
function (n, t, i, r, u) {
var f = this,
e = n.defer();
return f.redirectBackToSeller && (f.securityService = u.get('SecurityService'), f.window = u.get('$window')),
f.otpHandler.result().then(function () {
var n = f.otpHandler.appendExtraInfoToPayload(f.createExecutionPayload());
f.preExecute(n);
f.executePayment(e, t, i, n)
}, function (n) {
e.reject(n)
}),
e.promise
}
],
t.push(i),
u = {
templateUrl: 'Templates/Features/Payments/dynamic/step3',
title: 'Αποτελέσμα συναλλαγής'
},
t.push(u),
t
},
i.prototype.getOtpPayload = function (n, t) {
var i = this.createExecutionPayload(n, t);
return this.preExecute(i, n),
i
},
i.prototype.invalidateCache = function (t) {
t.publish(n.common.services.AppEventsService.InvalidateAccounts_Event);
t.publish(n.common.services.AppEventsService.InvalidateCards_Event);
t.publish(n.common.services.AppEventsService.InvalidateLoans_Event);
t.publish(n.common.services.AppEventsService.InvalidateLookups_Event)
},
i.prototype.executePayment = function (t, i, r, u) {
var f = this,
s = this.paymentType,
e = this.Model,
o = i.ExecutePayment(u, e.Online);
o.then(function (i) {
var u = f.setTransactionStatus(i);
u && (f.paymentData && f.paymentData.PaymentId == n.constants.payments.axa_special_productTypeId.toString() && (f.AXA_PolicyId = i.AXA_PolicyId, f.paymentData.ErrorCode = 0, f.paymentData.ErrorDesc = 'OK'), e.TransactionUN = i.TransactionUN, e.ProcessDate = i.ProcessDate, e.ProcessDateLiteral = i.ProcessDateLiteral, f.invalidateCache(r));
t.resolve(u)
}, function (i) {
f.isDirectPay && f.paymentData.PaymentId == n.constants.payments.axa_special_productTypeId.toString() && (f.paymentData.ErrorCode = n.utils.isUndefinedOrNull(i.Error) ? '' : i.Error.ErrorCode, f.paymentData.ErrorDesc = n.utils.isUndefinedOrNull(i.Error) ? '' : i.Error.Message);
f.Model.HasErrors = !0;
f.Model.ErrorMessage = f.STRINGS.failedTransactionSystemError;
n.utils.isUndefinedOrNull(i.Error) && i.data.Message == 'TimeoutError' ? f.Model.ErrorMessage = f.STRINGS.promptForCheckErrorMsg : n.utils.isUndefinedOrNull(i.Error) || n.utils.isUndefinedOrNull(i.Error.Message) || (f.Model.ErrorMessage = i.Error.Message);
t.reject(f.Model.ErrorMessage)
})
},
i.$inject = [
'Model',
'$scope',
'$injector',
'paymentType',
'STRINGS',
'$modal',
'PaymentTypeService',
'StateHelperService',
'debitAccounts',
'cards',
'RoleService'
],
i
}(n.wizards.payments.DynamicPaymentWizardBase);
t.DynamicPaymentWizardBase = k;
f = function (t) {
function i(i, r, u, f, e, o, s, h, c, l, a, v, y, p, w) {
var k = t.call(this, i, r, u, f, e, o, s, h, l, a, p, w) || this,
d,
nt,
g;
return (k.Model = i, k.scope = r, k.injector = u, k.STRINGS = e, k.modalService = o, k.PaymentTypeService = s, k.StateHelperService = h, k.savedPaymentCodes = c, k.debitAccounts = l, k.cards = a, k.stateService = y, k.disableAmount = !1, (!f || !f.IsActive) && !k.isDirectPay) ? (k.stateService.go(n.constants.stateNames.paymentsSearch), k)  : (k.savedPaymentCodes && k.savedPaymentCodes.length > 0 && (k.Model.UseProfilePaymentCode = !0), k.ignoreAtm24 && k.Model.SupportsAllMethods && (k.Model.CanSelectImmediate = !0), (k.Model.Online || k.ignoreAtm24) && k.Model.SupportsAllMethods && (k.Model.TransferMethodImmediate = !0), k.isDirectPay ? (k.paymentData.PaymentId == n.constants.payments.axa_special_productTypeId.toString() && (k.disableAmount = !0), k.Model.UseProfilePaymentCode = !1, d = k, k.Model.Amount = k.paymentData.Amount, k.paymentType.Fields.map(function (t) {
t.FieldName == 'Code1' ? d.Model.DynamicValues.Code1 = d.paymentData.Code1 : t.FieldName == 'Code' ? d.Model.DynamicValues.Code = d.paymentData.Code1 : t.FieldName == 'Code2' ? d.Model.DynamicValues.Code2 = d.paymentData.Code2 : t.FieldName == 'ExpirationDates' ? d.Model.DynamicValues.ExpirationDates = n.utils.parseDateString(d.paymentData.PayDate)  : t.FieldName == 'regNo' ? d.Model.DynamicValues.regNo = d.paymentData.Code2 : t.FieldName == 'insPackage' && (d.Model.DynamicValues.insPackage = d.paymentData.Code3)
}), nt = k.paymentType.Fields.filter(function (n) {
return n.FieldName == 'ExpirationDates'
}), nt.length <= 0 && !n.utils.isUndefinedOrNullorWhiteSpace(k.paymentData.PayDate) && (k.Model.TransferMethodImmediate = !1, k.Model.TransactionDate = n.utils.parseDateString(k.paymentData.PayDate)))  : k.stateData && (g = k.getRealTransactionData(function (n, t) {
t.IsFromOverview = n.IsFromOverview
}), k.Model = n.transactions.TransactionUtils.TransactionToDynamicPaymentInfo(g.data, k.Model, l, a, c, v, g.isTemplate), k.checkDigits()), b.apply(f, k.documentData), k.Model.TransactionDate = k.PaymentPromptDateValue = n.utils.parseDateString(k.Model.PaymentPromptDate), k)
}
return __extends(i, t),
i.$inject = [
'Model',
'$scope',
'$injector',
'paymentType',
'STRINGS',
'$modal',
'PaymentTypeService',
'StateHelperService',
'savedPaymentCodes',
'debitAccounts',
'cards',
'ProductMatchingService',
'$state',
'RoleService',
'otpHandler'
],
i
}(n.payments.DynamicPaymentWizardBase);
t.DynamicPaymentWizardController = f;
n.payments.mainModule.controller('DynamicPaymentWizardController', f);
e = function (n) {
function t(t, i, r, u, f, e, o, s, h, c, l, a, v, y) {
var p = n.call(this, t, i, r, u, f, e, o, s, h, c, l, a, v, y, null) || this;
return p.Model = t,
p.scope = i,
p.injector = r,
p.STRINGS = f,
p.modalService = e,
p.PaymentTypeService = o,
p.StateHelperService = s,
p.savedPaymentCodes = h,
p.debitAccounts = c,
p.cards = l,
p.stateService = v,
p
}
return __extends(t, n),
t.prototype.preExecute = function (t) {
n.prototype.preExecute.call(this, t);
t.CreditProductCode = this.Model.DynamicValues.Vat + this.Model.DynamicValues.Code2
},
t.$inject = [
'Model',
'$scope',
'$injector',
'paymentType',
'STRINGS',
'$modal',
'PaymentTypeService',
'StateHelperService',
'savedPaymentCodes',
'debitAccounts',
'cards',
'ProductMatchingService',
'$state',
'RoleService'
],
t
}(f);
t.EVoucherPaymentWizardController = e;
n.payments.mainModule.controller('EVoucherPaymentWizardController', e);
o = function (t) {
function i(i, r, u, f, e, o, s, h, c, l, a, v, y) {
var p = t.call(this, i, r, u, f, e, o, s, h, l, a, v, null) || this,
w;
return p.Model = i,
p.scope = r,
p.injector = u,
p.STRINGS = e,
p.modalService = o,
p.PaymentTypeService = s,
p.StateHelperService = h,
p.savedPaymentCodes = c,
p.debitAccounts = l,
p.cards = a,
p.logoImgUrl = '',
p.stateData && (w = p.getRealTransactionData(function (n, t) {
t.IsFromOverview = n.IsFromOverview
}), p.Model = n.transactions.TransactionUtils.TransactionToDonationPaymentInfo(w.data, p.Model, l, y)),
p.paymentType && p.paymentType.ImageUrl && p.paymentType.ImageUrl != '' && (p.logoImgUrl = p.STRINGS.donationLogosPath + p.paymentType.ImageUrl),
p.Model.TransactionDate = p.PaymentPromptDateValue = n.utils.parseDateString(p.Model.PaymentPromptDate),
p
}
return __extends(i, t),
i.prototype.initialiseSteps = function () {
var n = t.prototype.initialiseSteps.call(this);
return n[0].templateUrl = 'Templates/Features/Payments/Donations/donation-step1',
n[1].templateUrl = 'Templates/Features/Payments/Donations/donation-step2',
n[2].templateUrl = 'Templates/Features/Payments/Donations/donation-step3',
n
},
i.prototype.preExecute = function (n) {
n.CreditProductCode = this.paymentType.ProductTypeId.toString()
},
i.$inject = [
'Model',
'$scope',
'$injector',
'paymentType',
'STRINGS',
'$modal',
'PaymentTypeService',
'StateHelperService',
'savedPaymentCodes',
'debitAccounts',
'cards',
'RoleService',
'ProductMatchingService'
],
i
}(n.payments.DynamicPaymentWizardBase);
t.DonationPaymentWizardController = o;
n.payments.mainModule.controller('DonationPaymentWizardController', o);
s = function (t) {
function i(i, r, u, f, e, o, s, h, c, l, a, v, y) {
var p = t.call(this, i, r, u, f, e, o, s, c, l, a, y, null) || this,
w,
b;
return p.Model = i,
p.scope = r,
p.injector = u,
p.STRINGS = e,
p.modalService = o,
p.PaymentTypeService = s,
p.savedPaymentCodes = h,
p.StateHelperService = c,
p.debitAccounts = l,
p.cards = a,
p.logoImgUrl = '',
p.IsDonationWithCode = !0,
p.savedPaymentCodes && p.savedPaymentCodes.length > 0 && (p.Model.UseProfilePaymentCode = !0),
p.stateData && (w = p.getRealTransactionData(function (n, t) {
t.IsFromOverview = n.IsFromOverview
}), p.Model = n.transactions.TransactionUtils.TransactionToDynamicPaymentInfo(w.data, p.Model, l, a, h, v, w.isTemplate)),
p.paymentType && p.paymentType.ImageUrl && p.paymentType.ImageUrl != '' && (p.logoImgUrl = 'Content/Images/Payments/Donations/el/' + p.paymentType.ImageUrl),
p.Model.TransactionDate = p.PaymentPromptDateValue = n.utils.parseDateString(p.Model.PaymentPromptDate),
b = p.Model,
b.IsAnonymous = !0,
p
}
return __extends(i, t),
i.prototype.initialiseSteps = function () {
var n = t.prototype.initialiseSteps.call(this);
return n[0].templateUrl = 'Templates/Features/Payments/Donations/donation-withcode-step1',
n[1].templateUrl = 'Templates/Features/Payments/Donations/donation-step2',
n[2].templateUrl = 'Templates/Features/Payments/Donations/donation-step3',
n
},
i.$inject = [
'Model',
'$scope',
'$injector',
'paymentType',
'STRINGS',
'$modal',
'PaymentTypeService',
'savedPaymentCodes',
'StateHelperService',
'debitAccounts',
'cards',
'ProductMatchingService',
'RoleService'
],
i
}(n.payments.DynamicPaymentWizardBase);
t.DonationWithCodePaymentWizardController = s;
n.payments.mainModule.controller('DonationWithCodePaymentWizardController', s);
h = function (t) {
function i(n, i, r, u, f, e, o, s, h, c, l, a) {
var v = t.call(this, n, i, r, u, f, e, o, s, c, l, a, null) || this,
y,
p;
return v.Model = n,
v.scope = i,
v.injector = r,
v.STRINGS = f,
v.modalService = e,
v.PaymentTypeService = o,
v.StateHelperService = s,
v.savedPaymentCodes = h,
v.debitAccounts = c,
v.cards = l,
v.disableAmount = !1,
y = angular.element('meta[name="PaymentData"]'),
y && y.attr('content') != '' && (v.paymentData = JSON.parse(y.attr('content')), v.isDirectPay = !0, v.disableAmount = !0, v.Model.UseProfilePaymentCode = !1, p = v, v.Model.Amount = v.paymentData.Amount, v.paymentType.Fields.map(function (n) {
n.FieldName == 'Code' && (p.Model.DynamicValues.Code = p.paymentData.Code1)
})),
v.Model.PaymentType = 6,
v
}
return __extends(i, t),
i.prototype.initialiseSteps = function () {
var i = this,
r = t.prototype.initialiseSteps.call(this);
return r[0].processStep = [
'$q',
'PaymentsService',
function (t, r) {
var u = i,
f = {
};
return u.Model.PopulateDetails(u.paymentType),
f.PaymentDetails = u.Model.Details,
f.CreditProductType = u.paymentType.ProductTypeId,
f.Amount = u.Model.Amount,
r.Authorize(f).then(function (i) {
var r = i,
f,
e,
o;
return r.ResultCode == 0 ? (u.Model.Fees = r.Fees, u.Model.AmountLiteral = r.Fees.DebitAmountLiteral, f = n.transactions.TransactionUtils.getDetail(r.PaymentDetails, n.server.DetailName.Authorize_ResponseAmount), f != null && (u.Model.Amount = parseFloat(f.Value)), e = n.transactions.TransactionUtils.getDetail(r.PaymentDetails, n.server.DetailName.Authorize_ResponseCode), e != null && (u.Model.PaymentCode = e.Value), o = n.transactions.TransactionUtils.getDetail(r.PaymentDetails, n.server.DetailName.Authorize_ResponseCode1), o != null && u.Model.Details.push(o), r)  : t.reject(i)
}).then(function () {
if (u.paymentType.FeeAmounts.DebitProviderFeesAmount !== 0) {
var n = {
Amount: u.Model.Amount,
Currency: u.Model.DebitProduct.CurrencyEnum,
DebitAccountNumber: u.Model.DebitProduct.Code,
DebitAccountType: u.Model.DebitProduct.TypeID,
CreditAccountNumber: u.Model.PaymentCode,
CreditAccountType: u.paymentType.ProductTypeId,
ExpensesServiceType: u.Model.ExpensesServiceType,
FeeType: 1
};
return r.GetExpenses(n).then(function (n) {
return n.ResultCode == 0 && n.Fees ? (u.Model.Fees = n.Fees, u.Model.AmountLiteral = n.Fees.DebitAmountLiteral, t.when(!0).then(function () {
return u.getOtpPayload()
}).then(function (n) {
return u.otpHandler.reset({
hints: {
Requirement: String(2),
Method: String(1)
},
payload: n
}).enquire()
}))  : t.reject(n)
})
}
return !0
}).catch (function (n) {
return t.reject(n.Error ? n.Error.Message : u.STRINGS.problemTransactionProcessing)
}).then(function () {
return i.getOtpPayload()
}).then(function (n) {
return i.otpHandler.reset({
payload: n
}).enquire()
})
}
],
r
},
i.$inject = [
'Model',
'$scope',
'$injector',
'paymentType',
'STRINGS',
'$modal',
'PaymentTypeService',
'StateHelperService',
'savedPaymentCodes',
'debitAccounts',
'cards',
'RoleService'
],
i
}(n.payments.DynamicPaymentWizardBase);
t.CustomPaymentWizardController = h;
n.payments.mainModule.controller('CustomPaymentWizardController', h);
c = function (t) {
function i(i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b) {
var k = t.call(this, i, r, u, null, f, e, o, h, l, a, v, b) || this;
return k.Model = i,
k.scope = r,
k.injector = u,
k.STRINGS = f,
k.modalService = e,
k.PaymentTypeService = o,
k.paymentTypesGroup = s,
k.StateHelperService = h,
k.LookupsService = c,
k.debitAccounts = l,
k.cards = a,
k.roleService = v,
k.AppEventsService = y,
k.userInfo = p,
k.$stateParams = w,
k.savedPaymentCodes = [
],
k.noDebitProducts = !1,
k.disableAmount = !1,
k.showNoCardsWarning = !1,
k.isCustom = !1,
k.Model.TransactionDate = k.PaymentPromptDateValue = n.utils.parseDateString(k.Model.PaymentPromptDate),
k
}
return __extends(i, t),
Object.defineProperty(i.prototype, 'PaymentTypeGroupOption', {
get: function () {
return this._paymentTypeGroupOption
},
set: function (n) {
var t = this;
n && n != this._paymentTypeGroupOption && this.loadPaymentType(n).then(function () {
t._paymentTypeGroupOption = n
})
},
enumerable: !0,
configurable: !0
}),
i.prototype.loadPaymentType = function (i) {
var r = this,
f,
u;
return this.IsBusy = !0,
this.Model.HasErrors = !1,
this.Model.ErrorMessage = '',
f = t.prototype.initialiseSteps.call(this),
u = {
type: null,
model: angular.extend(new n.model.DynamicPaymentInfo, this.Model)
},
this.LookupsService.getPaymentType(i.Item.ProductTypeId).then(function (n) {
return u.type = n,
u.model.Online && !r.ignoreAtm24 && u.model.SupportsAllMethods && (u.model.TransferMethodImmediate = !0),
u.model.DebitProduct = null,
u.model.TransferSource = (!r.debitAccounts || r.debitAccounts.length == 0) && n.PaymentFromCardAllowed ? 1 : 0,
u.model.UseProfilePaymentCode = !1,
u.model.Fees = n.FeeAmounts,
n
}).then(function (n) {
if (n.Tags && n.Tags.indexOf('custom') > - 1) {
r.isCustom = !0;
var t = angular.element('meta[name="PaymentData"]');
t && t.attr('content') != '' && (r.paymentData = JSON.parse(t.attr('content')), r.isDirectPay = !0, r.disableAmount = !0, u.model.UseProfilePaymentCode = !1, u.model.Amount = r.paymentData.Amount, n.Fields.forEach(function (n) {
n.FieldName == 'Code' && (u.model.DynamicValues.Code = r.paymentData.Code1)
}));
u.model.PaymentType = 6
} else r.disableAmount = !1,
r.isCustom = !1
}).then(function () {
return u.model.PopulateDetails(u.type)
}).then(function () {
return r.otpHandler.reset({
payload: r.getOtpPayload(u.model, u.type)
}).enquire()
}).catch (function (n) {
return n && n.userCancel || (r.Model.HasErrors = !0, r.Model.ErrorMessage = 'Error loading payment type!'),
r.qService.reject(n)
}).then(function () {
angular.extend(r.Model, u.model);
r.paymentType = u.type;
r.checkForAvailableDebit();
r.savedPaymentCodes = [
]
}).then(function () {
return r.LookupsService.getPredefinedCodesForPaymentType(r.paymentType.ProductTypeId)
}).then(function (t) {
t && t.length > 0 && (r.savedPaymentCodes = t, r.Model.UseProfilePaymentCode = !0);
r.footer = r.Model.SupportsAllMethods && !n.utils.isUndefinedOrNullorWhiteSpace(r.ViewInfo.AltPrompt) ? r.ViewInfo.AltPrompt : r.ViewInfo.Prompt
}).finally (function () {
return r.IsBusy = !1
})
},
i.prototype.initialiseSteps = function () {
var i = this,
r = t.prototype.initialiseSteps.call(this);
return r[0].processStep = [
'$q',
'PaymentsService',
'TransfersService',
function (t, r, u) {
var f = i,
o = t.defer(),
l,
e,
a,
v,
y,
h,
s,
p,
c;
if (f.isCustom) c = {
},
f.Model.PopulateDetails(f.paymentType),
c.PaymentDetails = f.Model.Details,
c.CreditProductType = f.paymentType.ProductTypeId,
c.Amount = f.Model.Amount,
r.Authorize(c).then(function (t) {
var i = t,
r,
u,
e;
if (i.ResultCode == 0) return f.Model.Fees = i.Fees,
f.Model.AmountLiteral = i.Fees.DebitAmountLiteral,
r = n.transactions.TransactionUtils.getDetail(i.PaymentDetails, n.server.DetailName.Authorize_ResponseAmount),
r != null && (f.Model.Amount = parseFloat(r.Value)),
u = n.transactions.TransactionUtils.getDetail(i.PaymentDetails, n.server.DetailName.Authorize_ResponseCode),
u != null && (f.Model.PaymentCode = u.Value),
e = n.transactions.TransactionUtils.getDetail(i.PaymentDetails, n.server.DetailName.Authorize_ResponseCode1),
e != null && f.Model.Details.push(e),
i;
o.reject(t)
}).then(function () {
if (f.paymentType.FeeAmounts.DebitProviderFeesAmount !== 0) {
var n = {
Amount: f.Model.Amount,
Currency: f.Model.DebitProduct.CurrencyEnum,
DebitAccountNumber: f.Model.DebitProduct.Code,
DebitAccountType: f.Model.DebitProduct.TypeID,
CreditAccountNumber: f.Model.PaymentCode,
CreditAccountType: f.paymentType.ProductTypeId,
ExpensesServiceType: f.Model.ExpensesServiceType,
FeeType: 1
};
return r.GetExpenses(n).then(function (n) {
n.ResultCode == 0 && n.Fees ? (f.Model.Fees = n.Fees, f.Model.AmountLiteral = n.Fees.DebitAmountLiteral, o.resolve(!0))  : o.reject(n)
})
}
o.resolve(!0)
}).catch (function (n) {
o.reject(n.Error ? n.Error.Message : f.STRINGS.problemTransactionProcessing)
});
 else {
if (l = f.paymentType, e = f.Model, f.Model.TransferSource == 1 && f.Model.WantsInstallments && (a = f.paymentType.MinInstallmentsAmount == 0 || f.Model.Amount > f.paymentType.MinInstallmentsAmount, !a)) return v = f.STRINGS['MinInstallmentsAmountInfo.Prefix'] + ' ' + f.paymentType.MinInstallmentsAmount + ' ' + f.Model.DebitProduct.Currency,
o.reject(v),
o.promise;
if (f.paymentType.ProductTypeId == 10084 && f.Model.DynamicValues && f.Model.DynamicValues.ExpirationDates && f.Model.DynamicValues.Code1.substr(0, 1) != '2' && f.Model.TransactionDate > f.Model.DynamicValues.ExpirationDates || f.paymentType.ProductTypeId == 10494 && f.expirationDates && f.Model.TransactionDate > f.expirationDates) return y = f.STRINGS.ExpirationDateErrorMessage,
o.reject(y),
o.promise;
e.UseProfilePaymentCode ? (e.PurePaymentCode = '', e.PaymentCode = e.PredefinedPaymentCode.Code)  : e.CreatePaymentMask(l);
e.DynamicValues.hasOwnProperty('Amount') && (h = e.DynamicValues.Amount, h && h.length > 0 && (e.Amount = parseFloat(h.slice(0, - 2) + '.' + h.slice( - 2))));
e.PopulateDetails(l);
s = {
};
s.Amount = e.Amount;
s.Currency = e.DebitProduct.CurrencyEnum;
s.DebitAccountNumber = e.DebitProduct.Code;
s.DebitAccountType = e.DebitProduct.TypeID;
s.DebitProductID = e.DebitProduct.BankProduct.ProductID;
s.CreditAccountNumber = e.PaymentCode;
s.CreditAccountType = l.ProductTypeId;
s.ExpensesServiceType = e.ExpensesServiceType;
s.FeeType = 1;
p = u.GetTransferExpenses(s);
p.then(function (n) {
var t = n;
t.Fees != undefined ? (e.Fees = t.Fees, e.AmountLiteral = t.Fees.DebitAmountLiteral, o.resolve(!0))  : o.reject(t.Error.Message)
}, function (n) {
f.Model.HasErrors = !0;
f.Model.ErrorMessage = n.Error.Message;
o.reject(n.Error.Message)
})
}
return o.promise.then(function () {
return i.getOtpPayload()
}).then(function (n) {
return i.otpHandler.reset({
hints: {
Requirement: String(2),
Method: String(1)
},
payload: n
}).enquire()
})
}
],
r[1].processStep = [
'$q',
'PaymentsService',
'AppEventsService',
'STRINGS',
function (n, t, r) {
var u = n.defer();
return i.otpHandler.result().then(function () {
var n = i.otpHandler.appendExtraInfoToPayload(i.createExecutionPayload());
i.preExecute(n);
i.executePayment(u, t, r, n)
}, function (n) {
u.reject(n)
}),
u.promise
}
],
r
},
i.prototype.checkForAvailableDebit = function () {
this.noDebitProducts = this.paymentType.PaymentFromCardAllowed ? this.debitAccounts.length == 0 && this.cards.length == 0 : this.debitAccounts.length == 0
},
i.$inject = [
'Model',
'$scope',
'$injector',
'STRINGS',
'$modal',
'PaymentTypeService',
'paymentTypesGroup',
'StateHelperService',
'LookupsService',
'debitAccounts',
'cards',
'RoleService',
'AppEventsService',
'userInfo',
'$stateParams',
'otpHandler'
],
i
}(n.payments.DynamicPaymentWizardBase);
t.GroupDynamicPaymentWizardController = c;
n.payments.mainModule.controller('GroupDynamicPaymentWizardController', c);
r = function (t) {
function i(i, r, u, f, e, o, s, h, c) {
var l = t.call(this, i, r, u, e, h, c) || this;
return l.Model = i,
l.scope = r,
l.injector = u,
l.userInfo = f,
l.StateHelperService = e,
l.$q = o,
l.ProfileProductsService = s,
l.roleService = h,
l.Model.TransactionDate = l.PaymentPromptDateValue = n.utils.parseDateString(l.Model.PaymentPromptDate),
l.canViewAccountBalance = l.roleService.isAccessAllowed('ViewAccountGrossBalance'),
l
}
return __extends(i, t),
Object.defineProperty(i.prototype, 'userHasOtpEnabled', {
get: function () {
return this.userInfo.OTPStatus == 1 || this.userInfo.OTPStatus == 0
},
enumerable: !0,
configurable: !0
}),
i.prototype.isProfileProduct = function () {
var n = this,
t = n.$q.defer();
return n.Model.UseProfileProduct ? (n.Model.IsProfileProduct = !0, t.resolve(!0))  : this.ProfileProductsService.getProductByCode(this.Model.CreditAccountCode).then(function (t) {
n.Model.IsProfileProduct = t ? !0 : !1
}).finally (function () {
t.resolve(!0)
}),
t.promise
},
Object.defineProperty(i.prototype, 'allowProfileProducts', {
get: function () {
return !this.IsBusy
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(i.prototype, 'allowNonProfileProducts', {
get: function () {
return !this.IsBusy && (this.roleService.IsRetail() || this.userHasOtpEnabled || this.Model.IsJobSubmission)
},
enumerable: !0,
configurable: !0
}),
i.prototype.preExecute = function (t) {
t.DebitProductID = this.Model.DebitProduct.BankProduct.ProductID;
t.CreditProductID = this.Model.UseProfileProduct ? this.Model.CreditAccount.BankProduct.ProductID : n.constants.pci.defaultProductId
},
i.$inject = [
'Model',
'$scope',
'$injector',
'userInfo',
'StateHelperService',
'$q',
'ProfileProductsService',
'RoleService',
'otpHandler'
],
i
}(n.wizards.payments.PaymentWizardController);
t.CardsAndLoansBaseController = r;
l = function (t) {
function r(r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k, d, g, nt) {
var tt = t.call(this, r, u, f, e, c, v, a, w, nt) || this,
it,
rt;
return tt.Model = r,
tt.debitAccounts = o,
tt.cards = s,
tt.stringsService = h,
tt.StateHelperService = c,
tt.stateService = l,
tt.ProfileProductsService = a,
tt.$q = v,
tt.isCitiOnline = y,
tt.roleService = w,
tt.ProductsService = b,
tt.modal = k,
tt.Title = tt.stringsService.alphaBankCardPayment,
tt.allowProfileProducts,
tt.isRetail = tt.roleService.IsRetail(),
it = tt,
i.setAlphaCards(tt, p).then(function () {
if (it.stateData) {
var t = it.getRealTransactionData();
return it.Model = n.transactions.TransactionUtils.TransactionToCardLoanPaymentInfo(t.data, it.Model, o, s, p, t.isTemplate)
}
}).then(function () {
if (it.Model.CreditAccount) return it.onCreditProductChange(it.Model.CreditAccount)
}),
it.cards.length == 0 && (it.Model.UseProfileProduct = !1),
rt = d.document.querySelector('meta[name = \'IgnoreAtm24\']'),
rt && rt.getAttribute('content') == 'true' && (tt.ignoreAtm24 = !0, tt.Model.CanSelectImmediate = tt.ignoreAtm24, tt.Model.TransferMethodImmediate = !tt.Model.IsJobSubmission),
it.documentData.DocumentRequestType = 18,
tt.Model.TransactionDate = tt.PaymentPromptDateValue = n.utils.parseDateString(tt.Model.PaymentPromptDate),
tt
}
return __extends(r, t),
Object.defineProperty(r.prototype, 'hasDebitAccounts', {
get: function () {
return this.debitAccounts && this.debitAccounts.length > 0
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(r.prototype, 'hasCards', {
get: function () {
return this.cards && this.cards.length > 0
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(r.prototype, 'allowProfileProducts', {
get: function () {
return !this.IsBusy && this.hasCards
},
enumerable: !0,
configurable: !0
}),
r.prototype.addProductToProfile = function () {
var i = this,
t = new n.model.AddProductViewModel;
t.product.BankProduct.Code = i.Model.CreditAccountCode;
t.product.CategoryGroupType = n.server.CategoryGroupType.CARD;
t.product.BankProduct.Uses = [
];
t.product.BankProduct.Details = [
];
t.comesFromSuccessfullTransactionScreen = !0;
i.StateHelperService.go(n.constants.stateNames.settingsAddCardInCardsState, {
productTypeFamily: 'card',
productTypeScope: 'local'
}, t)
},
r.prototype.onCreditProductChange = function (t) {
if (!n.utils.isUndefinedOrNull(t) && t.HasEnquiry) {
var i = this;
this.IsBusy;
this.ProfileProductsService.getCachedCardBalance(t).then(function () {
i.IsBusy = !1
})
}
return
},
r.prototype.addToMyPayments = function () {
var t = this,
r = t.Model.UseProfileProduct ? t.Model.CreditAccount.Code : t.Model.CreditAccountCode,
u = t.Model.UseProfileProduct ? t.Model.CreditAccount.TypeID : 0,
i = new n.model.NewPaymentTransaction(t.Model, 1, u, t.Model.UseProfileProduct, r, !0),
f = t.roleService.IsIndividualUser(),
e = t.userInfo.OTPStatus === 0 || t.userInfo.OTPStatus === 1;
f && e && (i.comesFromSuccessfullTransactionScreen = !0);
t.StateHelperService.go('root.payments.mypayments.add-card', null, i)
},
r.prototype.getCreditProductId = function () {
return this.Model.UseProfileProduct ? this.Model.CreditAccount.BankProduct.ProductID : n.constants.pci.defaultProductId
},
r.prototype.searchBeneficiaries = function () {
var t = this,
i = t.Model.UseProfileProduct ? t.Model.CreditAccount.Code : t.Model.CreditAccountCode,
r = t.Model.UseProfileProduct ? t.Model.CreditAccount.TypeID : 0,
u = this.getCreditProductId(),
f;
(i != null || i != '') && (t = this, f = this.modal.open({
templateUrl: 'Templates/Features/Transfers/beneficiariesModal',
controller: 'BeneficiariesModalInstanceCtrl as vm',
windowClass: 'beneficiariesModal',
resolve: {
productInfo: [
function () {
return t.ProductsService.getProductInfo({
Code: i,
ProductID: u,
Family: n.server.ProductTypeFamily.Card,
Scope: n.server.ProductTypeScope.Local,
TypeID: r
}).then(function (n) {
return n.ResultCode == 0 ? n.ProductInfo[0] : undefined
})
}
]
}
}))
},
r.prototype.createExecutionPayload = function () {
var t = {
};
return t.DebitProductCode = this.Model.DebitProduct.Code,
t.DebitProductType = this.Model.DebitProduct.TypeID,
this.Model.UseProfileProduct ? (t.CreditProductCode = this.Model.CreditAccount.Code, t.CreditProductType = this.Model.CreditAccount.TypeID)  : (t.CreditProductCode = this.Model.CreditAccountCode, t.CreditProductType = 0),
this.Model.TransferMethodImmediate || (t.Block = this.Model.IsAmountBlocked, t.PaymentDate = n.utils.toShortDateString(this.Model.TransactionDate)),
t.Amount = this.Model.Amount,
t.Currency = n.server.Currency.EUR,
t.PaymentType = 2,
!n.utils.isUndefinedOrNull(this.Model.CreditAccountBeneficiaries) && this.Model.CreditAccountBeneficiaries.length > 0 && (t.PaymentDetails = [
], t.PaymentDetails.push(new n.model.Detail(n.model.DetailName.BENEFICIARY_NAME, n.model.DetailDataType.String, this.Model.CreditAccountBeneficiaries[0].DisplayName))),
t
},
r.prototype.initialiseSteps = function () {
var f = this,
t = [
],
r = {
templateUrl: 'Templates/Features/Payments/Cards/step1',
title: 'Στοιχεία Πληρωμής'
},
i,
u;
return r.processStep = [
'$q',
'PaymentsService',
'ProductsService',
'$sce',
function (t, i, r) {
var u = f,
o = t.defer(),
e = {
},
s,
h,
c;
return e.Amount = u.Model.Amount,
e.DebitAccountNumber = u.Model.DebitProduct.Code,
e.DebitAccountType = u.Model.DebitProduct.TypeID,
s = n.constants.pci.defaultProductId,
u.Model.UseProfileProduct ? (e.CreditAccountNumber = u.Model.CreditAccount.Code, e.CreditAccountType = u.Model.CreditAccount.TypeID, s = u.Model.CreditAccount.BankProduct.ProductID)  : (e.CreditAccountNumber = u.Model.CreditAccountCode, e.CreditAccountType = 0),
e.Currency = u.Model.DebitProduct.CurrencyEnum,
e.ExpensesServiceType = 11,
e.FeeType = 1,
h = i.GetExpenses(e),
c = r.getProductInfo({
Code: e.CreditAccountNumber,
ProductID: s,
Family: n.server.ProductTypeFamily.Card,
Scope: n.server.ProductTypeScope.Local,
TypeID: u.Model.UseProfileProduct ? u.Model.CreditAccount.TypeID : 0
}, !0),
t.all({
productInfo: c,
expenses: h
}).then(function (t) {
var f,
i,
r;
t.productInfo && t.productInfo.ProductInfo && t.productInfo.ProductInfo[0].ProductTypeName ? (u.Model.UseProfileProduct || (t.productInfo.ProductInfo[0].CategoryType == 104 && (f = u.stringsService.toLoadPrepaid, o.reject(f)), u.Model.CreditAccount = {
TypeName: ''
}), u.Model.CreditAccount.TypeName = t.productInfo.ProductInfo[0].ProductTypeName)  : t.productInfo && t.productInfo.ProductInfo && !t.productInfo.ProductInfo[0].Validated ? (i = u.stringsService.systemError, o.reject(i))  : (i = null != t.productInfo.Error ? t.productInfo.Error.Message : t.productInfo.ProductInfo[0].ErrorMessage, o.reject(i));
r = !n.utils.isUndefinedOrNull(t.productInfo.ProductInfo) && t.productInfo.ProductInfo.length > 0 ? t.productInfo.ProductInfo[0].Owners : [
];
r && (u.Model.CreditAccountBeneficiaries = [
], r.forEach(function (t) {
u.Model.CreditAccountBeneficiaries.push(new n.model.AccountBeneficiary(t))
}));
t.expenses.Fees ? (u.Model.Fees = t.expenses.Fees, u.Model.AmountLiteral = t.expenses.Fees.DebitAmountLiteral)  : o.reject(t.expenses.Error.Message);
o.resolve(!0)
}, function (n) {
u.Model.HasErrors = !0;
o.reject(n.Error.Message)
}),
o.promise.then(function () {
return u.getOtpPayload()
}).then(function (n) {
return u.otpHandler.reset({
hints: {
Requirement: String(2),
Method: String(1)
},
payload: n
}).enquire()
})
}
],
t.push(r),
i = {
templateUrl: 'Templates/Features/Payments/Cards/step2',
title: 'Επιβεβαίωση Στοιχείων'
},
i.processStep = [
'$q',
'PaymentsService',
'AppEventsService',
function (t, i, r) {
var u = this,
f = t.defer(),
e = function () {
r.publish(n.common.services.AppEventsService.InvalidateAccounts_Event);
r.publish(n.common.services.AppEventsService.InvalidateCards_Event);
r.publish(n.common.services.AppEventsService.InvalidateLoans_Event);
r.publish(n.common.services.AppEventsService.InvalidateLookups_Event)
};
return this.otpHandler.result().then(function () {
var t = u.otpHandler.appendExtraInfoToPayload(u.createExecutionPayload());
u.preExecute(t);
u.isProfileProduct().finally (function () {
i.ExecutePayment(t, u.Model.Online).then(function (t) {
var i = t,
s = u.setTransactionStatus(i),
o;
u.isOrdered = !u.Model.TransferMethodImmediate;
u.Model.showVenusMessage = i.VenusMessage;
s && i.CreditProductCode && u.Model.UseProfileProduct && (u.Model.RealCode = u.Model.showVenusMessage ? u.Model.CreditAccount.BankProduct.Code : i.CreditProductCode);
u.Model.CreditAccountBeneficiaries = [
];
o = t.CreditProductOwners;
o && o.forEach(function (t) {
u.Model.CreditAccountBeneficiaries.push(new n.model.AccountBeneficiary(t))
});
e();
u.addEventsPublishingForCorporate(r);
f.resolve(s)
}, function (t) {
u.Model.HasErrors = !0;
u.Model.ErrorMessage = u.STRINGS.failedTransactionSystemError;
n.utils.isUndefinedOrNull(t.Error) && t.data.Message == 'TimeoutError' ? u.Model.ErrorMessage = u.STRINGS.promptForCheckErrorMsg : n.utils.isUndefinedOrNull(t.Error) || n.utils.isUndefinedOrNull(t.Error.Message) || (u.Model.ErrorMessage = t.Error.Message);
f.reject(u.Model.ErrorMessage)
})
})
}, function (n) {
f.reject(n)
}),
f.promise
}
],
t.push(i),
u = {
templateUrl: 'Templates/Features/Payments/Cards/step3',
title: 'Αποτελέσμα συναλλαγής'
},
t.push(u),
t
},
r.prototype.getOtpPayload = function () {
var n = this.createExecutionPayload();
return this.preExecute(n),
n
},
r.prototype.hideFooter = function () {
return !this.isRetail && (this.roleService.IsAdminUser() || this.roleService.isEndUser())
},
r.$inject = [
'Model',
'$scope',
'$injector',
'userInfo',
'debitAccounts',
'cards',
'STRINGS',
'StateHelperService',
'$state',
'ProfileProductsService',
'$q',
'isCitiOnline',
'ProductMatchingService',
'RoleService',
'ProductsService',
'$modal',
'$window',
'$rootScope',
'otpHandler'
],
r
}(r);
t.CardPaymentWizardController = l;
n.payments.mainModule.controller('CardPaymentWizardController', l);
a = function (t) {
function r(r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k, d) {
var g = t.call(this, r, u, f, e, l, y, v, w, d) || this,
nt;
return g.Model = r,
g.debitAccounts = o,
g.cards = s,
g.banks = h,
g.stringsService = c,
g.StateHelperService = l,
g.stateService = a,
g.ProfileProductsService = v,
g.$q = y,
g.modal = b,
g.Model.TransactionDate = g.Model.NextWorkingDateValue,
g.Title = g.stringsService.bankCardPayment,
nt = g,
i.setInterCards(g, p).then(function () {
if (nt.stateData) {
var t = nt.getRealTransactionData();
nt.Model = n.transactions.TransactionUtils.TransactionToCardLoanPaymentInfo(t.data, nt.Model, o, s, p, t.isTemplate)
}
}),
nt.cards.length == 0 && (nt.Model.UseProfileProduct = !1),
nt.documentData.DocumentRequestType = 18,
g.Model.TransactionDate = g.PaymentPromptDateValue = n.utils.parseDateString(g.Model.DIASPromptDate),
g
}
return __extends(r, t),
Object.defineProperty(r.prototype, 'allowProfileProducts', {
get: function () {
return !this.IsBusy && this.cards.length > 0
},
enumerable: !0,
configurable: !0
}),
r.prototype.addProductToProfile = function () {
var i = this,
t = new n.model.AddProductViewModel;
t.product.BankProduct.Code = i.Model.CreditAccountCode;
t.product.CategoryGroupType = n.server.CategoryGroupType.CARD;
t.selectedBank = i.Model.SelectedBank;
t.product.BankProduct.Uses = [
];
t.product.Uses = [
];
t.product.BankProduct.Details = [
];
t.comesFromSuccessfullTransactionScreen = !0;
i.StateHelperService.go(n.constants.stateNames.settingsAddAccountInAccountsState, {
productTypeFamily: 'card',
productTypeScope: 'national'
}, t)
},
r.prototype.addToMyPayments = function () {
var t = this,
r = t.Model.UseProfileProduct ? t.Model.CreditAccount.Code : t.Model.CreditAccountCode,
u = t.Model.UseProfileProduct ? t.Model.CreditAccount.TypeID : t.Model.SelectedBank.TypeID,
i,
f,
e;
i = this.Model.UseProfileProduct ? new n.model.NewPaymentTransaction(t.Model, 1, u, t.Model.UseProfileProduct, r, !0, t.Model.CreditAccountBank.TypeName)  : new n.model.NewPaymentTransaction(t.Model, 1, u, t.Model.UseProfileProduct, r, !0, t.Model.SelectedBank.TypeName);
f = t.roleService.IsIndividualUser();
e = t.userInfo.OTPStatus === 0 || t.userInfo.OTPStatus === 1;
f && e && (i.comesFromSuccessfullTransactionScreen = !0);
t.StateHelperService.go('root.payments.mypayments.add-card', null, i)
},
r.prototype.initialiseSteps = function () {
var t = this,
i = [
],
u = {
templateUrl: 'Templates/Features/Payments/InterbankCards/step1',
title: 'Στοιχεία Πληρωμής'
},
r,
f;
return u.processStep = [
'$q',
'PaymentsService',
function (i, r) {
var f = i.defer(),
u = {
};
return u.Amount = t.Model.Amount,
u.DebitAccountNumber = t.Model.DebitProduct.Code,
u.DebitAccountType = t.Model.DebitProduct.TypeID,
t.Model.UseProfileProduct ? (u.CreditAccountNumber = t.Model.CreditAccount.Code, u.CreditAccountType = t.Model.CreditAccount.TypeID, u.CreditProductID = t.Model.CreditAccount.BankProduct.ProductID)  : (u.CreditAccountNumber = t.Model.CreditAccountCode, u.CreditAccountType = t.Model.SelectedBank.TypeID),
u.Currency = t.Model.DebitProduct.CurrencyEnum,
u.ExpensesServiceType = t.Model.ExpensesServiceType,
u.FeeType = 1,
r.GetExpenses(u).then(function (n) {
var i = n;
i.ResultCode == 0 ? (t.Model.Fees = i.Fees, t.Model.AmountLiteral = i.Fees.DebitAmountLiteral, f.resolve(!0))  : (t.Model.HasErrors = !0, t.Model.ErrorMessage = i.Error ? i.Error.Message : t.stringsService.problemTransactionProcessing, f.reject(t.Model.ErrorMessage))
}, function (i) {
t.Model.HasErrors = !0;
t.Model.ErrorMessage = t.STRINGS.failedTransactionSystemError;
n.utils.isUndefinedOrNull(i.Error.Message) || (t.Model.ErrorMessage = i.Error.Message);
f.reject(t.Model.ErrorMessage)
}),
f.promise.then(function () {
return t.getOtpPayload()
}).then(function (n) {
return t.otpHandler.reset({
hints: {
Requirement: String(2),
Method: String(1)
},
payload: n
}).enquire()
})
}
],
i.push(u),
r = {
templateUrl: 'Templates/Features/Payments/InterbankCards/step2',
title: 'Επιβεβαίωση Στοιχείων'
},
r.processStep = [
'$q',
'PaymentsService',
'AppEventsService',
function (t, i, r) {
var u = this,
f = t.defer(),
e = function () {
r.publish(n.common.services.AppEventsService.InvalidateAccounts_Event);
r.publish(n.common.services.AppEventsService.InvalidateCards_Event);
r.publish(n.common.services.AppEventsService.InvalidateLoans_Event);
r.publish(n.common.services.AppEventsService.InvalidateLookups_Event)
};
return u.otpHandler.result().then(function () {
var t = u.otpHandler.appendExtraInfoToPayload(u.getOtpPayload());
u.isProfileProduct().finally (function () {
i.ExecutePayment(t, u.Model.Online).then(function (n) {
var t = u.setTransactionStatus(n);
e();
f.resolve(t)
}, function (t) {
u.Model.HasErrors = !0;
u.Model.ErrorMessage = u.STRINGS.failedTransactionSystemError;
n.utils.isUndefinedOrNull(t.Error) && t.data.Message == 'TimeoutError' ? u.Model.ErrorMessage = u.STRINGS.promptForCheckErrorMsg : n.utils.isUndefinedOrNull(t.Error.Message) || (u.Model.ErrorMessage = t.Error.Message);
f.reject(u.Model.ErrorMessage)
})
})
}, function (n) {
f.reject(n)
}),
f.promise
}
],
i.push(r),
f = {
templateUrl: 'Templates/Features/Payments/InterbankCards/step3',
title: 'Αποτελέσμα συναλλαγής'
},
i.push(f),
i
},
r.prototype.getOtpPayload = function () {
var n = this.createExecutionPayload();
return this.preExecute(n),
n
},
r.prototype.createExecutionPayload = function () {
var i = this,
t = {
};
return t.DebitProductCode = this.Model.DebitProduct.Code,
t.DebitProductType = this.Model.DebitProduct.TypeID,
this.Model.UseProfileProduct ? (t.CreditProductCode = this.Model.CreditAccount.Code, t.CreditProductType = this.Model.CreditAccount.TypeID)  : (t.CreditProductCode = this.Model.CreditAccountCode, t.CreditProductType = this.Model.SelectedBank.TypeID),
this.Model.TransferMethodImmediate || (t.Block = this.Model.IsAmountBlocked, t.PaymentDate = n.utils.toShortDateString(this.Model.TransactionDate)),
t.Fees = this.Model.Fees,
t.FeeType = 1,
t.Amount = this.Model.Amount,
t.Currency = n.server.Currency.EUR,
t.PaymentType = this.Model.PaymentType,
t
},
r.$inject = [
'Model',
'$scope',
'$injector',
'userInfo',
'debitAccounts',
'cards',
'banks',
'STRINGS',
'StateHelperService',
'$state',
'ProfileProductsService',
'$q',
'ProductMatchingService',
'RoleService',
'$modal',
'$rootScope',
'otpHandler'
],
r
}(r);
t.InterbankCardWizardPaymentController = a;
n.payments.mainModule.controller('InterbankCardWizardPaymentController', a);
u = function (t) {
function r(r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k, d) {
var g = t.call(this, r, u, f, e, l, y, v, w, d) || this,
tt,
nt;
return g.Model = r,
g.debitAccounts = o,
g.loans = s,
g.stringsService = h,
g.requestFactory = c,
g.StateHelperService = l,
g.stateService = a,
g.ProfileProductsService = v,
g.$q = y,
g.productMatchingService = p,
g.modal = b,
g.rootScopeService = k,
g.isRetailUserWithOtpEnabled = !1,
g.successFooter = '',
g.isIndividualUser = !1,
g.isRetailWithEnabledTokenOtp = !1,
g.isRetailWithEnabledSmsOtp = !1,
g.otpModal = {
templateUrl: 'Templates/common/directives/otp-modal',
controller: 'OtpModalInstanceController as vm',
size: 'lg',
backdrop: 'static'
},
g.processExecutionStep = [
'$q',
'PaymentsService',
'AppEventsService',
function (t, i, r) {
return g.isProfileProduct().then(function () {
return g.otpHandler.result()
}).then(function () {
return g.otpHandler.appendExtraInfoToPayload(g.getOtpPayload())
}).then(function (n) {
return i.ExecutePayment(n, g.Model.Online)
}).then(function (t) {
var i = g.setTransactionStatus(t);
return i && (g.Model.showVenusMessage = t.VenusMessage, g.isOrdered = !g.Model.TransferMethodImmediate, r.publish(n.common.services.AppEventsService.InvalidateAccounts_Event), r.publish(n.common.services.AppEventsService.InvalidateLoans_Event)),
i
}).catch (function (t) {
return g.Model.HasErrors = !0,
g.Model.ErrorMessage = g.STRINGS.failedTransactionSystemError,
n.utils.isUndefinedOrNull(t.Error) && t.data.Message == 'TimeoutError' ? g.Model.ErrorMessage = g.STRINGS.promptForCheckErrorMsg : n.utils.isUndefinedOrNull(t.Error.Message) || (g.Model.ErrorMessage = t.Error.Message),
g.$q.reject({
Message: g.Model.ErrorMessage
})
})
}
],
g.Title = g.STRINGS.paymentLoanRevolving700,
nt = g,
i.setAlphaLoans(g, p).then(function () {
if (nt.stateData) {
var t = nt.getRealTransactionData();
nt.Model = n.transactions.TransactionUtils.TransactionToCardLoanPaymentInfo(t.data, nt.Model, o, s, p, t.isTemplate)
}
}),
nt.loans && nt.loans.length == 0 && (nt.Model.UseProfileProduct = !1),
nt.documentData.DocumentRequestType = 19,
g.Model.TransactionDate = g.PaymentPromptDateValue = n.utils.parseDateString(g.Model.PaymentPromptDate),
g.isRetail = w.IsRetail(),
g.isIndividualUser = w.IsIndividualUser(),
g.isIndividualUser && (g.userInfo.OTPStatus === 0 || g.userInfo.OTPStatus === 1) && (g.userInfo.SmsOTPEnabled ? g.isRetailWithEnabledSmsOtp = !0 : g.isRetailWithEnabledTokenOtp = !0),
g.isRetailUserWithOtpEnabled = g.isRetailWithEnabledSmsOtp || g.isRetailWithEnabledTokenOtp,
!g.isIndividualUser || e.OTPStatus !== 0 || e.SmsOTPEnabled || g.Model.UseProfileProduct || (tt = g.modal.open(g.otpModal).result, nt = g, tt.then(function () {
}, function () {
var n = 'root.overview';
nt.stateService.current && k.PreviousState && (nt.stateService.current.name === k.PreviousState.name || nt.stateService.current.name.indexOf(k.PreviousState.name) !== - 1) && (n = k.PreviousState.name);
nt.stateService.go(n)
})),
g
}
return __extends(r, t),
Object.defineProperty(r.prototype, 'hasDebitAccounts', {
get: function () {
return this.debitAccounts && this.debitAccounts.length > 0
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(r.prototype, 'hasLoans', {
get: function () {
return this.loans && this.loans.length > 0
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(r.prototype, 'allowProfileProducts', {
get: function () {
return !this.IsBusy && this.hasLoans
},
enumerable: !0,
configurable: !0
}),
r.prototype.addProductToProfile = function () {
var t = new n.model.AddProductViewModel;
t.product.BankProduct.Code = this.Model.CreditAccountCode;
t.product.CategoryGroupType = n.server.CategoryGroupType.LOAN;
t.product.BankProduct.Uses = [
];
t.product.Uses = [
];
t.product.BankProduct.Details = [
];
t.comesFromSuccessfullTransactionScreen = !0;
this.StateHelperService.go(n.constants.stateNames.settingsAddLoanInLoansState, {
productTypeFamily: 'loan',
productTypeScope: 'local'
}, t)
},
r.prototype.addToMyPayments = function () {
var t = this,
r = t.Model.UseProfileProduct ? t.Model.CreditAccount.Code : t.Model.CreditAccountCode,
u = t.Model.UseProfileProduct ? t.Model.CreditAccount.TypeID : 0,
i = new n.model.NewPaymentTransaction(t.Model, 1, u, t.Model.UseProfileProduct, r, !0);
t.isRetailUserWithOtpEnabled && (i.comesFromSuccessfullTransactionScreen = !0);
t.StateHelperService.go('root.payments.mypayments.add-loan', null, i)
},
r.prototype.initialiseSteps = function () {
var t = this,
i = [
],
u = {
templateUrl: 'Templates/Features/Payments/Loans/alphaStep1',
title: 'Στοιχεία Πληρωμής'
},
r,
f;
return u.processStep = [
'$q',
'PaymentsService',
'ProductsService',
function (i, r) {
return t.executeExpensesRequest(r).then(function (n) {
return n.ResultCode != 0 ? t.$q.reject(n.Error)  : (t.Model.Fees = n.Fees, t.Model.AmountLiteral = n.Fees.DebitAmountLiteral, t.$q.when(!0))
}, function (i) {
return t.$q.reject(n.utils.getErrorMsg(i) || t.STRINGS.failedTransactionSystemError)
}).catch (function (i) {
return t.Model.HasErrors = !0,
t.Model.ErrorMessage = n.utils.getErrorMsg(i) || t.STRINGS.problemTransactionProcessing,
t.$q.reject(i)
}).then(function () {
return t.getOtpPayload()
}).then(function (n) {
return t.otpHandler.reset({
hints: {
Requirement: String(2),
Method: String(1)
},
payload: n
}).enquire()
})
}
],
i.push(u),
r = {
templateUrl: 'Templates/Features/Payments/Loans/step2',
title: 'Επιβεβαίωση Στοιχείων'
},
r.processStep = this.processExecutionStep,
i.push(r),
f = {
templateUrl: 'Templates/Features/Payments/Loans/step3',
title: 'Αποτελέσμα συναλλαγής'
},
i.push(f),
i
},
r.prototype.getOtpPayload = function () {
var n = this.requestFactory.create(this);
return this.preExecute(n),
n
},
r.prototype.executeExpensesRequest = function (n) {
var t = {
};
return t.Amount = this.Model.Amount,
t.DebitAccountNumber = this.Model.DebitProduct.Code,
t.DebitAccountType = this.Model.DebitProduct.TypeID,
this.Model.UseProfileProduct ? (t.CreditAccountNumber = this.Model.CreditAccount.Code, t.CreditAccountType = this.Model.CreditAccount.TypeID)  : (t.CreditAccountNumber = this.Model.CreditAccountCode, t.CreditAccountType = 0),
t.Currency = this.Model.DebitProduct.CurrencyEnum,
t.ExpensesServiceType = this.Model.ExpensesServiceType,
t.FeeType = 1,
n.GetExpenses(t).then(function (n) {
return n
})
},
r.prototype.onExpensesRequestError = function (t, i) {
this.Model.HasErrors = !0;
this.Model.ErrorMessage = this.STRINGS.failedTransactionSystemError;
n.utils.isUndefinedOrNull(i.Error) || n.utils.isUndefinedOrNull(i.Error.Message) || (this.Model.ErrorMessage = i.Error.Message);
t.reject(this.Model.ErrorMessage)
},
r.$inject = [
'Model',
'$scope',
'$injector',
'userInfo',
'debitAccounts',
'loans',
'STRINGS',
'requestFactory',
'StateHelperService',
'$state',
'ProfileProductsService',
'$q',
'ProductMatchingService',
'RoleService',
'$modal',
'$rootScope',
'otpHandler'
],
r
}(r);
t.AlphaLoanPaymentWizardController = u;
n.payments.mainModule.controller('AlphaLoanPaymentWizardController', u);
v = function (t) {
function i(i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k) {
var d = t.call(this, i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k) || this;
return d.Model = i,
d.scope = r,
d.injector = u,
d.userInfo = f,
d.debitAccounts = e,
d.loans = o,
d.stringsService = s,
d.requestFactory = h,
d.StateHelperService = c,
d.stateService = l,
d.ProfileProductsService = a,
d.$q = v,
d.modal = w,
d.Title = d.STRINGS['payments.housing.loans.header'],
d.successFooter = d.STRINGS.housingPaymentSuccessFooter1 + d.today.getDate() + '/' + (d.today.getMonth() + 1) + '/' + d.today.getFullYear() + d.STRINGS.housingPaymentSuccessFooter2,
d.Model.IsProfileProduct = !0,
d.today = new Date,
d.Model.TransactionDate = d.PaymentPromptDateValue = n.utils.parseDateString(d.Model.PaymentPromptDate),
d
}
return __extends(i, t),
i.prototype.initialiseSteps = function () {
var i = this,
r = t.prototype.initialiseSteps.call(this);
return r[0].templateUrl = 'Templates/Features/Payments/Loans/housingStep1',
r[0].processStep = [
'$q',
'PaymentsService',
'ProductsService',
function (t, r) {
var f = t.defer(),
u = {
};
return u.Amount = i.Model.Amount,
u.DebitAccountNumber = i.Model.DebitProduct.Code,
u.DebitAccountType = i.Model.DebitProduct.TypeID,
u.CreditAccountNumber = i.Model.CreditAccount.Code,
u.CreditAccountType = i.Model.CreditAccount.TypeID,
u.Currency = i.Model.DebitProduct.CurrencyEnum,
u.ExpensesServiceType = i.Model.ExpensesServiceType,
u.FeeType = 1,
i.Model.DebitProduct.CurrencyEnum == n.server.Currency.EUR && i.Model.CreditAccount.CurrencyEnum == n.server.Currency.EUR ? r.GetExpenses(u).then(function (n) {
var t = n;
t.ResultCode == 0 ? (i.Model.Fees = t.Fees, i.Model.AmountLiteral = t.Fees.DebitAmountLiteral, f.resolve(!0))  : (i.Model.HasErrors = !0, i.Model.ErrorMessage = t.Error ? t.Error.Message : i.STRINGS.problemTransactionProcessing, f.reject(i.Model.ErrorMessage))
}, function (t) {
i.Model.HasErrors = !0;
i.Model.ErrorMessage = i.STRINGS.failedTransactionSystemError;
n.utils.isUndefinedOrNull(t.Error) || n.utils.isUndefinedOrNull(t.Error.Message) || (i.Model.ErrorMessage = t.Error.Message);
f.reject(i.Model.ErrorMessage)
})  : f.reject(i.STRINGS.diffCurrencyPaymentError),
f.promise
}
],
r
},
i.prototype.addToMyPayments = function () {
var t = this,
r = t.Model.UseProfileProduct ? t.Model.CreditAccount.Code : t.Model.CreditAccountCode,
u = t.Model.UseProfileProduct ? t.Model.CreditAccount.TypeID : 0,
i = new n.model.NewPaymentTransaction(t.Model, 1, u, t.Model.UseProfileProduct, r, !0);
t.isRetailUserWithOtpEnabled && (i.comesFromSuccessfullTransactionScreen = !0);
t.StateHelperService.go('root.payments.mypayments.add-loan', null, i)
},
i.$inject = [
'Model',
'$scope',
'$injector',
'userInfo',
'debitAccounts',
'loans',
'STRINGS',
'requestFactory',
'StateHelperService',
'$state',
'ProfileProductsService',
'$q',
'ProductMatchingService',
'RoleService',
'$modal',
'$rootScope',
'otpHandler'
],
i
}(u);
t.HousingLoanPaymentWizardController = v;
n.payments.mainModule.controller('HousingLoanPaymentWizardController', v);
y = function (t) {
function r(r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k, d) {
var g = t.call(this, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k, d) || this,
nt;
return g.Model = r,
g.scope = u,
g.injector = f,
g.userInfo = e,
g.debitAccounts = o,
g.loans = s,
g.stringsService = h,
g.requestFactory = c,
g.StateHelperService = l,
g.stateService = a,
g.ProfileProductsService = v,
g.$q = y,
g.modalService = b,
g.Title = g.STRINGS.paymentLoanPersonalConsumer,
g.Model.TransferMethodImmediate = !1,
nt = g,
i.setConsumerLoans(g, p).then(function () {
if (nt.stateData) {
var t = nt.getRealTransactionData();
nt.Model = n.transactions.TransactionUtils.TransactionToCardLoanPaymentInfo(t.data, nt.Model, o, s, p, t.isTemplate)
}
}),
nt.loans && nt.loans.length == 0 && (nt.Model.UseProfileProduct = !1),
g.Model.TransactionDate = g.PaymentPromptDateValue = n.utils.parseDateString(g.Model.PaymentPromptDate),
g
}
return __extends(r, t),
r.prototype.initialiseSteps = function () {
var n = t.prototype.initialiseSteps.call(this);
return n[0].templateUrl = 'Templates/Features/Payments/Loans/step1',
n
},
r.prototype.openImgModal = function () {
this.modalService.open({
templateUrl: 'Templates/Features/Payments/modal-image',
controller: 'ImageModalControler as vm',
windowClass: 'custom',
size: 'sm',
resolve: {
imgUrl: function () {
return 'Content/Images/Payments/loans/10046.gif'
}
}
})
},
r.$inject = [
'Model',
'$scope',
'$injector',
'userInfo',
'debitAccounts',
'loans',
'STRINGS',
'requestFactory',
'StateHelperService',
'$state',
'ProfileProductsService',
'$q',
'ProductMatchingService',
'RoleService',
'$modal',
'$rootScope',
'otpHandler'
],
r
}(u);
t.LoanPaymentWizardController = y;
n.payments.mainModule.controller('LoanPaymentWizardController', y);
p = function () {
function t() {
}
return t.prototype.create = function (t) {
var i = {
};
return i.DebitProductCode = t.Model.DebitProduct.Code,
i.DebitProductType = t.Model.DebitProduct.TypeID,
t.Model.UseProfileProduct ? (i.CreditProductCode = t.Model.CreditAccount.Code, i.CreditProductType = t.Model.CreditAccount.TypeID)  : (i.CreditProductCode = t.Model.CreditAccountCode, i.CreditProductType = 0, i.OTP = t.Model.OTP ? t.Model.OTP : null),
t.Model.TransferMethodImmediate || (i.Block = t.Model.IsAmountBlocked, i.PaymentDate = n.utils.toShortDateString(t.Model.TransactionDate)),
i.Amount = t.Model.Amount,
i.Currency = n.server.Currency.EUR,
i.PaymentType = t.Model.PaymentType,
i
},
t
}();
t.LoanExecuteRequestFactory = p;
d = function (n) {
function t() {
return n !== null && n.apply(this, arguments) || this
}
return __extends(t, n),
t.prototype.create = function (t) {
var i = n.prototype.create.call(this, t);
return i.PaymentType = 5,
i
},
t
}(p);
t.ConsumeristLoanExecuteRequestFactory = d;
w = function (t) {
function i(n, i, r, u, f, e, o, s, h, c, l, a, v, y, p, w) {
var b = t.call(this, r, u, f, n, e, c, v, h, i, l, a, y, p, w, null) || this;
return b.paymentType = n,
b.Model = r,
b.scope = u,
b.injector = f,
b.stringsService = e,
b.PaymentsService = o,
b.$q = s,
b.StateHelperService = h,
b.modalService = c,
b.debitAccounts = l,
b.cards = a,
b.PaymentTypeService = v,
b.stateService = p,
b
}
return __extends(i, t),
i.prototype.checkDigits = function () {
var t = this.Model.DynamicValues.Code,
r,
u,
i;
n.utils.isUndefinedOrNull(t) || t.length != 26 ? this.disableAmount = !1 : (this.IsBusy = !0, t.substr(0, 1) == '2' ? (r = t.substr(10, 6), r != '000000' ? (u = r.substr(0, 4) + '.' + r.substr(4, 2), this.Model.Amount = parseFloat(u), this.disableAmount = !0)  : this.disableAmount = !1)  : this.disableAmount = !1, i = t.substr(17, 6), this.expirationDates = null, i != '000000' && (this.expirationDates = new Date(parseInt('20' + i.substr(4, 2)), parseInt(i.substr(2, 2)) - 1, parseInt(i.substr(0, 2)))), this.IsBusy = !1)
},
i.prototype.initialiseSteps = function () {
var n = this,
i = t.prototype.initialiseSteps.call(this),
r;
return i[0].processStep = [
'$q',
'TransfersService',
function (t, i) {
var f = n.paymentType,
r = n.Model,
u = t.defer();
return n.areStep1DataValid(u) && (n.createPaymentMaskCode(r, f), n.copyDynamicAmountToViewModel(r), r.PopulateDetails(f), n.getTransferExpenses(i, r, f).then(function (n) {
var t = n;
t.Fees != undefined ? (r.Fees = t.Fees, r.AmountLiteral = t.Fees.DebitAmountLiteral, u.resolve(!0))  : u.reject(t.Error.Message)
}, function (t) {
n.Model.HasErrors = !0;
n.Model.ErrorMessage = t.Error.Message;
u.reject(t.Error.Message)
})),
u.promise.then(function () {
return n.getOtpPayload()
}).then(function (t) {
return n.otpHandler.reset({
hints: {
Requirement: String(2),
Method: String(1)
},
payload: t
}).enquire()
})
}
],
r = i[1],
r.processStep = [
'$q',
'PaymentsService',
'AppEventsService',
'STRINGS',
function (t, i, r) {
var u = t.defer();
return n.otpHandler.result().then(function () {
var t = n.otpHandler.appendExtraInfoToPayload(n.getOtpPayload());
n.executePayment(u, i, r, t)
}, function (n) {
u.reject(n)
}),
u.promise
}
],
i
},
i.$inject = [
'paymentType',
'savedPaymentCodes',
'Model',
'$scope',
'$injector',
'STRINGS',
'PaymentsService',
'$q',
'StateHelperService',
'$modal',
'debitAccounts',
'cards',
'PaymentTypeService',
'ProductMatchingService',
'$state',
'RoleService'
],
i
}(n.payments.DynamicPaymentWizardController);
t.HellenicAmericanPaymentController = w;
n.payments.mainModule.controller('HellenicAmericanPaymentController', w)
}) (t = n.payments || (n.payments = {
}))
}(alpha || (alpha = {
})); __extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(), function (n) {
var t;
(function (t) {
var i = function (t) {
function i(i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k, d) {
var g = t.call(this, r, u, f, i, y, a, p, o, e, [
], k, null) || this,
it,
ut,
rt,
nt,
tt;
return g.paymentType = i,
g.Model = r,
g.scope = u,
g.injector = f,
g.debitAccounts = e,
g.StateHelperService = o,
g.eVoucherConfigTree = s,
g.$scope = h,
g.filterService = c,
g.modalService = a,
g.windowService = v,
g.stringsService = y,
g.PaymentTypeService = p,
g.postNewWindowService = w,
g.regularExpressionProvider = b,
g.ProfileProductsService = d,
g.useParavoloTypeCode = !0,
g.paravoloTypeCode = null,
g.isParavoloTypeCodeInvalid = !1,
g.dateOptions = {
formatYear: 'yyyy',
startingDay: 1,
showWeeks: 'false',
maxMode: 'day',
maxDate: Date.now()
},
it = v.document.querySelector('meta[name = \'IgnoreAtm24\']'),
it && it.getAttribute('content') == 'true' && (g.ignoreAtm24 = !0),
g.setCanShowWizard(),
g.Model.PaymentType = 7,
g.Model.Email = l.Email || null,
g.Model.CompanyName = l.UserInfo.CompanyInfo ? l.UserInfo.CompanyInfo.Name : null,
ut = g,
rt = g.StateHelperService.getStateData(),
rt && (nt = g.getRealTransactionData(), nt.data.Details && nt.data.Details.length > 0 && (nt.isTemplate || (g.Model.Amount = nt.data.Amount, g.Model.DebitProduct = n.transactions.TransactionUtils.getProduct(g.debitAccounts, nt.data.DebitProduct)), g.Model.TaxCode = n.utils.isUndefinedOrNull(n.transactions.TransactionUtils.getDetail(nt.data.Details, n.server.DetailName.eParavolo_AFM)) ? undefined : n.transactions.TransactionUtils.getDetail(nt.data.Details, n.server.DetailName.eParavolo_AFM).Value, g.Model.Name = n.utils.isUndefinedOrNull(n.transactions.TransactionUtils.getDetail(nt.data.Details, n.server.DetailName.eParavolo_Name)) ? undefined : n.transactions.TransactionUtils.getDetail(nt.data.Details, n.server.DetailName.eParavolo_Name).Value, g.Model.LastName = n.utils.isUndefinedOrNull(n.transactions.TransactionUtils.getDetail(nt.data.Details, n.server.DetailName.eParavolo_LastCompanyName)) ? undefined : n.transactions.TransactionUtils.getDetail(nt.data.Details, n.server.DetailName.eParavolo_LastCompanyName).Value, g.Model.FatherName = n.utils.isUndefinedOrNull(n.transactions.TransactionUtils.getDetail(nt.data.Details, n.server.DetailName.eParavolo_FatherName)) ? undefined : n.transactions.TransactionUtils.getDetail(nt.data.Details, n.server.DetailName.eParavolo_FatherName).Value, g.Model.MotherName = n.utils.isUndefinedOrNull(n.transactions.TransactionUtils.getDetail(nt.data.Details, n.server.DetailName.eParavolo_motherName)) ? undefined : n.transactions.TransactionUtils.getDetail(nt.data.Details, n.server.DetailName.eParavolo_motherName).Value, tt = n.utils.isUndefinedOrNull(n.transactions.TransactionUtils.getDetail(nt.data.Details, n.server.DetailName.eParavolo_dob)) ? undefined : n.transactions.TransactionUtils.getDetail(nt.data.Details, n.server.DetailName.eParavolo_dob).Value.split('/'), n.utils.isUndefinedOrNull(tt) || (g.Model.DateOfBirth = new Date(parseInt(tt[2]), parseInt(tt[1]) - 1, parseInt(tt[0]))), g.Model.Misc = n.utils.isUndefinedOrNull(n.transactions.TransactionUtils.getDetail(nt.data.Details, n.server.DetailName.eParavolo_additionalInfo)) ? undefined : n.transactions.TransactionUtils.getDetail(nt.data.Details, n.server.DetailName.eParavolo_additionalInfo).Value, g.Model.MobilePhone = n.utils.isUndefinedOrNull(n.transactions.TransactionUtils.getDetail(nt.data.Details, n.server.DetailName.eParavolo_mobilePhone)) ? undefined : n.transactions.TransactionUtils.getDetail(nt.data.Details, n.server.DetailName.eParavolo_mobilePhone).Value, g.Model.IBan = n.utils.isUndefinedOrNull(n.transactions.TransactionUtils.getDetail(nt.data.Details, n.server.DetailName.eParavolo_iban)) ? undefined : n.transactions.TransactionUtils.getDetail(nt.data.Details, n.server.DetailName.eParavolo_iban).Value)),
g
}
return __extends(i, t),
i.prototype.onDebitSelected = function () {
this.Model.TaxCode && (this.Model.IBan = this.Model.DebitProduct.Code)
},
i.prototype.enableParavoloTypeCodeEditing = function () {
this.Model.PublicSector = null;
this.paravoloTypeCode = null;
this.isParavoloTypeCodeInvalid = !1
},
i.prototype.disableParavoloTypeCodeEditing = function () {
this.paravoloTypeCode = null;
this.isParavoloTypeCodeInvalid = !1;
this.Model.PublicSector = null
},
i.prototype.fetchParavoloInfo = function () {
var t,
n,
i,
r;
if (this.paravoloTypeCode) {
for (this.Model.PublicSector = null, t = this.eVoucherConfigTree, n = 0; n < t.length; n++) for (i = 0; i < t[n].SubData.length; i++) for (r = 0; r < t[n].SubData[i].SubData.length; r++) if (t[n].SubData[i].SubData[r].ID == this.paravoloTypeCode) {
this.Model.PublicSector = t[n];
this.Model.VoucherCategory = this.Model.PublicSector.SubData[i];
this.Model.VoucherType = this.Model.VoucherCategory.SubData[r];
this.isParavoloTypeCodeInvalid = !1;
return
}
this.isParavoloTypeCodeInvalid = !0
}
},
i.prototype.onTaxCodeLeave = function () {
this.Model.IBan = this.Model.DebitProduct && this.Model.TaxCode ? this.Model.DebitProduct.Code : null
},
i.prototype.initialiseSteps = function () {
var i = this,
r = t.prototype.initialiseSteps.call(this),
f = r[0],
u,
e;
return f.templateUrl = 'Templates/Features/Payments/eVoucherIssue/step1',
f.processStep = [
'$q',
'PaymentsService',
'TransfersService',
function (t, r, u) {
var f = i,
o = {
AdditionalInfo: f.Model.Misc,
AFM: f.Model.TaxCode,
Amount: f.Model.Amount,
Category: f.Model.VoucherCategory.ID,
BirthDate: n.utils.toShortDateString(f.Model.DateOfBirth),
eMailAddress: f.Model.Email,
FatherName: f.Model.FatherName,
FirstName: f.Model.Name,
Foreas: f.Model.PublicSector.ID,
IBAN: f.Model.IBan,
LastName: f.Model.LastName,
MobilePhone: f.Model.MobilePhone,
MotherName: f.Model.MotherName,
SendEMail: f.Model.SendEmail,
TypeCode: f.Model.VoucherType.ID
},
e = t.defer();
return r.IssueVoucher(o).then(function (n) {
return 0 == n.ResultCode && (i.Model.eVoucherCode = i.Model.PaymentCode = n.eParavoloCode, i.Model.eVoucherExpirationDate = i.filterService('date') (n.ExpirationDate, 'dd/MM/yyyy'), i.Model.PopulateDetails(i.paymentType)),
n
}).then(function (n) {
if (0 == n.ResultCode) {
var t = {
};
t.Amount = f.Model.Amount;
t.Currency = f.Model.DebitProduct.CurrencyEnum;
t.DebitAccountNumber = f.Model.DebitProduct.Code;
t.DebitAccountType = f.Model.DebitProduct.TypeID;
t.CreditAccountNumber = f.Model.PaymentCode;
t.CreditAccountType = f.paymentType.ProductTypeId;
t.ExpensesServiceType = f.Model.ExpensesServiceType;
t.FeeType = 1;
u.GetTransferExpenses(t).then(function (n) {
var t = n;
t.Fees != undefined ? (f.Model.Fees = t.Fees, f.Model.AmountLiteral = t.Fees.DebitAmountLiteral, e.resolve(!0))  : e.reject(t.Error.Message)
})
} else e.reject(n.Error.Message)
}).catch (function (n) {
f.windowService.document.body.scrollTop = 0;
e.reject(n)
}),
e.promise.then(function () {
return f.getOtpPayload()
}).then(function (n) {
return f.otpHandler.reset({
hints: {
Requirement: String(2),
Method: String(1)
},
payload: n
}).enquire()
})
}
],
u = r[1],
u.templateUrl = 'Templates/Features/Payments/eVoucherIssue/step2',
u.processStep = [
'$q',
'PaymentsService',
'AppEventsService',
'STRINGS',
function (n, t, r) {
var u = n.defer();
return i.otpHandler.result().then(function () {
var n = i.otpHandler.appendExtraInfoToPayload(i.getOtpPayload());
i.executePayment(u, t, r, n)
}, function () {
u.reject(!0)
}),
u.promise
}
],
e = r[2],
e.templateUrl = 'Templates/Features/Payments/eVoucherIssue/step3',
r
},
Object.defineProperty(i.prototype, 'taxCodePattern', {
get: function () {
return n.constants.regularPatterns.taxCodeNumber
},
enumerable: !0,
configurable: !0
}),
i.prototype.openPrintDialog = function () {
var n = this;
n.modalService.open({
templateUrl: 'Templates/Features/Payments/eVoucherIssue/print',
size: 'lg',
controller: 'eVoucherIssueAndPaymentPrintController as vm',
resolve: {
Model: function () {
return n.Model
}
}
})
},
i.prototype.exportDocumentData = function () {
var n = {
},
t;
return n.PDFRequestType = 9,
t = {
SubmittedTimeStamp: this.Model.SubmittedTimeStamp,
eVoucherCode: this.Model.eVoucherCode,
m_PublicSector: {
Description: this.Model.PublicSector.Description
},
m_VoucherCategory: {
Description: this.Model.VoucherCategory.Description
},
m_VoucherType: {
Description: this.Model.VoucherType.Description
},
Amount: this.Model.Amount,
DebitProduct: {
Currency: this.Model.DebitProduct.Currency,
BankProduct: {
Code: this.Model.DebitProduct.Code
}
},
eVoucherExpirationDate: this.filterService('date') (this.Model.eVoucherExpirationDate, 'dd/MM/yyyy'),
TaxCode: this.Model.TaxCode,
Name: this.Model.Name,
LastName: this.Model.LastName,
FatherName: this.Model.FatherName,
Email: this.Model.SendEmail ? this.Model.Email : '',
MotherName: this.Model.MotherName,
DateOfBirthLiteral: this.filterService('date') (this.Model.DateOfBirth, 'dd/MM/yyyy'),
Misc: this.Model.Misc,
MobilePhone: this.Model.MobilePhone,
IBan: this.Model.IBan,
TransactionUN: this.Model.TransactionUN,
AmountLiteral: this.Model.AmountLiteral,
PaymentName: this.paymentType.Name,
CompanyName: this.Model.CompanyName
},
n.Parameters = JSON.stringify(t),
n
},
i.$inject = [
'paymentType',
'Model',
'$scope',
'$injector',
'debitAccounts',
'StateHelperService',
'eVoucherConfigTree',
'$scope',
'$filter',
'userInfo',
'$modal',
'$window',
'STRINGS',
'PaymentTypeService',
'postNewWindowService',
'RegularExpressionService',
'RoleService',
'ProfileProductsService'
],
i
}(t.DynamicPaymentWizardBase),
r;
t.eVoucherIssueAndPaymentController = i;
r = function () {
function n(n, t, i) {
this.$modalInstance = n;
this.Model = t;
this.$window = i
}
return n.prototype.closeModal = function () {
this.$modalInstance.dismiss()
},
n.prototype.print = function () {
this.$window.print()
},
n.$inject = [
'$modalInstance',
'Model',
'$window'
],
n
}();
n.payments.mainModule.controller('eVoucherIssueAndPaymentPrintController', r);
n.payments.mainModule.controller('eVoucherIssueAndPayment', i)
}) (t = n.payments || (n.payments = {
}))
}(alpha || (alpha = {
})); __extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(), function (n) {
var t;
(function (t) {
var i = function () {
function n(n) {
this.Actions = [
];
this.HasErrors = !1;
this.ErrorMessage = '';
this.CountTemplates = 0;
this.AddProductToProfile = null;
n ? this.Template = n : (this.Actions = [
], this.Template = {
Transaction: {
Details: [
]
}
})
}
return Object.defineProperty(n.prototype, 'Order', {
get: function () {
return this.Template.Priority
},
set: function (n) {
this.Template.Priority = n
},
enumerable: !0,
configurable: !0
}),
n
}(),
r;
t.MyPaymentsTemplatesBase = i;
r = function (t) {
function i() {
var i = t.call(this) || this;
return i.TemplateID = '',
i.AUN = '',
i.TemplateDescription = '',
i.TemplateType = 1,
i.AddProductFromTemplateToProfile = new n.model.AddProductFromTemplateToProfile,
i
}
return __extends(i, t),
i
}(i);
t.AddMyPaymentsTemplateViewModel = r
}) (t = n.model || (n.model = {
}))
}(alpha || (alpha = {
})), function (n) {
var t;
(function (t) {
var i = function () {
function n() {
this.IsBusy = !1;
this.showValidationErrors = !1;
this.HasErrors = !1;
this.ErrorMessage = '';
this.HasMore = !1;
this.TotalRecords = 0;
this.ReplyRecords = 0;
this.LastPageIndex = ''
}
return n
}(),
r,
u,
f,
e;
t.MyPaymentsControllerBase = i;
r = function (t) {
function i(i, r, u, f, e, o, s, h, c, l, a, v) {
var p = t.call(this) || this,
y;
return p.$scope = i,
p.QueriesService = r,
p.paymentTypes = u,
p.cards = f,
p.interbankCards = e,
p.alphaLoans = o,
p.consumerLoans = s,
p.transactionActionsService = h,
p.ProfileProductsService = c,
p.AppEventsService = l,
p.productMatchingService = a,
p.SharedDataService = v,
v.SetControllerData(i, n.server.Controllers.MyPaymentsController, 'PaymentTypes', u),
p.Templates = [
],
p.Model = [
],
y = p,
y.IsBusy = !0,
c.getTransactionTemplates(1).then(function (t) {
t.ReplyRecords > 0 && (y.HasMore = t.HasMore, y.TotalRecords = t.TotalRecords, y.LastPageIndex = t.CurrentPageIndex, y.ReplyRecords = t.ReplyRecords, t.Templates.forEach(function (t) {
var i = new n.model.MyPaymentsTemplatesBase(t, u, f, e, o, s);
y.transactionActionsService.decorateTransactionTemplateViewModel(i);
y.Templates.push(i)
}), y.documentData = r.getTransactionTemplatesRequest(0, 1), y.documentData.DocumentRequestType = 13, y.documentData.Type = 1, y.Model = y.Templates, v.SetControllerModel(i, n.server.Controllers.MyPaymentsController, y.Model))
}, function (n) {
y.HasErrors = !0;
y.ErrorMessage = n.Error.Message
}).finally (function () {
y.IsBusy = !1
}),
p
}
return __extends(i, t),
i.prototype.persistOrder = function (t, i) {
var r = new n.model.DataForUpdateOrderOnly(t.Template.ID, t.Order),
u = new n.model.DataForUpdateOrderOnly(i.Template.ID, i.Order),
f = [
r,
u
],
e = this;
return this.QueriesService.setTransactionTemplateOrder(3, f).then(function (r) {
r.ResultCode == 0 ? e.AppEventsService.publish(n.common.services.AppEventsService.InvalidatePaymentTemplates_Event)  : this.rollbackOrder(t, i)
}, function () {
this.rollbackOrder(t, i)
})
},
i.prototype.rollbackOrder = function (n, t) {
var i = t.Order;
t.Order = n.Order;
n.Order = i
},
i.prototype.filterModel = function () {
var t = this;
t.Model = n.utils.isUndefinedOrNullorWhiteSpace(t.filterString) ? t.Templates : t.Templates.filter(function (n) {
var i = n.Template.Transaction.CreditProductType.toUpperCase();
return i.indexOf(t.filterString.toUpperCase()) != - 1
})
},
i.$inject = [
'$scope',
'QueriesService',
'paymentTypes',
'cards',
'interbankCards',
'alphaLoans',
'consumerLoans',
'TransactionActionsService',
'ProfileProductsService',
'AppEventsService',
'ProductMatchingService',
'SharedDataService'
],
i
}(i);
t.MyPaymentsController = r;
n.payments.mainModule.controller('MyPaymentsController', r);
u = function (t) {
function i(n, i, r, u, f, e, o, s, h, c, l, a, v, y, p) {
var w = t.call(this) || this;
return w.paymentTypes = n,
w.QueriesService = i,
w.StateHelperService = r,
w.$q = u,
w.$scope = f,
w.$state = e,
w.LookupsService = o,
w.cards = s,
w.interbankCards = h,
w.alphaLoans = c,
w.consumerLoans = l,
w.Model = a,
w.AppEventsService = v,
w.stringsService = y,
w.otpHandler = p,
w.showConfirmation = !1,
w
}
return __extends(i, t),
Object.defineProperty(i.prototype, 'otpKey', {
get: function () {
return this.otpHandler.caller
},
enumerable: !0,
configurable: !0
}),
i.prototype.IsProfileProduct = function (n) {
var t = this,
i = n.filter(function (n) {
return n.Code == t.Model.Template.Transaction.CreditProduct
});
return i.length > 0 ? !0 : !1
},
i.prototype.saveTemplate = function () {
var t = this,
i;
return this.HasErrors = !1,
this.showValidationErrors = !0,
n.utils.forceValidation(this.$scope.form),
this.$scope.form.$invalid ? void 0 : (this.IsBusy = !0, i = this.Model.AddProductFromTemplateToProfile, this.otpHandler.result().then(function () {
return i ? t.otpHandler.appendExtraInfoToPayload(i)  : i
}).then(function (n) {
return t.QueriesService.setTransactionTemplate(0, t.Model.Template.ID, t.Model.Template, t.Model.Template.Transaction.TransactionAUN, t.Model.TemplateDescription, 1, n)
}).then(function (i) {
if (i.ResultCode !== 0) return t.$q.reject(i);
t.AppEventsService.publish(n.common.services.AppEventsService.InvalidatePaymentTemplates_Event);
t.Model.AddProductFromTemplateToProfile != null && (t.AppEventsService.publish(n.common.services.AppEventsService.InvalidateLookups_Event, [
'PredefinedCodesForPaymentType_10046'
]), t.LookupsService.clearCache('PredefinedCodesForPaymentType_' + t.Model.Template.Transaction.CreditProductTypeID), t.AppEventsService.publish(n.common.services.AppEventsService.InvalidateCards_Event), t.AppEventsService.publish(n.common.services.AppEventsService.InvalidateLoans_Event))
}).catch (function (i) {
t.HasErrors = !0;
t.Model.ErrorMessage = n.utils.getErrorMsg(i, t.stringsService.GeneralServiceCallError)
}).finally (function () {
t.showConfirmation = !0;
t.IsBusy = !1
}))
},
i.$inject = [
'paymentTypes',
'QueriesService',
'StateHelperService',
'$q',
'$scope',
'$state',
'LookupsService',
'cards',
'interbankCards',
'alphaLoans',
'consumerLoans',
'Model',
'AppEventsService',
'STRINGS',
'otpHandler'
],
i
}(i);
t.MyPaymentsAddController = u;
n.payments.mainModule.controller('MyPaymentsAddController', u);
f = function (t) {
function i(i, r, u, f, e, o) {
var s = t.call(this) || this;
s.QueriesService = i;
s.$state = r;
s.$modalInstance = u;
s.$stateParams = f;
s.AppEventsService = e;
s.SharedDataService = o;
var a = s,
h = f.id,
c = o.GetControllerModel(n.server.Controllers.MyPaymentsController),
l = c.filter(function (n) {
return n.Template.ID == h
});
return s.Model = l[0],
s.paymentTypes = o.GetControllerData(n.server.Controllers.MyPaymentsController, 'PaymentTypes'),
s
}
return __extends(i, t),
i.prototype.close = function () {
this.$modalInstance.close()
},
i.prototype.deleteTemplate = function () {
var t = this;
t.IsBusy = !0;
t.QueriesService.setTransactionTemplate(2, t.Model.Template.ID, t.Model.Template, t.Model.Template.Transaction.TransactionAUN, t.Model.Template.Description, 1).then(function () {
t.IsBusy = !1;
t.AppEventsService.publish(n.common.services.AppEventsService.InvalidatePaymentTemplates_Event);
t.$modalInstance.close(!0)
}, function (n) {
t.IsBusy = !1;
t.HasErrors = !0;
t.ErrorMessage = n.Error.Message
})
},
i.$inject = [
'QueriesService',
'$state',
'$modalInstance',
'$stateParams',
'AppEventsService',
'SharedDataService'
],
i
}(i);
t.MyPaymentsDeleteController = f;
n.payments.mainModule.controller('MyPaymentsDeleteController', f);
e = function (t) {
function i(n, i, r, u, f, e) {
var o = t.call(this) || this;
return o.QueriesService = n,
o.$state = i,
o.Model = r,
o.$scope = u,
o.AppEventsService = f,
o.LookupsService = e,
o
}
return __extends(i, t),
i.prototype.updateTemplate = function () {
var t = this;
t.showValidationErrors = !0;
n.utils.forceValidation(t.form);
t.form.$invalid || (t.IsBusy = !0, t.QueriesService.setTransactionTemplate(1, t.Model.Template.ID, t.Model.Template, t.Model.Template.Transaction.TransactionAUN, t.Model.Template.Description, 1).then(function () {
t.IsBusy = !1;
t.AppEventsService.publish(n.common.services.AppEventsService.InvalidatePaymentTemplates_Event);
t.AppEventsService.publish(n.common.services.AppEventsService.InvalidateLookups_Event, [
'PredefinedCodesForPaymentType_10046'
]);
t.LookupsService.clearCache('PredefinedCodesForPaymentType_' + t.Model.Template.Transaction.CreditProductTypeID);
t.$state.go('root.payments.mypayments.list')
}, function (n) {
t.IsBusy = !1;
t.HasErrors = !0;
t.ErrorMessage = n.Error.Message
}))
},
i.$inject = [
'QueriesService',
'$state',
'Model',
'$scope',
'AppEventsService',
'LookupsService'
],
i
}(i);
t.MyPaymentsEditController = e;
n.payments.mainModule.controller('MyPaymentsEditController', e)
}) (t = n.payments || (n.payments = {
}))
}(alpha || (alpha = {
})), function (n) {
var t;
(function (n) {
var t = function () {
function n() {
}
return n.prototype.getController = function (t) {
return t in n.productTypeConfigs ? n.productTypeConfigs[t].controller : 'TransactionDetailsController'
},
n.prototype.getTemplate = function (t) {
return t in n.productTypeConfigs ? n.productTypeConfigs[t].view : 'Templates/Features/Payments/Transaction/payment-details'
},
n.productTypeConfigs = {
10179: {
controller: 'LaborTicketTransactionDetailsController',
view: 'Templates/Features/Payments/Transaction/custom/labor-ticket-details'
},
19999: {
controller: 'TransactionDetailsController',
view: 'Templates/Features/Payments/Transaction/custom/my-bank-details'
},
19998: {
controller: 'TransactionDetailsController',
view: 'Templates/Features/Payments/Transaction/custom/iris-details'
}
},
n
}();
n.PaymentDetailAbstractFactory = t
}) (t = n.payments || (n.payments = {
}))
}(alpha || (alpha = {
})); __extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(), function (n) {
var t;
(function (t) {
var i = function (t) {
function i(i, r, u, f, e, o, s, h, c, l, a, v, y, p) {
var w = t.call(this, r, u, f, h, a, p) || this,
k,
d,
rt,
b,
g,
nt,
tt,
it;
return w.paymentType = i,
w.Model = r,
w.scope = u,
w.injector = f,
w.debitAccounts = e,
w.creditAccounts = o,
w.securityServiceConfig = s,
w.StateHelperService = h,
w.ProfileProductsService = c,
w.$q = l,
w.userInfo = v,
k = y.document.querySelector('meta[name = \'IgnoreAtm24\']'),
k && k.getAttribute('content') == 'true' && (w.ignoreAtm24 = !0),
d = a.getRolePermissions(),
w.canViewAccountBalance = d.indexOf('ViewAccountGrossBalance') > - 1,
w.setCanShowWizard(),
rt = w,
b = w.StateHelperService.getStateData(),
b && (r.isTemplate || (w.Model.Amount = b.Amount, w.ProfileProductsService.getAccountByCode(b.DebitProduct).then(function (n) {
w.Model.DebitProduct = n
})), w.ProfileProductsService.getAccountByCode(b.CreditProduct).then(function (n) {
w.Model.UseProfileProduct = Boolean(n);
n ? w.Model.CreditAccount = n : w.Model.CreditAccountCode = b.CreditProduct
}), g = n.transactions.TransactionUtils.getDetail(b.Details, n.server.DetailName.LaborTicket_SocialSecurity).Value, nt = n.transactions.TransactionUtils.getDetail(b.Details, n.server.DetailName.LaborTicket_SocialSecurity_Service).Value, w.Model.SocialSecurity = w.securityServiceConfig.items.filter(function (n) {
return n.key == g
}) [0], w.Model.SocialSecurity && (w.Model.SocialSecurityService = w.Model.SocialSecurity.items.filter(function (n) {
return n.key == nt
}) [0]), b.Details && b.Details.length > 0 && (tt = n.transactions.TransactionUtils.getDetail(b.Details, n.server.DetailName.LaborTicket_Employer_SurName).Value.split(' ') [1].substr(0, 2), it = n.transactions.TransactionUtils.getDetail(b.Details, n.server.DetailName.LaborTicket_Employee_SurName).Value.split(' ') [1].substr(0, 2), w.Model.EmployerData = {
lastName: tt,
socialSecurityNumber: n.transactions.TransactionUtils.getDetail(b.Details, n.server.DetailName.LaborTicket_Employer_AMKA).Value,
taxNumber: n.transactions.TransactionUtils.getDetail(b.Details, n.server.DetailName.LaborTicket_Employer_TaxCode).Value
}, w.Model.EmployeeData = {
lastName: it,
socialSecurityNumber: n.transactions.TransactionUtils.getDetail(b.Details, n.server.DetailName.LaborTicket_Employee_AMKA).Value
})),
w.Title = w.paymentType.Info.Title,
w.documentData.DocumentRequestType = 20,
w
}
return __extends(i, t),
Object.defineProperty(i.prototype, 'userHasOtpEnabled', {
get: function () {
return this.userInfo.OTPStatus == 1 || this.userInfo.OTPStatus == 0
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(i.prototype, 'hasDebitAccounts', {
get: function () {
return this.debitAccounts && this.debitAccounts.length > 0
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(i.prototype, 'hasCreditAccounts', {
get: function () {
return this.creditAccounts && this.creditAccounts.length > 0
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(i.prototype, 'allowProfileProducts', {
get: function () {
return !this.IsBusy && this.hasCreditAccounts
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(i.prototype, 'allowNonProfileProducts', {
get: function () {
return !this.IsBusy && (this.roleService.IsRetail() || this.userHasOtpEnabled || this.Model.IsJobSubmission)
},
enumerable: !0,
configurable: !0
}),
i.prototype.addToMyPayments = function () {
var t = this,
i = new n.model.NewPaymentTransaction(this.Model, 7, this.paymentType.ProductTypeId.toString(), this.Model.UseProfilePaymentCode, this.Model.PaymentCode, this.paymentType.FixedCodePayment);
t.StateHelperService.go('root.payments.mypayments.add-dynamic-withoutFixCode', null, i)
},
i.prototype.setCanShowWizard = function () {
this.ignoreAtm24 ? this.CanShowWizard = !0 : this.Model.Online || this.paymentType.ExecutionMethod != 2 && this.paymentType.ExecutionMethod != 8 || (this.CanShowWizard = !1, this.CanShowWizardError = this.STRINGS.paymenttypeavailability1 + this.paymentType.Name + this.STRINGS.paymenttypeavailability2)
},
Object.defineProperty(i.prototype, 'namePattern', {
get: function () {
return n.constants.regularPatterns.nameInitials
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(i.prototype, 'socialSecurityNumberPattern', {
get: function () {
return n.constants.regularPatterns.socialSecurityNumber
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(i.prototype, 'taxCodePattern', {
get: function () {
return n.constants.regularPatterns.taxCodeNumber
},
enumerable: !0,
configurable: !0
}),
i.prototype.initialiseSteps = function () {
var t = this,
i = [
],
u = {
templateUrl: 'Templates/Features/Payments/LaborTicket/step1',
title: 'Πληρωμή Εργόσημου'
},
r,
f;
return u.processStep = [
'$q',
'PaymentsService',
function (n, i) {
var u = n.defer(),
r;
return t.Model.PopulateDetails(t.paymentType),
r = {
PaymentDetails: t.Model.Details,
CreditProductType: t.paymentType.ProductTypeId,
CreditProductCode: '',
Type: 2
},
i.Authorize(r).then(function (n) {
if (n.ResultCode !== 0) return t.$q.reject(n);
t.Model.AuthorizationDetails = n.PaymentDetails;
t.Model.Fees = n.Fees
}).then(function () {
return t.getOtpPayload()
}).then(function (n) {
return t.otpHandler.reset({
hints: {
Requirement: String(2),
Method: String(1)
},
payload: n
}).enquire()
})
}
],
r = {
templateUrl: 'Templates/Features/Payments/LaborTicket/step2',
title: 'Πληρωμής Εργόσημου'
},
r.processStep = [
'$q',
'PaymentsService',
'AppEventsService',
function (t, i, r) {
function e() {
r.publish(n.common.services.AppEventsService.InvalidateAccounts_Event);
r.publish(n.common.services.AppEventsService.InvalidateCards_Event);
r.publish(n.common.services.AppEventsService.InvalidateLoans_Event);
r.publish(n.common.services.AppEventsService.InvalidateLookups_Event)
}
var u = this,
f = this.getOtpPayload();
return this.otpHandler.result(f).then(function () {
return u.otpHandler.appendExtraInfoToPayload(f)
}).then(function (n) {
return i.ExecutePayment(n, u.Model.Online)
}).then(function (n) {
u.Model.PaymentDetails = n.PaymentDetails;
var t = u.setTransactionStatus(n);
return e(),
t
})
}
],
f = {
templateUrl: 'Templates/Features/Payments/LaborTicket/step3',
title: 'Πληρωμής Εργόσημου'
},
i.push(u),
i.push(r),
i.push(f),
i
},
i.prototype.createExecutionPayload = function () {
var t = {
};
return t.DebitProductCode = this.Model.DebitProduct.Code,
t.DebitProductType = this.Model.DebitProduct.TypeID,
t.DebitProductID = this.Model.DebitProduct.BankProduct.ProductID,
this.Model.UseProfileProduct ? (t.CreditProductCode = this.Model.CreditAccount.Code, t.CreditProductType = this.Model.CreditAccount.TypeID)  : (t.CreditProductType = 0, t.CreditProductCode = this.Model.CreditAccountCode),
t.Amount = this.Model.Amount,
t.Currency = n.server.Currency.EUR,
t.PaymentType = 4,
t.PaymentDetails = this.Model.AuthorizationDetails,
t
},
i.prototype.getOtpPayload = function () {
return this.createExecutionPayload()
},
i.$inject = [
'paymentType',
'Model',
'$scope',
'$injector',
'debitAccounts',
'creditAccounts',
'securityServiceConfig',
'StateHelperService',
'ProfileProductsService',
'$q',
'RoleService',
'userInfo',
'$window',
'otpHandler'
],
i
}(n.wizards.payments.PaymentWizardController);
t.LaborTicketPaymentController = i;
n.payments.mainModule.controller('LaborTicketPaymentController', i)
}) (t = n.payments || (n.payments = {
}))
}(alpha || (alpha = {
})); __extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(), function (n) {
var t;
(function (t) {
var s = function () {
function n() {
this.Expenses = 0
}
return Object.defineProperty(n.prototype, 'DebitAccount', {
get: function () {
return this._debitAccount
},
set: function (n) {
this._debitAccount = n;
this.ProductCode = n.Code;
this.ProductType = n.TypeID
},
enumerable: !0,
configurable: !0
}),
n
}(),
i,
u,
f,
r,
e,
o;
t.NewStandingPayment = s;
i = function () {
function n() {
this.HasErrors = !1;
this.ErrorMessage = ''
}
return n
}();
t.PaymentsRecurringBase = i;
u = function () {
function n(n, t) {
this.StandingPayment = n;
this.Actions = r.getActionsForMyRecurringPayments(n, t)
}
return n
}();
t.StandingPaymentWithActions = u;
f = function (n) {
function t() {
var t = n.call(this) || this;
return t.StandingPayments = [
],
t
}
return __extends(t, n),
t
}(i);
t.RecurringPaymentsViewModel = f;
r = function () {
function t() {
}
return t.getActionsForMyRecurringPayments = function (t, i) {
var u = [
],
r = {
};
return r.ProductCode = i.BankProduct.Code,
r.ProductType = i.BankProduct.TypeID,
r.PaymentCode = n.utils.isUndefinedOrNull(t.StandingPayment) ? '' : t.StandingPayment.Code,
r.PaymentType = n.utils.isUndefinedOrNull(t.StandingPayment) ? 0 : t.StandingPayment.TypeID,
u.push(new n.model.MenuAction('root.payments.recurring.details', {
}, r)),
t.Status == 0 && (u.push(new n.model.MenuAction('root.payments.recurring.edit', {
}, r)), u.push(new n.model.MenuAction('root.payments.recurring.cancel', {
}, r))),
u
},
t
}();
t.MyRecurringPayments = r;
e = function (n) {
function t() {
var t = n.call(this) || this;
return t.OTP = '',
t.StandingOrder = {
},
t
}
return __extends(t, n),
t
}(i);
t.RecurringPaymentsVM = e;
o = function (n) {
function t() {
var t = n.call(this) || this;
return t.StandingOrder = {
},
t.DebitAccount = {
},
t.CreditAccount = {
},
t.CreditAccountCode = '',
t.Response = {
},
t.UseProfileProduct = !0,
t
}
return __extends(t, n),
t
}(i);
t.NewRecurringPaymentsVM = o
}) (t = n.model || (n.model = {
}))
}(alpha || (alpha = {
})), function (n) {
var t;
(function (t) {
var i = function () {
function n() {
this.IsBusy = !1;
this.showValidationErrors = !1;
this.showNoRecordsLabel = !1
}
return n
}(),
u,
f,
e,
o,
s,
r,
h,
c;
t.PaymentsRecurringControllerBase = i;
u = function (t) {
function i(i, r, u, f, e, o, s) {
var h = t.call(this) || this,
c,
l;
return h.enquiryAccounts = i,
h.QueriesService = r,
h.$stateParams = u,
h.$state = f,
h.OnlineStatus = e,
h.languageService = o,
h.standingPaymentTypes = s,
h.Model = new n.model.RecurringPaymentsViewModel,
c = h,
c.$stateParams.account != null && c.$stateParams.account != '' && (l = h.enquiryAccounts.filter(function (n) {
return n.BankProduct.Code == c.$stateParams.account
}), l.length > 0 && (c.selectedAccount = l[0])),
h
}
return __extends(i, t),
Object.defineProperty(i.prototype, 'selectedAccount', {
get: function () {
return this._selectedAccount
},
set: function (n) {
n && (this._selectedAccount = n, this.$stateParams.account = this.selectedAccount.BankProduct.Code, this.getStandingPayments())
},
enumerable: !0,
configurable: !0
}),
i.prototype.getStandingPayments = function () {
var t = this,
i = t.QueriesService.getStandingPayment({
PaymentCode: t.selectedAccount.BankProduct.Code,
PaymentTypeID: t.selectedAccount.BankProduct.TypeID,
Channel: 3
}).then(function (i) {
return i.ResultCode == 0 ? (t.Model.StandingPayments = [
], i.StandingPayments.length == 0 ? (t.Model.HasErrors = !1, t.showNoRecordsLabel = !0)  : (t.Model.HasErrors = !1, t.showNoRecordsLabel = !1), i.StandingPayments.map(function (i) {
var r = new n.model.StandingPaymentWithActions(i, t.selectedAccount);
t.Model.StandingPayments.push(r)
}))  : (t.showNoRecordsLabel = !1, t.Model.HasErrors = !0, t.Model.ErrorMessage = i.Error.Message),
t.documentData = t.QueriesService.getStandingPaymentRequest(t.selectedAccount.BankProduct.Code, t.selectedAccount.BankProduct.TypeID, 3),
t.documentData.ProductCode = t.selectedAccount.Code,
t.documentData.DocumentRequestType = 5,
t.documentData.Type = 1,
t.Model
}, function (n) {
return t.showNoRecordsLabel = !1,
t.Model.HasErrors = !0,
t.Model.ErrorMessage = n.Error.Message,
t.Model
})
},
i.$inject = [
'enquiryAccounts',
'QueriesService',
'$stateParams',
'$state',
'OnlineStatus',
'LanguageService',
'standingPaymentTypes'
],
i
}(i);
t.PaymentsRecurringController = u;
n.payments.mainModule.controller('PaymentsRecurringController', u);
f = function (t) {
function i(i, r, u, f) {
var e = t.call(this) || this,
o;
return e.StateHelperService = i,
e.QueriesService = r,
e.LookupsService = u,
e.roleService = f,
e.Model = {
},
e.request = {
},
e.isCorporate = !1,
e.SupportsDeletion = !1,
o = e,
e.request = e.StateHelperService.getStateData(),
e.isCorporate = !e.roleService.IsRetail(),
n.utils.isUndefinedOrNull(e.request) || (e.request.Channel = 3, e.QueriesService.getStandingPaymentFull({
ProductCode: e.request.ProductCode,
ProductType: e.request.ProductType,
PaymentCode: e.request.PaymentCode,
PaymentType: e.request.PaymentType,
Channel: e.request.Channel
}).then(function (t) {
t.ResultCode == 0 ? (o.Model = t, o.Model.History && (o.Model.History = o.Model.History.sort(function (n, t) {
return Date.parse(t.Date.toString()) - Date.parse(n.Date.toString())
})), o.LookupsService.getPaymentTypeByProductTypeId(o.request.PaymentType).then(function (t) {
n.utils.isUndefinedOrNull(o.Model.StandingPayment) || (o.Model.StandingPayment.StandingPayment.TypeName = t.Name);
o.Model.Expenses = t.FlatComission ? t.FlatComission : 0
}))  : o.error = n.utils.isUndefinedOrNull(t.Error) ? 'System error' : t.Error.Message
})),
e
}
return __extends(i, t),
i.$inject = [
'StateHelperService',
'QueriesService',
'LookupsService',
'RoleService'
],
i
}(i);
t.PaymentsRecurringDetailsController = f;
n.payments.mainModule.controller('PaymentsRecurringDetailsController', f);
e = function (t) {
function i(i, r, u) {
var f = t.call(this) || this,
e;
return f.StateHelperService = i,
f.QueriesService = r,
f.LookupsService = u,
f.Model = {
},
f.request = {
},
f.SupportsDeletion = !0,
e = f,
f.request = f.StateHelperService.getStateData(),
f.request.Channel = 3,
f.QueriesService.getStandingPaymentFull({
ProductCode: f.request.ProductCode,
ProductType: f.request.ProductType,
PaymentCode: f.request.PaymentCode,
PaymentType: f.request.PaymentType,
Channel: f.request.Channel
}).then(function (t) {
t.ResultCode == 0 ? (e.Model = t, e.LookupsService.getPaymentTypeByProductTypeId(e.request.PaymentType).then(function (t) {
n.utils.isUndefinedOrNull(e.Model.StandingPayment) || (e.Model.StandingPayment.StandingPayment.TypeName = t.Name);
e.Model.Expenses = t.FlatComission ? t.FlatComission : 0
}))  : e.error = n.utils.isUndefinedOrNull(t.Error) ? 'System error' : t.Error.Message
}),
f
}
return __extends(i, t),
i.prototype.CancelStandingPayment = function () {
var n = this,
t = {
};
t.ProductCode = n.request.ProductCode;
t.ProductType = n.request.ProductType;
t.PaymentCode = n.request.PaymentCode;
t.PaymentType = n.request.PaymentType;
n.QueriesService.setStandingPayment(3, null, null, t).then(function (t) {
var i;
t.ResultCode == 0 ? (i = {
}, i = n.Model, i.UN = t.UN, i.SubmittedTimeStamp = t.SubmittedTimeStamp, n.StateHelperService.go('root.payments.recurring.confirm-cancelation', {
}, i))  : (i = {
}, i = n.Model, i.HasErrors = !0, i.ErrorMessage = t.Error.Message, n.StateHelperService.go('root.payments.recurring.confirm-cancelation', {
}, i))
}, function (t) {
var i = {
};
i.HasErrors = !0;
i.ErrorMessage = t.Error.Message;
n.StateHelperService.go('root.payments.recurring.confirm-cancelation', {
}, i)
})
},
i.$inject = [
'StateHelperService',
'QueriesService',
'LookupsService'
],
i
}(i);
t.PaymentsRecurringCancelController = e;
n.payments.mainModule.controller('PaymentsRecurringCancelController', e);
o = function (n) {
function t(t) {
var i = n.call(this) || this,
r;
return i.StateHelperService = t,
i.Model = {
},
r = i,
r.Model = r.StateHelperService.getStateData(),
i
}
return __extends(t, n),
t.prototype.previousStep = function () {
this.StateHelperService.go('root.payments.recurring.list', {
account: this.Model.Account.Code
}, !0)
},
t.$inject = [
'StateHelperService'
],
t
}(i);
t.PaymentsRecurringCancelConfirmationController = o;
n.payments.mainModule.controller('PaymentsRecurringCancelConfirmationController', o);
s = function (n) {
function t(t) {
var i = n.call(this) || this;
return i.paymentTypes = t,
i
}
return __extends(t, n),
t.$inject = [
'paymentTypes'
],
t
}(i);
t.PaymentsRecurringSearchController = s;
n.payments.mainModule.controller('PaymentsRecurringSearchController', s);
r = function (t) {
function i(i, r, u, f, e, o, s) {
var h = t.call(this) || this;
return h.debitAccountsForStandingOrders = i,
h.standingPaymentTypes = r,
h.QueriesService = u,
h.StateHelperService = f,
h.LookupsService = e,
h.PaymentTypeService = o,
h.modalService = s,
h.Model = new n.model.NewStandingPayment,
h
}
return __extends(i, t),
i.prototype.openImgModal = function () {
var n = this;
this.modalService.open({
templateUrl: 'Templates/Features/Payments/modal-image',
controller: 'ImageModalControler as vm',
windowClass: 'custom',
size: 'sm',
resolve: {
imgUrl: function () {
return 'Content/Images/Payments/' + n._paymentType.HelpImageUrl
}
}
})
},
i.prototype.HasInLineElements = function () {
var n = [
];
return this._paymentType == undefined || !this._paymentType.hasOwnProperty('Fields') ? !1 : (this._paymentType.Fields.map(function (t, i) {
t.IsRenderInline && t.IsVisible && n.push(i)
}), n.length > 0 ? !0 : !1)
},
i.prototype.HasRowElements = function () {
var n = [
];
return this._paymentType == undefined || !this._paymentType.hasOwnProperty('Fields') ? !1 : (this._paymentType.Fields.map(function (t, i) {
!t.IsRenderInline && t.IsVisible && n.push(i)
}), n.length > 0 ? !0 : !1)
},
i.prototype.previousStep = function () {
this.StepTemplate = this.Step1
},
i.prototype.showConfirmation = function () {
var n = this;
n.IsBusy = !1;
n.StepTemplate = this.Step2
},
i.prototype.getFieldTemplate = function (n) {
return this.PaymentTypeService.getFieldTypeTemplate(n)
},
i.prototype.getRecurringDetails = function () {
var t = this,
n = [
];
return this._paymentType.Fields.filter(function (n) {
return n.FieldName != 'Code' && null != n.DetailName
}).forEach(function (i) {
n.push({
Name: parseInt(i.DetailName),
DataType: parseInt(i.DetailType),
Value: t.Model.DynamicValues[i.FieldName]
})
}),
n
},
i.$inject = [
'debitAccountsForStandingOrders',
'standingPaymentTypes',
'QueriesService',
'StateHelperService',
'LookupsService',
'PaymentTypeService',
'$modal'
],
i
}(i);
t.PaymentsRecurringAddEditController = r;
h = function (t) {
function i(i, r, u, f, e, o, s, h) {
var c = t.call(this, i, r, u, f, e, o, h) || this;
return c.debitAccountsForStandingOrders = i,
c.standingPaymentTypes = r,
c.QueriesService = u,
c.StateHelperService = f,
c.LookupsService = e,
c.PaymentTypeService = o,
c.OnlineStatus = s,
c.Step1 = 'Templates/Features/Payments/Recurring/paymentsRecurringNew',
c.Step2 = 'Templates/Features/Payments/Recurring/paymentsRecurringNewConfirm',
c.StepTemplate = c.Step1,
c.agreedToTerms = !0,
c.standingPaymentTypes.sort(n.utils.dynamicSort('title')),
c
}
return __extends(i, t),
Object.defineProperty(i.prototype, 'selectedStandingPayment', {
get: function () {
return this._selectedStandingPayment
},
set: function (n) {
n && (this._selectedStandingPayment = n, this.getStandingPaymentInfo())
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(i.prototype, 'paymentType', {
get: function () {
return this._paymentType
},
set: function (n) {
if (n) {
this.Model.DynamicValues = {
};
var t = this;
n.Fields.map(function (n) {
n.IsRenderInline = !1;
t.Model.DynamicValues[n.FieldName] = ''
});
t._paymentType = n;
this.Model.PaymentType = n.ProductTypeId;
this.Model.PaymentName = n.Name;
this.Model.Expenses = n.FlatComission ? n.FlatComission : 0
}
},
enumerable: !0,
configurable: !0
}),
i.prototype.getStandingPaymentInfo = function () {
var n = this;
n.LookupsService.getPaymentTypeByProductTypeId(n.selectedStandingPayment.Item.ProductTypeId).then(function (t) {
n.paymentType = t
})
},
i.prototype.CreateRecurring = function () {
var t = this,
i;
t.Model.HasErrors = !1;
t.Model.ErrorMessage = '';
t.showValidationErrors = !0;
n.utils.forceValidation(t.form);
t.form.$invalid || (t.IsBusy = !0, i = {
}, i.CustomerName = t.Model.CustomerName, i.Limit = t.Model.Limit, i.PaymentCode = t.Model.DynamicValues.Code, i.PaymentType = t.Model.PaymentType, i.ProductCode = t.Model.ProductCode, i.ProductType = t.Model.ProductType, t.QueriesService.setStandingPayment(3, i, null, null, t.getRecurringDetails()).then(function (n) {
n.ResultCode == 0 ? (t.Model.UN = n.UN, t.Model.SubmittedTimeStamp = n.SubmittedTimeStamp, t.Model.HasErrors = !1)  : (t.Model.HasErrors = !0, t.Model.ErrorMessage = n.Error.Message);
t.showConfirmation()
}, function (n) {
t.Model.HasErrors = !0;
t.Model.ErrorMessage = n.Error.Message;
t.showConfirmation()
}).finally (function () {
t.IsBusy = !1
}))
},
i.$inject = [
'debitAccountsForStandingOrders',
'standingPaymentTypes',
'QueriesService',
'StateHelperService',
'LookupsService',
'PaymentTypeService',
'OnlineStatus',
'$modal'
],
i
}(r);
t.PaymentsRecurringNewController = h;
n.payments.mainModule.controller('PaymentsRecurringNewController', h);
c = function (t) {
function i(i, r, u, f, e, o, s, h, c, l, a) {
var v = t.call(this, i, r, u, f, e, o, c) || this,
y,
p,
w;
return (v.debitAccountsForStandingOrders = i, v.standingPaymentTypes = r, v.QueriesService = u, v.StateHelperService = f, v.LookupsService = e, v.PaymentTypeService = o, v.roleService = s, v.profileProductsService = h, v.qService = l, v.STRINGS = a, v.requestFullData = {
}, v.Step1 = 'Templates/Features/Payments/Recurring/paymentsRecurringUpdate', v.Step2 = 'Templates/Features/Payments/Recurring/paymentsRecurringUpdateConfirm', v.StepTemplate = v.Step1, y = v, v.requestFullData = v.StateHelperService.getStateData(), n.utils.isUndefinedOrNull(v.requestFullData)) ? (f.go('root.payments.recurring.list'), v)  : (y.Model.ProductCode = y.requestFullData.ProductCode, y.Model.ProductType = y.requestFullData.ProductType, y.Model.PaymentCode = y.requestFullData.PaymentCode, y.Model.PaymentType = y.requestFullData.PaymentType, s.IsRetail() ? y.Model.DebitAccount = y.debitAccountsForStandingOrders.filter(function (n) {
return n.BankProduct.Code == y.Model.ProductCode
}) [0] : v.profileProductsService.getAccountByCodeCorporate(y.Model.ProductCode, n.server.ProductRequestType.DebitAccountsForStandingOrders).then(function (t) {
y.Model.DebitAccount = new n.model.AccountProduct(t.Products[0])
}), y.selectedPayment = y.standingPaymentTypes.filter(function (n) {
return n.Item.ProductTypeId == y.Model.PaymentType
}) [0], p = v.LookupsService.getPaymentTypeByProductTypeId(v.requestFullData.PaymentType), w = v.QueriesService.getStandingPaymentFull({
ProductCode: v.requestFullData.ProductCode,
ProductType: v.requestFullData.ProductType,
PaymentCode: v.requestFullData.PaymentCode,
PaymentType: v.requestFullData.PaymentType,
Channel: 3
}), l.all({
paymentType: p,
standingType: w
}).then(function (n) {
y.Model.HasErrors = !1;
var i = n.paymentType,
t = n.standingType;
y.paymentType = i;
y.Model.CustomerName = t.CustomerName;
y.Model.Limit = t.StandingPayment.Limit;
null != t.Details && t.Details.length && t.Details.forEach(function (n) {
var t = y._paymentType.Fields.filter(function (t) {
return t.FieldName != 'Code' && null != t.DetailName && parseInt(t.DetailName) == n.Name
});
t.length && (y.Model.DynamicValues[t[0].FieldName] = n.Value)
})
}, function (t) {
y.Model.HasErrors = !0;
y.Model.ErrorMessage = n.utils.isUndefinedOrNull(t.Error) ? y.STRINGS.failedTransaction : t.Error.Message
}), v)
}
return __extends(i, t),
Object.defineProperty(i.prototype, 'paymentType', {
get: function () {
return this._paymentType
},
set: function (n) {
if (n) {
this.Model.DynamicValues = {
};
var t = this;
n.Fields.map(function (n) {
n.IsRenderInline = !1;
t.Model.DynamicValues[n.FieldName] = ''
});
this._paymentType = n;
t.Model.DynamicValues.Code = t.Model.PaymentCode;
this.Model.PaymentName = n.Name;
this.Model.Expenses = n.FlatComission ? n.FlatComission : 0
}
},
enumerable: !0,
configurable: !0
}),
i.prototype.previousStep = function () {
this.StateHelperService.go('root.payments.recurring.list', {
account: this.Model.DebitAccount.Code
}, !0)
},
i.prototype.UpdateStandingPayment = function () {
var t = this,
i;
t.Model.HasErrors = !1;
t.showValidationErrors = !0;
n.utils.forceValidation(t.form);
t.form.$invalid || (t.IsBusy = !0, i = {
}, i.CustomerName = t.Model.CustomerName, i.Limit = t.Model.Limit, i.PaymentCode = t.Model.DynamicValues.Code, i.PaymentType = t.Model.PaymentType, i.ProductCode = t.Model.ProductCode, i.ProductType = t.Model.ProductType, t.QueriesService.setStandingPayment(3, null, i, null, t.getRecurringDetails()).then(function (n) {
n.ResultCode == 0 ? (t.Model.UN = n.UN, t.Model.SubmittedTimeStamp = n.SubmittedTimeStamp, t.Model.HasErrors = !1)  : (t.Model.HasErrors = !0, t.Model.ErrorMessage = n.Error.Message);
t.showConfirmation()
}, function () {
}).finally (function () {
t.IsBusy = !1
}))
},
i.$inject = [
'debitAccountsForStandingOrders',
'standingPaymentTypes',
'QueriesService',
'StateHelperService',
'LookupsService',
'PaymentTypeService',
'RoleService',
'ProfileProductsService',
'$modal',
'$q',
'STRINGS',
],
i
}(r);
t.PaymentsRecurringEditController = c;
n.payments.mainModule.controller('PaymentsRecurringEditController', c)
}) (t = n.payments || (n.payments = {
}))
}(alpha || (alpha = {
})), function (n) {
var t;
(function (t) {
function r(t) {
return n.utils.merge({
}, i.laborTicketCommonResolve, t)
}
function u(t) {
return n.utils.merge({
}, i.groupPaymentCommonResolve, t)
}
function f(t) {
return n.utils.merge({
}, i.dynamicPaymentCommonResolve, t)
}
function e(t) {
return n.utils.merge({
}, i.alphaCardPaymentCommonResolve, t)
}
function o(t) {
return n.utils.merge({
}, i.interCardPaymentCommonResolve, t)
}
function s(t) {
return n.utils.merge({
}, i.loanPaymentCommonResolve, t)
}
function h(t) {
return n.utils.merge({
}, i.alphaLoanPaymentCommonResolve, t)
}
function c(t) {
return n.utils.merge({
}, i.vehicleTaxPaymentCommonResolve, t)
}
var i = function () {
function t() {
}
return t.checkAccessRedirect = function (t, i, r, u) {
var e,
o,
f,
s,
h;
(r === void 0 && (r = !1), u === void 0 && (u = - 1), t.IsRetail()) || (r ? (e = 'PreparePublicSectorPayment', o = 'PrepareOtherPayment', f = 'PrepareAllPayments')  : (e = 'ExecutePublicSectorPayment', o = 'ExecuteOtherPayment', f = 'ExecuteAllPayments'), s = t.isAccessAllowed(e) || t.isAccessAllowed(f), h = t.isAccessAllowed(o) || t.isAccessAllowed(f), s || u != n.server.PaymentCategoryType.GreekPublicSector || i.go(n.constants.stateNames.rootState), h || u == n.server.PaymentCategoryType.GreekPublicSector || i.go(n.constants.stateNames.rootState))
},
t.laborTicketCommonResolve = {
securityServiceConfig: [
'LookupsService',
function (n) {
return n.getLaborTicketSecurityServices()
}
],
debitAccounts: [
'ProfileProductsService',
'$stateParams',
'StateHelperService',
function (t, i, r) {
var u = n.utilities.getDebitAccountCode(i, r);
return t.getAccountsByRequestType(n.server.ProductRequestType.LaborTicketDebitAccounts, u)
}
],
creditAccounts: [
'ProfileProductsService',
function (t) {
return t.getAccountsByRequestType(n.server.ProductRequestType.LaborTicketCreditAccounts)
}
],
paymentType: [
'$stateParams',
'LookupsService',
function (n, t) {
var i = parseInt(n.id);
return t.getPaymentTypeByProductTypeId(i)
}
],
PaymentAllowed: [
'paymentType',
'RoleService',
'$state',
'isJob',
function (n, i, r, u) {
return t.checkAccessRedirect(i, r, u, n.CategoryId),
!0
}
]
},
t.groupPaymentCommonResolve = {
debitAccounts: [
'ProfileProductsService',
'$stateParams',
'StateHelperService',
function (t, i, r) {
var u = n.utilities.getDebitAccountCode(i, r);
return t.getAccountsByRequestType(n.server.ProductRequestType.DebitAccountsForPayment, u)
}
],
cards: [
'ProfileProductsService',
function (t) {
return t.getCardsByRequestType(n.server.ProductRequestType.CardsForCashAdvance, !0)
}
],
paymentTypesGroup: [
'$stateParams',
'LookupsService',
function (n, t) {
var i = parseInt(n.id);
return t.getPaymentMenuItemsForGroup(i)
}
],
PaymentAllowed: [
'paymentTypesGroup',
'RoleService',
'$state',
'isJob',
function (n, i, r, u) {
var f;
try {
f = n.Items[0].Item.CategoryId
} catch (e) {
f = - 1
}
return t.checkAccessRedirect(i, r, u, f),
!0
}
]
},
t.dynamicPaymentCommonResolve = {
debitAccounts: [
'ProfileProductsService',
'$stateParams',
'StateHelperService',
function (t, i, r) {
var u = n.utilities.getDebitAccountCode(i, r);
return t.getAccountsByRequestType(n.server.ProductRequestType.DebitAccountsForPayment, u)
}
],
cards: [
'ProfileProductsService',
function (t) {
return t.getCardsByRequestType(n.server.ProductRequestType.CardsForCashAdvance, !0)
}
],
paymentType: [
'$stateParams',
'LookupsService',
function (n, t) {
var i = parseInt(n.id);
return t.getPaymentTypeByProductTypeId(i)
}
],
savedPaymentCodes: [
'$stateParams',
'LookupsService',
function (n, t) {
var i = parseInt(n.id);
return t.getPredefinedCodesForPaymentType(i, !0)
}
],
PaymentAllowed: [
'paymentType',
'RoleService',
'$state',
'isJob',
function (n, i, r, u) {
return t.checkAccessRedirect(i, r, u, n.CategoryId),
!0
}
]
},
t.alphaCardPaymentCommonResolve = {
userInfo: [
'SecurityService',
function (n) {
return n.getUserSessionInfo()
}
],
debitAccounts: [
'ProfileProductsService',
'$stateParams',
'StateHelperService',
function (t, i, r) {
var u = n.utilities.getDebitAccountCode(i, r);
return t.getAccountsByRequestType(n.server.ProductRequestType.DebitAccountsForPayment, u)
}
],
cards: [
'ProfileProductsService',
function (t) {
return t.getCardsByRequestType(n.server.ProductRequestType.CardsForPayment_NoPrepaid).then(function (n) {
return n.filter(function (n) {
return n.Uses.indexOf(4) > - 1
})
})
}
],
isCitiOnline: [
'VersionFilterService',
function (t) {
return t.IsInVersions(n.constants.versionFilters.CITI_ONLINE)
}
],
PaymentAllowed: [
'RoleService',
'$state',
'isJob',
function (n, i, r) {
return t.checkAccessRedirect(n, i, r),
!0
}
]
},
t.interCardPaymentCommonResolve = {
userInfo: [
'SecurityService',
function (n) {
return n.getUserSessionInfo()
}
],
debitAccounts: [
'ProfileProductsService',
'$stateParams',
'StateHelperService',
function (t, i, r) {
var u = n.utilities.getDebitAccountCode(i, r);
return t.getAccountsByRequestType(n.server.ProductRequestType.DebitAccountsForPayment, u)
}
],
cards: [
'ProfileProductsService',
function (t) {
return t.getCardsByRequestType(n.server.ProductRequestType.INTERBANK_CARDS)
}
],
banks: [
'LookupsService',
function (n) {
return n.getBanksForCards()
}
],
PaymentAllowed: [
'RoleService',
'$state',
'isJob',
function (n, i, r) {
return t.checkAccessRedirect(n, i, r),
!0
}
]
},
t.loanPaymentCommonResolve = {
userInfo: [
'SecurityService',
function (n) {
return n.getUserSessionInfo()
}
],
debitAccounts: [
'ProfileProductsService',
'$stateParams',
'StateHelperService',
function (t, i, r) {
var u = n.utilities.getDebitAccountCode(i, r);
return t.getAccountsByRequestType(n.server.ProductRequestType.DebitAccountsForPayment, u)
}
],
loans: [
'LookupsService',
function (n) {
return n.getPersonalConsumerLoans().then(function (n) {
return n.filter(function (n) {
return n.Uses.indexOf(4) != - 1
})
})
}
],
requestFactory: function () {
return new n.payments.ConsumeristLoanExecuteRequestFactory
},
PaymentAllowed: [
'RoleService',
'$state',
'isJob',
function (n, i, r) {
return t.checkAccessRedirect(n, i, r),
!0
}
]
},
t.alphaLoanPaymentCommonResolve = {
userInfo: [
'SecurityService',
function (n) {
return n.getUserSessionInfo()
}
],
debitAccounts: [
'ProfileProductsService',
'$stateParams',
'StateHelperService',
function (t, i, r) {
var u = n.utilities.getDebitAccountCode(i, r);
return t.getAccountsByRequestType(n.server.ProductRequestType.DebitAccountsForPayment, u)
}
],
loans: [
'ProfileProductsService',
function (n) {
return n.getAlphaLoansForPayment().then(function (n) {
return n.filter(function (n) {
return n.Uses.indexOf(4) != - 1
})
})
}
],
requestFactory: function () {
return new n.payments.LoanExecuteRequestFactory
},
PaymentAllowed: [
'RoleService',
'$state',
'isJob',
function (n, i, r) {
return t.checkAccessRedirect(n, i, r),
!0
}
]
},
t.vehicleTaxPaymentCommonResolve = {
debitAccounts: [
'ProfileProductsService',
'$stateParams',
'StateHelperService',
function (t, i, r) {
var u = n.utilities.getDebitAccountCode(i, r);
return t.getAccountsByRequestType(n.server.ProductRequestType.DebitAccountsForPayment, u)
}
],
cards: [
'ProfileProductsService',
function (t) {
return t.getCardsByRequestType(n.server.ProductRequestType.CardsForCashAdvance, !0)
}
],
paymentType: [
'$stateParams',
'LookupsService',
function (n, t) {
var i = parseInt(n.id);
return t.getPaymentTypeByProductTypeId(i)
}
],
PaymentAllowed: [
'paymentType',
'RoleService',
'$state',
'isJob',
function (n, i, r, u) {
return t.checkAccessRedirect(i, r, u, n.CategoryId),
!0
}
]
},
t
}();
t.getLaborTicketResolve = r;
t.getGroupPaymentResolve = u;
t.getDynamicPaymentResolve = f;
t.getAlphaCardPaymentResolve = e;
t.getInterCardPaymentResolve = o;
t.getLoanPaymentResolve = s;
t.getAlphaLoanPaymentResolve = h;
t.getVehicleTaxPaymentResolve = c
}) (t = n.payments || (n.payments = {
}))
}(alpha || (alpha = {
})); __extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(), function (n) {
var t;
(function (t) {
var i = function (n) {
function t(t, i, r, u, f, e, o, s, h, c, l, a, v, y) {
var p = n.call(this, t, i, r, u, f, e, o, s, c, h, [
], a, v, y, null) || this;
return p.Model = t,
p.scope = i,
p.injector = r,
p.STRINGS = f,
p.modalService = e,
p.PaymentTypeService = o,
p.StateHelperService = s,
p.debitAccounts = h,
p.lookupService = l,
p.stateService = v,
p.checkForPredefinedCodes(),
p
}
return __extends(t, n),
t.prototype.checkForPredefinedCodes = function () {
this.CanShowWizard && (null == this.savedPaymentCodes || !this.savedPaymentCodes.length) && (this.CanShowWizardError = this.STRINGS.noCodesForPayment, this.CanShowWizard = !1)
},
t.prototype.initialiseSteps = function () {
var t = n.prototype.initialiseSteps.call(this);
return t[0].templateUrl = 'Templates/Features/Payments/profiledEydap/step1',
t
},
t.prototype.getCodes = function (n) {
var t = this;
this.lookupService.getDateAndAmountForPayment(n.Code, n.TypeID).then(function (n) {
n && n.ResultCode == 0 ? (t.Model.Amount = n.PaymentAmount, t.Model.TransactionDate = new Date(n.PaymentDate), t.Model.HasErrors = !1)  : (t.Model.Amount = null, t.Model.TransactionDate = null, t.Model.ErrorMessage = n.Error.Message, t.Model.HasErrors = !0)
}).catch (function (n) {
t.Model.Amount = null;
t.Model.TransactionDate = null;
n && n.Error && (t.Model.ErrorMessage = n.Error.Message, t.Model.HasErrors = !0)
})
},
t.$inject = [
'Model',
'$scope',
'$injector',
'paymentType',
'STRINGS',
'$modal',
'PaymentTypeService',
'StateHelperService',
'debitAccounts',
'savedPaymentCodes',
'LookupsService',
'ProductMatchingService',
'$state',
'RoleService'
],
t
}(t.DynamicPaymentWizardController);
n.payments.mainModule.controller('ProfiledEydapPaymentController', i)
}) (t = n.payments || (n.payments = {
}))
}(alpha || (alpha = {
})), function (n) {
var t;
(function (t) {
var r = function () {
function n() {
}
return n.FavoritePaymentsCategoryID = - 2,
n.NewPaymentsCategoryID = - 1,
n.CardPaymentsCategoryId = - 3,
n.LoanPaymentsCategoryId = - 4,
n.MyPaymentsCategoryId = - 5,
n.AllCategoriesId = - 6,
n
}(),
i,
u,
f,
e,
o;
t.NavigationConstants = r;
i = function () {
function n() {
}
return n.All_Categories_Key = 'search.payments.AllCategories',
n.MyPayments_Key = 'search.payments.MyPayments',
n.Cards_Key = 'search.payments.Cards',
n.AlphaBankCards_Key = 'search.payments.AlphaBankCard',
n.InterbankCards_Key = 'search.payments.InterbankCard',
n.Loans_Key = 'search.payments.Loans',
n.AlphaLoan_Key = 'search.payments.AlphaLoan',
n.ConsumerLoan_Key = 'search.payments.ConsumerLoan',
n.PopularPayments_Key = 'search.payments.Popular',
n.NewPayments_Key = 'search.payments.New',
n.HousingLoans_Key = 'payments.housing.loans.title',
n
}();
t.LocalizationKeys = i;
u = function () {
function t(t, u, f, e, s, h, c) {
var l,
a,
v,
y,
p,
w,
b,
k,
d;
this.stateService = e;
this.STRINGS = s;
this.versionFilterService = h;
this.qService = c;
this.paymentTypes = [
];
this.myPayments = [
];
this.cardPayments = [
];
this.loanPayments = [
];
l = this;
l.categories = t ? t.slice()  : [
];
l.paymentTypes = u ? u.slice()  : [
];
f && f.length > 0 && (l.myPayments = f.map(n.model.PaymentMenuItem.TransactionTemplateMap), a = new n.model.PaymentCategoryMenuItem, a.title = s[n.payments.LocalizationKeys.MyPayments_Key], a.PaymentCategoryId = r.MyPaymentsCategoryId, a.index = 1003, a.state = n.constants.stateNames.myPayments, l.categories.push(a));
v = new n.model.PaymentCategoryMenuItem;
v.title = s[i.All_Categories_Key];
v.PaymentCategoryId = r.AllCategoriesId;
v.index = 1003;
y = new n.model.PaymentCategoryMenuItem;
y.title = s[i.Cards_Key];
y.PaymentCategoryId = r.CardPaymentsCategoryId;
y.index = 1002;
p = new n.model.PaymentMenuItem;
p.title = s[i.AlphaBankCards_Key];
p.index = 1002;
p.state = n.constants.stateNames.newCardPaymentState;
l.cardPayments.push(p);
w = new n.model.PaymentMenuItem;
w.title = s[i.InterbankCards_Key];
w.state = n.constants.stateNames.newInterbankCardPaymentState;
w.index = 1001;
l.cardPayments.push(w);
b = new n.model.PaymentCategoryMenuItem;
b.title = s[i.Loans_Key];
b.PaymentCategoryId = r.LoanPaymentsCategoryId;
b.index = 1000;
k = new n.model.PaymentMenuItem;
k.title = s[i.AlphaLoan_Key];
k.state = n.constants.stateNames.newAlphaLoanPaymentState;
k.index = 1000;
l.loanPayments.push(k);
d = new n.model.PaymentMenuItem;
d.title = s[i.ConsumerLoan_Key];
d.state = n.constants.stateNames.newLoanPaymentState;
d.index = 1000;
l.loanPayments.push(d);
c.all({
citibank: h.IsInVersions(n.constants.versionFilters.CITIBANK_PAYMENTS),
mortgage: h.IsInVersions(n.constants.versionFilters.MORTGAGE_LOAN_PAYMENT)
}).then(function (t) {
if (t.citibank && o.resolveCards(l.paymentTypes, l.cardPayments), t.mortgage) {
var r = new n.model.PaymentMenuItem;
r.title = s[i.HousingLoans_Key];
r.state = n.constants.stateNames.newHousingLoanPaymentState;
r.index = 1000;
l.loanPayments.push(r)
}
}).finally (function () {
l.categories.push(v);
l.categories.push(y);
l.categories.push(b);
l.filterPayments()
})
}
return Object.defineProperty(t.prototype, 'selectedCategory', {
get: function () {
return this._selectedCategory
},
set: function (n) {
n.PaymentCategoryId == r.AllCategoriesId ? this._selectedCategory = undefined : (this._selectedCategory = n, this.filterPayments(this._selectedCategory))
},
enumerable: !0,
configurable: !0
}),
t.prototype.filterPayments = function (n) {
var t = this;
n ? this.selectedCategoryPayments = n.PaymentCategoryId == r.CardPaymentsCategoryId ? t.cardPayments : n.PaymentCategoryId == r.LoanPaymentsCategoryId ? t.loanPayments : n.PaymentCategoryId == r.MyPaymentsCategoryId ? t.myPayments : this.paymentTypes.filter(function (t) {
return t.IsValidForMenu(n.PaymentCategoryId)
})  : t.selectedCategoryPayments = t.paymentTypes.filter(function (n) {
return n.IsVisible
})
},
t
}();
t.SearchPaymentWizardModel = u;
f = function () {
function t(t, u, f, e, s) {
var l,
a,
v,
y,
p,
w,
b,
d,
g;
this.STRINGS = f;
this.versionFilterService = e;
this.qService = s;
this.cardPayments = [
];
this.loanPayments = [
];
this.favoritePayments = [
];
var h = this,
c = [
],
k = new n.model.PaymentCategoryMenuItem;
k.title = f[i.PopularPayments_Key];
k.PaymentCategoryId = r.FavoritePaymentsCategoryID;
k.index = 1004;
l = new n.model.PaymentCategoryMenuItem;
l.title = f[i.NewPayments_Key];
l.PaymentCategoryId = r.NewPaymentsCategoryID;
l.index = 1003;
a = new n.model.PaymentCategoryMenuItem;
a.title = f[i.Cards_Key];
a.PaymentCategoryId = r.CardPaymentsCategoryId;
a.index = 1002;
v = new n.model.PaymentCategoryMenuItem;
v.title = f[i.Loans_Key];
v.PaymentCategoryId = r.LoanPaymentsCategoryId;
v.index = 1001;
c.push(k);
c.push(l);
c.push(a);
c.push(v);
h.categories = c.concat(t);
h.paymentTypes = u.slice();
y = new n.model.PaymentMenuItem;
y.title = f[i.AlphaBankCards_Key];
y.index = 1002;
y.state = n.constants.stateNames.newCardPaymentState;
h.cardPayments.push(y);
p = new n.model.PaymentMenuItem;
p.title = f[i.InterbankCards_Key];
p.state = n.constants.stateNames.newInterbankCardPaymentState;
p.index = 1001;
h.cardPayments.push(p);
w = new n.model.PaymentMenuItem;
w.title = f[i.AlphaLoan_Key];
w.state = n.constants.stateNames.newAlphaLoanPaymentState;
w.index = 1000;
h.loanPayments.push(w);
b = new n.model.PaymentMenuItem;
b.title = f[i.ConsumerLoan_Key];
b.state = n.constants.stateNames.newLoanPaymentState;
b.index = 1000;
h.loanPayments.push(b);
h.favoritePayments = h.cardPayments.concat(h.loanPayments);
h.filterPayments();
d = e.IsInVersions(n.constants.versionFilters.CITIBANK_PAYMENTS);
g = e.IsInVersions(n.constants.versionFilters.MORTGAGE_LOAN_PAYMENT);
s.all({
citibank: d,
mortgage: g
}).then(function (t) {
if (t.citibank && o.resolveCards(h.paymentTypes, h.cardPayments), t.mortgage) {
var r = new n.model.PaymentMenuItem;
r.title = f[i.HousingLoans_Key];
r.state = n.constants.stateNames.newHousingLoanPaymentState;
r.index = 1000;
r.Item = {
IsNew: !0
};
h.loanPayments.push(r)
}
}).catch (function () {
})
}
return t.prototype.filterPayments = function (t) {
if (t || (t = this.categories[0]), this.selectedCategory = t, t.PaymentCategoryId == r.FavoritePaymentsCategoryID) {
var i = this.paymentTypes.filter(function (n) {
return n.Item.IsPopular && !n.Item.IsGroup && n.Item.IsActive
}),
u = i.filter(function (n) {
return null != n.Item.DisplayOrder && n.Item.DisplayOrder > 0
}).sort(function (n, t) {
return n.Item.DisplayOrder - t.Item.DisplayOrder
}),
f = i.filter(function (n) {
return null != n.Item.DisplayOrder && n.Item.DisplayOrder < 0
}).sort(function (n, t) {
return n.Item.DisplayOrder - t.Item.DisplayOrder
});
this.selectedCategoryPayments = f.concat(this.favoritePayments).concat(u).concat(n.utils.Except(i, u.concat(f)))
} else this.selectedCategoryPayments = t.PaymentCategoryId == r.NewPaymentsCategoryID ? this.paymentTypes.filter(function (n) {
return n.Item.IsNew && n.Item.IsActive
})  : t.PaymentCategoryId == r.CardPaymentsCategoryId ? this.cardPayments : t.PaymentCategoryId == r.LoanPaymentsCategoryId ? this.loanPayments : this.paymentTypes.filter(function (n) {
return n.IsValidForMenu(t.PaymentCategoryId)
})
},
t
}();
t.SearchPaymentListModel = f;
e = function () {
function t(t, i, r, e, o, s, h, c, l, a, v, y, p, w) {
var k,
b;
this.paymentTypes = t;
this.paymentTemplates = i;
this.STRINGS = r;
this.stateService = e;
this.versionFilterService = o;
this.qService = s;
this.userInfo = c;
this.roleService = l;
this.$scope = a;
this.modal = v;
this.stateHelperService = y;
this.showPublicSector = p;
this.showOther = w;
this.footerInfo = {
showFooter: !1
};
n.utils.isUndefinedOrNull(p) && (p = l.isAccessAllowed('ExecutePublicSectorPayment') || l.isAccessAllowed('ExecuteAllPayments'));
n.utils.isUndefinedOrNull(w) && (w = l.isAccessAllowed('ExecuteOtherPayment') || l.isAccessAllowed('ExecuteAllPayments'));
this.paymentTypes = this.paymentTypes.filter(function (n) {
return n.Item.IsActive
}).sort(n.utils.dynamicSort('title'));
l.IsRetail() || (this.paymentTypes = this.paymentTypes.filter(function (t) {
return t.Item ? p && t.Item && t.Item.CategoryId == n.server.PaymentCategoryType.GreekPublicSector ? !0 : w && t.Item && t.Item.CategoryId != n.server.PaymentCategoryType.GreekPublicSector ? !0 : !1 : !0
}).sort(n.utils.dynamicSort('title')));
k = this.getDistinctCategories(t);
this.searchWizard = new u(k, this.paymentTypes, i, e, r, o, s);
this.paymentsList = new f(k, this.paymentTypes, r, o, s);
null != h && (this.footerInfo = c.UserInfo.CompanyInfo.IsSpecialSubscription ? {
showFooter: !0,
footer: r.PaymentPrepareIsolated_Info_SpecialSubscription
}
 : {
showFooter: !0,
footer: r[h]
});
l.IsRetail() || (b = function (n) {
return [1000,
1001,
1002].indexOf(n.index) == - 1
}, w || (this.paymentsList.cardPayments = this.paymentsList.cardPayments.filter(b), this.searchWizard.cardPayments = this.searchWizard.cardPayments.filter(b), this.paymentsList.favoritePayments = this.paymentsList.favoritePayments.filter(b)), this.paymentsList.categories = this.paymentsList.categories.filter(function (t) {
return [n.server.PaymentCategoryType.New,
n.server.PaymentCategoryType.Favorites].indexOf(t.PaymentCategoryId) > - 1 ? !0 : w && [
n.server.PaymentCategoryType.Card,
n.server.PaymentCategoryType.Loans
].indexOf(t.PaymentCategoryId) > - 1 ? !0 : p && t.PaymentCategoryId == n.server.PaymentCategoryType.GreekPublicSector ? !0 : w && t.PaymentCategoryId != n.server.PaymentCategoryType.GreekPublicSector ? !0 : !1
}))
}
return t.prototype.getDistinctCategories = function (t) {
var i = [
],
r = {
};
return t && t.forEach(function (t) {
if (t.Item.CategoryId && !r.hasOwnProperty(t.Item.CategoryId)) {
var u = new n.model.PaymentCategoryMenuItem;
u.title = t.Item.CategoryName;
u.PaymentCategoryId = t.Item.CategoryId;
i.push(u);
r[t.Item.CategoryId] = t.Item.CategoryId
}
}),
i
},
t.prototype.showSearchPaymentModal = function () {
var n = this,
t = this.modal.open({
templateUrl: 'Templates/common/modals/searchPaymentByCode',
controller: 'CodeSearchPaymentController as vm',
modalClass: 'custom',
size: 'lg',
backdrop: 'static',
resolve: {
paymentTypes: [
'LookupsService',
function () {
return n.paymentTypes
}
]
}
});
t.result.then(this.handleModalResponse(this))
},
t.prototype.handleModalResponse = function (n) {
return function (t) {
t.paymentType && n.stateHelperService.go(t.paymentType.state, t.paymentType.stateParams, t.transaction)
}
},
t.prototype.navigate = function (n) {
this.stateService.go(n.state, n.stateParams)
},
t.$inject = [
'paymentTypes',
'paymentTemplates',
'STRINGS',
'$state',
'VersionFilterService',
'$q',
'footerKey',
'userInfo',
'RoleService',
'$scope',
'$modal',
'StateHelperService'
],
t
}();
t.SearchPaymentsController = e;
n.payments.mainModule.controller('SearchPaymentsController', e);
o = function () {
function t() {
}
return t.resolveCards = function (t, i) {
var u = t.filter(function (t) {
return t.Item.ProductTypeId == n.constants.payments.citibankVisa_productTypeId
}),
r;
u.length && i.push(u[0]);
r = t.filter(function (t) {
return t.Item.ProductTypeId == n.constants.payments.citibankDiners_productTypeId
});
r.length && i.push(r[0])
},
t
}()
}) (t = n.payments || (n.payments = {
}))
}(alpha || (alpha = {
})); __extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(), function (n) {
var t;
(function (t) {
var i = function (t) {
function i(n, i, r, u, f, e, o, s, h, c, l, a, v) {
var y = t.call(this, i, r, u, n, f, h, a, s, c, l, v, null) || this;
return y.paymentType = n,
y.Model = i,
y.scope = r,
y.injector = u,
y.stringsService = f,
y.PaymentsService = e,
y.$q = o,
y.StateHelperService = s,
y.modalService = h,
y.debitAccounts = c,
y.cards = l,
y.PaymentTypeService = a,
y.disableFromAcc = !1,
y.InstallmentsOptions = [
],
y.FinancialYears = [
(new Date).getFullYear().toString(),
((new Date).getFullYear() + 1).toString()
],
y.VehicleTypes = [
{
key: 0,
text: y.STRINGS['payments.vehicleTax.vehicleType.0']
},
{
key: 1,
text: y.STRINGS['payments.vehicleTax.vehicleType.1']
}
],
y.showAuthorizationErrors = !1,
y.initializeData(),
y.documentData.DocumentRequestType = 21,
y.Model.Online || (y.disableFromAcc = !0, y.Model.TransferSource = 1),
y
}
return __extends(i, t),
i.prototype.initializeData = function () {
this.paymentType.Installments && this.paymentType.Installments.length && (this.InstallmentsOptions = this.paymentType.Installments.split(',').map(function (n) {
return parseInt(n)
}));
this.Model.Installments = this.InstallmentsOptions[0];
this.Model.AuthorizeInfo.FinancialYear = this.FinancialYears[1];
this.Model.AuthorizeInfo.VehicleType = this.VehicleTypes[0]
},
i.prototype.resetDebitProduct = function () {
t.prototype.resetDebitProduct.call(this);
this.Model.WantsInstallments = !1;
this.Model.SelectedInstallmentsOption = null
},
i.prototype.initialiseSteps = function () {
var f = this,
t = [
],
r = {
templateUrl: 'Templates/Features/Payments/vehicletax/step1',
title: 'Στοιχεία Πληρωμής'
},
i,
u;
return r.processStep = [
'$q',
'PaymentsService',
function (n, t) {
var i = f,
r = {
};
r.FeeType = 1;
r.Amount = i.Model.Amount;
r.Currency = i.Model.DebitProduct.CurrencyEnum;
r.DebitAccountNumber = i.Model.DebitProduct.Code;
r.DebitAccountType = i.Model.DebitProduct.TypeID;
r.DebitProductID = i.Model.DebitProduct.BankProduct.ProductID;
r.CreditAccountType = i.paymentType.ProductTypeId;
r.CreditAccountNumber = i.Model.PaymentCodeParts.toPaymentString();
r.ExpensesServiceType = 100;
var u = n.defer(),
c = i.vehicleNumberPattern.exec(i.Model.VehicleNumber) [1],
e = i.vehicleNumberPattern.exec(i.Model.VehicleNumber) [2];
c += '0000'.substring(0, 4 - e.length) + e;
i.Model.VehicleNumber = c;
e = i.vehicleNumberPattern.exec(i.Model.VehicleNumber) [2];
var h = [
{
validator: function () {
return i.Model.PaymentCodeParts.Second.substring(4, 7) == i.Model.TaxCode.substring(6)
},
message: 'payments.vehicleTax.unmatchedVat'
},
{
validator: function (n) {
return n.vehicleNumberPattern.test(n.Model.VehicleNumber)
},
message: 'payments.vehicleTax.unmatchedCirculationNumber'
},
{
validator: function (n) {
return n.Model.PaymentCodeParts.First.substring(4, 8) == e
},
message: 'payments.vehicleTax.unmatchedCirculationNumber'
}
],
o = null,
s = 0;
do h[s].validator(i) || (o = h[s]),
s++;
while (s < h.length && null == o);
return null != o ? (u.reject(i.stringsService[o.message]), u.promise)  : (t.GetExpenses(r).then(function (n) {
var t = n;
t.ResultCode == 0 ? (i.Model.Fees = t.Fees, u.resolve(!0))  : u.reject(t.Error.Message)
}, function (n) {
var t = n;
u.reject(t.Error.Message)
}), u.promise.then(function () {
return i.getOtpPayload()
}).then(function (n) {
return i.otpHandler.reset({
hints: {
Requirement: String(2),
Method: String(1)
},
payload: n
}).enquire()
}))
}
],
i = {
templateUrl: 'Templates/Features/Payments/vehicletax/step2',
title: 'Επιβεβαίωση Στοιχείων'
},
i.processStep = [
'$q',
'PaymentsService',
'AppEventsService',
function (t, i, r) {
var u = this,
f = t.defer(),
e = function () {
r.publish(n.common.services.AppEventsService.InvalidateAccounts_Event);
r.publish(n.common.services.AppEventsService.InvalidateCards_Event);
r.publish(n.common.services.AppEventsService.InvalidateLoans_Event);
r.publish(n.common.services.AppEventsService.InvalidateLookups_Event)
};
return u.otpHandler.result().then(function () {
var n = u.otpHandler.appendExtraInfoToPayload(u.getOtpPayload()),
t = i.ExecutePayment(n, u.Model.Online);
t.then(function (n) {
var t = n,
i = u.setTransactionStatus(t);
e();
f.resolve(i)
}, function (n) {
f.reject(n.Error.Message)
})
}, function (n) {
f.reject(n)
}),
f.promise
}
],
u = {
templateUrl: 'Templates/Features/Payments/vehicletax/step3',
title: 'Αποτελέσμα συναλλαγής'
},
t.push(r),
t.push(i),
t.push(u),
t
},
i.prototype.createExecutionPayload = function () {
var n = {
};
return n.PaymentDetails = this.Model.getPaymentDetails(),
n.DebitProductCode = this.Model.DebitProduct.Code,
n.DebitProductType = this.Model.DebitProduct.TypeID,
n.DebitProductID = this.Model.DebitProduct.BankProduct.ProductID,
n.Amount = this.Model.Amount,
n.Currency = this.Model.DebitProduct.CurrencyEnum,
n.CreditProductType = this.paymentType.ProductTypeId,
n.CreditProductCode = this.Model.PaymentCodeParts.toPaymentString(),
n.PaymentType = 0,
n.FeeType = 1,
this.Model.TransferSource == 1 && (n.NumberOfInstalments = this.Model.WantsInstallments ? this.Model.Installments : 1),
n
},
i.prototype.selectCard = function (n) {
n.IsPrepaid && (this.Model.WantsInstallments = !1)
},
Object.defineProperty(i.prototype, 'taxCodePattern', {
get: function () {
return n.constants.regularPatterns.taxCodeNumber
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(i.prototype, 'vehicleNumberPattern', {
get: function () {
return n.constants.regularPatterns.vehicleNumber
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(i.prototype, 'vehicleCodeFirstPattern', {
get: function () {
return n.constants.regularPatterns.vehicleCode_First
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(i.prototype, 'vehicleCodeSecondPattern', {
get: function () {
return n.constants.regularPatterns.vehicleCode_Second
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(i.prototype, 'vehicleCodeThirdPattern', {
get: function () {
return n.constants.regularPatterns.vehicleCode_Third
},
enumerable: !0,
configurable: !0
}),
i.prototype.findVehicleCode = function () {
var i,
r,
f,
n,
u,
t;
if (this.showAuthorizationErrors = !1, i = [
'authorizeTaxCode',
'authorizeVehicleNumber'
], r = i.every(function (n) {
return this.scope.form[n].$valid
}, this), !r) {
this.showAuthorizationErrors = !0;
return
}
this.Model.HasErrors = !1;
f = this.$q.defer();
n = {
};
n.Type = 3;
n.CreditProductCode = '';
n.CreditProductType = this.paymentType.ProductTypeId;
this.Model.PopulateDetails();
n.PaymentDetails = this.Model.Details;
u = this.PaymentsService.Authorize(n);
t = this;
this.IsBusy = !0;
u.then(function (n) {
var i = n;
i.ResultCode == 0 ? t.Model.PostAuthorizationUpdate(i.PaymentDetails)  : t.handleValidationError(i);
t.IsBusy = !1
}, function (n) {
t.handleValidationError(n);
t.IsBusy = !1
})
},
i.prototype.handleValidationError = function (n) {
this.Model.ErrorMessage = n.Error.Message;
this.Model.HasErrors = !0
},
i.prototype.setAmount = function () {
this.Model.Amount = parseFloat(this.Model.PaymentCodeParts.Third) / 100
},
i.prototype.addToMyPayments = function () {
var t = this,
i = new n.model.NewPaymentTransaction(this.Model, 7, t.paymentType.ProductTypeId.toString(), t.Model.UseProfilePaymentCode, t.Model.PaymentCodeParts.toPaymentString(), t.paymentType.FixedCodePayment);
t.paymentType.FixedCodePayment ? t.StateHelperService.go('root.payments.mypayments.add-dynamic-withFixCode', null, i)  : t.StateHelperService.go('root.payments.mypayments.add-dynamic-withoutFixCode', null, i)
},
i.$inject = [
'paymentType',
'Model',
'$scope',
'$injector',
'STRINGS',
'PaymentsService',
'$q',
'StateHelperService',
'$modal',
'debitAccounts',
'cards',
'PaymentTypeService',
'RoleService'
],
i
}(t.DynamicPaymentWizardBase);
t.VehicleTaxPaymentController = i;
n.payments.mainModule.controller('VehicleTaxPaymentController', i)
}) (t = n.payments || (n.payments = {
}))
}(alpha || (alpha = {
})); __extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(), function (n) {
var t;
(function (t) {
var i = function (n) {
function t(t, i) {
var r = n.call(this, t, i) || this;
return r.$scope = t,
r.$injector = i,
r.dateFormat = 'dd/MM/yyyy',
r.dateOptions = {
formatYear: 'yyyy',
startingDay: 1,
showWeeks: 'false',
maxMode: 'day'
},
r.periodMode = 'month',
r.wizzardSteps = [
],
r
}
return __extends(t, n),
t.prototype.makeStep = function (n, t) {
var i = n;
i.processStep = t;
this.wizzardSteps.push(i)
},
t.$inject = [
'$scope',
'$injector'
],
t
}(n.wizards.WizardController);
t.JobWizardController = i
}) (t = n.jobs || (n.jobs = {
}))
}(alpha || (alpha = {
})); __extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(), function (n) {
var t;
(function (t) {
var r = function (t) {
function r(n, i, r, u, f, e, o, s) {
var h = t.call(this, n, i) || this;
return h.modalInstance = r,
h.appEventsService = u,
h.jobServiceProxy = f,
h.qService = e,
h.Model = o,
h.action = s,
h.changeModalOptions(),
h.roleService = i.get('RoleService'),
h.disableScrollTop = !0,
n.$on('$locationChangeStart', function () {
h.cancel()
}),
h
}
return __extends(r, t),
r.prototype.cancel = function () {
this.Model.JobAlreadyProcessed && this.appEventsService.publish(n.common.services.AppEventsService.JobProcessedbyOtherUser_Event, null);
this.modalInstance.dismiss()
},
r.prototype.changeModalOptions = function () {
i.appendModalTo('#main > .content');
i.disableScrollOfModal()
},
r.prototype.onJobFinalization = function (t) {
this.appEventsService.publish(n.common.services.AppEventsService.JobFinalization_Event, {
action: this.action,
jobIds: t
})
},
r.prototype.getSuccessfulJobIds = function () {
throw 'Not implemented';
},
r.prototype.executeJob = function (n) {
var t = this;
return this.jobServiceProxy.executeJob(n).then(function (n) {
if (n.Error && n.Error.ErrorCode == 9 && (t.roleService.isAccessAllowed('EditLimits') ? t.Model.HasExceededLimit = !0 : t.Model.HasExceededLimitOtherThanAdmin = !0), n.Error && n.Error.ErrorCode == 10 && (t.Model.JobAlreadyProcessed = !0), 0 === n.ResultCode) {
t.onJobFinalization(t.getSuccessfulJobIds(n));
return n
}
return t.onSubmissionError(function () {
return t.qService.reject(n.Error.Message)
})
}, function (n) {
return t.onSubmissionError(function () {
return t.qService.reject(n.Error.Message)
})
})
},
r.prototype.onSubmissionError = function (n) {
return this.Model.Otp = '',
n()
},
r
}(n.wizards.WizardController),
i;
t.BasePendingApprovalWizardController = r;
i = function () {
function n() {
}
return n.appendModalTo = function (t, i) {
i === void 0 && (i = 0);
var r = $('.modal-backdrop').last(),
u = $('body > div.modal.fade.in').last();
if (r.length && u.length) r.last().appendTo(t),
u.last().appendTo(t),
r.last().css('position', 'absolute'),
u.last().css('position', 'absolute'),
setTimeout(function () {
$('.html, body').animate({
scrollTop: $('.modal-content').last().offset().top - 200
}, 500)
});
 else {
if (i > 20) {
console.warn(i, $('.modal-open').last());
return
}
++i;
setTimeout(function () {
n.appendModalTo(t, i)
})
}
},
n.enableScrollTtoBody = function (t) {
t === void 0 && (t = 0);
var i = $('.modal-open').last();
if (i.length) $('html').last().removeClass('.modal-open');
 else {
if (t > 20) {
console.warn(t, $('.modal-open').last());
return
}
++t;
setTimeout(function () {
n.enableScrollTtoBody(t)
})
}
},
n.disableScrollOfModal = function (t) {
t === void 0 && (t = 0);
var i = $('div.modal.fade.in').last();
if (i.length) i.last().attr('style', function (n, t) {
return t + ';overflow: visible !important;'
});
 else {
if (t > 20) {
console.warn(t, $('div.modal.fade.in').last());
return
}
++t;
setTimeout(function () {
n.disableScrollOfModal(t)
})
}
},
n
}();
t.customizeModal = i
}) (t = n.jobs || (n.jobs = {
}))
}(alpha || (alpha = {
})), function (n) {
var t;
(function (t) {
var i = function () {
function t(n, t) {
this.lookupService = n;
this.qService = t
}
return t.prototype.map = function (t) {
if (!t.some(function (t) {
return !n.utils.isUndefinedOrNullorWhiteSpace(t.LookupName)
})) return this.qService.when(t);
var i = this.lookupService.getCountries(),
r = [
i
];
return this.qService.all(r).then(function (i) {
var r = i[0];
return t.map(function (t) {
var u = n.utils.merge({
}, t),
i;
return t.LookupName === 'countries' && (i = r.find(function (n) {
return n.CountryIso == t.Value
}), n.utils.isUndefinedOrNull(i) && (i = r.find(function (n) {
return n.EnglishName === t.Value
})), u.Value = n.utils.isUndefinedOrNull(i) ? t.Value : i.GreekName),
u
})
})
},
t
}();
t.HeaderNameValueMapper = i
}) (t = n.jobs || (n.jobs = {
}))
}(alpha || (alpha = {
})); __extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(), function (n) {
var t;
(function (t) {
var f = function () {
function t(t, i) {
this.stateService = t;
this.roleService = i;
this.rootTransferMulti = !1;
this.rootTransferSingle = !1;
this.rootPaymentMulti = !1;
this.rootPaymentSingle = !1;
this.prepareTransferRights = [
{
PrepareRight: 'PrepareAllTransfers',
PrepareState: n.constants.stateNames.transfersJobIntrabank
},
{
PrepareRight: 'PrepareIntrabankTranfer',
PrepareState: n.constants.stateNames.transfersJobIntrabank
},
{
PrepareRight: 'PrepareInterbankTranfer',
PrepareState: n.constants.stateNames.transfersJobInterbank
},
{
PrepareRight: 'PrepareInternationalTranfer',
PrepareState: n.constants.stateNames.transfersJobInternational
},
{
PrepareRight: 'PrepareSimpleImportsTransfer',
PrepareState: n.constants.stateNames.transfersJobEEImports
},
{
PrepareRight: 'PrepareMultiTransfers',
PrepareState: n.constants.stateNames.transfersJobMulti
}
];
var r = i.getRolePermissions();
r.indexOf('PrepareTransfers') != - 1 && r.indexOf('AddJob') != - 1 && (this.rootTransferSingle = !0);
r.indexOf('PrepareMultiTransfers') != - 1 && (this.rootTransferMulti = !0);
r.indexOf('PreparePayments') != - 1 && r.indexOf('AddJob') != - 1 && (this.rootPaymentSingle = !0);
r.indexOf('PrepareMultiPayments') != - 1 && (this.rootPaymentMulti = !0);
this.setPaymentDataFlag()
}
return t.prototype.setPaymentDataFlag = function () {
var n = null;
return this.isDirectPayment = (n = $('html head meta[name=PaymentData]').attr('content'), n.length > 0) ? !0 : !1
},
t.prototype.IsCurrentStateChildOf = function (n) {
return this.stateService.current.name.indexOf(n) >= 0
},
t.prototype.GetClassByState = function (n) {
return this.stateService.current.name.indexOf(n) >= 0 ? 'active' : ''
},
t.prototype.GetFirstAvailableTransferState = function () {
var i = this,
t = this.prepareTransferRights.filter(function (n) {
return i.roleService.isAccessAllowed(n.PrepareRight)
});
return t && t.length > 0 ? t[0].PrepareState : n.constants.stateNames.rootState
},
t.prototype.SelectedSingleMenu = function () {
return this.stateService.current.name.indexOf('multi') >= 0 ? !1 : !0
},
t.$inject = [
'$state',
'RoleService'
],
t
}(),
i,
r,
u;
n.jobs.mainModule.controller('JobController', f);
i = function (t) {
function i(i, r, u, f, e) {
var o = t.call(this, r, u) || this;
return o.model = i,
o.$scope = r,
o.$injector = u,
o.appEventsService = f,
o.sharedDataService = e,
o.TotalAmount = 0,
o.TotalAmountLiteral = '',
o.TotalExpenses = 0,
o.ExpensesLiteral = '',
o.typeFilterValues = [
],
o.IsAmountBlocked = !1,
o.IsBusy = !1,
u.get('QueriesService').getDatesAndOnLineStatus().then(function (t) {
return o.datesAndStatus = t,
o.model.TransferDate == undefined && (o.model.TransferDate = n.utils.parseDateString(o.datesAndStatus.NextWorkingDate)),
o.datesAndStatus
}),
o.editModel = {
},
o.today = new Date,
o
}
return __extends(i, t),
i.prototype.getFilterObject = function (n) {
return this.typeFilterValues.filter(function (t) {
return t.id == n
}) [0]
},
i.prototype.recalculateFullAmount = function (n, t) {
n != null ? t ? this.TotalAmount += n : this.TotalAmount -= n : (this.TotalAmount = 0, this.calculateAmount());
this.TotalAmount = Math.round(this.TotalAmount * 100) / 100
},
i.prototype.calculateAmount = function () {
},
i.prototype.goEditJob = function () {
this.gotoPreviousStep();
this.IsEditJobMode = !0;
this.editModel.TransferDate = this.model.TransferDate;
this.editModel.IsImmediate = this.model.IsImmediate;
this.editModel.JobType = this.model.JobType;
this.editModel.JobName = this.model.JobName;
this.scope.form.$setPristine()
},
i.prototype.saveEdit = function () {
this.scope.form.$setDirty();
this.scope.form.$invalid || (this.IsEditJobMode = !1, n.utils.isUndefinedOrNull(this.model.DebitAccount) || (this.ModCode = this.model.DebitAccount.Code.substr(0, 6) + '...' + this.model.DebitAccount.Code.substr(this.model.DebitAccount.Code.length - 6)));
this.gotoNextStep()
},
i.prototype.cancelEdit = function () {
this.model.TransferDate = this.editModel.TransferDate;
this.model.IsImmediate = this.editModel.IsImmediate;
this.model.JobType = this.editModel.JobType;
this.model.JobName = this.editModel.JobName;
this.IsEditJobMode = !1;
this.gotoNextStep()
},
i.prototype.cancelAdd = function () {
this.IsAddTransactionMode = !1
},
Object.defineProperty(i.prototype, 'taxCodePattern', {
get: function () {
return n.constants.regularPatterns.taxCodeNumber
},
enumerable: !0,
configurable: !0
}),
i.prototype.previousStep = function () {
this.model.HasErrors = !1;
t.prototype.previousStep.call(this)
},
i.prototype.renewJobCount = function (t) {
var i = this.sharedDataService.GetControllerData(n.server.Controllers.Badge, n.common.services.AppEventsService.jobApprovalCount) + t;
this.sharedDataService.SetControllerData(this.$scope, n.server.Controllers.Badge, n.common.services.AppEventsService.jobApprovalCount, i);
this.appEventsService.publish(n.common.services.AppEventsService.jobApprovalCount)
},
i
}(t.JobWizardController);
r = function (t) {
function i(i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k, d, g, nt) {
var tt = t.call(this, i, e, o, y, p) || this;
return tt.model = i,
tt.upload = r,
tt.$http = u,
tt.stringService = f,
tt.$scope = e,
tt.$injector = o,
tt.qService = s,
tt.jobsServiceProxy = h,
tt.profileProductsService = c,
tt.$filter = l,
tt.HasPayrollAccounts = a,
tt.HasOtherAccounts = v,
tt.userInfo = w,
tt.publicServiceProxy = b,
tt.exchangeService = k,
tt.roleService = d,
tt.modal = g,
tt.productsService = nt,
tt.transferIndexToEdit = - 1,
tt.RequestType = 50,
tt.CreditRequestType = 49,
tt.PartialSuccessfull = !1,
tt.ErrorDetails = {
Amount: 0,
Limit: 0,
Currency: 'EUR'
},
tt.isAsychFile = !1,
tt.canViewAccountBalance = w.UserInfo.Permissions.indexOf('ViewAccountGrossBalance') > - 1,
tt.model.JobTransfers = [
],
tt.model.IsImmediate = !0,
b.getRates({
}).then(function (n) {
tt.Rates = n.Rates
}),
tt.isSpecialType = w.UserInfo.CompanyInfo.IsSpecialSubscription,
s.all([tt.profileProductsService.getAccountsByRequestType(n.server.ProductRequestType.DebitAccountsForPayroll),
tt.profileProductsService.getAccountsByRequestType(n.server.ProductRequestType.DebitAccounts)]).then(function (n) {
var t = n[0],
i = n[1];
tt.typeFilterValues = [
];
d.isAccessAllowed('PreparePayrollTransfer') && tt.typeFilterValues.push({
id: 1,
name: tt.stringService.payrollTransfer,
hasAccounts: !!t.length
});
d.isAccessAllowed('PrepareSupplierTransfer') && tt.typeFilterValues.push({
id: 2,
name: tt.stringService.supplierTransfer,
hasAccounts: !!t.length
});
d.isAccessAllowed('PrepareOtherTransfer') && tt.typeFilterValues.push({
id: 3,
name: tt.stringService.otherTransfer,
hasAccounts: !!i
});
!t.length && i && (tt.model.JobType = 3)
}),
tt
}
return __extends(i, t),
i.prototype.openFileExplorer = function () {
this.IsBusy = !0;
this.resetBusy()
},
i.prototype.resetBusy = function () {
this.IsBusy = !1
},
i.prototype.isTransferTypeHaveAccounts = function (n) {
return this.typeFilterValues.some(function (t) {
if (t.id === n) return t.hasAccounts
})
},
i.prototype.changeTransferType = function (t) {
if (this.isTransferTypeHaveAccounts(t)) this.model.HasErrors = !1;
 else {
this.model.HasErrors = !0;
this.model.Error.Message = this.stringService.Transfer_NoDebitAccounts;
return
}
switch (t) {
case 1:
this.RequestType = n.server.ProductRequestType.DebitAccountsForPayroll;
this.CreditRequestType = n.server.ProductRequestType.CreditAccountsPayroll;
break;
case 2:
case 3:
this.RequestType = n.server.ProductRequestType.DebitAccounts;
this.CreditRequestType = n.server.ProductRequestType.CreditAccounts
}
},
i.prototype.initialiseSteps = function () {
return this.makeStep({
templateUrl: 'Templates/Features/jobs/Multiple/Transfer/step1',
title: 'Νέα εργασία'
}, this.step1),
this.makeStep({
templateUrl: 'Templates/Features/jobs/Multiple/Transfer/step2',
title: 'Προσθήκη εργασιών'
}, this.step2),
this.makeStep({
templateUrl: 'Templates/Features/jobs/Multiple/Transfer/step3',
title: 'Αποδοχή μαζικής εργασίας'
}, this.step3),
this.makeStep({
templateUrl: 'Templates/Features/jobs/Multiple/Transfer/step4',
title: 'Αποτέλεσμα μαζικής εργασίας'
}, this.step4),
this.wizzardSteps
},
i.prototype.getCreditAccountByCode = function (n) {
var t = this.model.JobTransfers.filter(function (t) {
return t.CreditProductCode == n || t.CreditProductIBAN == n
}) [0];
return t.CreditProductIBAN ? t.CreditProductIBAN : t.CreditProductCode
},
i.prototype.step1 = function () {
var t = this,
i = this.qService.defer(),
r = this;
return this.profileProductsService.getAccountsByRequestType(n.server.ProductRequestType.CreditAccounts).then(function (u) {
if (t.isAsychFile = !1, u.length) if (t.model.FromFile) var f = t.upload.upload({
url: 'Upload/File/Sepa',
data: {
file: t.xmlFile,
type: t.model.JobType,
__RequestVerificationToken: t.$http.defaults.headers.common['x-xsrf-token']
},
method: 'POST'
}).then(function (u) {
try {
var f;
f = JSON.parse(u);
f.HasErrors && f.Error || (t.isAsychFile = f.isAsychFile, f = JSON.parse(f.fileData))
} catch (e) {
return t.model.HasErrors = !0,
t.model.Error.Message = t.stringService['sepa.upload.error'],
i.reject(e)
}
if (f.HasErrors || f.Error) return t.model.HasErrors = !0,
t.model.Error.Message = n.utils.getErrorMsg(f.Error),
i.reject(u);
r.model.FromFile = !0;
r.model.JobTransfers = f.Transfers;
t.profileProductsService.getAccountByCodeCorporate(f.Header.MessageId, n.server.ProductRequestType.AllAccounts).then(function (u) {
u.Products.length == 0 ? (t.model.HasErrors = !0, t.model.Error.Message = t.stringService['massjobs.no.credit'], i.reject(!0))  : u.Products[0].Uses.indexOf(2) != - 1 ? (r.model.DebitAccount = new n.model.AccountProduct(u.Products[0]), r.ModCode = r.model.DebitAccount.Code.substr(0, 6) + '...' + r.model.DebitAccount.Code.substr(r.model.DebitAccount.Code.length - 6), t.model.HasErrors = !1, t.model.Error.Message = '', t.IsAddTransactionMode = !1, t.IsModifyTransactionsMode = !1, t.model.JobTransfers.forEach(function (n) {
t.recalculateFullAmount(n.Amount, !0);
n.EntryDate = r.$filter('date') (new Date, 'dd/MM/yyyy')
}), i.resolve(!0))  : (t.model.HasErrors = !0, t.model.Error.Message = t.stringService['massjobs.no.debit.productuse'] + ' : ' + u.Products[0].Code, i.reject(!0))
})
}, function (r) {
return t.model.HasErrors = !0,
t.model.Error.Message = n.utils.getErrorMsg(r),
i.reject(r)
});
 else t.ModCode = t.model.DebitAccount.Code.substr(0, 6) + '...' + t.model.DebitAccount.Code.substr(t.model.DebitAccount.Code.length - 6),
t.model.JobTransfers = [
],
i.resolve(!0);
 else t.model.HasErrors = !0,
t.model.Error.Message = t.stringService.Transfer_NoCreditAccounts,
i.resolve(!1)
}),
this.recalculateFullAmount(this.Amount, !0),
i.promise
},
i.prototype.step2 = function () {
return this.MultiExpensesPromise
},
i.prototype.removeDifCurrencyError = function () {
this.SelectCreditAccount.Currency !== this.model.DebitAccount.Currency ? this.scope.form.addJobForm.credAcc.$setValidity('difcurrency', !1)  : this.scope.form.addJobForm.credAcc.$setValidity('difcurrency', !0)
},
i.prototype.removeDifCurrencyErrorNonProfile = function () {
this.nonProfileProductCode && (this.nonProfileProductCode.substr(15, 2) != '00' ? this.scope.form.addJobForm.nonProfileCredCode.$setValidity('difcurrency', !1)  : this.scope.form.addJobForm.nonProfileCredCode.$setValidity('difcurrency', !0))
},
Object.defineProperty(i.prototype, 'MultiExpensesPromise', {
get: function () {
var t = this,
i = this.qService.defer(),
r = {
Amount: this.TotalAmount,
ProductTypeId: this.model.JobTransfers[0].CreditProductType,
TansactionNumber: this.model.JobTransfers.length,
Currency: this.model.DebitAccount.CurrencyEnum
},
u = this.jobsServiceProxy.getMultiJobExpenses(r).then(function (r) {
r.ResultCode == 0 ? (t.TotalAmountLiteral = r.AmountLiteral, t.TotalExpenses = r.TotalExpenses, t.ExpensesLiteral = r.ExpensesLiteral, i.resolve(!0))  : (t.model.HasErrors = !0, t.model.Error.Message = n.utils.getErrorMsg(r), i.reject(r.ResultCode))
}, function (r) {
t.model.HasErrors = !0;
t.model.Error.Message = n.utils.getErrorMsg(r);
i.reject(r)
});
return i.promise
},
enumerable: !0,
configurable: !0
}),
i.prototype.step3 = function () {
var t = this,
i = this.qService.defer(),
r = {
JobType: this.model.JobType,
TransferDate: this.$filter('date') (this.model.TransferDate, 'yyyyMMdd'),
JobName: this.model.JobName,
IsFile: this.model.FromFile,
Transfers: this.model.JobTransfers,
DebitProductCode: this.model.DebitAccount.Code.substring(this.model.DebitAccount.Code.length - 15),
DebitProductType: this.model.DebitAccount.TypeID,
DebitProductTypeName: this.model.DebitAccount.TypeName,
IsOrdered: !this.model.IsImmediate
},
u;
return this.PartialSuccessfull = !1,
u = this.jobsServiceProxy.submitMultiTransferJob(r).then(function (u) {
u.ResultCode == 0 ? (t.model.JobSubmissionResponse = u, t.model.JobName = t.model.JobName, t.model.JobSubmissionResponseStatus = u.Status, u.CanBeApprove && t.renewJobCount(1), u.FailedTransfers && u.FailedTransfers.length > 0 ? (t.PartialSuccessfull = !0, t.model.FailedTransfers = u.FailedTransfers, t.model.FailedTransfers.forEach(function (n) {
if (!n.CreditProductIBAN) {
var t = r.Transfers.filter(function (t) {
return t.CreditProductCode === n.CreditProductCode
});
n.CreditProductIBAN = t.length ? t[0].CreditProductIBAN : n.CreditProductCode
}
}), t.model.FailedTransfers.forEach(function (n) {
t.recalculateFullAmount(n.Amount, !1)
}), t.MultiExpensesPromise.then(function () {
i.resolve(!0)
}, function () {
i.resolve(!1)
}))  : i.resolve(!0))  : (t.model.HasErrors = !0, t.model.Error.Message = n.utils.getErrorMsg(u), i.reject(u.ResultCode))
}, function (r) {
t.model.HasErrors = !0;
t.model.Error.Message = n.utils.getErrorMsg(r);
i.reject(r)
}),
i.promise
},
i.prototype.step4 = function () {
var n = this.qService.defer();
return n.resolve(!0),
n.promise
},
i.prototype.goAddJob = function () {
this.IsAddTransactionMode = !0;
this.Amount = 0;
this.nonProfileProductCode = null;
this.SelectCreditAccount = null;
this.DebitReason = '';
this.model.UseProfileProduct = !0;
this.scope.form.$setPristine()
},
i.prototype.cancelEdit = function () {
t.prototype.cancelEdit.call(this);
this.model.HasErrors = !1
},
i.prototype.cancelAdd = function () {
t.prototype.cancelAdd.call(this);
this.model.HasErrors = !1
},
i.prototype.searchBeneficiaries = function () {
var t = this,
i = t.model.UseProfileProduct ? t.SelectCreditAccount.Code : t.nonProfileProductCode,
r = this.model.UseProfileProduct ? this.SelectCreditAccount.BankProduct.ProductID : n.constants.pci.defaultProductId,
u;
(i != null || i != '') && (u = this.modal.open({
templateUrl: 'Templates/Features/Transfers/beneficiariesModal',
controller: 'BeneficiariesModalInstanceCtrl as vm',
windowClass: 'beneficiariesModal',
resolve: {
productInfo: [
function () {
return t.productsService.getProductInfo({
Code: i,
ProductID: r,
Family: n.server.ProductTypeFamily.Account,
Scope: n.server.ProductTypeScope.Local
}).then(function (n) {
return n.ProductInfo[0]
})
}
]
}
}))
},
i.prototype.constructTransfer = function (t) {
var r = this,
i = {
};
return t ? (i.CreditProductID = r.SelectCreditAccount.BankProduct.ProductID, i.CreditProductTitle = r.SelectCreditAccount.Title, i.CreditProductType = r.SelectCreditAccount.TypeID, i.CreditProductTypeName = r.SelectCreditAccount.TypeName, i.CreditProductCode = r.SelectCreditAccount.Code.substring(r.SelectCreditAccount.Code.length - 15), i.CreditProductIBAN = r.SelectCreditAccount.Code)  : (i.CreditProductID = - 1, i.CreditProductType = 0, i.CreditProductCode = r.nonProfileProductCode.substring(r.nonProfileProductCode.length - 15), i.CreditProductIBAN = r.nonProfileProductCode),
i.AmountCurrency = n.server.Currency.EUR,
i.UseProfileProduct = t,
i.Amount = r.Amount,
i.CreditReason = r.CreditReason,
i.DebitReason = r.DebitReason,
i.RemittanceInfo = r.RemittanceInfo,
i.EntryDate = r.$filter('date') (new Date, 'dd/MM/yyyy'),
i
},
i.prototype.addJob = function () {
if (this.scope.form.$setDirty(), this.setValidAmountInputValidity(!0), !this.scope.form.$invalid) if (this.IsAmountValid(this.Amount)) {
var n = this.constructTransfer(this.model.UseProfileProduct);
this.model.JobTransfers.push(n);
this.recalculateFullAmount(this.Amount, !0);
this.IsAddTransactionMode = !1;
this.IsModifyTransactionsMode = !1;
this.model.HasErrors = !1
} else this.setValidAmountInputValidity(!1),
this.model.HasErrors = !0,
this.IsBusy = !1
},
i.prototype.setValidAmountInputValidity = function (n) {
this.scope.form.addJobForm.ValidAmount.$setValidity('ValidAmount', n)
},
i.prototype.IsAmountValid = function (n) {
return n <= this.userInfo.UserInfo.CompanyInfo.MaxAmountLimitPerTransaction ? !0 : (this.ErrorDetails.Amount = n, this.ErrorDetails.Limit = this.userInfo.UserInfo.CompanyInfo.MaxAmountLimitPerTransaction, !1)
},
i.prototype.removeTransfer = function (n) {
this.recalculateFullAmount(this.model.JobTransfers[n].Amount, !1);
this.model.JobTransfers.splice(n, 1)
},
i.prototype.goEditTransfer = function (t) {
this.transferIndexToEdit = t;
this.Amount = this.model.JobTransfers[t].Amount;
this.DebitReason = this.model.JobTransfers[t].DebitReason;
this.CreditReason = this.model.JobTransfers[t].CreditReason;
this.RemittanceInfo = this.model.JobTransfers[t].RemittanceInfo;
this.SelectCreditAccount = new n.model.AccountProduct(this.profileProductsService.getFilteredProducts(this.model.JobTransfers[t].CreditProductIBAN, n.server.CategoryGroupType.ACCOUNT) [0]);
this.removeTransfer(t);
this.IsModifyTransactionsMode = !0;
this.scope.form.$setPristine()
},
i.prototype.calculateAmount = function () {
var n = this;
this.model.JobTransfers.forEach(function (t) {
n.TotalAmount += t.Amount
})
},
i.prototype.deleteJob = function () {
this.DebitReason = '';
this.RemittanceInfo = '';
this.CreditReason = '';
this.model.JobName = '';
this.model.JobTransfers = [
];
this.model.IsImmediate = !0;
this.model.TransferDate = (new Date).addDays(1);
this.model.HasErrors = !1;
this.model.JobType = 1;
this.model.DebitAccount = null;
this.xmlFile = null;
this.TotalAmount = 0;
this.Amount = 0;
t.prototype.previousStep.call(this)
},
i.prototype.removeAliasDuplication = function (n) {
return this.model.DebitAccount.Title === this.model.DebitAccount.Code ? this.model.DebitAccount.Title : n
},
i.$inject = [
'model',
'Upload',
'$http',
'STRINGS',
'$scope',
'$injector',
'$q',
'JobsServiceProxy',
'ProfileProductsService',
'$filter',
'HasPayrollAccounts',
'HasOtherAccounts',
'AppEventsService',
'SharedDataService',
'userInfo',
'PublicServiceProxy',
'ExchangeService',
'RoleService',
'$modal',
'ProductsService'
],
i
}(i);
n.jobs.mainModule.controller('JobMultiTransferAddController', r);
u = function (t) {
function i(i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b) {
var k = t.call(this, i, s, h, y, p) || this;
return k.model = i,
k.upload = r,
k.$http = u,
k.stringService = f,
k.onlineStatus = e,
k.ikaProducts = o,
k.$scope = s,
k.$injector = h,
k.qService = c,
k.jobsServiceProxy = l,
k.$filter = a,
k.productsService = v,
k.userInfo = w,
k.lookupsService = b,
k.periodFormat = 'MM/yyyy',
k.periodOptions = {
format: 'MM/yyyy',
minMode: 'month'
},
k.UseProfilePaymentCode = !1,
k.ErrorDetails = {
Amount: 0,
Limit: 0,
Currency: 'EUR'
},
k.model.JobPayments = [
],
k.canViewAccountBalance = k.userInfo.UserInfo.Permissions.indexOf('ViewAccountGrossBalance') > - 1,
k.currentWorkingDateValue = n.utils.parseDateString(k.onlineStatus.CurrentWorkingDate),
k.model.TransferDate = n.utils.parseDateString(k.onlineStatus.CurrentWorkingDate),
k.model.JobPayments.length == 0 && (k.IsAddTransactionMode = !0),
k.model.PaymentPeriod = n.utils.parseDateString(k.onlineStatus.CurrentWorkingDate),
k.typeFilterValues = [
{
id: n.server.SubCategoryType.PaymentIka,
name: k.stringService.ikaPayment
},
{
id: n.server.SubCategoryType.PaymentTeve,
name: k.stringService.oaeePayment
}
],
k
}
return __extends(i, t),
i.prototype.initialiseSteps = function () {
return this.makeStep({
templateUrl: 'Templates/Features/jobs/Multiple/Payment/step1',
title: 'Νέα εργασία'
}, this.step1),
this.makeStep({
templateUrl: 'Templates/Features/jobs/Multiple/Payment/step2',
title: 'Προσθήκη εργασιών'
}, this.step2),
this.makeStep({
templateUrl: 'Templates/Features/jobs/Multiple/Payment/step3',
title: 'Αποδοχή μαζικής εργασίας'
}, this.step3),
this.makeStep({
templateUrl: 'Templates/Features/jobs/Multiple/Payment/step4',
title: 'Αποτέλεσμα μαζικής εργασίας'
}, this.step4),
this.wizzardSteps
},
i.prototype.step1 = function () {
var n = this.qService.defer(),
t,
i;
return this.ModCode = this.model.DebitAccount.Code.substr(0, 6) + '...' + this.model.DebitAccount.Code.substr(this.model.DebitAccount.Code.length - 6),
this.IsIka() && (t = this, i = this.lookupsService.getPredefinedCodesForPaymentType(10471), i.then(function (n) {
t.savedPaymentCodes = n
})),
n.resolve(!0),
n.promise
},
i.prototype.step2 = function () {
var t = this,
i = this.qService.defer(),
r,
u;
return this.UseProfilePaymentCode && (this.IkaOaeeCode = this.PredefinedPaymentCode.Code),
r = {
Amount: this.TotalAmount,
ProductTypeId: this.model.JobPayments[0].ProductTypeId,
TansactionNumber: this.model.JobPayments.length,
Currency: this.model.DebitAccount.CurrencyEnum
},
u = this.jobsServiceProxy.getMultiJobExpenses(r).then(function (r) {
r.ResultCode == 0 ? (t.TotalAmountLiteral = r.AmountLiteral, t.TotalExpenses = r.TotalExpenses, t.ExpensesLiteral = r.ExpensesLiteral, i.resolve(!0))  : (t.model.HasErrors = !0, t.model.Error.Message = n.utils.getErrorMsg(r), i.reject(r.ResultCode))
}, function (r) {
t.model.HasErrors = !0;
t.model.Error.Message = n.utils.getErrorMsg(r);
i.reject(r)
}),
i.promise
},
i.prototype.step3 = function () {
var t = this,
i = this.qService.defer(),
r = {
JobType: this.model.JobType,
TransferDate: this.$filter('date') (this.model.TransferDate, 'yyyyMMdd'),
PaymentPeriod: this.$filter('date') (this.model.PaymentPeriod, 'yyyyMMdd'),
JobName: this.model.JobName,
DebitProductCode: this.model.DebitAccount.Code.substring(this.model.DebitAccount.Code.length - 15),
DebitProductType: this.model.DebitAccount.TypeID,
DebitProductTypeName: this.model.DebitAccount.TypeName,
DebitProductTitle: this.model.DebitAccount.Title,
IsOrdered: !this.model.IsImmediate,
Payments: this.model.JobPayments,
PaymentType: this.IsIka() ? 10 : 11
},
u = this.jobsServiceProxy.submitMultiPaymentJob(r).then(function (r) {
r.ResultCode == 0 ? (t.model.JobSubmissionResponse = r, t.model.JobName = t.model.JobName, t.model.JobSubmissionResponseStatus = r.Status, r.CanBeApprove && t.renewJobCount(1), i.resolve(!0))  : (t.model.HasErrors = !0, t.model.Error.Message = n.utils.getErrorMsg(r), i.reject(r.ResultCode))
}, function (r) {
t.model.HasErrors = !0;
t.model.Error.Message = n.utils.getErrorMsg(r);
i.reject(r)
});
return i.promise
},
i.prototype.step4 = function () {
var n = this.qService.defer();
return n.resolve(!0),
n.promise
},
i.prototype.IsIka = function () {
return this.model.JobSubCategoryType == n.server.SubCategoryType.PaymentIka
},
i.prototype.selectPredefined = function (n) {
this.IkaOaeeCode = n.Code
},
i.prototype.IsAmountValid = function (n) {
return n <= this.userInfo.UserInfo.CompanyInfo.MaxAmountLimitPerTransaction ? !0 : (this.ErrorDetails.Amount = n, this.ErrorDetails.Limit = this.userInfo.UserInfo.CompanyInfo.MaxAmountLimitPerTransaction, !1)
},
i.prototype.setValidAmountInputValidity = function (n) {
this.scope.form.addJobForm.Amount.$setValidity('Amount', n)
},
i.prototype.addJob = function (t) {
var r = this,
u,
i;
this.model.HasErrors = !1;
this.scope.form.$setDirty();
this.setValidAmountInputValidity(!0);
this.IsAmountValid(this.Amount) ? this.scope.form.$invalid || (u = this.IsIka() ? {
BankProduct: {
Code: this.IkaOaeeCode,
TypeID: 10471
}
}
 : {
BankProduct: {
Code: this.IkaOaeeCode,
TypeID: 10011
}
}, i = this, this.productsService.getProductInfo(u.BankProduct).then(function (t) {
if (t.ProductInfo.length > 0 && !t.ProductInfo[0].ErrorMessage) {
var u = i.IsIka() && i.UseProfilePaymentCode,
f = i.IkaOaeeCode,
e = {
IkaOaeeCode: f,
TaxNumber: i.TaxNumber,
Amount: i.Amount,
AmountCurrency: n.server.Currency.EUR,
EntryDate: r.$filter('date') (new Date, 'dd/MM/yyyy'),
ProductTitle: u ? r.PredefinedPaymentCode.Title : '',
ProductTypeId: u ? r.PredefinedPaymentCode.TypeID : t.ProductInfo[0].ProductTypeID,
ProductTypeName: u ? r.PredefinedPaymentCode.TypeName : t.ProductInfo[0].ProductTypeName,
Uses: t.ProductInfo[0].ValidUses
};
i.model.JobPayments.push(e);
i.recalculateFullAmount(i.Amount, !0);
i.IsAddTransactionMode = !1;
i.HasAddError = !1
} else i.HasAddError = !0,
i.AddError = t.ProductInfo[0].ErrorMessage,
i.IsAddTransactionMode = !0
}, function (n) {
i.HasAddError = !0;
i.AddError = n;
i.IsAddTransactionMode = !1
}), t.preventDefault())  : (this.setValidAmountInputValidity(!1), this.model.HasErrors = !0, this.IsBusy = !1)
},
i.prototype.goAddJob = function () {
this.IsAddTransactionMode = !0;
this.PredefinedPaymentCode = null;
this.TaxNumber = null;
this.IkaOaeeCode = '';
this.scope.form.$setPristine()
},
i.prototype.calculateAmount = function () {
var n = this;
this.model.JobPayments.forEach(function (t) {
n.TotalAmount += t.Amount
})
},
i.prototype.removePayment = function (n) {
this.recalculateFullAmount(this.model.JobPayments[n].Amount, !1);
this.model.JobPayments.splice(n, 1)
},
i.prototype.goEditTransfer = function (n) {
this.Amount = this.model.JobPayments[n].Amount;
this.TaxNumber = this.model.JobPayments[n].TaxNumber;
this.Amount = this.model.JobPayments[n].Amount;
this.removePayment(n);
this.IsModifyTransactionsMode = !0;
this.scope.form.$setPristine()
},
i.prototype.deleteJob = function () {
this.model.JobName = '';
this.model.JobPayments = [
];
this.model.IsImmediate = !1;
this.model.TransferDate = n.utils.parseDateString(this.onlineStatus.CurrentWorkingDate);
this.model.HasErrors = !1;
this.model.JobType = 7;
this.model.DebitAccount = null;
this.TotalAmount = 0;
this.IkaOaeeCode = '';
this.Amount = 0;
t.prototype.previousStep.call(this)
},
i.$inject = [
'model',
'Upload',
'$http',
'STRINGS',
'onlineStatus',
'ikaProducts',
'$scope',
'$injector',
'$q',
'JobsServiceProxy',
'$filter',
'ProductsService',
'AppEventsService',
'SharedDataService',
'userInfo',
'LookupsService',
],
i
}(i);
n.jobs.mainModule.controller('JobMultiPaymentAddController', u)
}) (t = n.jobs || (n.jobs = {
}))
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(),
function (n) {
var t;
(function () {
var i = function (n, t) {
var i = n;
return i.JobName = t,
i.JobType = 0,
i
},
t = function (t, r, u, f, e, o, s) {
var h = i(r, t.JobName);
return e.submitPaymentJob(h).then(function (i) {
var e,
h;
return i.ResultCode === 1 ? f.reject(i.Error.Message)  : (t.SubmittedTimeStamp = i.SubmittedTimeStamp, t.JobSubmissionResponse = i, !n.utils.isUndefinedOrNull(i.CreditProductOwners) && i.CreditProductOwners.length > 0 && r.PaymentType == 2 && (t.CreditAccountBeneficiaries = [
], e = i.CreditProductOwners, e && e.forEach(function (i) {
t.CreditAccountBeneficiaries.push(new n.model.AccountBeneficiary(i))
})), i.CanBeApprove && (h = o.GetControllerData(n.server.Controllers.Badge, n.common.services.AppEventsService.jobApprovalCount) + 1, o.SetControllerData(u, n.server.Controllers.Badge, n.common.services.AppEventsService.jobApprovalCount, h), s.publish(n.common.services.AppEventsService.jobApprovalCount)), {
})
}, function (t) {
return f.reject(n.utils.getErrorMsg(t))
})
};
t.$inject = [
'model',
'payload',
'scope',
'$q',
'JobsServiceProxy',
'SharedDataService',
'AppEventsService'
];
var r = function (r) {
function u(n, t, i, u, f, e, o, s, h, c, l, a, v, y, p, w) {
var b = r.call(this, n, t, i, u, f, e, o, s, h, c, l, a, v, y, p) || this;
return b.userInfo = w,
b
}
return __extends(u, r),
u.prototype.initialiseSteps = function () {
var n = r.prototype.initialiseSteps.call(this);
return n[1].processStep = function () {
var n = this,
i = n.createExecutionPayload();
return n.preExecute(i),
n.injector.invoke(t, null, {
model: n.Model,
payload: i,
scope: n.scope
})
},
n[2].templateUrl = 'Templates/Features/Jobs/Payment/dynamic/step3',
n
},
u.prototype.getOtpPayload = function () {
var n = r.prototype.getOtpPayload.call(this);
return i(n, this.Model.JobName)
},
u.$inject = n.payments.DynamicPaymentWizardController.$inject.concat(['userInfo']),
u
}(n.payments.DynamicPaymentWizardController),
u = function (r) {
function u(n, t, i, u, f, e, o, s, h, c, l, a, v, y, p) {
var w = r.call(this, n, t, i, u, f, e, o, s, h, c, l, a, v, y) || this;
return w.userInfo = p,
w
}
return __extends(u, r),
u.prototype.initialiseSteps = function () {
var n = r.prototype.initialiseSteps.call(this);
return n[1].processStep = function () {
var n = this,
i = n.createExecutionPayload();
return n.preExecute(i),
n.injector.invoke(t, null, {
model: n.Model,
payload: i,
scope: n.scope
})
},
n[2].templateUrl = 'Templates/Features/Jobs/Payment/dynamic/step3',
n
},
u.prototype.getOtpPayload = function () {
var n = r.prototype.getOtpPayload.call(this);
return i(n, this.Model.JobName)
},
u.$inject = n.payments.EVoucherPaymentWizardController.$inject.concat(['userInfo']),
u
}(n.payments.EVoucherPaymentWizardController),
f = function (r) {
function u(n, t, i, u, f, e, o, s, h, c, l, a, v, y) {
var p = r.call(this, n, t, i, u, f, e, o, s, h, c, l, a, v) || this;
return p.userInfo = y,
p
}
return __extends(u, r),
u.prototype.initialiseSteps = function () {
var n = r.prototype.initialiseSteps.call(this);
return n[1].processStep = function () {
var n = this,
i = n.createExecutionPayload();
return n.preExecute(i),
n.injector.invoke(t, null, {
model: n.Model,
payload: i,
scope: n.scope
})
},
n[2].templateUrl = 'Templates/Features/Jobs/Payment/donations/step3',
n
},
u.prototype.getOtpPayload = function () {
var n = r.prototype.getOtpPayload.call(this);
return i(n, this.Model.JobName)
},
u.$inject = n.payments.DonationPaymentWizardController.$inject.concat(['userInfo']),
u
}(n.payments.DonationPaymentWizardController),
e = function (r) {
function u(n, t, i, u, f, e, o, s, h, c, l, a, v, y) {
var p = r.call(this, n, t, i, u, f, e, o, s, h, c, l, a, v) || this;
return p.userInfo = y,
p
}
return __extends(u, r),
u.prototype.initialiseSteps = function () {
var n = r.prototype.initialiseSteps.call(this);
return n[1].processStep = function () {
var n = this,
i = n.createExecutionPayload();
return n.preExecute(i),
n.injector.invoke(t, null, {
model: n.Model,
payload: i,
scope: n.scope
})
},
n[2].templateUrl = 'Templates/Features/Jobs/Payment/donations/step3',
n
},
u.prototype.getOtpPayload = function () {
var n = r.prototype.getOtpPayload.call(this);
return i(n, this.Model.JobName)
},
u.$inject = n.payments.DonationWithCodePaymentWizardController.$inject.concat(['userInfo']),
u
}(n.payments.DonationWithCodePaymentWizardController),
o = function (n) {
function r() {
return n !== null && n.apply(this, arguments) || this
}
return __extends(r, n),
r.prototype.initialiseSteps = function () {
var i = n.prototype.initialiseSteps.call(this);
return i[1].processStep = function () {
var n = this,
i = n.createExecutionPayload();
return n.preExecute(i),
n.injector.invoke(t, null, {
model: n.Model,
payload: i,
scope: n.scope
})
},
i[2].templateUrl = 'Templates/Features/Jobs/Payment/cards/step3',
i
},
r.prototype.getOtpPayload = function () {
var t = n.prototype.getOtpPayload.call(this);
return i(t, this.Model.JobName)
},
r
}(n.payments.CardPaymentWizardController),
s = function (r) {
function u(n, t, i, u, f, e, o, s, h, c, l, a, v) {
var y = r.call(this, n, t, i, u, f, e, o, s, h, c, l, a) || this;
return y.userInfo = v,
y
}
return __extends(u, r),
u.prototype.initialiseSteps = function () {
var n = r.prototype.initialiseSteps.call(this);
return n[1].processStep = function () {
var n = this,
i = n.createExecutionPayload();
return n.preExecute(i),
n.injector.invoke(t, null, {
model: n.Model,
payload: i,
scope: n.scope
})
},
n[2].templateUrl = 'Templates/Features/Jobs/Payment/dynamic/step3',
n
},
u.prototype.getOtpPayload = function () {
var n = r.prototype.getOtpPayload.call(this);
return i(n, this.Model.JobName)
},
u.$inject = n.payments.CustomPaymentWizardController.$inject.concat(['userInfo']),
u
}(n.payments.CustomPaymentWizardController),
h = function (n) {
function r() {
return n !== null && n.apply(this, arguments) || this
}
return __extends(r, n),
r.prototype.initialiseSteps = function () {
var i = this,
r = n.prototype.initialiseSteps.call(this);
return r[1].processStep = function () {
var n = i.requestFactory.create(i);
return i.preExecute(n),
i.injector.invoke(t, null, {
model: i.Model,
payload: n,
scope: i.scope
})
},
r[2].templateUrl = 'Templates/Features/Jobs/Payment/loans/step3',
r
},
r.prototype.getOtpPayload = function () {
var t = n.prototype.getOtpPayload.call(this);
return i(t, this.Model.JobName)
},
r
}(n.payments.LoanPaymentWizardController),
c = function (n) {
function r() {
return n !== null && n.apply(this, arguments) || this
}
return __extends(r, n),
r.prototype.initialiseSteps = function () {
var i = this,
r = n.prototype.initialiseSteps.call(this);
return r[1].processStep = function () {
var n = i.requestFactory.create(i);
return i.preExecute(n),
i.injector.invoke(t, null, {
model: i.Model,
payload: n,
scope: i.scope
})
},
r[2].templateUrl = 'Templates/Features/Jobs/Payment/loans/step3',
r
},
r.prototype.getOtpPayload = function () {
var t = n.prototype.getOtpPayload.call(this);
return i(t, this.Model.JobName)
},
r
}(n.payments.AlphaLoanPaymentWizardController),
l = function (r) {
function u(n, t, i, u, f, e, o, s, h, c, l, a, v, y, p, w) {
var b = r.call(this, n, t, i, u, f, e, o, s, h, c, l, a, v, y, p, w) || this;
return b.AppEventsService = v,
b.userInfo = y,
b.$stateParams = p,
b
}
return __extends(u, r),
u.prototype.initialiseSteps = function () {
var n = r.prototype.initialiseSteps.call(this);
return n[1].processStep = function () {
var n = this,
i = n.createExecutionPayload();
return n.preExecute(i),
n.injector.invoke(t, null, {
model: n.Model,
payload: i,
scope: n.scope
})
},
n[2].templateUrl = 'Templates/Features/Jobs/Payment/dynamic/step3',
n
},
u.prototype.getOtpPayload = function (n, t) {
var u = r.prototype.getOtpPayload.call(this, n, t);
return i(u, this.Model.JobName)
},
u.$inject = n.payments.GroupDynamicPaymentWizardController.$inject,
u
}(n.payments.GroupDynamicPaymentWizardController),
a = function (r) {
function u(n, t, i, u, f, e, o, s, h, c, l, a, v, y) {
var p = r.call(this, n, t, i, u, f, e, o, s, h, c, l, a, v, y) || this;
return p.userInfo = a,
p
}
return __extends(u, r),
u.prototype.initialiseSteps = function () {
var n = this,
i = r.prototype.initialiseSteps.call(this);
return i[1].processStep = function () {
var i = n.createExecutionPayload();
return n.injector.invoke(t, null, {
model: n.Model,
payload: i,
scope: n.scope
})
},
i[2].templateUrl = 'Templates/Features/Jobs/Payment/laborTicket/step3',
i
},
u.prototype.getOtpPayload = function () {
var n = r.prototype.getOtpPayload.call(this);
return i(n, this.Model.JobName)
},
u.$inject = n.payments.LaborTicketPaymentController.$inject,
u
}(n.payments.LaborTicketPaymentController),
v = function (r) {
function u(n, t, i, u, f, e, o, s, h, c, l, a, v, y) {
var p = r.call(this, n, t, i, u, f, e, o, s, h, c, l, a, v) || this;
return p.userInfo = y,
p
}
return __extends(u, r),
u.prototype.initialiseSteps = function () {
var n = r.prototype.initialiseSteps.call(this);
return n[1].processStep = function () {
var n = this.createExecutionPayload();
return this.injector.invoke(t, null, {
model: this.Model,
payload: n,
scope: this.scope
})
},
n[2].templateUrl = 'Templates/Features/Jobs/Payment/vehicleTax/step3',
n
},
u.prototype.getOtpPayload = function () {
var n = r.prototype.getOtpPayload.call(this);
return i(n, this.Model.JobName)
},
u.$inject = n.payments.VehicleTaxPaymentController.$inject,
u
}(n.payments.VehicleTaxPaymentController),
y = function (r) {
function u(n, t, i, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k) {
var d = r.call(this, n, t, i, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k) || this;
return d.paymentType = n,
d.Model = t,
d.scope = i,
d.injector = u,
d.debitAccounts = f,
d.StateHelperService = e,
d.eVoucherConfigTree = o,
d.filterService = h,
d.modalService = l,
d.stringsService = v,
d.PaymentTypeService = y,
d.postNewWindowService = p,
d.regularExpressionProvider = w,
d.ProfileProductsService = k,
d
}
return __extends(u, r),
u.prototype.initialiseSteps = function () {
var n = r.prototype.initialiseSteps.call(this);
return n[1].processStep = function () {
var n = this,
i = n.createExecutionPayload();
return n.injector.invoke(t, null, {
model: n.Model,
payload: i,
scope: n.scope
})
},
n[2].templateUrl = 'Templates/Features/Jobs/Payment/eVoucherIssueAndPayment/step3',
n
},
u.prototype.getOtpPayload = function () {
var n = r.prototype.getOtpPayload.call(this);
return i(n, this.Model.JobName)
},
u.$inject = n.payments.eVoucherIssueAndPaymentController.$inject,
u
}(n.payments.eVoucherIssueAndPaymentController),
p = function (i) {
function r(n, t, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b) {
var k = i.call(this, n, t, r, u, f, e, o, s, h, c, l, a, v, y, p, w) || this;
return k.paymentType = n,
k.Model = r,
k.scope = u,
k.injector = f,
k.stringsService = e,
k.PaymentsService = o,
k.$q = s,
k.StateHelperService = h,
k.modalService = c,
k.debitAccounts = l,
k.cards = a,
k.PaymentTypeService = v,
k.stateService = p,
k.userInfo = b,
k
}
return __extends(r, i),
r.prototype.initialiseSteps = function () {
var n = i.prototype.initialiseSteps.call(this);
return n[1].processStep = function () {
var n = this,
i = n.createExecutionPayload();
return n.preExecute(i),
n.injector.invoke(t, null, {
model: n.Model,
payload: i,
scope: n.scope
})
},
n[2].templateUrl = 'Templates/Features/Jobs/Payment/dynamic/step3',
n
},
r.$inject = n.payments.HellenicAmericanPaymentController.$inject,
r
}(n.payments.HellenicAmericanPaymentController);
n.jobs.mainModule.controller('DynamicPaymentJobWizardController', r);
n.jobs.mainModule.controller('CardPaymentJobWizardController', o);
n.jobs.mainModule.controller('CustomPaymentJobWizardController', s);
n.jobs.mainModule.controller('LoanPaymentJobWizardController', h);
n.jobs.mainModule.controller('AlphaLoanPaymentJobWizardController', c);
n.jobs.mainModule.controller('EVoucherPaymentJobWizardController', u);
n.jobs.mainModule.controller('DonationPaymentJobWizardController', f);
n.jobs.mainModule.controller('DonationWithCodePaymentJobWizardController', e);
n.jobs.mainModule.controller('GroupDynamicPaymentJobWizardController', l);
n.jobs.mainModule.controller('LaborTicketPaymentJobController', a);
n.jobs.mainModule.controller('eVoucherIssueAndPaymentJobController', y);
n.jobs.mainModule.controller('VehicleTaxPaymentJobController', v);
n.jobs.mainModule.controller('HellenicAmericanJobPaymentController', p)
}) (t = n.jobs || (n.jobs = {
}))
}(alpha || (alpha = {
})),
function (n) {
var t;
(function (t) {
var i = function () {
function t(n, t, i, r, u, f, e, o) {
this.scope = n;
this.$injector = t;
this.Model = r;
this.onlineStatus = u;
this.source = f;
this.minTransferDate = e;
this.userInfoResponse = o;
this.startDates = [
];
this.OrderDescriptor = [
];
this.propertyName = 'CreateDate';
this.reverse = !0;
this.selectiveDisplay = 10;
this.approvalsService = t.get('ApprovalsService');
var s = t.get('$state');
this.SecurityService = t.get('SecurityService');
this.JobCreatorFullNameService = t.get('JobCreatorFullNameService');
this.$q = t.get('$q');
this.productsService = t.get('ProductsService');
this.modal = t.get('$modal')
}
return t.prototype.sortBy = function (n) {
var t = this.OrderDescriptor.filter(function (t) {
return t.Column === n
});
t.length ? t[0].Type = 1 === t[0].Type ? 0 : 1 : this.OrderDescriptor = [
{
Column: n,
Type: 1
}
];
this.applyFilters()
},
t.prototype.increaseDisplayJobsBy = function (n) {
this.clearJobs();
this.selectiveDisplay = n;
this.sentJobsRequest()
},
t.prototype.searchBeneficiaries = function (t, i) {
var r = i.CreditProduct,
f = i.CreditProductID,
u,
e;
r != null && r != '' && (u = this, e = this.modal.open({
templateUrl: 'Templates/Features/Transfers/beneficiariesModal',
controller: 'BeneficiariesModalInstanceCtrl as vm',
windowClass: 'beneficiariesModal',
resolve: {
productInfo: [
function () {
var t = {
Code: r,
ProductID: f,
Family: n.server.ProductTypeFamily.Account,
Scope: n.server.ProductTypeScope.Local,
TransactionAUN: i.Status == n.server.TransactionStatus.Succeded ? i.TransactionAUN : null
};
return u.productsService.getProductInfo(t).then(function (n) {
return n.ProductInfo[0]
})
}
]
}
}))
},
t.prototype.clearJobs = function () {
this.Model.Jobs = [
];
this.Model.CurrentPageIndex = null;
this.Model.PagingFirstIndex = 0;
this.Model.HasMore = null;
this.Model.ReplyRecords = null;
this.Model.TotalRecords = null
},
t.prototype.loadMore = function () {
this.sentJobsRequest()
},
t.prototype.applyFilters = function () {
this.clearJobs();
this.sentJobsRequest()
},
t.prototype.sentJobsRequest = function () {
var n = this.makeJobsRequest();
this.getJobs(n)
},
t.prototype.onNewJobs = function () {
},
t.prototype.getOrderingDescriptors = function () {
return this.OrderDescriptor.length ? this.OrderDescriptor : [
{
Column: 0,
Type: 0
}
]
},
t.prototype.makeJobsRequest = function () {
return {
FromEntryDate: this.scope.vm.fromSubscribeDate && this.getRightDateFormat(this.scope.vm.fromSubscribeDate),
ToEntryDate: this.scope.vm.toSubscribeDate && this.getRightDateFormat(this.scope.vm.toSubscribeDate),
FromTransferDate: this.scope.vm.fromCommandDate && this.getRightDateFormat(this.scope.vm.fromCommandDate),
ToTransferDate: this.scope.vm.toCommandDate && this.getRightDateFormat(this.scope.vm.toCommandDate),
OpenedByUserID: this.scope.vm.selectUser && this.scope.vm.selectUser.Id ? this.scope.vm.selectUser.Id : undefined,
Type: this.scope.vm.TransferPaymentType.number,
MaxRecords: this.selectiveDisplay,
LastPageIndex: this.Model.CurrentPageIndex,
ApprovalLevel: 1,
Category: 1,
CurrentWorkingDate: this.onlineStatus.CurrentWorkingDate,
NextWorkingDate: this.onlineStatus.NextWorkingDate,
IsIsolated: !1,
JobStatus: 3,
Level1ApprovedByUserID: 0,
Level2ApprovedByUserID: 0,
PendingJobsCountQuery: !1,
ShowHistory: !0,
SubCategory: 1,
Source: this.source,
OrderingDescriptors: this.getOrderingDescriptors(),
PagingFirstIndex: this.Model.PagingFirstIndex
}
},
t.prototype.getRightDateFormat = function (t) {
return n.utils.isUndefinedOrNullorWhiteSpace(t) ? undefined : t.getDate() + '/' + + (parseInt(t.getMonth()) + 1).toString() + '/' + t.getFullYear()
},
t.prototype.getJobs = function (n) {
var t = this,
r = this.approvalsService.getJobs(n),
u = this.SecurityService.getSubscriptionInfo({
LanguageSpecified: !0,
GetUsersSpecified: !0,
GetUsers: !0
}),
i = this;
return this.$q.all({
jobsPromise: r,
getSubsPromise: u
}).then(function (n) {
var u = n.getSubsPromise,
i = n.jobsPromise,
f = u.Users;
if (0 == i.ResultCode) if (t.Model.PagingFirstIndex = t.Model.PagingFirstIndex + t.selectiveDisplay, t.Model.CurrentPageIndex = i.CurrentPageIndex, t.Model.HasMore = i.HasMore, t.Model.ReplyRecords = i.ReplyRecords, t.Model.TotalRecords = i.TotalRecords, i.Jobs != null) {
t.onNewJobs(i.Jobs);
var r = t,
e = r.JobCreatorFullNameService.getDistinctUsernames(f, i);
i.Jobs = r.JobCreatorFullNameService.getFullNames(e, i);
r.Model.Jobs = r.Model.Jobs.concat(i.Jobs)
} else t.Model.Jobs = [
];
 else t.Model.ErrorMessage = i.Error.Message,
t.Model.HasErrors = !0
}).catch (function () {
i.approvalsService.getJobs(n).then(function (n) {
i.Model.Jobs = n.Jobs
})
})
},
t
}();
t.jobsCommonControler = i
}) (t = n.jobs || (n.jobs = {
}))
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(),
function (n) {
var t;
(function (t) {
var r = function (t) {
function r(i, r, u, f, e, o, s, h, c, l, a, v, y, p) {
var w = t.call(this, u, f, i, r, e, a, null, null) || this;
return w.isInVersion = i,
w.Model = r,
w.scope = u,
w.$injector = f,
w.onlineStatus = e,
w.jobsServiceProxy = o,
w.$window = s,
w.SharedDataService = h,
w.appEventsService = c,
w.inquiryServiceProxy = l,
w.roleService = v,
w.userName = y,
w.userInfo = p,
w.approvalLevelStatusMap = [
3,
4,
11,
12
],
w.rejectionLevelStatusMap = [
6,
7,
13,
14
],
w.cancelationLevelStatusMap = [
9,
8,
15,
16
],
w.isHistory = !0,
c.subscribe(n.common.services.AppEventsService.MultiJobEdit_Event, function (n, t) {
w.onMultiJobEdit(t)
}),
c.subscribe(n.common.services.AppEventsService.JobViewDetails_Event, function (n, t) {
w.onJobViewDetails(t)
}),
w
}
return __extends(r, t),
r.prototype.JobStatus = function (n) {
return i[n]
},
r.prototype.isJobApprovedRejected = function (n, t) {
var i = this,
r = n.JobHistory.filter(function (n) {
return n.Action == i.approvalLevelStatusMap[t - 1] || n.Action == i.rejectionLevelStatusMap[t - 1] || n.Action == i.cancelationLevelStatusMap[t - 1]
});
return r.length > 0 ? !0 : !1
},
r.prototype.getJobApprovalInfo = function (n, t) {
var r = this,
i = n.JobHistory.filter(function (n) {
return n.Action == r.approvalLevelStatusMap[t - 1]
});
return i && i.length > 0 ? i[0].FullName + ', ' + i[0].Date : ''
},
r.prototype.getJobRejectionInfo = function (n, t) {
var r = this,
i = n.JobHistory.filter(function (n) {
return n.Action == r.rejectionLevelStatusMap[t - 1]
});
return i && i.length > 0 ? i[0].FullName + ', ' + i[0].Date : ''
},
r.prototype.getJobCancelationInfo = function (n, t) {
var r = this,
i = n.JobHistory.filter(function (n) {
return n.Action == r.cancelationLevelStatusMap[t - 1]
});
return i && i.length > 0 ? i[0].FullName + ', ' + i[0].Date : ''
},
r.prototype.isJobDeleted = function (n) {
var i = this,
t = n.JobHistory.filter(function (n) {
return n.Action == 10
});
return t.length > 0 ? !0 : !1
},
r.prototype.jobDeletedInfo = function (n) {
var i = this,
t = n.JobHistory.filter(function (n) {
return n.Action == 10
});
return t && t.length > 0 ? t[0].FullName + ', ' + t[0].Date : ''
},
r.prototype.print = function () {
this.$window.print()
},
r.prototype.isToday = function (n) {
return (new Date).toDateString() === n.toDateString()
},
r.prototype.canCancelJob = function (n) {
return n.Status == 12 && n.CanBeCancelled ? !0 : n.Status == 1 && n.CanBeDeleted ? !0 : !1
},
r.prototype.displayDeleteLiteral = function (n) {
return n.Status == 1
},
r.prototype.cancelJob = function (t) {
var i = this,
u = this,
r = this.modal.open({
templateUrl: 'Templates/Features/Jobs/cancelModal',
controller: [
'$scope',
'headerNameValues',
function (u, f) {
function o(n) {
if (f) for (var t = 0; t < f.length; t++) if (f[t].Variable === n) return f[t].Value;
return ''
}
var e = o('fromAccount');
u.transactionCode = e || t.DebitAccount;
u.jobname = t.JobName;
u.closeModal = function () {
r.dismiss();
r = null
};
i.appEventsService.subscribe(n.common.services.AppEventsService.JobViewDetails_Event, function (n, t) {
u.CreditAccount = t.CreditAccount
});
u.isTransfer = t.ApprovalDetails.Type == 1;
u.transactionValue = t.TotalAmount.Value;
u.transactionValueCurrency = t.TotalAmount.Currency;
u.sentDeleteRequest = function () {
var r = {
JobName: t.JobName,
IsMulti: !t.Isolated,
jobStatus: t.Status,
IsTransfer: t.ApprovalDetails.Type == 1
};
i.jobsServiceProxy.cancelJob(r).then(function (t) {
if (t.ResultCode == 0) {
u.showResults = !0;
u.success = !0;
var r = i.SharedDataService.GetControllerData(n.server.Controllers.Badge, n.common.services.AppEventsService.jobApprovalCount) - 1;
return i.SharedDataService.SetControllerData(i.scope, n.server.Controllers.Badge, n.common.services.AppEventsService.jobApprovalCount, r),
i.appEventsService.publish(n.common.services.AppEventsService.jobApprovalCount),
!0
}
return u.showResults = !0,
u.success = !1,
u.errorMessage = t.Error.Message,
!1
}, function (n) {
return u.showResults = !0,
u.success = !1,
u.errorMessage = n.Error.Message,
!1
}).finally (function () {
i.scope.vm.applyFilters()
})
}
}
],
size: 'sm',
windowClass: 'custom',
resolve: {
headerNameValues: function () {
var n = u.inquiryServiceProxy.getJobDetails({
JobID: t.JobID,
JobName: t.JobName
});
return n.then(function (n) {
return n.Jobs && n.Jobs.HeaderNameValues ? n.Jobs.HeaderNameValues : null
})
}
}
});
return
},
r.prototype.onMultiJobEdit = function (t) {
var i = this.Model.Jobs.filter(function (n) {
return n.JobName == t.JobName
}) [0];
n.utils.isUndefinedOrNull(i) || (i.TotalTransfers = i.TotalTransfers - 1)
},
r.prototype.onJobViewDetails = function (n) {
var t = this.Model.Jobs.filter(function (t) {
return t.JobName == n.JobName
}) [0];
t && (t.DebitAccount = n.DebitAccount, t.DebitAccountTitle = n.DebitAccountTitle)
},
r.prototype.exportPDF = function (t, i) {
i === void 0 && (i = {
isSub: !1
});
var r = {
};
return r.Parameters = JSON.stringify({
JobId: t.JobID,
JobName: n.utils.escapeEntityReferences(t.JobName),
TotalTransactions: t.TotalTransfers,
ShowSuccesfull: i.isSub ? !1 : !0,
ShowFailed: i.isSub || i.isSub === undefined ? !0 : !1
}),
r.PDFRequestType = 53,
r
},
r.$inject = [
'isInVersion',
'Model',
'$scope',
'$injector',
'onlineStatus',
'JobsServiceProxy',
'$window',
'SharedDataService',
'AppEventsService',
'InquiryServiceProxy',
'source',
'RoleService',
'userName',
'userInfo'
],
r
}(t.jobsCommonControler),
i;
n.jobs.mainModule.controller('jobsHistoryController', r),
function (n) {
n[n.Nothing = 0] = 'Nothing';
n[n.Opened = 1] = 'Opened';
n[n.Closed = 2] = 'Closed';
n[n.Approvals_Pending = 3] = 'Approvals_Pending';
n[n.Approved = 4] = 'Approved';
n[n.Transactions_Pending = 5] = 'Transactions_Pending';
n[n.Successful = 6] = 'Successful';
n[n.Unsuccessful = 7] = 'Unsuccessful';
n[n.Partialy_Successful = 8] = 'Partialy_Successful';
n[n.Disapproved = 9] = 'Disapproved';
n[n.Deleted = 10] = 'Deleted';
n[n.Under_Execution = 11] = 'Under_Execution';
n[n.Prepared = 12] = 'Prepared';
n[n.Near_Execution = 13] = 'Near_Execution';
n[n.Partialy_Prepared = 14] = 'Partialy_Prepared';
n[n.Approvals_Pending_Level2 = 15] = 'Approvals_Pending_Level2';
n[n.Approvals_Pending_Both_Levels = 16] = 'Approvals_Pending_Both_Levels';
n[n.To_Be_Canceled = 17] = 'To_Be_Canceled';
n[n.Near_Cancelation = 18] = 'Near_Cancelation';
n[n.Canceled = 19] = 'Canceled';
n[n.Partialy_Canceled = 20] = 'Partialy_Canceled';
n[n.Transaction_Approvals_Pending = 21] = 'Transaction_Approvals_Pending'
}(i || (i = {
}))
}) (t = n.jobs || (n.jobs = {
}))
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(),
function (n) {
var t;
(function (t) {
function u(t) {
delete t.Block;
null == t.TransferCategory && delete t.TransferCategory;
(null == t.AmountCurrency || t.AmountCurrency == n.server.Currency.NA) && (t.AmountCurrency = t.DebitProductCurrency)
}
function r(n, t, i) {
u(n);
var r = n;
return r.JobName = t,
r.JobType = i,
r
}
function i(t, i, u, f, e, o, s, h) {
var c = r(u, i.JobName, t);
return o.submitTransferJob(c).then(function (t) {
if (t.ResultCode === 1) return e.reject(t.Error.Message);
if (i.SubmittedTimeStamp = t.SubmittedTimeStamp, i.JobSubmissionResponse = t, t.CanBeApprove) {
var r = s.GetControllerData(n.server.Controllers.Badge, n.common.services.AppEventsService.jobApprovalCount) + 1;
s.SetControllerData(f, n.server.Controllers.Badge, n.common.services.AppEventsService.jobApprovalCount, r);
h.publish(n.common.services.AppEventsService.jobApprovalCount)
}
return {
}
}, function (t) {
return e.reject(n.utils.getErrorMsg(t))
})
}
t.submitJob = i;
i.$inject = [
'jobType',
'model',
'payload',
'scope',
'$q',
'JobsServiceProxy',
'SharedDataService',
'AppEventsService'
];
var f = function (t) {
function u(n, i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k, d, g, nt, tt, it, rt, ut, ft, et, ot, st) {
var ht = t.call(this, n, i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k, d, g, nt, tt, it, rt, ut, ft, et, ot, st) || this;
return ht.Model = n,
ht.debitAccounts = i,
ht.debitAccountsForOrderedTransfer = r,
ht.creditAccounts = u,
ht.creditAccountsForOrderedTransfer = f,
ht.cardsForCashAdvance = e,
ht.loansForCashAdvance = o,
ht.ProductsService = s,
ht.stateService = h,
ht.modal = c,
ht.scope = l,
ht.$injector = a,
ht.userInfo = v,
ht.profileProductService = y,
ht.transferCategories = w,
ht.$q = b,
ht.isCitiOnline = k,
ht.queriesService = d,
ht.hasDataErrors = tt,
ht.isTwoLevels = !0,
ht.jobType = 0,
ht.isTwoLevels = v.UserInfo.CompanyInfo.MaxApprovalLevelForTransferPayment == 2,
ht
}
return __extends(u, t),
u.prototype.initialiseSteps = function () {
var n = t.prototype.initialiseSteps.call(this);
return n[1].processStep = function () {
var n = this,
t = n.createExecuteRequest();
return n.preExecute(t),
n.isTwoLevels = n.isTwoLevels && n.userInfo.UserInfo.CompanyInfo.ApprovalLevelIsolatedJobLimit < n.Model.Amount,
n.$injector.invoke(i, null, {
jobType: n.jobType,
model: n.Model,
payload: t,
scope: n.scope
})
},
n[2].templateUrl = 'Templates/Features/jobs/transfers/intrabank/step3',
n
},
u.prototype.getOtpPayload = function (n, i) {
var u = t.prototype.getOtpPayload.call(this, n, i);
return r(u, this.Model.JobName, this.jobType)
},
u.$inject = n.transfers.IntraBankTransferWizard.$inject,
u
}(n.transfers.IntraBankTransferWizard),
e = function (n) {
function t() {
var t = n !== null && n.apply(this, arguments) || this;
return t.jobType = 0,
t
}
return __extends(t, n),
t.prototype.initialiseSteps = function () {
var t = n.prototype.initialiseSteps.call(this);
return t[1].processStep = function () {
var n = this,
t = n.createExecuteRequest();
return n.Model.Details = t.TransferDetails,
n.preExecute(t),
n.$injector.invoke(i, null, {
jobType: n.jobType,
model: n.Model,
payload: t,
scope: n.scope
})
},
t[2].templateUrl = 'Templates/Features/jobs/transfers/interbank/step3',
t
},
t.prototype.getOtpPayload = function () {
var t = n.prototype.getOtpPayload.call(this);
return r(t, this.Model.JobName, this.jobType)
},
t
}(n.transfers.InterBankTransferWizard),
o = function (n) {
function t() {
var t = n !== null && n.apply(this, arguments) || this;
return t.jobType = 0,
t
}
return __extends(t, n),
t.prototype.initialiseSteps = function () {
var t = n.prototype.initialiseSteps.call(this);
return t[1].processStep = function () {
var n = this,
t = n.createExecuteRequest();
return n.Model.Details = t.TransferDetails,
n.preExecute(t),
n.$injector.invoke(i, null, {
jobType: n.jobType,
model: n.Model,
payload: t,
scope: n.scope
})
},
t[2].templateUrl = 'Templates/Features/jobs/transfers/international/step3',
t
},
t.prototype.getOtpPayload = function () {
var t = n.prototype.getOtpPayload.call(this);
return r(t, this.Model.JobName, this.jobType)
},
t
}(n.transfers.InternationalTransferWizard),
s = function (n) {
function t() {
var t = n !== null && n.apply(this, arguments) || this;
return t.jobType = 0,
t
}
return __extends(t, n),
t.prototype.initialiseSteps = function () {
var t = n.prototype.initialiseSteps.call(this);
return t[1].processStep = function () {
var n = this,
r = n.createExecuteRequest(),
t;
return n.preExecute(r),
t = n.$injector.invoke(i, null, {
jobType: n.jobType,
model: n.Model,
payload: r,
scope: n.scope
}),
t.then(function () {
n.documentData = {
DocumentRequestType: 0,
JobName: n.Model.JobName,
ImportToEUAccount: n.Model.ImportToEUAccount,
JobStatus: n.Model.JobSubmissionResponse.Status
}
}, function () {
n.documentData = {
DocumentRequestType: 0,
JobName: n.Model.JobName,
ImportToEUAccount: n.Model.ImportToEUAccount
}
}),
t
},
t
},
t.prototype.getOtpPayload = function () {
var t = n.prototype.getOtpPayload.call(this);
return r(t, this.Model.JobName, this.jobType)
},
t
}(n.transfers.EUImportTransferWizard);
n.jobs.mainModule.controller('IntraBankJobTransferWizard', f);
n.jobs.mainModule.controller('InterBankJobTransferWizard', e);
n.jobs.mainModule.controller('InternationalJobTransferWizard', o);
n.jobs.mainModule.controller('EUImportJobTransferWizard', s)
}) (t = n.jobs || (n.jobs = {
}))
}(alpha || (alpha = {
})),
function (n) {
var t;
(function (t) {
'use strict';
function i() {
}
t.getCountJobs = i;
t.jobsHistoryConfig = {
url: '/history',
templateUrl: 'Templates/Features/Jobs/history/jobsHistory',
controller: 'jobsHistoryController as vm',
resolve: {
isInVersion: [
'VersionFilterService',
function (t) {
return t.IsInVersions(n.constants.versionFilters.ONLINE_DEPOSIT)
}
],
onlineStatus: [
'QueriesService',
function (n) {
return n.getDatesAndOnLineStatus().then(function (n) {
return n
})
}
],
source: function () {
return 2
},
userInfo: [
'SecurityService',
function (n) {
return n.getUserSessionInfo().then(function (n) {
return n
})
}
],
userName: [
'SecurityService',
'userInfo',
function (n, t) {
return n.getSubscriptionInfo({
LanguageSpecified: !0,
GetUsersSpecified: !0,
GetUsers: !0
}).then(function (n) {
return n.Users.filter(function (n) {
return n.Id === t.Profile.UserID
}) [0].UserNames.reverse() [0].Username
})
}
],
getSubscriptionUsers: [
'SecurityService',
function (n) {
return n.getSubscriptionInfo({
LanguageSpecified: !0,
GetUsersSpecified: !0,
GetUsers: !0
}).then(function (n) {
return n.Users
})
}
],
Model: [
'ApprovalsService',
'onlineStatus',
'source',
'userInfo',
'getSubscriptionUsers',
'JobCreatorFullNameService',
function (t, i, r, u, f, e) {
var s = {
MaxRecords: 10,
ApprovalLevel: 1,
Category: 1,
CurrentWorkingDate: i.CurrentWorkingDate,
GetCountOnly: !1,
NextWorkingDate: i.NextWorkingDate,
IsIsolated: !1,
JobStatus: 3,
Level1ApprovedByUserID: 0,
Level2ApprovedByUserID: 0,
OpenedByUserID: 0,
PendingJobsCountQuery: !1,
ShowHistory: !0,
SubCategory: 1,
Source: r,
OrderingDescriptors: [
{
Column: 0,
Type: 0
}
],
Type: 2
},
o = new n.model.JobInquiryViewModel;
return t.getJobs(s).then(function (n) {
if (0 == n.ResultCode) {
o.CurrentPageIndex = n.CurrentPageIndex;
o.PagingFirstIndex = 10;
o.HasMore = n.HasMore;
o.ReplyRecords = n.ReplyRecords;
o.TotalRecords = n.TotalRecords;
var t = e.getDistinctUsernames(f, n);
n.Jobs = e.getFullNames(t, n);
o.Jobs = n.Jobs
} else o.ErrorMessage = n.Error.Message,
o.HasErrors = !0;
return o
})
}
]
}
};
t.configJobMultiPaymentAdd = {
controller: 'JobMultiPaymentAddController as vm',
resolve: {
onlineStatus: [
'QueriesService',
function (n) {
return n.getDatesAndOnLineStatus().then(function (n) {
return n
})
}
],
ikaProducts: [
'ProfileProductsService',
function (n) {
return n.getIkaProducts().then(function (n) {
return n
})
}
],
model: [
function () {
var t = new n.model.MassPaymentJobInfo;
return t.IsJobSubmission = !0,
t.IsImmediate = !1,
t.JobType = 7,
t.JobSubCategoryType = n.server.SubCategoryType.PaymentIka,
t
}
]
}
};
t.configJobMultiTransferAdd = {
controller: 'JobMultiTransferAddController as vm',
resolve: {
model: [
function () {
var t = new n.model.MassTransferJobInfo;
return t.IsJobSubmission = !0,
t.IsImmediate = !0,
t.JobType = 1,
t.FromFile = !1,
t
}
],
HasPayrollAccounts: [
'ProfileProductsService',
function (t) {
return t.getAccountsByRequestType(n.server.ProductRequestType.DebitAccountsForPayroll).then(function (n) {
return n.length > 0
})
}
],
HasOtherAccounts: [
'ProfileProductsService',
function (t) {
return t.getAccountsByRequestType(n.server.ProductRequestType.DebitAccounts).then(function (n) {
return n.length > 0
})
}
],
userInfo: [
'SecurityService',
function (n) {
return n.getUserSessionInfo()
}
]
}
};
t.configApprovals = {
url: '/pending/:jobName',
templateUrl: 'Templates/Features/Jobs/PendingApprovals/approvals',
controller: 'PendingApprovalsController as vm',
resolve: {
isInVersion: [
'VersionFilterService',
function (t) {
return t.IsInVersions(n.constants.versionFilters.ONLINE_DEPOSIT)
}
],
onlineStatus: [
'QueriesService',
function (n) {
return n.getDatesAndOnLineStatus().then(function (n) {
return n
})
}
],
locale: [
'LanguageService',
function (n) {
return n.getLanguage()
}
],
source: function () {
return 1
},
userInfoResponse: [
'SecurityService',
function (n) {
return n.getUserSessionInfo().then(function (n) {
return n
})
}
],
getSubscriptionUsers: [
'SecurityService',
function (n) {
return n.getSubscriptionInfo({
LanguageSpecified: !0,
GetUsersSpecified: !0,
GetUsers: !0
}).then(function (n) {
return n.Users
})
}
],
Model: [
'ApprovalsService',
'onlineStatus',
'source',
'userInfoResponse',
'getSubscriptionUsers',
'JobCreatorFullNameService',
function (t, i, r, u, f, e) {
var s = {
MaxRecords: 10,
ApprovalLevel: 1,
Category: 1,
CurrentWorkingDate: n.utils.toShortDateString(new Date),
FromTransferDate: n.utils.toShortDateString(new Date),
GetCountOnly: !1,
NextWorkingDate: i.NextWorkingDate,
IsFilteredByUser: !1,
IsIsolated: !1,
JobStatus: 3,
Level1ApprovedByUserID: 0,
Level2ApprovedByUserID: 0,
OpenedByUserID: 0,
PendingJobsCountQuery: !1,
ShowHistory: !0,
SubCategory: 1,
Type: 2,
GetTotals: !0,
OrderingDescriptors: [
{
Column: 0,
Type: 0
}
],
Source: r
},
o = new n.model.PendingJobInquiryViewModel;
return t.getJobs(s).then(function (n) {
if (0 == n.ResultCode) {
o.CurrentPageIndex = n.CurrentPageIndex;
o.PagingFirstIndex = 10;
o.HasMore = n.HasMore;
o.ReplyRecords = n.ReplyRecords;
o.TotalRecords = n.TotalRecords;
var t = e.getDistinctUsernames(f, n);
n.Jobs = e.getFullNames(t, n);
o.Jobs = n.Jobs || [
];
o.TotalsPerCurrency = n.Totals
} else o.CurrentPageIndex = '',
o.HasMore = !1,
o.ReplyRecords = 0,
o.TotalRecords = 0,
o.Jobs = [
];
return o
}, function () {
return o
})
}
]
}
};
t.ConfigIntraBankJob = {
url: '/intrabank',
controller: 'IntraBankJobTransferWizard as vm',
templateUrl: 'Templates/Features/Transfers/newTransferWizard',
resolve: n.transfers.getIntraBankStateResolve({
userInfo: [
'SecurityService',
function (n) {
return n.getUserSessionInfo()
}
],
Model: [
'QueriesService',
'$stateParams',
'StateHelperService',
function (t) {
var i = new n.model.IntraBankTransferInfo;
return t.getDatesAndOnLineStatus().then(function (n) {
var t = n;
return i.setDatesAndOnlineStatus(t),
i.CanSelectImmediate = !0,
i.IsJobSubmission = !0,
i
}, function () {
return i.HasErrors = !0,
i.ErrorMessage = 'Could not get online status and calendar information.',
i
})
}
]
})
};
n.jobs.mainModule.config(['$stateProvider',
'$urlRouterProvider',
function (i) {
i.state('root.jobs', {
abstract: !0,
url: '/jobs',
template: '<div data-ui-view=""></div>'
}).state('root.jobs.new', {
url: '/new',
templateUrl: 'Templates/Features/Jobs/newJob',
controller: 'JobController as vm',
resolve: {
userInfo: [
'SecurityService',
function (n) {
return n.getUserSessionInfo()
}
],
isJob: function () {
return !0
}
}
}).state('root.jobs.new.transfer', {
url: '/transfer/:id/',
templateUrl: 'Templates/Features/Jobs/transferJob',
controller: 'JobController as vm',
resolve: {
otpHandler: [
'OtpHandlerService',
function (n) {
return n.retrieveHandler(28, {
uiContext: {
isNewScreen: !0
}
})
}
]
}
}).state(n.constants.stateNames.newPaymentJobState, {
url: '/payment',
templateUrl: 'Templates/Features/Jobs/paymentJob',
controller: 'JobController as vm',
resolve: {
otpHandler: [
'OtpHandlerService',
function (n) {
return n.retrieveHandler(29, {
uiContext: {
isNewScreen: !0
}
})
}
]
}
}).state('root.jobs.new.payment.single', {
url: '/search',
templateUrl: 'Templates/Features/Payments/searchpayment',
controller: 'JobSubmissionSearchPaymentController as vm',
resolve: {
paymentTypes: [
'LookupsService',
function (n) {
return n.getPaymentTypes().then(function (n) {
return n.filter(function (n) {
return !n.Item.ParentProductTypeId
})
})
}
],
paymentTemplates: [
'LookupsService',
function (n) {
return n.getPaymentTemplates()
}
],
footerKey: function () {
return 'PaymentPrepareIsolated_Info'
}
}
}).state('root.jobs.new.payment.new', {
url: '/new/{id}/{key}',
controller: 'DynamicPaymentJobWizardController as vm',
templateUrl: 'Templates/Features/Payments/PaymentWizard',
resolve: n.payments.getDynamicPaymentResolve({
Model: [
'QueriesService',
function (t) {
var i = new n.model.DynamicPaymentInfo;
return i.IsJobSubmission = !0,
t.getDatesAndOnLineStatus().then(function (n) {
var t = n;
return i.setDatesAndOnlineStatus(t),
i
}, function () {
return i.HasErrors = !0,
i.ErrorMessage = 'Could not get online status and calendar information.',
i
})
}
]
})
}).state('root.jobs.new.payment.evoucherpay', {
url: '/evoucherpay/{id}/{key}',
controller: 'EVoucherPaymentJobWizardController as vm',
templateUrl: 'Templates/Features/Payments/PaymentWizard',
resolve: n.payments.getDynamicPaymentResolve({
Model: [
'QueriesService',
function (t) {
var i = new n.model.DynamicPaymentInfo;
return i.IsJobSubmission = !0,
t.getDatesAndOnLineStatus().then(function (n) {
var t = n;
return i.setDatesAndOnlineStatus(t),
i
}, function () {
return i.HasErrors = !0,
i.ErrorMessage = 'Could not get online status and calendar information.',
i
})
}
]
})
}).state('root.jobs.new.payment.donation', {
url: '/new-donation/{id}',
controller: 'DonationPaymentJobWizardController as vm',
templateUrl: 'Templates/Features/Payments/PaymentWizard',
resolve: n.payments.getDynamicPaymentResolve({
Model: [
'QueriesService',
'userInfo',
function (t, i) {
var r = new n.model.DonationPaymentInfo;
return r.FirstName = i.Name,
r.LastName = i.SurName,
r.IsJobSubmission = !0,
t.getDatesAndOnLineStatus().then(function (n) {
var t = n;
return r.setDatesAndOnlineStatus(t),
r
}, function () {
return r.HasErrors = !0,
r.ErrorMessage = 'Could not get online status and calendar information.',
r
})
}
]
})
}).state('root.jobs.new.payment.donation-with-code', {
url: '/new-donation-with-code/{id}',
controller: 'DonationWithCodePaymentJobWizardController as vm',
templateUrl: 'Templates/Features/Payments/PaymentWizard',
resolve: n.payments.getDynamicPaymentResolve({
Model: [
'QueriesService',
'userInfo',
function (t) {
var i = new n.model.DynamicPaymentInfo;
return i.IsJobSubmission = !0,
t.getDatesAndOnLineStatus().then(function (n) {
var t = n;
return i.setDatesAndOnlineStatus(t),
i
}, function () {
return i.HasErrors = !0,
i.ErrorMessage = 'Could not get online status and calendar information.',
i
})
}
]
})
}).state('root.jobs.new.payment.new-group', {
url: '/new-group/{id}',
controller: 'GroupDynamicPaymentJobWizardController as vm',
templateUrl: 'Templates/Features/Payments/PaymentWizard',
resolve: n.payments.getGroupPaymentResolve({
Model: [
'QueriesService',
function (t) {
var i = new n.model.DynamicPaymentInfo;
return i.IsJobSubmission = !0,
t.getDatesAndOnLineStatus().then(function (n) {
var t = n;
return i.setDatesAndOnlineStatus(t),
i
}, function () {
return i.HasErrors = !0,
i.ErrorMessage = 'Could not get online status and calendar information.',
i
})
}
]
})
}).state('root.jobs.new.payment.custom', {
url: '/new-custom/{id}',
controller: 'CustomPaymentJobWizardController as vm',
templateUrl: 'Templates/Features/Payments/PaymentWizard',
resolve: n.payments.getDynamicPaymentResolve({
Model: [
'QueriesService',
'userInfo',
function (t) {
var i = new n.model.CustomPaymentInfo;
return i.IsJobSubmission = !0,
t.getDatesAndOnLineStatus().then(function (n) {
var t = n;
return i.setDatesAndOnlineStatus(t),
i
}, function () {
return i.HasErrors = !0,
i.ErrorMessage = 'Could not get online status and calendar information.',
i
})
}
]
})
}).state('root.jobs.new.payment.vehicle-tax', {
url: '/vehicle-tax/:id',
controller: 'VehicleTaxPaymentJobController as vm',
templateUrl: 'Templates/Features/Payments/PaymentWizard',
resolve: n.payments.getVehicleTaxPaymentResolve({
Model: [
'QueriesService',
'paymentType',
function (t) {
var i = new n.model.VehicleTaxPaymentInfo;
return i.IsJobSubmission = !0,
t.getDatesAndOnLineStatus().then(function (n) {
var t = n;
return i.setDatesAndOnlineStatus(t),
i
}, function () {
return i.HasErrors = !0,
i.ErrorMessage = 'Could not get online status and calendar information.',
i
})
}
]
})
}).state('root.jobs.new.payment.hellenic-american', {
url: '/hellenic-american/:id',
controller: 'HellenicAmericanJobPaymentController as vm',
templateUrl: 'Templates/Features/Payments/PaymentWizard',
resolve: n.payments.getDynamicPaymentResolve({
Model: [
'QueriesService',
'paymentType',
function (t) {
var i = new n.model.DynamicPaymentInfo;
return i.IsJobSubmission = !0,
t.getDatesAndOnLineStatus().then(function (n) {
var t = n;
return i.setDatesAndOnlineStatus(t),
i
}, function () {
return i.HasErrors = !0,
i.ErrorMessage = 'Could not get online status and calendar information.',
i
})
}
]
})
}).state('root.jobs.new.payment.labor-ticket', {
url: '/labor-ticket/:id',
controller: 'LaborTicketPaymentJobController as vm',
templateUrl: 'Templates/Features/Payments/PaymentWizard',
resolve: n.payments.getLaborTicketResolve({
Model: [
'QueriesService',
'$stateParams',
'StateHelperService',
function (t) {
var i = new n.model.LaborTicketPaymentInfo;
return i.IsJobSubmission = !0,
t.getDatesAndOnLineStatus().then(function (n) {
var t = n;
return i.setDatesAndOnlineStatus(t),
i
}, function () {
return i.HasErrors = !0,
i.ErrorMessage = 'Could not get online status and calendar information.',
i
})
}
]
})
}).state('root.jobs.new.payment.e-voucher-issue', {
url: '/e-voucher-issue/:id/:key',
controller: 'eVoucherIssueAndPaymentJobController as vm',
templateUrl: 'Templates/Features/Payments/PaymentWizard',
resolve: {
userInfo: [
'SecurityService',
function (n) {
return n.getUserSessionInfo()
}
],
eVoucherConfigTree: [
'LookupsService',
function (n) {
return n.getEVoucherData()
}
],
debitAccounts: [
'ProfileProductsService',
'StateHelperService',
'$stateParams',
function (t, i, r) {
var f = r.key;
if (f) var u = i.getStateData(f),
e = u.Transaction ? u.Transaction : u,
o = e.DebitProduct;
return t.getAccountsByRequestType(n.server.ProductRequestType.LaborTicketDebitAccounts, o)
}
],
Model: [
'QueriesService',
'$stateParams',
'StateHelperService',
function (t) {
var i = new n.model.eVoucherIssueInfo;
return i.IsJobSubmission = !0,
t.getDatesAndOnLineStatus().then(function (n) {
var t = n;
return i.setDatesAndOnlineStatus(t),
i
}, function () {
return i.HasErrors = !0,
i.ErrorMessage = 'Could not get online status and calendar information.',
i
})
}
],
paymentType: [
'$stateParams',
'LookupsService',
function (n, t) {
var i = parseInt(n.id);
return t.getPaymentTypeByProductTypeId(i)
}
]
}
}).state('root.jobs.new.payment.cards', {
url: '/card',
controller: 'CardPaymentJobWizardController as vm',
templateUrl: 'Templates/Features/Payments/PaymentWizard',
resolve: n.payments.getAlphaCardPaymentResolve({
Model: [
'QueriesService',
function (t) {
var i = new n.model.AlphaCardPaymentInfo;
return i.IsJobSubmission = !0,
i.TransferMethodImmediate = !1,
t.getDatesAndOnLineStatus().then(function (n) {
var t = n;
return i.setDatesAndOnlineStatus(t),
i.CanSelectImmediate = !0,
i
}, function () {
return i.HasErrors = !0,
i.ErrorMessage = 'Could not get online status and calendar information.',
i
})
}
]
})
}).state('root.jobs.new.payment.alpha-loans', {
url: '/alpha-loan/:id/:key',
controller: 'AlphaLoanPaymentJobWizardController as vm',
templateUrl: 'Templates/Features/Payments/PaymentWizard',
resolve: n.payments.getAlphaLoanPaymentResolve({
Model: [
'QueriesService',
function (t) {
var i = new n.model.LoanPaymentInfo;
return i.IsJobSubmission = !0,
i.TransferMethodImmediate = !1,
t.getDatesAndOnLineStatus().then(function (n) {
var t = n;
return i.setDatesAndOnlineStatus(t),
i.CanSelectImmediate = !0,
i
}, function () {
return i.HasErrors = !0,
i.ErrorMessage = 'Could not get online status and calendar information.',
i
})
}
]
})
}).state('root.jobs.new.payment.loans', {
url: '/loan',
controller: 'LoanPaymentJobWizardController as vm',
templateUrl: 'Templates/Features/Payments/PaymentWizard',
resolve: n.payments.getLoanPaymentResolve({
Model: [
'QueriesService',
function (t) {
var i = new n.model.LoanPaymentInfo;
return i.IsJobSubmission = !0,
i.TransferMethodImmediate = !1,
t.getDatesAndOnLineStatus().then(function (n) {
var t = n;
return i.setDatesAndOnlineStatus(t),
i.CanSelectImmediate = !0,
i
}, function () {
return i.HasErrors = !0,
i.ErrorMessage = 'Could not get online status and calendar information.',
i
})
}
]
})
}).state('root.jobs.new.payment.multi', angular.extend({
url: '/multi',
templateUrl: 'Templates/Features/Jobs/Multiple/multi'
}, n.jobs.configJobMultiPaymentAdd)).state('root.jobs.new.transfer.multi', angular.extend({
url: '/multi',
templateUrl: 'Templates/Features/Jobs/Multiple/multi'
}, n.jobs.configJobMultiTransferAdd)).state('root.jobs.new.transfer.eeimports', {
url: '/eeimport',
controller: 'EUImportJobTransferWizard as vm',
templateUrl: 'Templates/Features/Transfers/newTransferWizard',
resolve: n.transfers.getEUImportResolve({
Model: [
'QueriesService',
'countries',
'banks',
'StateHelperService',
'$q',
function (t, i, r) {
var u = new n.model.SimpleImportsTransferInfo;
return u.Countries = i,
u.Banks = r,
t.getDatesAndOnLineStatus().then(function (n) {
var t = n;
return u.setDatesAndOnlineStatus(t),
u.CanSelectImmediate = !0,
u.TransactionDate = u.CurrentWorkingDateValue,
u.IsJobSubmission = !0,
u
}, function () {
return u.HasErrors = !0,
u.ErrorMessage = 'Could not get online status and calendar information.',
u
})
}
]
})
}).state(n.constants.stateNames.transfersJobIntrabank, t.ConfigIntraBankJob).state('root.jobs.new.transfer.interbank', {
url: '/interbank',
controller: 'InterBankJobTransferWizard as vm',
templateUrl: 'Templates/Features/Transfers/newTransferWizard',
resolve: n.transfers.getInterBankStateResolve({
Model: [
'QueriesService',
'banks',
'$stateParams',
'StateHelperService',
function (t, i) {
var r = new n.model.InterBankTransferInfo;
return r.Banks = i,
t.getDatesAndOnLineStatus().then(function (n) {
var t = n;
return r.setDatesAndOnlineStatus(t),
r.CanSelectImmediate = !0,
r.IsJobSubmission = !0,
r
}, function () {
return r.HasErrors = !0,
r.ErrorMessage = 'Could not get online status and calendar information.',
r
})
}
]
})
}).state('root.jobs.new.transfer.international', {
url: '/international',
controller: 'InternationalJobTransferWizard as vm',
templateUrl: 'Templates/Features/Transfers/newTransferWizard',
resolve: n.transfers.getInternationalBankStateResolve({
Model: [
'QueriesService',
'countries',
'banks',
function (t, i, r) {
var u = new n.model.InternationalTransferInfo;
return u.ContactNumber = '',
u.Countries = i,
u.Banks = r,
t.getDatesAndOnLineStatus().then(function (n) {
var t = n;
return u.setDatesAndOnlineStatus(t),
u.CanSelectImmediate = !0,
u.IsJobSubmission = !0,
u
}, function () {
return u.HasErrors = !0,
u.ErrorMessage = 'Could not get online status and calendar information.',
u
})
}
]
})
}).state(n.constants.stateNames.pendingJobs, t.configApprovals).state('root.jobs.history', n.jobs.jobsHistoryConfig)
}
])
}) (t = n.jobs || (n.jobs = {
}))
}(alpha || (alpha = {
})),
function (n) {
var t;
(function () {
var t = function () {
function n() {
}
return n.$inject = [
'$scope',
'$injector',
],
n
}();
n.jobs.mainModule.controller('MyJobsController', t)
}) (t = n.jobs || (n.jobs = {
}))
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}();
__assign = this && this.__assign || Object.assign || function (n) {
for (var t, r, i = 1, u = arguments.length; i < u; i++) {
t = arguments[i];
for (r in t) Object.prototype.hasOwnProperty.call(t, r) && (n[r] = t[r])
}
return n
},
function (n) {
var t;
(function (t) {
var r = function (t) {
function r(i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k, d, g, nt, tt) {
var it = t.call(this, f, e, i, u, s, b, n.utils.parseDateString(nt('date') (new Date, 'dd/MM/yyyy')), null) || this,
rt,
ut;
return it.isInVersion = i,
it.inquiryProxyService = r,
it.Model = u,
it.$injector = e,
it.postNewWindowService = o,
it.$uibModal = h,
it.qService = c,
it.jobExecutionAbstractFactory = l,
it.jobServiceProxy = v,
it.SharedDataService = y,
it.AppEventsService = p,
it.$state = w,
it.securityService = k,
it.userInfoResponse = d,
it.locale = g,
it.filterService = nt,
it.transferService = tt,
it.approvalLevelStatusMap = [
3,
4,
11,
12
],
it.rejectionLevelStatusMap = [
6,
7,
13,
14
],
it.IsBusy = !1,
it.userInfo = null,
it.userInfo = d.UserInfo,
it.jobExecutionAbstractFactory = new n.common.services.OnlineJobExecutionFactoryDecorator(it.jobExecutionAbstractFactory, s.OnLine),
w.params.jobName && it.openModalJobIDFromStep3(w.params.jobName),
it.isApproval = w.current.name === n.constants.stateNames.pendingJobs,
it.isOverview = !(w.current.name === n.constants.stateNames.rootState || w.current.name === n.constants.stateNames.cashManagementOverview),
rt = [
],
rt.push(a.subscribe(n.common.services.AppEventsService.JobFinalization_Event, function (n, t) {
it.onJobFinalize(t)
})),
rt.push(a.subscribe(n.common.services.AppEventsService.MultiJobEdit_Event, function (n, t) {
it.onMultiJobEdit(t)
})),
rt.push(a.subscribe(n.common.services.AppEventsService.JobViewDetails_Event, function (n, t) {
it.onJobViewDetails(t)
})),
rt.push(a.subscribe(n.common.services.AppEventsService.JobProcessedbyOtherUser_Event, function () {
it.onJobAlreadyProcessed()
})),
f.$on('$destroy', function () {
rt.forEach(function (n) {
return n()
})
}),
it.Model.JobApprovalViewModels = n.utils.isUndefinedOrNull(it.Model.Jobs) ? [
] : it.Model.Jobs.map(it.map),
ut = it,
it.scope.$on('updateJobTotalAmount', function (n, t) {
for (var r = ut.Model.JobApprovalViewModels.length, i = 0; i < r; i++) if (ut.Model.JobApprovalViewModels[i].Job.JobID == t.jobId) {
ut.Model.JobApprovalViewModels[i].Job.TotalAmount.Value -= t.amount;
break
}
}),
it
}
return __extends(r, t),
r.prototype.isJobApprovedRejected = function (n, t) {
var i = this,
r = n.JobHistory.filter(function (n) {
return n.Action == i.approvalLevelStatusMap[t - 1] || n.Action == i.rejectionLevelStatusMap[t - 1]
});
return r.length > 0 ? !0 : !1
},
r.prototype.getJobApprovalInfo = function (n, t) {
var r = this,
i = n.JobHistory.filter(function (n) {
return n.Action == r.approvalLevelStatusMap[t - 1]
});
return i && i.length > 0 ? i[0].FullName + ', ' + i[0].Date : ''
},
r.prototype.getJobRejectionInfo = function (n, t) {
var r = this,
i = n.JobHistory.filter(function (n) {
return n.Action == r.rejectionLevelStatusMap[t - 1]
});
return i && i.length > 0 ? i[0].FullName + ', ' + i[0].Date : ''
},
r.prototype.openModalJobIDFromStep3 = function (n) {
var t = this,
i = {
ByJobName: {
FromJobName: n,
ToJobName: n
},
JobStatus: 3
};
this.approvalsService.getJobs(i).then(function (n) {
0 == n.ResultCode && n.Jobs[0] && t.showApprovalModal(n.Jobs[0])
})
},
r.prototype.setBusyOnAction = function (n) {
var t = this;
this.IsBusy = !0;
n().finally (function () {
return t.IsBusy = !1
})
},
r.prototype.clearJobs = function () {
t.prototype.clearJobs.call(this);
this.Model.JobApprovalViewModels = [
]
},
r.prototype.onNewJobs = function (n) {
this.Model.JobApprovalViewModels = this.Model.JobApprovalViewModels.concat(n.map(this.map))
},
r.prototype.onChargesChange = function (n) {
this.setBusyOnAction(function () {
return n.ExpenseService.set(n.Job, n.Model)
})
},
r.prototype.onJobSelection = function (n) {
var t = this,
i;
if (this.userInfoResponse.OTPStatus === 3) {
n.IsSelected = !1;
this.showSubscriptionOtpModal();
return
}
n.IsSelected ? (i = {
templateUrl: 'Templates/common/directives/otp-only-in-subscription',
controller: 'NoOtpModalInstanceController as vm',
windowClass: 'custom',
size: 'sm',
backdrop: !0,
resolve: {
redirectUrl: function () {
return ''
}
}
}, this.setBusyOnAction(function () {
var i = t.jobExecutionAbstractFactory.get(n.Job, t.userInfo);
return n.Model = i.model,
n.ExpenseService = i.expenses,
t.ensureTransactions(n.Job).then(function () {
return i.validation.validate(n.Job, n.Model)
}).then(function () {
if (n.Model.InitializationErrors) return n.IsSelected = !1,
t.showSystemModal(n.Model.ErrorMessage)
}).then(function () {
if (n.Job.ApprovalDetails.ApprovalBehavior.ShowExpenses || n.Job.ApprovalDetails.ApprovalBehavior.ShowRates) return n.ExpenseService.set(n.Job, n.Model)
}).catch (function () {
n.IsSelected = !1;
n.HasError = !0
})
}))  : n.Model = n.ExpenseService = null
},
r.prototype.showSystemModal = function (n) {
var t = this.$uibModal.open({
templateUrl: 'Templates/common/modals/systemMessage',
controller: 'SystemMessageModalInstanceCtrl as vm',
size: 'lg',
resolve: {
message: [
function () {
return n
}
]
}
});
return t.result
},
r.prototype.showSubscriptionOtpModal = function () {
var n = {
templateUrl: 'Templates/common/directives/otp-only-in-subscription',
controller: 'NoOtpModalInstanceController as vm',
windowClass: 'custom',
size: 'sm',
backdrop: !0,
resolve: {
redirectUrl: function () {
return ''
}
}
};
return this.$uibModal.open(n).result
},
r.prototype.map = function (t) {
return new n.model.JobApprovalViewModel(t)
},
r.prototype.onJobFinalize = function (t) {
var i = t.jobIds,
r,
u;
t.action === 3 && [
5,
6
].indexOf(this.userInfo.Role) > - 1 && (r = this.Model.Jobs.filter(function (n) {
return i.indexOf(n.JobID) > - 1 && n.PendingApprovals != 1
}), r.forEach(function (n) {
return n.CanBeApproved = !1
}), this.Model.JobApprovalViewModels.filter(function (n) {
return r.indexOf(n.Job) > - 1
}).forEach(function (n) {
n.IsSelected = n.CanParticipateInMultiple = n.Job.IsEditable = !1;
n.resetUI();
n.Model = n.ExpenseService = n.Job.Transactions = null
}), i = n.utils.Except(i, r.map(function (n) {
return n.JobID
})));
this.Model.Jobs = this.Model.Jobs.filter(function (n) {
return i.indexOf(n.JobID) === - 1
});
this.Model.JobApprovalViewModels = this.Model.JobApprovalViewModels.filter(function (n) {
return i.indexOf(n.Job.JobID) === - 1
});
u = this.SharedDataService.GetControllerData(n.server.Controllers.Badge, n.common.services.AppEventsService.jobApprovalCount) - i.length;
this.SharedDataService.SetControllerData(this.scope, n.server.Controllers.Badge, n.common.services.AppEventsService.jobApprovalCount, u);
this.AppEventsService.publish(n.common.services.AppEventsService.jobApprovalCount);
i.length && this.reloadTotalsPerCurrency()
},
r.prototype.onJobAlreadyProcessed = function () {
this.applyFilters()
},
r.prototype.reloadTotalsPerCurrency = function () {
var t = this,
n = this.makeJobsRequest();
n.LastPageIndex = null;
n.MaxRecords = 1;
n.GetTotals = !0;
this.approvalsService.getJobs(n).then(function (n) {
t.Model.TotalsPerCurrency = n.Totals
})
},
r.prototype.onMultiJobEdit = function (t) {
var i = this.Model.Jobs.filter(function (n) {
return n.JobName == t.JobName
}) [0];
n.utils.isUndefinedOrNull(i) || (i.TotalTransfers = i.TotalTransfers - 1)
},
r.prototype.onJobViewDetails = function (n) {
var t = this.Model.Jobs.filter(function (t) {
return t.JobName == n.JobName
}) [0];
t.DebitAccount = n.DebitAccount;
t.DebitAccountTitle = n.DebitAccountTitle
},
r.prototype.ensureTransactions = function (n) {
var t = null == n.Transactions || !n.Transactions.length ? this.inquiryProxyService.getJobDetails({
JobID: n.JobID,
JobName: n.JobName
})  : this.qService.when({
Jobs: n,
ResultCode: 0
});
return t.then(function (t) {
n.Transactions = t.Jobs.Transactions;
n.HeaderNameValues = t.Jobs.HeaderNameValues
})
},
r.prototype.openMultipleApprovalModal = function () {
var t = this;
this.setBusyOnAction(function () {
var r = [
];
if (t.Model.JobApprovalViewModels.filter(function (n) {
return n.IsSelected
}).forEach(function (n) {
n.Job.ApprovalDetails.ApprovalBehavior.BlockAmount && null === n.Model.BlockAmount && r.push({
jobName: n.Job.JobName,
type: 'blockAmount'
});
n.Job.ApprovalDetails.ApprovalBehavior.SelectExpenses && null === n.Model.FinalFees && n.Job.Transactions[0].CreditProductTypeID != 20042 ? r.push({
jobName: n.Job.JobName,
type: 'charges'
})  : n.Job.ApprovalDetails.ApprovalBehavior.SelectExpenses && null === n.Model.FinalFees && r.push({
jobName: n.Job.JobName,
type: 'chargesTTE'
})
}), r.length) return t.showMultipleValidation(r);
var u = 3,
f = t.Model.JobApprovalViewModels.filter(function (n) {
return n.IsSelected
}),
e = function (n) {
n === void 0 && (n = !1);
var i = n ? function (n) {
return t.getExecutionInfoForEnquireOtp(n)
}
 : function (n) {
return t.getExecutionInfoForExecute(n)
},
r = t.createMultipleApprovalModalExecuteRequest(f, u, n);
return t.getTransformedExecuteJobRequest(r, i)
},
o = t.$uibModal.open({
templateUrl: 'Templates/Features/Transfers/newTransferWizard',
controller: 'PendingApprovalMultipleController as vm',
size: 'lg',
resolve: {
Model: function () {
return new n.model.BaseJobExecutionInfo
},
jobInfo: function () {
return f
},
action: function () {
return u
},
initialInfoPerCurrency: [
'$q',
'TransfersService',
function (n, r) {
var u = t.Model.JobApprovalViewModels.filter(function (n) {
return n.IsSelected
}).map(function (n) {
return n.Job
});
return new i(n, r).getDecorated(u)
}
],
executeRequestBuilder: function () {
return function () {
return e(!1)
}
},
otpHandler: [
'OtpHandlerService',
function (n) {
return n.activatedHandler(20, {
payload: e(!0),
uiContext: {
isNewScreen: !0
}
})
}
]
}
});
return o.result
})
},
r.prototype.showMultipleValidation = function (n) {
var t = this.$uibModal.open({
templateUrl: 'Templates/common/modals/multiple-jobs-validation',
controller: 'SystemMessagesModalInstanceCtrl as vm',
size: 'sm',
resolve: {
state: [
function () {
return n
}
]
}
});
return t.result
},
r.prototype.showRejectionModal = function (t) {
var i = this;
this.setBusyOnAction(function () {
var r = {
model: new n.model.JobExecutionInfo,
views: [
'Templates/Features/Jobs/PendingApprovals/rejection-step1',
'Templates/Features/Jobs/PendingApprovals/default-step2'
],
expenses: new n.common.services.SpecialCaseJobExpensesService(i.qService)
};
return i.ensureTransactions(t).then(function () {
var n = {
Amount: t.TotalAmount.Value,
Currency: t.TotalAmount.Currency,
FeeType: 1,
CreditAccountNumber: t.Transactions[0].CreditProduct,
CreditAccountType: t.Transactions[0].CreditProductTypeID,
ExpensesServiceType: 0,
DebitAccountNumber: t.Transactions[0].DebitProduct,
DebitAccountType: t.Transactions[0].DebitProductType
};
return i.transferService.GetTransferExpenses(n)
}).then(function (n) {
var t = r.model;
return t.InitialFees = n.Fees,
t
}).then(function (n) {
var u = 5,
f = function (r) {
r === void 0 && (r = !1);
var f = r ? function (n) {
return i.getExecutionInfoForEnquireOtp(n)
}
 : function (n) {
return i.getExecutionInfoForExecute(n)
},
e = i.createApprovalModalExecuteRequest(t, n, u, r);
return i.getTransformedExecuteJobRequest(e, f)
},
e = i.$uibModal.open({
templateUrl: 'Templates/Features/Transfers/newTransferWizard',
controller: 'PendingApprovalsWizard as vm',
size: 'lg',
resolve: {
userInfo: [
'SecurityService',
function (n) {
return n.getUserSessionInfo()
}
],
jobInfo: function () {
return t
},
Model: function () {
return n
},
executionConfig: function () {
return r
},
transferReasons: [
'LookupsService',
function (n) {
return n.getTransferReasons()
}
],
action: function () {
return u
},
executeRequestBuilder: function () {
return function () {
return f(!1)
}
},
otpHandler: [
'OtpHandlerService',
function (n) {
return n.activatedHandler(20, {
payload: f(!0),
uiContext: {
isNewScreen: !0
}
})
}
]
}
});
return e.result
})
})
},
r.prototype.showApprovalModal = function (n) {
var t = this;
this.setBusyOnAction(function () {
return t.ensureTransactions(n).then(function () {
var r = t,
i = t.jobExecutionAbstractFactory.get(n, t.userInfo);
return t.getApprovalModalModel(r.transferService, i, n).then(function (r) {
var u = 3,
f = function (i) {
i === void 0 && (i = !1);
var f = i ? function (n) {
return t.getExecutionInfoForEnquireOtp(n)
}
 : function (n) {
return t.getExecutionInfoForExecute(n)
},
e = t.createApprovalModalExecuteRequest(n, r, u, i);
return t.getTransformedExecuteJobRequest(e, f)
},
e = t.$uibModal.open({
templateUrl: 'Templates/Features/Transfers/newTransferWizard',
controller: 'PendingApprovalsWizard as vm',
size: 'lg',
resolve: {
userInfo: [
'SecurityService',
function (n) {
return n.getUserSessionInfo()
}
],
jobInfo: function () {
return n
},
Model: function () {
return r
},
executionConfig: function () {
return i
},
transferReasons: [
'LookupsService',
function (n) {
return n.getTransferReasons()
}
],
action: function () {
return u
},
executeRequestBuilder: function () {
return function () {
return f(!1)
}
},
otpHandler: [
'OtpHandlerService',
function (n) {
return n.activatedHandler(20, {
payload: f(!0),
uiContext: {
isNewScreen: !0
}
})
}
]
}
});
return e.result
})
})
})
},
r.prototype.createApprovalModalExecuteRequest = function (n, t, i, r) {
return r === void 0 && (r = !1),
{
Jobs: [
this.buildJobRequest(n, t, i, r)
]
}
},
r.prototype.buildJobRequest = function (n, t, i, r) {
r === void 0 && (r = !1);
var u = {
JobId: n.JobID,
SubCategoryId: n.SubCategory,
Action: i,
JobStatus: n.Status,
FullInfo: n
};
return i === 3 && (n.ApprovalDetails.ApprovalBehavior.BlockAmount && (u.BlockAmount = t.BlockAmount), r || t.PopulateDetails(n), u.TransferDetails = t.Details, u.AUN = n.Transactions[0].TransactionAUN),
u
},
r.prototype.getTransformedExecuteJobRequest = function (n, t) {
return __assign({
}, n, {
Jobs: n.Jobs.map(t)
})
},
r.prototype.getExecutionInfoForExecute = function (n) {
var t = __assign({
}, n);
return delete t.FullInfo,
t
},
r.prototype.getExecutionInfoForEnquireOtp = function (n) {
var t = __assign({
}, n.FullInfo);
return delete t.HeaderNameValues,
delete t.Transactions,
__assign({
}, n, {
FullInfo: t
})
},
r.prototype.getApprovalModalModel = function (n, t, i) {
var r = {
Amount: i.TotalAmount.Value,
Currency: i.TotalAmount.Currency,
FeeType: 1,
CreditAccountNumber: i.Transactions[0].CreditProduct,
CreditAccountType: i.Transactions[0].CreditProductTypeID,
ExpensesServiceType: 0,
DebitAccountNumber: i.Transactions[0].DebitProduct,
DebitAccountType: i.Transactions[0].DebitProductType
};
return n.GetTransferExpenses(r).then(function (n) {
var r = t.model;
return (r.InitialFees = n.Fees, i.ApprovalDetails.ApprovalBehavior.ShowExpenses || i.ApprovalDetails.ApprovalBehavior.ShowRates) ? t.expenses.set(i, r).then(function () {
return r
})  : r
}).then(function (n) {
return t.validation.validate(i, n).then(function () {
return n
})
})
},
r.prototype.createMultipleApprovalModalExecuteRequest = function (n, t, i) {
var r = this;
return i === void 0 && (i = !1),
{
Jobs: n.map(function (n) {
return r.buildJobRequest(n.Job, n.Model, t, i)
})
}
},
r.prototype.exportPDF = function (t, i) {
i === void 0 && (i = {
isSub: !1
});
var r = {
};
return r.Parameters = JSON.stringify({
JobId: t.JobID,
JobName: n.utils.escapeEntityReferences(t.JobName),
TotalTransactions: t.TotalTransfers,
ShowSuccesfull: i.isSub ? !1 : !0,
ShowFailed: i.isSub || i.isSub === undefined ? !0 : !1
}),
r.PDFRequestType = 53,
r
},
r.$inject = [
'isInVersion',
'InquiryServiceProxy',
'Model',
'$scope',
'$injector',
'postNewWindowService',
'onlineStatus',
'$uibModal',
'$q',
'JobExecutionAbstractFactory',
'AppEventsService',
'JobsServiceProxy',
'SharedDataService',
'AppEventsService',
'$state',
'source',
'SecurityService',
'userInfoResponse',
'locale',
'$filter',
'TransfersService'
],
r
}(t.jobsCommonControler),
i;
n.jobs.mainModule.controller('PendingApprovalsController', r);
i = function () {
function t(n, t) {
this.qService = n;
this.transferService = t
}
return t.prototype.getDecorated = function (n) {
return this.decorateLiteral(this.getGroups(n), n[0])
},
t.prototype.getGroups = function (t) {
var u = {
},
i = n.utils.GroupBy(t, function (n) {
return n.TotalAmount.Currency
});
for (var r in i) u[r] = {
totalAmount: i[r].map(function (n) {
return n.TotalAmount.Value
}).reduce(function (n, t) {
return n + t
}, 0),
count: i[r].length
};
return u
},
t.prototype.decorateLiteral = function (n, t) {
var r = [
],
u = [
],
i,
f,
e;
for (i in n) u.push(n[i]),
f = parseInt(i),
e = {
Amount: n[i].totalAmount,
Currency: f,
FeeType: 1,
CreditAccountNumber: t.Transactions[0].CreditProduct,
CreditAccountType: t.Transactions[0].CreditProductTypeID,
ExpensesServiceType: 0,
DebitAccountNumber: t.Transactions[0].DebitProduct,
DebitAccountType: t.Transactions[0].DebitProductType
},
r.push(this.transferService.GetTransferExpenses(e));
return this.qService.all(r).then(function (t) {
return t.forEach(function (n, t) {
u[t].literal = n.Fees.DebitAmountLiteral
}),
n
})
},
t
}();
t.GroupByCurrencyHelper = i
}) (t = n.jobs || (n.jobs = {
}))
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(),
function (n) {
var t;
(function (t) {
var i = function (i) {
function r(t, r, u, f, e, o, s, h, c, l, a, v, y) {
var p = i.call(this, t, r, u, f, e, o, s, c) || this;
return p.scope = t,
p.injector = r,
p.jobInfo = h,
p.initialInfoPerCurrency = a,
p.executeRequestBuilder = v,
p.otpHandler = y,
p.headerMessage = null,
p.finalizationInfo = null,
p.headerMessage = n.utils.formatString(l.multipleJobSelection_step1Header, [
h.length
]),
p
}
return __extends(r, i),
Object.defineProperty(r.prototype, 'otpKey', {
get: function () {
return this.otpHandler.caller
},
enumerable: !0,
configurable: !0
}),
r.prototype.getSuccessfulJobIds = function (n) {
return n.Successful.map(function (n) {
return n.Id
})
},
r.prototype.initialiseSteps = function () {
var n = this,
i = [
];
return i.push({
templateUrl: 'Templates/Features/jobs/PendingApprovals/multiple-approvals-step1',
title: 'Επιβεβαίωση Στοιχείων',
processStep: [
'TransfersService',
function (i) {
var r = n.executeRequestBuilder();
return n.otpHandler.result(r).then(function () {
return n.otpHandler.appendExtraInfoToPayload(r, 'Otp')
}).then(function () {
return n.executeJob(r)
}).then(function (r) {
var u,
f;
return n.finalizationInfo = {
failed: [
],
successful: [
]
},
r.Failed.length ? (u = r.Failed.map(function (n) {
return n.Id
}), n.finalizationInfo.failed = n.jobInfo.map(function (n) {
return n.Job
}).filter(function (n) {
return u.indexOf(n.JobID) >= 0
}), f = r.Successful.map(function (n) {
return n.Id
}), n.finalizationInfo.successful = n.jobInfo.map(function (n) {
return n.Job
}).filter(function (n) {
return f.indexOf(n.JobID) >= 0
}), new t.GroupByCurrencyHelper(n.qService, i).getDecorated(n.finalizationInfo.successful).then(function (t) {
return n.finalizationInfo.infoPerCurrency = t,
{
}
}))  : (n.finalizationInfo.infoPerCurrency = n.initialInfoPerCurrency, n.finalizationInfo.successful = n.jobInfo.map(function (n) {
return n.Job
}), {
})
})
}
]
}),
i.push({
templateUrl: 'Templates/Features/jobs/PendingApprovals/multiple-approvals-step2',
title: 'Αποτελέσμα συναλλαγής'
}),
i
},
r.$inject = [
'$scope',
'$injector',
'$modalInstance',
'AppEventsService',
'JobsServiceProxy',
'$q',
'Model',
'jobInfo',
'action',
'STRINGS',
'initialInfoPerCurrency',
'executeRequestBuilder',
'otpHandler'
],
r
}(n.jobs.BasePendingApprovalWizardController);
n.jobs.mainModule.controller('PendingApprovalMultipleController', i)
}) (t = n.jobs || (n.jobs = {
}))
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(),
function (n) {
var t;
(function (t) {
var i = function (n) {
function i(i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k) {
var d = n.call(this, u, f, o, a, v, r, i, y) || this;
if (d.scope = u, d.$injector = f, d.userInfo = e, d.$timeout = s, d.jobInfo = h, d.transferReasons = c, d.executionConfig = l, d.modal = p, d.approvalService = w, d.executeRequestBuilder = b, d.otpHandler = k, d.viewMessageInfo = {
}, d.finalizationInfo = null, d.canExecute = !0, d.step1 = [
'InquiryServiceProxy',
'LookupsService',
'ProfileProductsService',
function (n, i, r) {
var u = d.executeRequestBuilder();
return d.otpHandler.result(u).then(function () {
return d.otpHandler.appendExtraInfoToPayload(u, 'Otp')
}).then(function () {
return d.executeJob(u)
}).then(function () {
var t = {
JobID: d.jobInfo.JobID,
JobName: d.jobInfo.JobName
};
return n.getJobDetails(t)
}).then(function (n) {
return d.finalizationInfo = {
},
d.finalizationInfo.headerNameValues = n.Jobs.HeaderNameValues.filter(function (n) {
return !(n.IsFooter || n.IsHeader || !n.Value)
}),
d.finalizationInfo.footer = n.Jobs.HeaderNameValues.filter(function (n) {
return n.IsFooter
}) [0],
new t.HeaderNameValueMapper(i, d.qService).map(d.finalizationInfo.headerNameValues)
}).then(function (n) {
var t = n.map(function (n) {
if (n.Variable == 'debitProductId' || n.Variable == 'creditProductId') return parseInt(n.Value)
});
return r.getAccountsByIDs(t).then(function (t) {
return t.forEach(function (t) {
n.forEach(function (n) {
(n.Variable == 'fromAccount' || n.Variable == 'fromCard' || n.Variable == 'toAccountLiteral') && n.Value == t.Code && (n.Value = n.Value += ' (' + t.Title + ')')
})
}),
n
})
}).then(function (n) {
for (var t = 0; t < n.length; ) n[t].Variable == 'debitProductId' || n[t].Variable == 'creditProductId' ? n.splice(t, 1)  : ++t;
return d.finalizationInfo.headerNameValues = n,
{
}
})
}
], d.cssShowContainer = '.content .container { display: none !important; }', d.cssMoveModalInTheTop = '.content .modal.in .modal-dialog { top: 300px !important; left: 560px !important;}', d.cssShowContent = '.printmodal .content { display: block !important;}', d.disableScrollTop = !0, d.jobInfo.Transactions[0].CreditProductTypeID == 20042) {
d.jobInfo.ApprovalDetails.ApprovalBehavior.SelectExpenses = !1;
i.FeeType = 0;
d.onChargesChange(0)
}
return d.viewMessageInfo = {
isFinalExecution: h.PendingApprovals == 1,
isTransfer: d.jobInfo.ApprovalDetails.Type === 1,
isLabourTicketPayment: d.jobInfo.ApprovalDetails.Type === 2 && null != d.jobInfo.ApprovalDetails.JobPaymentInfo && d.jobInfo.ApprovalDetails.JobPaymentInfo.PaymentType === 4,
isIsolated: d.jobInfo.Isolated,
isDiasOnline: null != d.jobInfo.ApprovalDetails.TransferInfo && d.jobInfo.ApprovalDetails.TransferInfo.Type === 6,
isNonDeclaredAlphaTransfer: null != d.jobInfo.ApprovalDetails.TransferInfo && !d.jobInfo.ApprovalDetails.TransferInfo.IsDeclared && d.jobInfo.ApprovalDetails.TransferInfo.Type === 0,
isInterbankTransfer: null != d.jobInfo.ApprovalDetails.TransferInfo && [
1,
6
].indexOf(d.jobInfo.ApprovalDetails.TransferInfo.Type) > - 1,
isInternationalTransfer: null != d.jobInfo.ApprovalDetails.TransferInfo && 2 === d.jobInfo.ApprovalDetails.TransferInfo.Type,
isImmediateTransfer: null != d.jobInfo.ApprovalDetails.TransferInfo && !d.jobInfo.ApprovalDetails.ApprovalBehavior.BlockAmount,
needsBlockAmountOnly: d.jobInfo.ApprovalDetails.ApprovalBehavior.BlockAmount && !d.jobInfo.ApprovalDetails.ApprovalBehavior.SelectExpenses && !d.jobInfo.ApprovalDetails.ApprovalBehavior.SubmitOtp,
needsBlockAmountAndOtpOnly: d.jobInfo.ApprovalDetails.ApprovalBehavior.BlockAmount && !d.jobInfo.ApprovalDetails.ApprovalBehavior.SelectExpenses && d.jobInfo.ApprovalDetails.ApprovalBehavior.SubmitOtp,
needsBlockAmountAndOtpAndExpenses: d.jobInfo.ApprovalDetails.ApprovalBehavior.BlockAmount && d.jobInfo.ApprovalDetails.ApprovalBehavior.SelectExpenses && d.jobInfo.ApprovalDetails.ApprovalBehavior.SubmitOtp,
needsBlockAmount: d.jobInfo.ApprovalDetails.ApprovalBehavior.BlockAmount
},
d
}
return __extends(i, n),
Object.defineProperty(i.prototype, 'otpKey', {
get: function () {
return this.otpHandler.caller
},
enumerable: !0,
configurable: !0
}),
i.prototype.hasSecondaryText = function () {
return this.viewMessageInfo.isNonDeclaredAlphaTransfer || this.viewMessageInfo.isInterbankTransfer || this.viewMessageInfo.isInternationalTransfer
},
i.prototype.makeStep = function (n, t) {
var i = n;
return i.processStep = t,
i
},
i.prototype.getSuccessfulJobIds = function () {
return [this.jobInfo.JobID]
},
i.prototype.onSubmissionError = function (n) {
var t = this,
i;
return this.Model.Otp = '',
i = {
ByJobID: {
FromJobID: this.jobInfo.JobID,
ToJobID: this.jobInfo.JobID
},
JobStatus: 3
},
this.approvalService.getJobs(i).then(function (i) {
if (i.Jobs && i.Jobs.length && i.Jobs[0].Status == 7) {
t.onJobFinalization([t.jobInfo.JobID]);
t.canExecute = !1
}
return n()
})
},
i.prototype.initialiseSteps = function () {
var n = [
];
return n.push(this.makeStep({
templateUrl: this.Model.InitializationErrors ? 'Templates/Features/jobs/PendingApprovals/initialization-error-step1' : this.executionConfig.views[0],
title: 'Επιβεβαίωση Στοιχείων'
}, this.step1)),
n.push(this.makeStep({
templateUrl: this.executionConfig.views[1],
title: 'Αποτελέσμα συναλλαγής'
}, null)),
n
},
i.prototype.close = function () {
this.modalInstance.dismiss()
},
i.prototype.onChargesChange = function () {
var n = this;
this.IsBusy = !0;
this.executionConfig.expenses.set(this.jobInfo, this.Model).finally (function () {
return n.IsBusy = !1
})
},
i.prototype.GroupTransferReason = function (n) {
return ['460',
'470',
'480',
'490'].indexOf(n.Id) != - 1 ? n.Group : [
'500',
'510',
'520',
'530'
].indexOf(n.Id) != - 1 ? n.Group : [
'540',
'550',
'560',
'570',
'580'
].indexOf(n.Id) != - 1 ? n.Group : void 0
},
i.prototype.openTermsModal = function () {
this.modal.open({
templateUrl: 'Templates/Features/Transfers/TermsAndConditions',
controller: 'TermsAndConditionsModal as vm',
size: 'lg',
windowClass: 'custom terms'
})
},
i.prototype.print = function () {
$('head').append('<style id="deleteMeInSeconds" type="text/css" media="print">' + this.cssMoveModalInTheTop + this.cssShowContainer + this.cssShowContent + '< /style>');
window.print();
$('#deleteMeInSeconds').remove()
},
i.$inject = [
'Model',
'$q',
'$scope',
'$injector',
'userInfo',
'$modalInstance',
'$timeout',
'jobInfo',
'transferReasons',
'executionConfig',
'AppEventsService',
'JobsServiceProxy',
'action',
'$modal',
'ApprovalsService',
'executeRequestBuilder',
'otpHandler'
],
i
}(n.jobs.BasePendingApprovalWizardController);
n.jobs.mainModule.controller('PendingApprovalsWizard', i)
}) (t = n.jobs || (n.jobs = {
}))
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(),
function (n) {
var t;
(function () {
var t = function (t) {
function i(n, i, r, u, f, e, o, s, h, c, l, a) {
var v = this,
b = h.isAccessAllowed('PreparePublicSectorPayment') || h.isAccessAllowed('PrepareAllPayments'),
k = h.isAccessAllowed('PrepareOtherPayment') || h.isAccessAllowed('PrepareAllPayments'),
y,
p,
w;
return v = t.call(this, n, i, r, u, f, e, o, s, h, c, l, a, b, k) || this,
y = function (n) {
return 1001 !== n.index
},
v.paymentsList.cardPayments = v.paymentsList.cardPayments.filter(y),
v.searchWizard.cardPayments = v.searchWizard.cardPayments.filter(y),
v.paymentsList.favoritePayments = v.paymentsList.favoritePayments.filter(y),
p = function (n) {
return n.Item.IsGroup || n.Item.SupportsJob
},
w = function () {
for (var t = [
], n = 0; n < arguments.length; n++) t[n] = arguments[n];
return function (n) {
return t.every(function (t) {
return t(n)
})
}
},
v.paymentsList.paymentTypes = v.paymentsList.paymentTypes.filter(w(p)),
v.searchWizard.paymentTypes = v.searchWizard.paymentTypes.filter(w(p)),
v.paymentsList.filterPayments(),
v
}
return __extends(i, t),
i.prototype.navigate = function (n) {
this.stateService.go(this.getJobState(n), n.stateParams)
},
i.prototype.handleModalResponse = function (n) {
return function (t) {
n.stateHelperService.go(n.getJobState(t.paymentType), t.paymentType.stateParams, t.transaction)
}
},
i.prototype.getJobState = function (t) {
var i = t.state.split('.');
return n.utils.formatString('{0}.{1}', [
n.constants.stateNames.newPaymentJobState,
i.pop()
])
},
i.$inject = [
'paymentTypes',
'paymentTemplates',
'STRINGS',
'$state',
'VersionFilterService',
'$q',
'footerKey',
'userInfo',
'RoleService',
'$scope',
'$modal',
'StateHelperService'
],
i
}(n.payments.SearchPaymentsController);
n.jobs.mainModule.controller('JobSubmissionSearchPaymentController', t)
}) (t = n.jobs || (n.jobs = {
}))
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(),
function (n) {
var t;
(function () {
var r = function () {
function t(t, i, r, u, f, e, o) {
if (this.cdiNumber = t, this.myBonus = i, this.isInVersion = r, this.postNewWindowService = u, this.productsSvc = f, this.RoleService = e, this.stringService = o, this.cards = [
], this.errorMessage = '', this.informationMsg = '', n.utils.isUndefinedOrNull(this.myBonus) || this.myBonus.ResultCode != 0) this.informationMsg = this.stringService.serviceUnavailable;
 else if (this.cards = this.myBonus.AccountCards, !n.utils.isUndefinedOrNull(this.cards) && this.cards.length > 0) {
var s = this;
this.pointsSum = parseInt(i.TotalPoints);
isNaN(this.pointsSum) || (this.showPoints = !0);
n.utils.isUndefinedOrNull(this.myBonus.AccountCards) || this.myBonus.AccountCards.map(function (n) {
n.ColorClass = 'color color-' + n.Color.toString()
});
this.pdfRequest = {
CDI: t
};
this.documentData = {
ProductCode: this.cdiNumber,
DocumentRequestType: 23
}
} else this.informationMsg = this.stringService.onlyForBonusCardOwners
}
return t.prototype.exportPDF = function () {
var n = {
},
t = {
Request: this.pdfRequest
};
return n.Parameters = JSON.stringify(t),
n.PDFRequestType = 18,
n
},
t.$inject = [
'cdiNumber',
'myBonus',
'isInVersion',
'postNewWindowService',
'ProductsService',
'RoleService',
'STRINGS'
],
t
}(),
t,
i;
n.cards.mainModule.controller('BonusController', r);
t = function () {
function t(t, i, r, u, f, e, o) {
this.inquiriesResponse = t;
this.modal = i;
this.channels = r;
this.QueriesService = u;
this.isInVersion = f;
this.postNewWindowService = e;
this.stringService = o;
this.transactions = [
];
this.dateFormat = 'dd/MM/yyyy';
this.dateOptions = {
formatYear: 'yyyy',
startingDay: 1,
showWeeks: 'false',
maxMode: 'day'
};
this.documentData = {
};
this.from = n.utils.SubtractMonths(new Date, 1);
this.to = new Date;
this.transactions = [
];
n.utils.isUndefinedOrNull(this.inquiriesResponse) || (this.inquiriesResponse.ResultCode == 0 ? (this.errorMessage = '', this.transactions = n.utils.isUndefinedOrNull(this.inquiriesResponse.Transactions) ? [
] : this.inquiriesResponse.Transactions, this.currentIndex = this.inquiriesResponse.CurrentPageIndex, this.hasMore = this.inquiriesResponse.HasMore, this.lastPageIndices = [
], this.pdfRequest = this.QueriesService.getTransactionsRequest(10, null, this.from.toDateString(), this.to.toDateString(), 12, null, null, null, null, null, undefined), this.updateDocumentData())  : this.errorMessage = n.utils.isUndefinedOrNull(this.inquiriesResponse.Error) ? 'Something went wrong...' : this.inquiriesResponse.Error.Message)
}
return t.prototype.updateDocumentData = function () {
this.documentData = {
DocumentRequestType: 24,
KeyValueDictionary: [
{
Key: 'tranRequest',
Value: JSON.stringify({
Request: this.pdfRequest,
LastPageIndices: this.lastPageIndices,
ProductTypeID: n.constants.pci.defaultProductId
})
}
]
}
},
t.prototype.dateFromPopupToggleVisibility = function (n) {
n.preventDefault();
n.stopPropagation();
this.dateToPopupOpened = !1;
this.dateFromPopupOpened = !0
},
t.prototype.dateToPopupToggleVisibility = function (n) {
n.preventDefault();
n.stopPropagation();
this.dateFromPopupOpened = !1;
this.dateToPopupOpened = !0
},
t.prototype.loadMore = function () {
var t = this;
this.QueriesService.getTransactions(this.QueriesService.getTransactionsRequest(10, this.currentIndex, this.from.toDateString(), this.to.toDateString(), 12, null, null, null, null, null, undefined)).then(function (i) {
if (i.ResultCode == 0) {
t.errorMessage = '';
t.hasMore = i.HasMore;
var r = t.currentIndex;
t.pdfRequest = t.QueriesService.getTransactionsRequest(10, t.currentIndex, null, null, 12, null, null, null, null, null, undefined);
n.utils.isUndefinedOrNullorWhiteSpace(r) || t.lastPageIndices.push(r);
t.updateDocumentData();
t.currentIndex = i.CurrentPageIndex;
t.transactions = i.Transactions ? t.transactions.concat(i.Transactions)  : t.transactions
} else n.utils.isUndefinedOrNull(i.Error) || (t.hasMore = !1, t.currentIndex = '', t.transactions = [
], t.errorMessage = i.Error.Message)
})
},
t.prototype.getTransactionsByDate = function () {
var t = this;
return this.QueriesService.getTransactions(this.QueriesService.getTransactionsRequest(10, null, this.from.toDateString(), this.to.toDateString(), 12, null, null, null, null, null, undefined)).then(function (i) {
i.ResultCode == 0 ? (t.errorMessage = '', t.hasMore = i.HasMore, t.pdfRequest = t.QueriesService.getTransactionsRequest(10, null, t.from.toDateString(), t.to.toDateString(), 12, null, null, null, null, null, null), t.lastPageIndices = [
], t.updateDocumentData(), t.currentIndex = i.CurrentPageIndex, t.transactions = n.utils.isUndefinedOrNull(i.Transactions) ? [
] : i.Transactions)  : n.utils.isUndefinedOrNull(i.Error) || (t.hasMore = !1, t.currentIndex = '', t.transactions = [
], t.errorMessage = i.Error.Message)
})
},
t.prototype.getTransactionCopy = function (n) {
var t = this,
i = this.modal.open({
templateUrl: 'Templates/Features/Cards/bonus/transaction-copy-modal',
controller: 'TransactionCopyModalInstanceCtrl as vm',
size: 'sm',
windowClass: 'custom',
resolve: {
transaction: [
function () {
return n
}
],
channels: [
function () {
return t.channels
}
]
}
})
},
t.prototype.exportPDF = function () {
var t = {
},
i = {
Request: this.pdfRequest,
LastPageIndices: this.lastPageIndices,
ProductTypeID: n.constants.pci.defaultProductId
};
return t.Parameters = JSON.stringify(i),
t.PDFRequestType = 14,
t
},
t.$inject = [
'inquiriesResponse',
'$modal',
'channels',
'QueriesService',
'isInVersion',
'postNewWindowService',
'STRINGS'
],
t
}();
n.cards.mainModule.controller('BonusInquiriesController', t);
i = function (t) {
function i(i, r, u, f, e, o, s, h, c, l, a, v, y) {
var p = t.call(this, i, r) || this;
return p.$scope = i,
p.$injector = r,
p.$sce = u,
p.STRINGS = f,
p.myBonus = e,
p.creditCards = o,
p.AppEventsService = s,
p.filterService = h,
p.userInfo = l,
p.productsService = a,
p.myBonusPoints = v,
p.otpHandler = y,
p.Model = {
HasErrors: !1,
ErrorMessage: '',
HasFatalError: !1
},
p.noOtpOrCreditCards = !1,
p.showPoints = !1,
p.informationMsg = '',
n.utils.isUndefinedOrNull(p.myBonus) || p.myBonus.ResultCode == 1 ? p.informationMsg = p.STRINGS.serviceUnavailable : p.informationMsg == '' && !n.utils.isUndefinedOrNull(p.myBonus) && !n.utils.isUndefinedOrNull(p.myBonus.AccountCards) && p.myBonus.AccountCards.length > 0 ? n.utils.isUndefinedOrNull(p.myBonusPoints) || isNaN(p.myBonusPoints) || (p.myBonusPoints <= 0 && (p.informationMsg = p.STRINGS.notEnoughBonusPoints), p.showPoints = !0, p.useProfileProduct = !0, p.model = {
}, p.model.AmountCurrency = n.server.Currency._BP, p.model.TransferType = 5, c.hasError ? (c.errorMessage == 'noOtpOrCreditCards' && (p.noOtpOrCreditCards = !0, c.errorMessage = u.trustAsHtml(f.otpNotEnabledRetailUser)), p.Model.ErrorMessage = c.errorMessage, p.Model.HasErrors = p.Model.HasFatalError = !0)  : p.useProfileProduct = p.creditCards.length > 0)  : p.informationMsg = p.STRINGS.onlyForBonusCardOwners,
p
}
return __extends(i, t),
Object.defineProperty(i.prototype, 'allowProfileProducts', {
get: function () {
return !this.IsBusy && this.creditCards.length > 0
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(i.prototype, 'allowNonProfileProducts', {
get: function () {
return !this.IsBusy
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(i.prototype, 'otpKey', {
get: function () {
return this.otpHandler.caller
},
enumerable: !0,
configurable: !0
}),
i.prototype.selectCreditProduct = function (n) {
this.model.CreditProductCode = n.Code
},
i.prototype.createDocumentRequest = function () {
var n = {
},
t;
return n.PDFRequestType = 15,
t = {
SubmittedTimeStamp: this.filterService('date') (this.response.SubmittedTimeStamp, 'dd/MM/yyyy HH:mm'),
ToCard: this.CreditProductCode,
Amount: this.model.Amount,
TransferDate: this.response.ProcessDate,
TransactionNumber: this.response.TransactionUN,
ProcessDateLiteral: this.response.ProcessDateLiteral,
Beneficiaries: this.response.CreditProductOwners[0].Name + ' ' + this.response.CreditProductOwners[0].Surname
},
n.Parameters = JSON.stringify(t),
n
},
i.prototype.initialiseSteps = function () {
var t = this,
o = this,
i = [
],
r = 0,
f = {
templateUrl: 'Templates/Features/Cards/bonus/bonus-transfer-step1',
title: '',
index: r++,
stateName: ''
},
u,
e;
return f.processStep = [
'ProductsService',
function () {
var i = t.qService.defer(),
r;
return parseFloat(t.model.Amount.toString().replace(',', '.')) <= t.myBonusPoints ? (t.model.DebitProductCode = '', t.model.DebitProductType = 0, t.model.DebitProductID = 0, t.model.CreditProductType = t.useProfileProduct ? t.toCard.TypeID : 0, t.model.CreditProductID = t.useProfileProduct ? t.toCard.BankProduct.ProductID : - 1, r = t.productsService.getProductInfo({
Code: t.useProfileProduct ? t.toCard.Code : t.model.CreditProductCode,
ProductID: t.useProfileProduct ? t.toCard.BankProduct.ProductID : n.constants.pci.defaultProductId,
Family: n.server.ProductTypeFamily.Card
}), r.catch (function () {
return t.qService.reject(t.STRINGS.systemError)
}).then(function (r) {
if (r.ResultCode == 1) return t.qService.reject(r.Error.Message);
if (!r.ProductInfo[0].Validated) return t.qService.reject(r.ProductInfo[0].ErrorMessage);
var u = !1;
if (n.utils.isUndefinedOrNull(r.ProductInfo[0].Owners) || r.ProductInfo[0].Owners.map(function (i) {
i.CustomerNumber.length > 15 ? i.CustomerNumber = i.CustomerNumber.substr(0, 15)  : i.CustomerNumber.length < 15 && (i.CustomerNumber = n.utils.padLeft(i.CustomerNumber, '0', 15));
u = t.userInfo.CDINumber == i.CustomerNumber ? !0 : u;
t.ownerName = i.Name + ' ' + i.Surname
}), u) return t.qService.reject(t.STRINGS.differentCdiForTransfer);
i.resolve(!0)
}).catch (function (n) {
i.reject(n)
}))  : i.reject(t.STRINGS.morePointsThanAvailable),
i.promise.then(function () {
return t.getOtpPayload()
}).then(function (n) {
return t.otpHandler.reset({
hints: {
Requirement: String(2),
Method: String(1)
},
payload: n
}).enquire()
})
}
],
i.push(f),
u = {
templateUrl: 'Templates/Features/Cards/bonus/bonus-transfer-step2',
index: r++,
title: '',
stateName: ''
},
u.processStep = [
'TransfersService',
'AppEventsService',
'ProductsServiceProxy',
function (i, r, u) {
return t.otpHandler.result().then(function () {
return t.otpHandler.appendExtraInfoToPayload(t.getOtpPayload())
}).then(function (n) {
return i.ExecuteBonusPointsTransfer(n)
}).then(function (i) {
if (i.ResultCode !== 0) {
var f = n.utils.isUndefinedOrNull(i.Error) ? t.STRINGS.failedTransactionSystemError : i.Error.Message;
return t.qService.reject(f)
}
return t.response = i,
t.CreditProductCode = t.response.CreditProductCode,
t.finalOwnerName = t.response.CreditProductOwners[0].Name + ' ' + t.response.CreditProductOwners[0].Surname,
r.publish(n.common.services.AppEventsService.InvalidateCards_Event),
u.getCardBonusSecure({
CDI: t.userInfo.CDINumber
}, !0),
!0
}, function (i) {
var r = t.STRINGS.failedTransactionSystemError;
return n.utils.isUndefinedOrNull(i.Error) && i.data.Message == 'TimeoutError' ? r = t.STRINGS.promptForCheckErrorMsg : n.utils.isUndefinedOrNull(i.Error.Message) || (r = i.Error.Message),
t.qService.reject(r)
})
}
],
i.push(u),
e = {
templateUrl: 'Templates/Features/Cards/bonus/bonus-transfer-step3',
index: r++,
title: '',
stateName: ''
},
i.push(e),
i
},
i.prototype.getOtpPayload = function () {
return this.model
},
i.$inject = [
'$scope',
'$injector',
'$sce',
'STRINGS',
'myBonus',
'creditCards',
'AppEventsService',
'$filter',
'fatalErrorState',
'userInfo',
'ProductsService',
'myBonusPoints',
'otpHandler'
],
i
}(n.wizards.WizardController);
n.cards.mainModule.controller('BonusTransferController', i)
}) (t = n.cards || (n.cards = {
}))
}(alpha || (alpha = {
})),
function (n) {
var t;
(function () {
var r = function () {
function t(t, i, r, u, f, e, o, s) {
var l,
v,
a,
h,
c;
if (this.AppEventsService = u, this.otherBankProductsService = f, this.StateHelperService = e, this.SharedDataService = o, this.$state = s, this.isBusyMap = {
}, this.hasErrorMap = {
}, this.Model = {
HasErrors: !1,
ErrorMessage: '',
HasFatalError: !1
}, this.isPsd2OtherBankProductsFeatureEnabled = $('meta[name=EnablePsd2OtherBankProductsFeatureFlag]').attr('content') == 'True' || $('meta[name=EnablePsd2OtherBankProductsFeatureFlag]').attr('content') == 'true', this.ClearErrorMessages(), this.showOtherBankProductsOverviewMsg = this.isPsd2OtherBankProductsFeatureEnabled, i) for (l = 0, v = i; l < v.length; l++) a = v[l],
this.isBusyMap[a.Code] = {
isBusy: !1
},
this.hasErrorMap[a.Code] = {
hasError: a.BankProduct.OtherBankProductId === undefined
};
if (this.CreditCards = t.filter(function (n) {
return n.CategoryType == 101
}), this.DebitCards = t.filter(function (n) {
return n.CategoryType == 102 || n.CategoryType == 103
}), this.PrepaidCards = t.filter(function (n) {
return n.CategoryType == 104
}), this.OtherBankCards = i, this.bannerKey = new Date, this.bannerMenuPath = 'root.cards.maintenance.selection', this.showCampaignBanner = r.IsRetail(), this.isEndUser = r.isEndUser(), this.isCorporate = !r.IsRetail(), s.params && s.params.isOauthCallbackRedirect) {
if (h = o.GetControllerData(n.server.Controllers.CardsController, n.common.services.AppEventsService.PSD2ProductBalanceServiceTrigger), h) {
console.log('data fetched: ', h);
this.reloadCardBalance(h.RequestedBank, h.RequestedProductCode, h.RequestedProductId, h.RequestedProductIdentifier);
return
}
if (c = o.GetControllerData(n.server.Controllers.CardsController, n.common.services.AppEventsService.PSD2ProductDetailsServiceTrigger), c) {
this.reRegisterOtherBankAccount(c.RequestedProductCode, null, c.RequestedBank, c.OtherBankProductDescription);
return
}
}
}
return t.prototype.hideOtherBankProductsMessage = function () {
this.showOtherBankProductsOverviewMsg = !1
},
t.prototype.reRegisterOtherBankAccount = function (t, i, r, u) {
var f = this,
e;
f.isBusyMap[t] = {
isBusy: !0
};
i != null && i.BankProduct.Details && (e = i.BankProduct.Details.filter(function (t) {
return t.Name === n.server.DetailName.PRODUCT_BANK_NAME
}), e.length > 0 && (r = parseInt(e[0].Value)));
f.otherBankProductsService.getProductDetails(r, 2, 3, t, null).then(function (i) {
if (i.ResultCode === 0 && i.Error == null) if (f.ClearErrorMessages(), i.NeedsNewAccessToken) {
var e = {
requestIntentId: i.RequestIntentId,
bank: r,
productType: 2,
scope: i.ScopeNeeded,
productCode: t,
serviceRequested: 3,
callingJsController: n.server.Controllers.CardsController,
productDescription: u
};
f.StateHelperService.go(n.constants.stateNames.oAuthDanceBeginState, null, e)
} else i.OtherBankProductDetails[0].OtherBankProductCode = t,
f.otherBankProductsService.finishOtherBankMultipleProductsAddition(r, 2, i.OtherBankProductDetails).then(function () {
f.hasErrorMap[t] = {
hasError: !1
}
}).catch (function (n) {
console.log(n)
}).finally (function () {
for (var n, r = 0, u = f.OtherBankCards; r < u.length; r++) n = u[r],
n.Code === t && (n.BankProduct.OtherBankProdLastUpdateOn = i.OtherBankProductDetails[0].LastUpdatedOn, n.BankProduct.CurrentBalance = i.OtherBankProductDetails[0].AvailableBalance.Amount, n.BankProduct.CurrentBalanceSign = i.OtherBankProductDetails[0].AvailableBalance.Sign);
f.isBusyMap[t] = {
isBusy: !1
}
}),
f.AppEventsService.publish(n.common.services.AppEventsService.PSD2ClearLocalStorageTrigger);
 else f.Model.HasErrors = !0,
f.Model.ErrorMessage = n.utils.getErrorMsg(i.Error);
console.log(i)
}).catch (function (n) {
console.log(n)
}).finally (function () {
f.isBusyMap[t] = {
isBusy: !1
}
})
},
t.prototype.reloadCardBalance = function (t, i, r, u) {
var f = this;
f.isBusyMap[i] = {
isBusy: !0
};
f.otherBankProductsService.getProductBalance(t, 2, i, r, u).then(function (e) {
var s,
o;
e.ResultCode === 0 && e.Error == null ? (f.ClearErrorMessages(), e.NeedsNewAccessToken ? (s = {
requestIntentId: e.RequestIntentId,
bank: t,
productType: 2,
scope: e.ScopeNeeded,
productCode: i,
otherBankProductId: r,
serviceRequested: 1,
callingJsController: n.server.Controllers.CardsController,
productIdentifier: u
}, f.StateHelperService.go(n.constants.stateNames.oAuthDanceBeginState, null, s))  : (e.OtherBankProductBalances && e.OtherBankProductBalances.length != 0 && (o = e.OtherBankProductBalances[0], setTimeout(function () {
var t,
r,
n;
if (f.OtherBankCards) for (t = 0, r = f.OtherBankCards; t < r.length; t++) n = r[t],
n.Code === i && (n.BankProduct.OtherBankProdLastUpdateOn = o.LastUpdatedOn, n.BankProduct.CurrentBalance = o.AvailableBalance.Value, n.BankProduct.CurrentBalanceSign = o.AvailableBalance.Sign)
}, 0)), f.AppEventsService.publish(n.common.services.AppEventsService.PSD2ClearLocalStorageTrigger)))  : (f.Model.HasErrors = !0, f.Model.ErrorMessage = n.utils.getErrorMsg(e.Error))
}, function (t) {
f.Model.HasFatalError = !0;
f.Model.ErrorMessage = n.utils.getErrorMsg(t)
}).finally (function () {
f.isBusyMap[i] = {
isBusy: !1
}
})
},
Object.defineProperty(t.prototype, 'IsCorporate', {
get: function () {
return this.isCorporate
},
enumerable: !0,
configurable: !0
}),
t.prototype.ClearErrorMessages = function () {
this.Model.HasErrors = !1;
this.Model.HasFatalError = !1;
this.Model.ErrorMessage = null
},
t.$inject = [
'products',
'otherBankProducts',
'RoleService',
'AppEventsService',
'OtherBankProductsService',
'StateHelperService',
'SharedDataService',
'$state'
],
t
}(),
t,
i;
n.cards.mainModule.controller('CardsController', r);
t = function () {
function t(t, i, r, u, f, e) {
this.statementsResponse = t;
this.product = i;
this.ProductsService = r;
this.ProfileProductsService = u;
this.stringService = f;
this.postNewWindowService = e;
var o = this;
this.errorMessage = '';
this.relatedCards = [
];
this.product && this.product.Balance && (this.isMainCard = this.product.Balance.IsMainCard);
n.utils.isUndefinedOrNull(this.statementsResponse) || (this.statementsResponse.ResultCode == 0 ? (n.utils.isUndefinedOrNull(this.statementsResponse.Statements) || (this.allStatements = this.statementsResponse.Statements.map(function (t) {
return new n.model.CardStatement(t)
})), o.isMainCard && (o.relatedCards.push({
name: '<span class="bolder grey inline">' + o.stringService.ddlAllCards + '</span> ',
value: 'allCards'
}), o.relatedCards.push({
name: '<span class="bolder grey inline">' + o.stringService.ddlMainCard + '</span> ' + o.product.Code,
value: o.product.Code
}), n.utils.isUndefinedOrNullorWhiteSpace(o.product.Balance.AddOnAccount1) || o.relatedCards.push({
name: '<span class="bolder grey inline">' + o.stringService.ddlAddonCard + '</span> ' + o.product.Balance.AddOnAccount1,
value: o.product.Balance.AddOnAccount1
}), n.utils.isUndefinedOrNullorWhiteSpace(o.product.Balance.AddOnAccount2) || o.relatedCards.push({
name: '<span class="bolder grey inline">' + o.stringService.ddlAddonCard + '</span> ' + o.product.Balance.AddOnAccount2,
value: o.product.Balance.AddOnAccount2
}), n.utils.isUndefinedOrNull(this.allStatements) || o.allStatements.forEach(function (n) {
n.CardNumber != o.product.Code && n.CardNumber != o.product.Balance.AddOnAccount1 && n.CardNumber != o.product.Balance.AddOnAccount2 && o.relatedCards.push({
name: '<span class="bolder grey inline">' + o.stringService.ddlAddonCard + '</span> ' + n.CardNumber,
value: n.CardNumber
})
})), this.selectedCard = {
name: '<span class="bolder grey inline">' + o.stringService.ddlAllCards + '</span> ',
value: 'allCards'
}, this.relatedCards.length < 3 && (this.selectedCard = {
name: '<span class="bolder grey inline">' + o.stringService.ddlMainCard + '</span> ' + o.product.Code,
value: o.product.Code
}), this.LastStatementDate = this.statementsResponse.LastStatementDate, this.pdfRequest = {
ProductCode: i.Code,
ProductTypeID: i.TypeID,
GetOldStatements: !1,
StatementID: 0,
ProductID: i.BankProduct.ProductID
})  : n.utils.isUndefinedOrNull(this.statementsResponse.Error) || (this.errorMessage = this.statementsResponse.Error.Message))
}
return Object.defineProperty(t.prototype, 'selectedCard', {
get: function () {
return this._selectedCard
},
set: function (n) {
this._selectedCard = n;
this.selectCard(n)
},
enumerable: !0,
configurable: !0
}),
t.prototype.orderByDate = function (n) {
var t = n.TranDate.split('/'),
i = new Date(parseInt(t[2]), parseInt(t[1]), parseInt(t[0]));
return - i
},
t.prototype.getStatementsForSelectedCode = function () {
var t = this;
n.utils.isUndefinedOrNull(this.allStatements) || (this.statementsForView = this.selectedCard.value == 'allCards' ? this.allStatements.filter(function (t) {
return !n.utils.isUndefinedOrNull(t.Statements) || !n.utils.isUndefinedOrNull(t.PendingStatements)
})  : this.allStatements.filter(function (i) {
return i.CardNumber == t.selectedCard.value && (!n.utils.isUndefinedOrNull(i.Statements) || !n.utils.isUndefinedOrNull(i.PendingStatements))
}), this.statementsForView.forEach(function (t) {
t.Currency = n.utils.isUndefinedOrNull(t.Statements) ? t.PendingStatements[0].Currency : t.Statements[0].Currency
}))
},
t.prototype.selectCard = function (t) {
var i,
r;
this.getStatementsForSelectedCode();
!n.utils.isUndefinedOrNull(this.statementsForView) && this.statementsForView.length > 0 && (this.documentData = {
ProductCode: this.product.Code,
ProductTypeID: this.product.TypeID,
GetOldStatements: !1,
StatementID: 0,
ProductID: this.product.BankProduct.ProductID
}, this.documentData.DocumentRequestType = 9, this.documentData.KeyValueDictionary = [
], i = new n.model.KeyValue, i.Key = 'cardNumber', i.Value = t.value, this.documentData.KeyValueDictionary.push(i), r = new n.model.KeyValue, r.Key = 'currency', r.Value = n.utils.isUndefinedOrNull(this.statementsForView[0].Statements) ? n.server.Currency[this.statementsForView[0].PendingStatements[0].Currency] : n.server.Currency[this.statementsForView[0].Statements[0].Currency], this.documentData.KeyValueDictionary.push(r))
},
t.prototype.exportPDF = function () {
var t = {
},
i = {
Request: this.pdfRequest,
Code: this.selectedCard.value,
Currency: n.utils.isUndefinedOrNull(this.statementsForView[0].Statements) ? n.server.Currency[this.statementsForView[0].PendingStatements[0].Currency] : n.server.Currency[this.statementsForView[0].Statements[0].Currency]
};
return t.Parameters = JSON.stringify(i),
t.PDFRequestType = 24,
t
},
t.$inject = [
'statementsResponse',
'product',
'ProductsService',
'ProfileProductsService',
'STRINGS',
'postNewWindowService'
],
t
}();
n.cards.mainModule.controller('CardsTransactionsController', t);
i = function () {
function t(t, i, r, u) {
if (this.estatementsResponse = t, this.product = i, this.ProductsService = r, this.modal = u, this.estatements = [
], this.error = '', this.previousStatementsError = '', this.hasEstatements = !1, !n.utils.isUndefinedOrNull(this.estatementsResponse)) if (this.estatementsResponse.ResultCode == 0) {
this.error = '';
this.hasEstatements = n.utils.isUndefinedOrNull(t.HasEStatements) ? !1 : t.HasEStatements;
var f = this;
this.product.BankProduct.IsCorporateCard && !this.product.BankProduct.IsMainCard ? f.previousStatements = n.utils.isUndefinedOrNull(this.estatementsResponse.EStatements) ? [
] : this.estatementsResponse.EStatements : !n.utils.isUndefinedOrNull(this.estatementsResponse.Statements) && this.estatementsResponse.Statements.length > 0 && this.estatementsResponse.Statements.forEach(function (n) {
(n.CardNumber = f.product.Code) && (f.estatements = n.OldStatements)
})
} else n.utils.isUndefinedOrNull(this.estatementsResponse.Error) || (this.error = this.estatementsResponse.Error.Message)
}
return t.prototype.getEStatement = function (n) {
var t = this,
i = this.modal.open({
templateUrl: 'Templates/Features/Cards/oldStatementsModal',
controller: 'OldStatementsModalInstanceCtrl as vm',
size: 'lg',
windowClass: 'customfeatures',
resolve: {
eStatementsResponse: [
'ProductsService',
function () {
return t.ProductsService.getCardStatements({
ProductCode: t.product.Code,
ProductTypeID: t.product.TypeID,
ProductID: t.product.BankProduct.ProductID,
GetOldStatements: !0,
StatementID: n.StatementID
})
}
],
documentData: [
'ProductsService',
function () {
var i = {
ProductCode: t.product.Code,
ProductTypeID: t.product.TypeID,
GetOldStatements: !0,
StatementID: n.StatementID,
ProductID: t.product.BankProduct.ProductID
};
return i.DocumentRequestType = 17,
i
}
],
cardCode: [
function () {
return t.product.Code
}
]
}
})
},
t.prototype.getPreviousStatements = function () {
this.hideBtn = !0;
var t = this;
return this.ProductsService.getCardEStatements({
ProductCode: t.product.Code,
ProductTypeID: t.product.BankProduct.TypeID,
ProductID: t.product.BankProduct.ProductID
}).then(function (i) {
i.ResultCode == 0 ? t.previousStatements = n.utils.isUndefinedOrNull(i.EStatements) ? [
] : i.EStatements : t.previousStatementsError = n.utils.isUndefinedOrNull(i.Error) ? 'System error' : i.Error.Message
}).catch (function (n) {
t.previousStatementsError = n.Error.Message
})
},
t.$inject = [
'estatementsResponse',
'product',
'ProductsService',
'$modal'
],
t
}();
n.accounts.mainModule.controller('CardsEStatementsController', i)
}) (t = n.cards || (n.cards = {
}))
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(),
function (n) {
var t;
(function () {
var t = function (n) {
function t(t, i, r, u, f, e, o) {
var s = n.call(this, t, i) || this;
return s.enquiryCards = r,
s.userInfo = u,
s.stateService = e,
s.isInVersion = o,
s.transactions = [
{
name: s.STRINGS.lostStolenCard,
state: 'root.cards.maintenance.cardloss'
},
{
name: s.STRINGS.cardActivation,
state: 'root.cards.maintenance.activate'
},
{
name: s.STRINGS.pinReissuance,
state: 'root.cards.maintenance.changepin'
},
{
name: s.STRINGS.modifyAtmLimit,
state: 'root.cards.maintenance.withdrawlimit'
},
],
s.isInVersion && (s.transactions.push({
name: s.STRINGS.modifydebitlimit,
state: 'root.cards.maintenance.modifydebitlimit'
}), s.transactions.push({
name: s.STRINGS.modifydirectdebit,
state: 'root.cards.maintenance.modifydirectdebit'
}), s.transactions.push({
name: s.STRINGS.linkedAccounts,
state: 'root.cards.maintenance.managelinkedaccounts'
}), s.transactions.push({
name: s.STRINGS.cardReissuanceDamage,
state: 'root.cards.maintenance.cardreissuance'
})),
s.showOPT = f.getRole() != 10,
s
}
return __extends(t, n),
t.prototype.isCardWithReIssueExpenses = function (n) {
var t = n.substring(0, 6),
i = n.substring(0, 7),
r = n.substring(0, 8);
return ['5321920',
'5321921',
'5321922',
'5321923',
'5321924',
'5321925',
'5321926',
'5321927',
'5321928',
'5321929',
'4060010',
'4060011',
'4060012',
'4060013',
'4060014',
'4060015',
'4060016',
'4060017',
'4060018'].indexOf(i) > - 1 ? !0 : [
'40600190',
'40600191',
'40600192',
'40600193',
'40600194',
'40600195',
'40600196',
'40600197',
'40600198'
].indexOf(r) > - 1 ? !0 : '496099' == t ? !0 : !1
},
t.prototype.selectTransaction = function () {
this.stateService.go(this.selectedTransaction.state)
},
t.prototype.goToSelections = function () {
this.stateService.go('root.cards.maintenance.selection')
},
t.prototype.returnToLinkedAcc = function () {
this.stateService.go('root.cards.maintenance.managelinkedaccounts', {
}, {
reload: !0
})
},
t.$inject = [
'$scope',
'$injector',
'enquiryCards',
'userInfo',
'RoleService',
'$state',
'isInVersion'
],
t
}(n.wizards.WizardController),
i,
r,
u,
f,
e,
o,
s,
h,
c,
l;
n.cards.mainModule.controller('BaseCsrController', t);
i = function (t) {
function i(i, r, u, f, e, o, s, h, c, l, a, v, y, p) {
var w = t.call(this, i, r, o, s, h, c, l) || this,
b,
k;
return w.stringService = u,
w.cards = f,
w.StateHelperService = e,
w.enquiryCards = o,
w.userInfo = s,
w.roleService = h,
w.stateService = c,
w.isInVersion = l,
w.QueriesService = a,
w.postNewWindowService = v,
w.isAccessAllowed = y,
w.byPassValidationInVersion = p,
w.IsBusy = !1,
w.hasError = !1,
w.accessError = !1,
w.CardAnswers = [
],
w.byPassValidationInVersion && (w.isAccessAllowed = n.model.CardInsuranceAllowAccess.AllowAccess),
w.accessError = !n.utils.isUndefinedOrNull(w.checkForAccess(w.isAccessAllowed)),
w.questions = new n.model.CardInsuranceQuestions,
b = {
name: 'Alpha Credit Protection',
number: 1,
cost: '0.3%'
},
k = {
name: 'Alpha Credit Protection Plus',
number: 2,
cost: '0.7%'
},
w.InsuranceProgram = [
b,
k
],
w
}
return __extends(i, t),
i.prototype.checkForAccess = function (t) {
if (t == n.model.CardInsuranceAllowAccess.AllowAccess) return null;
switch (t) {
case n.model.CardInsuranceAllowAccess.Atm24Mode:
this.accessErrorMsg = this.STRINGS.paymenttypeavailability1 + ' ' + this.STRINGS.paymenttypeavailability2;
break;
case n.model.CardInsuranceAllowAccess.isNotKYCAuthed:
this.accessErrorMsg = this.STRINGS['CardInsurance.NoKYC'];
break;
case n.model.CardInsuranceAllowAccess.NoEmailOrPhone:
this.accessErrorMsg = this.STRINGS['CardInsurance.NoEmailPhone']
}
return this.accessErrorMsg
},
i.prototype.checkTrue = function (n) {
return n == !0
},
i.prototype.checkIfAllAnwsersAreTrue = function (n) {
var t = [
];
return n.forEach(function (n) {
n.index == 4 ? t.push(!0)  : t.push(n.value)
}),
t.every(this.checkTrue) && n.length == 6
},
i.prototype.initialiseSteps = function () {
var t = this,
i = [
],
r = 0,
f = {
templateUrl: 'Templates/Features/Cards/csr/card-insurance/step1',
title: '',
index: r++,
stateName: ''
},
u,
e;
return f.processStep = [
'qService',
'QueriesService',
function (n) {
var i = n.defer(),
r;
return t.IsBusy = !0,
r = t.checkIfAllAnwsersAreTrue(t.CardAnswers),
r ? (i.resolve(!0), t.IsBusy = !1)  : (i.reject('All answers are required to be true'), t.IsBusy = !1),
i.promise
}
],
i.push(f),
u = {
templateUrl: 'Templates/Features/Cards/csr/card-insurance/step2',
title: '',
index: r++,
stateName: ''
},
u.processStep = [
'qService',
'SecurityService',
function (i, r) {
var u = i.defer(),
f = {
CardNumber: t.card.BankProduct.Code,
InsuranceProgram: t.program.number.toString()
};
return r.updateCardInsuranceProgram(f).then(function (i) {
i.ResultCode == 0 ? (t.applicationResponse = i, u.resolve(!0))  : n.utils.isUndefinedOrNull(i.Error) || u.reject(i.Error.Message)
}).catch (function () {
u.reject('System Error | Update Insurance')
}),
u.promise
}
],
i.push(u),
e = {
templateUrl: 'Templates/Features/Cards/csr/card-insurance/step3',
title: '',
index: r++,
stateName: ''
},
i.push(e),
i
},
i.prototype.StoreAnswer = function (t, i) {
var u = this.CardAnswers.filter(function (n) {
return n.index == t
}) [0],
r;
if (!n.utils.isUndefinedOrNull(u)) {
this.CardAnswers.forEach(function (n) {
n.index == t && (n.value = i)
});
return
}
r = {
index: t,
value: i,
hasBeenAnswered: !0
};
this.CardAnswers.push(r)
},
i.prototype.HasBeenAnswered = function (t) {
var i = this.CardAnswers.filter(function (n) {
return n.index == t
}) [0];
return n.utils.isUndefinedOrNull(i) ? !1 : !0
},
i.prototype.getCardData = function () {
var r = this,
t = this,
i;
return t.IsBusy = !0,
t.hasError = !0,
i = {
CardNumber: t.card.BankProduct.Code,
ProductID: t.card.BankProduct.ProductID
},
t.QueriesService.getCardData(i).then(function (i) {
t.byPassValidationInVersion && (i.ResultCode = 0);
i.ResultCode == 0 ? (r.hasError = !1, n.utils.isUndefinedOrNull(i.InsuranceProgram) ? i.CardActivationFlag != 0 || i.AlreadyStolen ? (t.errorMessage = t.STRINGS['CardInsurance.NonAuthed'], t.IsBusy = !1)  : (t.HomeStreet = i.HomeStreet, t.HomeTown = i.HomeTown, t.HomeZipCode = i.HomeZipCode)  : (t.errorMessage = t.STRINGS['CardInsurance.AlreadyHave'], t.IsBusy = !1), t.IsBusy = !1)  : (t.errorMessage = n.utils.isUndefinedOrNull(i.Error) ? 'System Error | Card Data #1' : i.Error.Message, t.IsBusy = !1)
}).catch (function () {
t.errorMessage = 'System Error | Card Data #2';
t.IsBusy = !1
})
},
i.prototype.getCurrentTerms = function () {
var n = {
};
n.Parameters = JSON.stringify({
});
n.PDFRequestType = 71;
this.postNewWindowService(n, 'GetPdf', !1)
},
i.prototype.exportPDF = function () {
var n = {
};
return n.Parameters = JSON.stringify({
Card: this.card.BankProduct.Code,
CardOwner: '',
InsuranceProgram: this.program.name,
InsuranceProgramCost: this.program.number == 1 ? 0.3 : 0.5,
UserEmail: this.userInfo.Email,
MobilePhone: this.userInfo.MobilePhone
}),
n.PDFRequestType = 70,
n
},
i.$inject = [
'$scope',
'$injector',
'STRINGS',
'cards',
'StateHelperService',
'enquiryCards',
'userInfo',
'RoleService',
'$state',
'isInVersion',
'QueriesService',
'postNewWindowService',
'isAccessAllowed',
'byPassValidationInVersion'
],
i
}(t);
n.cards.mainModule.controller('CardInsuranceProgramController', i);
r = function (t) {
function i(n, i, r, u, f, e, o, s, h, c) {
var l = t.call(this, n, i, e, o, s, h, c) || this;
return l.scope = n,
l.$injector = i,
l.stringsService = r,
l.cards = u,
l.StateHelperService = f,
l.enquiryCards = e,
l.userInfo = o,
l.isInVersion = c,
l.useProfileProduct = !0,
l.model = {
},
l
}
return __extends(i, t),
i.prototype.initialiseSteps = function () {
var t = this,
i = [
],
r = 0,
f = {
templateUrl: 'Templates/Features/Cards/csr/activate-card/step1',
title: '',
index: r++,
stateName: ''
},
u,
e;
return f.processStep = [
'qService',
'ProductsService',
'QueriesService',
function (i, r, u) {
var e = i.defer(),
o,
f;
return t.useProfileProduct ? (t.model.CardNumber = t.card.Code, t.model.ProductID = t.card.BankProduct.ProductID, e.resolve(!0))  : (t.model.ProductID = n.constants.pci.defaultProductId, o = r.getProductInfo({
Code: t.model.CardNumber,
ProductID: t.model.ProductID,
Family: n.server.ProductTypeFamily.Card,
Scope: n.server.ProductTypeScope.Local
}), f = '', o.then(function (i) {
return i.ProductInfo && i.ProductInfo.length > 0 && n.utils.isUndefinedOrNullorWhiteSpace(i.ProductInfo[0].ErrorMessage) ? t.productInfo = i.ProductInfo[0] : f = i.ProductInfo && i.ProductInfo.length > 0 && !n.utils.isUndefinedOrNullorWhiteSpace(i.ProductInfo[0].ErrorMessage) ? i.ProductInfo[0].ErrorMessage : 'System error',
i
}).then(function () {
return u.getCardData({
CardNumber: t.model.CardNumber,
ProductID: t.model.ProductID
}).then(function (t) {
return n.utils.isUndefinedOrNull(t.Error) || (f = t.Error.Message),
t
})
}).then(function () {
n.utils.isUndefinedOrNullorWhiteSpace(f) ? e.resolve(!0)  : e.reject(f)
}).catch (function () {
e.reject('system error')
})),
e.promise
}
],
i.push(f),
u = {
templateUrl: 'Templates/Features/Cards/csr/activate-card/step2',
index: r++,
title: '',
stateName: ''
},
u.processStep = [
'SecurityService',
'qService',
function (i) {
var r = t.qService.defer();
return i.activateCard(t.model).then(function (i) {
if (i.ResultCode == 0) t.response = i,
r.resolve(!0);
 else {
var u = 'not ok';
n.utils.isUndefinedOrNull(i.Error) || (u = i.Error.Message);
r.reject(u)
}
}),
r.promise
}
],
i.push(u),
e = {
templateUrl: 'Templates/Features/Cards/csr/activate-card/step3',
index: r++,
title: '',
stateName: ''
},
i.push(e),
i
},
i.prototype.addCardToProfile = function () {
var i = this,
t = new n.model.AddProductViewModel;
t.product.BankProduct.Code = this.model.CardNumber;
t.product.CategoryGroupType = n.server.CategoryGroupType.CARD;
t.product.BankProduct.Uses = [
];
t.product.BankProduct.Details = [
];
i.StateHelperService.go(n.constants.stateNames.settingsAddCardInCardsState, {
productTypeFamily: 'card',
productTypeScope: 'local'
}, t)
},
i.$inject = [
'$scope',
'$injector',
'STRINGS',
'cards',
'StateHelperService',
'enquiryCards',
'userInfo',
'RoleService',
'$state',
'isInVersion'
],
i
}(t);
n.cards.mainModule.controller('ActivateCardController', r);
u = function (t) {
function i(n, i, r, u, f, e, o, s, h, c, l, a, v, y, p) {
var w = t.call(this, i, r, l, a, v, y, p) || this;
return w.state = n,
w.scope = i,
w.$injector = r,
w.stringsService = u,
w.isPINBySMSInVersion = f,
w.cards = e,
w.SecurityService = o,
w.branches = s,
w.otpEnabled = h,
w.QueriesService = c,
w.userInfo = a,
w.stateService = y,
w.isInVersion = p,
w.dateFormat = 'dd/MM/yyyy',
w.dateOptions = {
formatYear: 'yyyy',
startingDay: 1,
showWeeks: 'false',
maxMode: 'day'
},
w.hasExpenses = !1,
w.hasPinExpenses = !1,
w.sendPINBySMS = !1,
w.model = {
},
w.today = new Date,
w
}
return __extends(i, t),
i.prototype.goToProfile = function () {
this.state.go(n.constants.stateNames.profilePersonalState)
},
i.prototype.isReasonLoss = function () {
return !n.utils.isUndefinedOrNull(this.model.Stolen) && !this.model.Stolen
},
i.prototype.getCardData = function (t) {
var i = this,
r;
return i.IsBusy = !0,
r = t.Code,
i.model = {
},
i.model.ReIssueAddress = 0,
i.QueriesService.getCardData({
CardNumber: r,
ProductID: t.BankProduct.ProductID
}).then(function (t) {
if (t.ResultCode == 0) {
i.cardData = t;
var u = i.cardData.DeliveryStreet + i.cardData.DeliveryTown + i.cardData.DeliveryZipCode;
i.cardData.AlreadyStolen ? i.errorMessage = i.stringsService.alreadyStolenMsg1 + ' ' + r + ' ' + i.stringsService.alreadyStolenMsg2 : (!n.utils.isUndefinedOrNullorWhiteSpace(i.cardData.DeliveryStreet) && u.length >= 55 ? (i.deliveryAddress = i.cardData.DeliveryStreet.trim().split(' '), i.deliveryNumber = i.deliveryAddress[i.deliveryAddress.length - 1], i.deliveryStreet = i.deliveryAddress.slice(0, i.deliveryAddress.length - 1).join(' '), i.errorMessage = '')  : i.errorMessage = i.stringsService.wrongMailingAddress, i.isPINBySMSInVersion && (i.cardData.PinDeliveryMethod != '1' || n.utils.isUndefinedOrNullorWhiteSpace(i.cardData.MobileNumber) ? (i.mobileNumber = undefined, i.sendPINBySMS = !1)  : (i.mobileNumber = i.cardData.MobileNumber, i.sendPINBySMS = !0)))
} else i.errorMessage = n.utils.isUndefinedOrNull(t.Error) ? 'System error' : t.Error.Message;
i.IsBusy = !1
})
},
i.prototype.showExtraFees = function (n) {
this.hasExpenses = this.isCardWithReIssueExpenses(this.card.BankProduct.Code) && n;
this.hasPinExpenses = this.cardData.PinDeliveryMethod != '1' && n
},
i.prototype.initialiseSteps = function () {
var t = this,
i = [
],
r = 0,
f = {
templateUrl: 'Templates/Features/Cards/csr/card-loss/step1',
title: '',
index: r++,
stateName: ''
},
u,
e;
return f.processStep = [
'qService',
'PublicServiceProxy',
function (i, r) {
var u = t.qService.defer();
return (t.model.CardNumber = t.card.Code, t.model.ProductID = t.card.BankProduct.ProductID, t.cancellationDate = new Date, t.completeAddress = '', n.utils.isUndefinedOrNull(t.deliveryStreet) || (t.completeAddress += t.deliveryStreet + ' '), n.utils.isUndefinedOrNull(t.deliveryNumber) || (t.completeAddress += t.deliveryNumber + ', '), n.utils.isUndefinedOrNull(t.cardData.DeliveryTown) || (t.completeAddress += t.cardData.DeliveryTown + ', '), t.completeAddress += n.utils.isUndefinedOrNull(t.cardData.DeliveryZipCode) ? t.stringsService.greececapital : t.cardData.DeliveryZipCode + ', ' + t.stringsService.greececapital, t.model.ReIssueIfAllowed && t.model.ReIssueAddress == 0 && (t.model.StatementDeliveryCode = t.cardData.StatementDeliveryCode), t.otherBranch) ? (t.branch = undefined, r.getBranches({
}).then(function (i) {
if (i.ResultCode == 0) {
if (n.utils.isUndefinedOrNull(i.Branches)) return u.reject(t.STRINGS.systemError),
u.promise;
var r = i.Branches.filter(function (n) {
return n.Code == t.model.BranchCode
});
return r.length <= 0 ? (u.reject(t.stringsService.branch + t.model.BranchCode + t.stringsService.doesntExist), u.promise)  : (u.resolve(!0), u.promise)
}
return u.reject(i.Error.Message),
u.promise
}))  : (n.utils.isUndefinedOrNull(t.branch) || (t.model.BranchCode = t.branch.Code), u.resolve(!0), u.promise)
}
],
i.push(f),
u = {
templateUrl: 'Templates/Features/Cards/csr/card-loss/step2',
index: r++,
title: '',
stateName: ''
},
u.processStep = [
'SecurityService',
'qService',
function (i) {
var r = t.qService.defer();
return i.deactivateCard(t.model).then(function (i) {
if (i.ResultCode == 0) t.response = i,
r.resolve(!0);
 else {
var u = 'not ok';
n.utils.isUndefinedOrNull(i.Error) || (u = i.Error.Message);
r.reject(u)
}
}),
r.promise
}
],
i.push(u),
e = {
templateUrl: 'Templates/Features/Cards/csr/card-loss/step3',
index: r++,
title: '',
stateName: ''
},
i.push(e),
i
},
i.$inject = [
'$state',
'$scope',
'$injector',
'STRINGS',
'isPINBySMSInVersion',
'cards',
'SecurityService',
'branches',
'otpEnabled',
'QueriesService',
'enquiryCards',
'userInfo',
'RoleService',
'$state',
'isInVersion'
],
i
}(t);
n.cards.mainModule.controller('CardLossController', u);
f = function (t) {
function i(n, i, r, u, f, e, o, s, h, c, l, a, v) {
var y = t.call(this, n, i, h, c, l, a, v) || this;
return y.scope = n,
y.$injector = i,
y.stringsService = r,
y.isPINBySMSInVersion = u,
y.cards = f,
y.StateHelperService = e,
y.branches = o,
y.QueriesService = s,
y.userInfo = c,
y.isInVersion = v,
y.sendPINBySMS = !1,
y.hasExpenses = !1,
y.useProfileProduct = !0,
y.model = {
},
y.ReIssueAddress = 0,
y
}
return __extends(i, t),
i.prototype.getCardData = function (t) {
var i = this;
return i.IsBusy = !0,
i.model.ProductID = n.constants.pci.defaultProductId,
i.useProfileProduct && (i.model.CardNumber = t.Code, i.model.ProductID = t.BankProduct.ProductID),
i.currentCardDataCardNumber = i.model.CardNumber,
i.QueriesService.getCardData({
CardNumber: i.model.CardNumber,
ProductID: i.model.ProductID
}).then(function (t) {
if (t.ResultCode == 0) {
i.cardData = t;
i.hasExpenses = i.cardData.PinDeliveryMethod !== '1';
i.errorMessage = n.utils.isUndefinedOrNullorWhiteSpace(i.cardData.MobileNumber) && n.utils.isUndefinedOrNullorWhiteSpace(i.cardData.DeliveryStreet) ? i.stringsService.invalidContactDetails : '';
i.isPINBySMSInVersion && (i.cardData.PinDeliveryMethod != '1' || n.utils.isUndefinedOrNullorWhiteSpace(i.cardData.MobileNumber) ? (i.model.MobileNumber = undefined, i.sendPINBySMS = !1)  : (i.model.MobileNumber = i.cardData.MobileNumber, i.sendPINBySMS = !0));
var r = i.cardData.DeliveryStreet + i.cardData.DeliveryTown + i.cardData.DeliveryZipCode;
!n.utils.isUndefinedOrNullorWhiteSpace(i.cardData.DeliveryStreet) && r.length >= 55 ? (i.deliveryAddress = i.cardData.DeliveryStreet.trim().split(' '), i.deliveryNumber = i.deliveryAddress[i.deliveryAddress.length - 1], i.deliveryStreet = i.deliveryAddress.slice(0, i.deliveryAddress.length - 1).join(' '))  : (i.deliveryAddress = undefined, i.deliveryNumber = undefined, i.deliveryStreet = undefined, i.sendPINBySMS || (i.errorMessage = i.stringsService.wrongMailingAddress))
} else i.errorMessage = n.utils.isUndefinedOrNull(t.Error) ? 'System error' : t.Error.Message;
i.IsBusy = !1
})
},
i.prototype.deleteCardData = function () {
this.model.CardNumber = undefined;
this.card = undefined;
this.cardData = undefined
},
i.prototype.initialiseSteps = function () {
var t = this,
i = [
],
r = 0,
f = {
templateUrl: 'Templates/Features/Cards/csr/change-pin/step1',
title: '',
index: r++,
stateName: ''
},
u,
e;
return f.processStep = [
'qService',
'ProductsService',
'STRINGS',
'PublicServiceProxy',
function (i, r, u, f) {
var e = i.defer(),
o = t.otherBranch ? f.getBranches({
})  : i.when({
ResultCode: 0
});
return o.then(function (i) {
if (i.ResultCode == 0) {
if (t.otherBranch) {
if (n.utils.isUndefinedOrNull(i.Branches)) return e.reject(t.STRINGS.systemError),
e.promise;
var f = i.Branches.filter(function (n) {
return n.Code == t.model.BranchCode
});
if (f.length <= 0 || f[0].Code == '100') return e.reject(t.stringsService.branch + t.model.BranchCode + t.stringsService.doesntExist),
e.promise
} else t.ReIssueAddress == 1 && (t.model.BranchCode = t.branch.Code);
if (t.ReIssueAddress == 0 && (t.completeAddress = t.deliveryStreet + ' ' + t.deliveryNumber + ', ' + t.cardData.DeliveryTown + ', ' + t.cardData.DeliveryZipCode + ', ' + u.greececapital), t.useProfileProduct) e.resolve(!0);
 else return r.getProductInfo({
Code: t.model.CardNumber,
ProductID: t.model.ProductID,
Family: n.server.ProductTypeFamily.Card,
Scope: n.server.ProductTypeScope.Local
}).then(function (i) {
return i.ProductInfo && i.ProductInfo.length > 0 && n.utils.isUndefinedOrNullorWhiteSpace(i.ProductInfo[0].ErrorMessage) ? (t.productInfo = i.ProductInfo[0], e.resolve(!0))  : i.ProductInfo && i.ProductInfo.length > 0 && !n.utils.isUndefinedOrNullorWhiteSpace(i.ProductInfo[0].ErrorMessage) ? e.reject(i.ProductInfo[0].ErrorMessage)  : e.reject(t.stringsService.systemError),
e.promise
})
} else e.reject(i.Error.Message);
return e.promise
})
}
],
i.push(f),
u = {
templateUrl: 'Templates/Features/Cards/csr/change-pin/step2',
index: r++,
title: '',
stateName: ''
},
u.processStep = [
'SecurityService',
'qService',
function (i) {
var r = t.qService.defer();
return i.reissueCardPin(t.model).then(function (i) {
if (i.ResultCode == 0) t.response = i,
r.resolve(!0);
 else {
var u = 'not ok';
n.utils.isUndefinedOrNull(i.Error) || (u = i.Error.Message);
r.reject(u)
}
}),
r.promise
}
],
i.push(u),
e = {
templateUrl: 'Templates/Features/Cards/csr/change-pin/step3',
index: r++,
title: '',
stateName: ''
},
i.push(e),
i
},
i.prototype.addCardToProfile = function () {
var i = this,
t = new n.model.AddProductViewModel;
t.product.BankProduct.Code = this.model.CardNumber;
t.product.CategoryGroupType = n.server.CategoryGroupType.CARD;
t.product.BankProduct.Uses = [
];
t.product.BankProduct.Details = [
];
i.StateHelperService.go(n.constants.stateNames.settingsAddCardInCardsState, {
productTypeFamily: 'card',
productTypeScope: 'local'
}, t)
},
i.$inject = [
'$scope',
'$injector',
'STRINGS',
'isPINBySMSInVersion',
'cards',
'StateHelperService',
'branches',
'QueriesService',
'enquiryCards',
'userInfo',
'RoleService',
'$state',
'isInVersion'
],
i
}(t);
n.cards.mainModule.controller('ChangePinController', f);
e = function (t) {
function i(n, i, r, u, f, e, o, s, h, c, l) {
var a = t.call(this, n, i, o, s, h, c, l) || this;
return a.scope = n,
a.$injector = i,
a.stringsService = r,
a.cards = u,
a.QueriesService = f,
a.StateHelperService = e,
a.userInfo = s,
a.isInVersion = l,
a.useProfileProduct = !0,
a.model = {
},
a
}
return __extends(i, t),
i.prototype.getCardData = function (t, i) {
var r = this;
return r.IsBusy = !0,
r.model.ProductID = n.constants.pci.defaultProductId,
r.useProfileProduct && (r.model.ProductID = i.BankProduct.ProductID),
r.currentCardDataCardNumber = r.model.CardNumber = t,
r.QueriesService.getCardData({
CardNumber: t,
ProductID: r.model.ProductID
}).then(function (t) {
t.ResultCode == 0 ? (r.cardData = t, r.errorMessage = '')  : r.errorMessage = n.utils.isUndefinedOrNull(t.Error) ? 'System error' : t.Error.Message;
r.IsBusy = !1
})
},
i.prototype.deleteCardData = function () {
this.model.CardNumber = undefined;
this.card = undefined;
this.cardData = undefined
},
i.prototype.initialiseSteps = function () {
var t = this,
i = [
],
r = 0,
f = {
templateUrl: 'Templates/Features/Cards/csr/withdraw-limit/step1',
title: '',
index: r++,
stateName: ''
},
u,
e;
return f.processStep = [
'qService',
'ProductsService',
function (i, r) {
var u = i.defer(),
f;
if (t.useProfileProduct) u.resolve(!0);
 else return f = r.getProductInfo({
Code: t.model.CardNumber,
ProductID: t.model.ProductID,
Family: n.server.ProductTypeFamily.Card,
Scope: n.server.ProductTypeScope.Local
}),
f.then(function (i) {
if (i.ProductInfo && i.ProductInfo.length > 0 && n.utils.isUndefinedOrNullorWhiteSpace(i.ProductInfo[0].ErrorMessage)) {
t.productInfo = i.ProductInfo[0];
var r = n.constants.general.dinersCardsTypeIdList.filter(function (n) {
return n == t.productInfo.ProductTypeID
});
r.length > 0 ? (t.errorMessage = t.STRINGS.transactionNotEligible, u.reject(t.STRINGS.transactionNotEligible))  : u.resolve(!0)
} else i.ProductInfo && i.ProductInfo.length > 0 && !n.utils.isUndefinedOrNullorWhiteSpace(i.ProductInfo[0].ErrorMessage) ? u.reject(i.ProductInfo[0].ErrorMessage)  : u.reject('System error')
});
return u
}
],
i.push(f),
u = {
templateUrl: 'Templates/Features/Cards/csr/withdraw-limit/step2',
index: r++,
title: '',
stateName: ''
},
u.processStep = [
'SecurityService',
'qService',
function (i) {
var r = t.qService.defer();
return i.changeCardLimit(t.model).then(function (i) {
i.ResultCode == 0 ? (t.response = i, r.resolve(!0))  : (t.errorMessage = 'not ok', n.utils.isUndefinedOrNull(i.Error) || (t.errorMessage = i.Error.Message), r.reject(t.errorMessage))
}),
r.promise
}
],
i.push(u),
e = {
templateUrl: 'Templates/Features/Cards/csr/withdraw-limit/step3',
index: r++,
title: '',
stateName: ''
},
i.push(e),
i
},
i.prototype.addCardToProfile = function () {
var i = this,
t = new n.model.AddProductViewModel;
t.product.BankProduct.Code = this.model.CardNumber;
t.product.CategoryGroupType = n.server.CategoryGroupType.CARD;
t.product.BankProduct.Uses = [
];
t.product.BankProduct.Details = [
];
i.StateHelperService.go(n.constants.stateNames.settingsAddCardInCardsState, {
productTypeFamily: 'card',
productTypeScope: 'local'
}, t)
},
i.$inject = [
'$scope',
'$injector',
'STRINGS',
'cards',
'QueriesService',
'StateHelperService',
'enquiryCards',
'userInfo',
'RoleService',
'$state',
'isInVersion'
],
i
}(t);
n.cards.mainModule.controller('WithdrawLimitController', e);
o = function (t) {
function i(n, i, r, u, f, e, o, s, h, c, l, a, v) {
var y = t.call(this, n, i, o, s, h, c, l) || this;
return y.scope = n,
y.$injector = i,
y.stringsService = r,
y.cards = u,
y.QueriesService = f,
y.StateHelperService = e,
y.userInfo = s,
y.isInVersion = l,
y.datesAndOnline = a,
y.branches = v,
y.hasExpenses = !1,
y.model = {
},
y.datesAndOnline.ResultCode == 0 ? y.Online = a.OnLine : (y.Model.HasErrors = !0, y.errorMessage = a.Error.Message),
y
}
return __extends(i, t),
i.prototype.getCardData = function (t) {
var i = this;
return i.IsBusy = !0,
i.model = {
},
i.ReIssueAddress = 0,
i.QueriesService.getCardData({
CardNumber: t.Code,
ProductID: t.BankProduct.ProductID
}).then(function (r) {
if (r.ResultCode == 0) {
i.currentCardDataCardNumber = t.Code;
i.cardData = r;
i.hasExpenses = i.isCardWithReIssueExpenses(t.Code);
var u = i.cardData.DeliveryStreet + i.cardData.DeliveryTown + i.cardData.DeliveryZipCode;
!n.utils.isUndefinedOrNullorWhiteSpace(i.cardData.DeliveryStreet) && u.length >= 55 ? (i.deliveryAddress = i.cardData.DeliveryStreet.trim().split(' '), i.deliveryNumber = i.deliveryAddress[i.deliveryAddress.length - 1], i.deliveryStreet = i.deliveryAddress.slice(0, i.deliveryAddress.length - 1).join(' '), i.errorMessage = '', i.today = new Date, i.model.CardNumber = t.Code)  : i.errorMessage = i.stringsService.wrongMailingAddress
} else i.errorMessage = n.utils.isUndefinedOrNull(r.Error) ? i.stringsService.systemError : r.Error.Message;
i.IsBusy = !1
}),
function () {
i.errorMessage = i.stringsService.systemError;
i.IsBusy = !1
}
},
i.prototype.initialiseSteps = function () {
var t = this,
i = [
],
r = 0,
f = {
templateUrl: 'Templates/Features/Cards/csr/reissue-card/step1',
title: '',
index: r++,
stateName: ''
},
u,
e;
return f.processStep = [
'qService',
'PublicServiceProxy',
function (i, r) {
var u = t.qService.defer();
return (t.ReIssueAddress != 1 || t.otherBranch || n.utils.isUndefinedOrNull(t.branch) || (t.model.BranchCode = t.branch.Code), t.model.ProductID = t.card.BankProduct.ProductID, t.completeAddress = '', t.ReIssueAddress == 0 && (n.utils.isUndefinedOrNull(t.deliveryStreet) || (t.completeAddress += t.deliveryStreet + ' '), n.utils.isUndefinedOrNull(t.deliveryNumber) || (t.completeAddress += t.deliveryNumber + ', '), n.utils.isUndefinedOrNull(t.cardData.DeliveryTown) || (t.completeAddress += t.cardData.DeliveryTown + ', '), t.completeAddress += n.utils.isUndefinedOrNull(t.cardData.DeliveryZipCode) ? t.stringsService.greececapital : t.cardData.DeliveryZipCode + ', ' + t.stringsService.greececapital), t.otherBranch) ? (t.branch = undefined, r.getBranches({
}).then(function (i) {
if (i.ResultCode == 0) {
if (n.utils.isUndefinedOrNull(i.Branches)) return u.reject(t.STRINGS.systemError),
u.promise;
var r = i.Branches.filter(function (n) {
return n.Code == t.model.BranchCode
});
return r.length <= 0 || r[0].Code == '100' ? (u.reject(t.stringsService.wrongcode), u.promise)  : (u.resolve(!0), u.promise)
}
return u.reject(i.Error.Message),
u.promise
}))  : (u.resolve(!0), u.promise)
}
],
i.push(f),
u = {
templateUrl: 'Templates/Features/Cards/csr/reissue-card/step2',
index: r++,
title: '',
stateName: ''
},
u.processStep = [
'SecurityService',
'qService',
function (i) {
var r = t.qService.defer();
return i.reissueCard(t.model).then(function (i) {
i.ResultCode == 0 ? (t.response = i, r.resolve(!0))  : (t.errorMessage = 'not ok', n.utils.isUndefinedOrNull(i.Error) || (t.errorMessage = i.Error.Message), r.reject(t.errorMessage))
}),
r.promise
}
],
i.push(u),
e = {
templateUrl: 'Templates/Features/Cards/csr/reissue-card/step3',
index: r++,
title: '',
stateName: ''
},
i.push(e),
i
},
i.$inject = [
'$scope',
'$injector',
'STRINGS',
'cards',
'QueriesService',
'StateHelperService',
'enquiryCards',
'userInfo',
'RoleService',
'$state',
'isInVersion',
'datesAndOnline',
'branches'
],
i
}(t);
n.cards.mainModule.controller('CardReissuanceController', o);
s = function (t) {
function i(n, i, r, u, f, e, o, s, h, c, l, a) {
var v = t.call(this, n, i, o, s, h, c, l) || this;
return v.scope = n,
v.$injector = i,
v.stringsService = r,
v.cards = u,
v.QueriesService = f,
v.StateHelperService = e,
v.userInfo = s,
v.isInVersion = l,
v.ProfileProductsService = a,
v.model = {
},
v.cancelPeriod = 'perm',
v
}
return __extends(i, t),
i.prototype.getCardData = function (t) {
var i = this,
r;
return i.errorMessage = '',
i.IsBusy = !0,
r = t.Code,
i.model = {
},
i.QueriesService.getCardData({
CardNumber: t.BankProduct.Code,
ProductID: t.BankProduct.ProductID
}).then(function (r) {
if (r.ResultCode == 0) {
i.cardData = r;
i.activated = r.StandingOrderActiveFlag;
i.model.StandingOrderCode = r.StandingOrderCode;
var u = i.ProfileProductsService.getCachedCardBalance(t);
u.then(function (r) {
i.card = r;
i.model.BankAccountNumber = t.Balance.BankAccount;
(n.utils.isUndefinedOrNullorWhiteSpace(i.model.BankAccountNumber) || parseInt(i.model.BankAccountNumber) == 0) && !i.activated ? (i.Model.HasErrors = !0, i.errorMessage = i.STRINGS.primaryaccinfo)  : i.currentCardDataCardNumber = t.BankProduct.Code
});
i.activated ? (i.mode = 'modify', i.model.StandingOrderActiveFlag = '1')  : (i.model.StandingOrderCode = 'F', i.mode = undefined)
} else i.errorMessage = n.utils.isUndefinedOrNull(r.Error) ? i.stringsService.systemError : r.Error.Message;
i.IsBusy = !1
}),
function () {
i.errorMessage = i.stringsService.systemError;
i.IsBusy = !1
}
},
i.prototype.initialiseSteps = function () {
var t = this,
i = [
],
r = 0,
f = {
templateUrl: 'Templates/Features/Cards/csr/direct-debit/step1',
title: '',
index: r++,
stateName: ''
},
u,
e;
return f.processStep = [
'qService',
function (n) {
var i = n.defer();
return t.model.CardNumber = t.card.Code,
t.model.ProductID = t.card.BankProduct.ProductID,
t.model.StandingOrderActiveFlag = !t.activated || t.mode == 'modify' ? '1' : '0',
t.mode != 'cancel' ? t.cancelPeriod = undefined : (t.model.CancelPeriod = t.cancelPeriod == 'perm' ? '0' : '1', t.model.StandingOrderCode = undefined),
i.resolve(!0),
i.promise
}
],
i.push(f),
u = {
templateUrl: 'Templates/Features/Cards/csr/direct-debit/step2',
index: r++,
title: '',
stateName: ''
},
u.processStep = [
'SecurityService',
'qService',
function (i, r) {
var u = r.defer();
return i.updateCardStandingOrder(t.model).then(function (i) {
i.ResultCode == 0 ? (t.response = i, t.today = new Date, t.card.Balance = undefined, u.resolve(!0))  : (t.Model.ErrorMessage = 'not ok', n.utils.isUndefinedOrNull(i.Error) || (t.Model.HasErrors = !0, t.Model.ErrorMessage = i.Error.Message), u.reject(t.Model.ErrorMessage))
}),
u.promise
}
],
i.push(u),
e = {
templateUrl: 'Templates/Features/Cards/csr/direct-debit/step3',
index: r++,
title: '',
stateName: ''
},
i.push(e),
i
},
i.$inject = [
'$scope',
'$injector',
'STRINGS',
'cards',
'QueriesService',
'StateHelperService',
'enquiryCards',
'userInfo',
'RoleService',
'$state',
'isInVersion',
'ProfileProductsService'
],
i
}(t);
n.cards.mainModule.controller('ModifyDirectDebitController', s);
h = function (t) {
function i(n, i, r, u, f, e, o, s, h, c, l, a, v, y, p, w) {
var b = t.call(this, n, i, o, s, h, c, l) || this;
return b.scope = n,
b.$injector = i,
b.stringsService = r,
b.cards = u,
b.QueriesService = f,
b.StateHelperService = e,
b.userInfo = s,
b.isInVersion = l,
b.ProfileProductsService = a,
b.accounts = v,
b.modal = y,
b.SecurityService = p,
b.availableAccounts = w,
b.isLastAccount = !1,
b.isRetail = h.IsRetail(),
b.model = {
},
b
}
return __extends(i, t),
i.prototype.getCardData = function (t) {
var i = this;
return i.errorMessage = '',
i.IsBusy = !0,
i.card = t,
i.selected = !1,
i.model = {
},
i.QueriesService.getCardData({
CardNumber: i.card.Code,
ProductID: i.card.BankProduct.ProductID
}).then(function (t) {
t.ResultCode == 0 ? (i.cardData = t, i.currentCardDataCardNumber = i.card.Code, i.selected = !1, i.availableAccounts = i.accounts.slice(), !n.utils.isUndefinedOrNull(t.BankAccounts) && t.BankAccounts.length > 0 && (t.BankAccounts.forEach(function (n) {
i.availableAccounts = i.availableAccounts.filter(function (t) {
return t.Code != n.Number
})
}), t.BankAccounts.length == 1 && (i.isLastAccount = !0)))  : i.errorMessage = n.utils.isUndefinedOrNull(t.Error) ? i.stringsService.systemError : t.Error.Message;
i.IsBusy = !1
}),
function () {
i.errorMessage = i.stringsService.systemError;
i.IsBusy = !1
}
},
i.prototype.updateCardAccount = function (t, i) {
if (i != 2 || t.OwnerCode != 'P') {
var r = this;
return this.IsBusy = !0,
this.model = {
},
this.model.BankAccountNumber = t.Number,
this.model.CardNumber = this.card.Code,
this.model.ProductID = this.card.BankProduct.ProductID,
this.model.PrimaryFlag = '1',
i == 0 && (this.model.PrimaryFlag = t.OwnerCode == 'P' ? '1' : '0', this.model.IsCashCardWithOneAccount = this.isLastAccount),
this.model.Action = i.toString(),
this.modalsuccess = !1,
this.modalMessage = '',
r.SecurityService.updateCardBankAccount(r.model).then(function (n) {
n.ResultCode == 0 ? (r.modalsuccess = !0, r.card.Balance = undefined)  : r.modalMessage = n.Error.Message
}).finally (function () {
r.modalsuccess ? (r.currentCardDataCardNumber = undefined, r.QueriesService.getCardData({
CardNumber: r.card.Code,
ProductID: r.card.BankProduct.ProductID
}).then(function (t) {
t.ResultCode == 0 ? (r.cardData = t, r.currentCardDataCardNumber = r.card.Code, i == 0 && (t.BankAccounts.length == 1 && (r.isLastAccount = !0), r.availableAccounts = r.accounts.slice(), !n.utils.isUndefinedOrNull(t.BankAccounts) && t.BankAccounts.length > 0 && t.BankAccounts.forEach(function (n) {
r.availableAccounts = r.availableAccounts.filter(function (t) {
return t.Code != n.Number
})
})))  : r.errorMessage = n.utils.isUndefinedOrNull(t.Error) ? r.stringsService.systemError : t.Error.Message;
r.IsBusy = !1
}), function () {
r.errorMessage = r.stringsService.systemError;
r.IsBusy = !1
})  : r.IsBusy = !1;
r.modal.open({
templateUrl: 'Templates/common/operationStatusModal',
controller: 'OperationStatusModalController as vm',
modalClass: 'custom',
size: 'lg',
backdrop: 'static',
resolve: {
model: function () {
return {
Success: r.modalsuccess,
ErrorMessage: r.modalMessage
}
},
referer: function () {
return null
},
isRetail: function () {
return r.isRetail
}
}
})
})
}
},
i.prototype.initialiseSteps = function () {
var t = this,
i = [
],
r = 0,
f = {
templateUrl: 'Templates/Features/Cards/csr/linked-accounts/step1',
title: '',
index: r++,
stateName: ''
},
u,
e;
return f.processStep = [
'qService',
function (n) {
var i = n.defer();
return t.model.CardNumber = t.card.Code,
t.model.ProductID = t.card.BankProduct.ProductID,
t.model.Action = '1',
t.model.PrimaryFlag = t.cardData.BankAccounts.length > 0 ? '0' : '1',
t.model.BankAccountNumber = t.account.Code,
i.resolve(!0),
i.promise
}
],
i.push(f),
u = {
templateUrl: 'Templates/Features/Cards/csr/linked-accounts/step2',
index: r++,
title: '',
stateName: ''
},
u.processStep = [
'SecurityService',
'qService',
function (i, r) {
var u = r.defer();
return i.updateCardBankAccount(t.model).then(function (i) {
i.ResultCode == 0 ? (t.response = i, t.today = new Date, t.model.PrimaryFlag == '1' && (t.card.Balance = undefined), u.resolve(!0))  : (t.errorMessage = 'not ok', n.utils.isUndefinedOrNull(i.Error) || (t.errorMessage = i.Error.Message), u.reject(t.errorMessage))
}),
u.promise
}
],
i.push(u),
e = {
templateUrl: 'Templates/Features/Cards/csr/linked-accounts/step3',
index: r++,
title: '',
stateName: ''
},
i.push(e),
i
},
i.$inject = [
'$scope',
'$injector',
'STRINGS',
'cards',
'QueriesService',
'StateHelperService',
'enquiryCards',
'userInfo',
'RoleService',
'$state',
'isInVersion',
'ProfileProductsService',
'accounts',
'$modal',
'SecurityService'
],
i
}(t);
n.cards.mainModule.controller('ManageLinkedAccountsController', h);
c = function (t) {
function i(n, i, r, u, f, e, o, s, h, c, l, a) {
var v = t.call(this, n, i, o, s, h, c, l) || this;
return v.scope = n,
v.$injector = i,
v.stringsService = r,
v.cards = u,
v.QueriesService = f,
v.StateHelperService = e,
v.userInfo = s,
v.isInVersion = l,
v.ProfileProductsService = a,
v.model = {
},
v
}
return __extends(i, t),
i.prototype.getCardData = function (t) {
var i = this;
return i.Model.ErrorMessage = '',
i.IsBusy = !0,
i.model = {
},
i.model.CardNumber = t.Code,
i.QueriesService.getCardData({
CardNumber: t.BankProduct.Code,
ProductID: t.BankProduct.ProductID
}).then(function (t) {
t.ResultCode == 0 ? (i.cardData = t, i.currentCardDataCardNumber = i.model.CardNumber)  : i.errorMessage = n.utils.isUndefinedOrNull(t.Error) ? i.stringsService.systemError : t.Error.Message;
i.IsBusy = !1
}),
function () {
i.errorMessage = i.stringsService.systemError;
i.IsBusy = !1
}
},
i.prototype.initialiseSteps = function () {
var t = this,
i = [
],
r = 0,
f = {
templateUrl: 'Templates/Features/Cards/csr/debit-card-limit/step1',
title: '',
index: r++,
stateName: ''
},
u,
e;
return f.processStep = [
'qService',
function (n) {
var i = n.defer();
return t.model.ProductID = t.card.BankProduct.ProductID,
i.resolve(!0),
i.promise
}
],
i.push(f),
u = {
templateUrl: 'Templates/Features/Cards/csr/debit-card-limit/step2',
index: r++,
title: '',
stateName: ''
},
u.processStep = [
'SecurityService',
'qService',
function (i, r) {
var u = r.defer();
return i.updateCardSpendingLimit(t.model).then(function (i) {
i.ResultCode == 0 ? (t.response = i, t.today = new Date, u.resolve(!0))  : (t.errorMessage = 'not ok', n.utils.isUndefinedOrNull(i.Error) || (t.errorMessage = i.Error.Message), u.reject(t.errorMessage))
}),
u.promise
}
],
i.push(u),
e = {
templateUrl: 'Templates/Features/Cards/csr/debit-card-limit/step3',
index: r++,
title: '',
stateName: ''
},
i.push(e),
i
},
i.$inject = [
'$scope',
'$injector',
'STRINGS',
'cards',
'QueriesService',
'StateHelperService',
'enquiryCards',
'userInfo',
'RoleService',
'$state',
'isInVersion',
'ProfileProductsService'
],
i
}(t);
n.cards.mainModule.controller('ModifyDebitLimitController', c);
l = function (t) {
function i(n, i, r, u, f, e, o, s, h, c, l, a, v, y) {
var p = t.call(this, n, i, o, s, h, c, l) || this;
return p.scope = n,
p.$injector = i,
p.stringsService = r,
p.cards = u,
p.QueriesService = f,
p.StateHelperService = e,
p.userInfo = s,
p.isInVersion = l,
p.ProfileProductsService = a,
p.datesAndOnline = v,
p.branches = y,
p.model = {
},
p.datesAndOnline.ResultCode == 0 ? p.Online = v.OnLine : (p.Model.HasErrors = !0, p.errorMessage = v.Error.Message),
p
}
return __extends(i, t),
i.prototype.getCardData = function (t) {
var i = this,
r;
return i.errorMessage = '',
i.IsBusy = !0,
r = t.Code,
i.model = {
},
i.QueriesService.getCardData({
CardNumber: t.BankProduct.Code,
ProductID: t.BankProduct.ProductID
}).then(function (t) {
t.ResultCode == 0 ? (i.cardData = t, i.model.StatementDeliveryCode = n.utils.isUndefinedOrNull(t.StatementDeliveryCode) ? 'L' : t.StatementDeliveryCode, i.model.CardDeliveryAddressCode = n.utils.isUndefinedOrNull(t.CardDeliveryCode) ? 'L' : t.CardDeliveryCode, n.utils.isUndefinedOrNull(i.cardData.DeliveryStreet) ? i.disableDelivery = !0 : (i.disableDelivery = !1, i.completeDeliveryAddress = i.cardData.DeliveryStreet.trim() + ', ' + i.cardData.DeliveryTown.trim() + ', ' + i.cardData.DeliveryZipCode), n.utils.isUndefinedOrNull(i.cardData.HomeStreet) ? i.disableHome = !0 : (i.disableHome = !1, i.completeHomeAddress = i.cardData.HomeStreet.trim() + ', ' + i.cardData.HomeTown.trim() + ', ' + i.cardData.HomeZipCode), n.utils.isUndefinedOrNull(i.cardData.BusinessStreet) ? i.disableWork = !0 : (i.disableWork = !1, i.completeBusinessAddress = i.cardData.BusinessStreet.trim() + ', ' + i.cardData.BusinessTown.trim() + ', ' + i.cardData.BusinessZipCode))  : i.errorMessage = n.utils.isUndefinedOrNull(t.Error) ? i.stringsService.systemError : t.Error.Message;
i.IsBusy = !1
}),
function () {
i.errorMessage = i.stringsService.systemError;
i.IsBusy = !1
}
},
i.prototype.initialiseSteps = function () {
var t = this,
i = [
],
r = 0,
f = {
templateUrl: 'Templates/Features/Cards/csr/mailing-address/step1',
title: '',
index: r++,
stateName: ''
},
u,
e;
return f.processStep = [
'qService',
'PublicServiceProxy',
function (i, r) {
var u = i.defer();
if (t.model.CardNumber = t.card.Code, t.model.ProductID = t.card.BankProduct.ProductID, t.mode == 0) t.model.CardDeliveryAddressCode = undefined,
t.model.AddressStatementDelivery = t.model.PostCodeStatementDelivery = t.model.TownStatementDelivery = undefined;
 else if (t.mode == 2 && (t.model.StatementDeliveryCode = undefined, t.model.AddressStatementDelivery = t.model.PostCodeStatementDelivery = t.model.TownStatementDelivery = undefined, t.model.CardDeliveryAddressCode == 'B')) {
if (t.otherBranch) return t.branch = undefined,
r.getBranches({
}).then(function (i) {
if (i.ResultCode == 0) {
if (n.utils.isUndefinedOrNull(i.Branches)) return u.reject(t.STRINGS.systemError),
u.promise;
var r = i.Branches.filter(function (n) {
return n.Code == t.model.CardDeliveryBranchCode
});
return r.length <= 0 || r[0].Code == '100' ? (u.reject(t.stringsService.wrongcode), u.promise)  : (u.resolve(!0), u.promise)
}
return u.reject(i.Error.Message),
u.promise
});
t.model.CardDeliveryBranchCode = t.branch.Code
}
return u.resolve(!0),
u.promise
}
],
i.push(f),
u = {
templateUrl: 'Templates/Features/Cards/csr/mailing-address/step2',
index: r++,
title: '',
stateName: ''
},
u.processStep = [
'SecurityService',
'qService',
function (i, r) {
var u = r.defer();
return i.updateCardDeliveryAddress(t.model).then(function (i) {
i.ResultCode == 0 ? (t.response = i, t.today = new Date, u.resolve(!0))  : (t.Model.ErrorMessage = 'not ok', n.utils.isUndefinedOrNull(i.Error) || (t.Model.HasErrors = !0, t.Model.ErrorMessage = i.Error.Message), u.reject(t.Model.ErrorMessage))
}),
u.promise
}
],
i.push(u),
e = {
templateUrl: 'Templates/Features/Cards/csr/mailing-address/step3',
index: r++,
title: '',
stateName: ''
},
i.push(e),
i
},
i.$inject = [
'$scope',
'$injector',
'STRINGS',
'cards',
'QueriesService',
'StateHelperService',
'enquiryCards',
'userInfo',
'RoleService',
'$state',
'isInVersion',
'ProfileProductsService',
'datesAndOnline',
'branches'
],
i
}(t);
n.cards.mainModule.controller('ModifyMailingAddressController', l)
}) (t = n.cards || (n.cards = {
}))
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(),
function (n) {
var t;
(function (t) {
var e = function (t) {
function i(n, i, r, u, f) {
var e = t.call(this, n) || this;
return e.isInVersion = n,
e.isPINBySMSInVersion = i,
e.stateService = r,
e.newReloadKey = uuid.v4(),
e.IsInVersion && (f === r.current.name ? e.moveToChild(u)  : 'uid' in r.params && (e.newReloadKey = r.params.uid)),
e
}
return __extends(i, t),
i.prototype.reloadKeyForNewRequest = function () {
this.newReloadKey = uuid.v4()
},
i.prototype.moveToChild = function (t) {
null != t && t.length > 0 ? this.stateService.go(n.constants.stateNames.debitCardManagement)  : this.stateService.go(n.constants.stateNames.debitCardNew, {
uid: this.newReloadKey
})
},
i.$inject = [
'isInVersion',
'isPINBySMSInVersion',
'$state',
'applicationInfos',
'parentState'
],
i
}(n.controllers.VersionFilterController),
i,
r,
u,
f;
n.cards.mainModule.controller('DebitCardApplicationController', e);
i = function (n) {
function t(t, i, r) {
var u = n.call(this, t) || this;
return u.Model = i,
u.decoratedApplicationInfos = [
],
i.HasError || (u.decoratedApplicationInfos = r.decorate(i.Applications)),
u
}
return __extends(t, n),
t.$inject = [
'isInVersion',
'Model',
'actionDecorator'
],
t
}(n.controllers.VersionFilterController);
n.cards.mainModule.controller('DebitCardApplicationInfoListController', i);
r = function (t) {
function i(i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k, d, g, nt) {
var tt = t.call(this, e, o, i) || this;
return tt.isInVersion = i,
tt.isPINBySMSInVersion = r,
tt.state = u,
tt.Model = f,
tt.scope = e,
tt.$injector = o,
tt.accounts = s,
tt.selectedCard = h,
tt.isKYCAuthorized = l,
tt.filterService = a,
tt.productsService = v,
tt.postNewWindowService = y,
tt.$window = p,
tt.onlineStatus = w,
tt.regularExpressionProvider = b,
tt.stringsService = k,
tt.roleService = d,
tt.analytics = g,
tt.otpHandler = nt,
tt.mainAccountDuplication = !1,
tt.additionalAccountDuplication = !1,
tt.agreedToTerms = !1,
tt.applRequestSubmitted = !1,
tt.enterBonusAMEXCode = 2995,
tt.enterVisaCode = 2923,
tt.enterMasterCardCode = 2977,
tt.enterBonusMasterCardCode = 2944,
tt.enterBonusVisaCode = 2901,
tt.enterBonusMasterCardImage = 1074,
tt.enterBonusVisaCodeImage = 1075,
tt.Model.HasErrors || (n.utils.isUndefinedOrNull(h) || (tt.selectedCardCode = h, f.Application.CardTypeID = h), f.Application.SubmissionChannelID = 3, f.Application.SubmissionChannelDesc = 'Alpha Web Banking', tt.isPINBySMSInVersion && (f.Application.SendPINCode = 2), f.Application.WithdrawalLimit = 850, f.Application.PromotionConsent = !0, f.Application.Terms = null),
tt
}
return __extends(i, t),
Object.defineProperty(i.prototype, 'otpKey', {
get: function () {
return this.otpHandler.caller
},
enumerable: !0,
configurable: !0
}),
i.prototype.goToProfile = function () {
this.state.go(n.constants.stateNames.profilePersonalState, {
referer: 'debitCardApplication'
})
},
i.prototype.goToTermDepositBonusApplication = function () {
this.state.go(n.constants.stateNames.eTimeDepositBonusNew, {
uid: uuid.v4(),
referer: 'debitCardApplication',
applicationNo: this.Model.Application.ReferenceNumber
})
},
i.prototype.clearAccount = function (n) {
switch (n) {
case 1:
this.additionalAccount1 = null;
break;
case 2:
this.additionalAccount2 = null;
break;
case 3:
this.additionalAccount3 = null;
break;
case 4:
this.additionalAccount4 = null
}
this.checkSelectedAccounts()
},
i.prototype.checkSelectedAccounts = function () {
var t = this;
t.selectedAdditionalAccounts = [
];
t.selectedAdditionalAccounts.push(this.additionalAccount1);
t.selectedAdditionalAccounts.push(this.additionalAccount2);
t.selectedAdditionalAccounts.push(this.additionalAccount3);
t.selectedAdditionalAccounts.push(this.additionalAccount4);
n.utils.isUndefinedOrNull(t.selectedMainAccount) || t.selectedAdditionalAccounts.indexOf(t.selectedMainAccount) == - 1 ? (t.mainAccountDuplication = !1, t.additionalAccountDuplication = !1, t.selectedAdditionalAccounts.forEach(function (i, r) {
n.utils.isUndefinedOrNull(i) || (n.utils.isUndefinedOrNull(t.selectedMainAccount) || t.selectedMainAccount != i ? t.selectedAdditionalAccounts.lastIndexOf(i) != r && (t.additionalAccountDuplication = !0)  : t.mainAccountDuplication = !0)
}))  : t.mainAccountDuplication = !0
},
i.prototype.imageSourceCalc = function (n) {
var t;
switch (n) {
case 2901:
t = this.enterBonusVisaCodeImage;
break;
case 2944:
t = this.enterBonusMasterCardImage;
break;
default:
t = n
}
return t
},
i.prototype.initialiseSteps = function () {
var t = this,
i = this,
r = [
],
f = {
templateUrl: 'Templates/Features/Cards/debit/new-request-step1'
},
u,
e;
return f.processStep = function () {
i.debitImgSrc = i.imageSourceCalc(i.Model.Application.CardTypeID);
i.mainAccountDuplication || i.additionalAccountDuplication || (i.Model.Application.MainAccount = i.selectedMainAccount.BankProduct, i.Model.Application.AdditionalAccounts = [
], i.selectedAdditionalAccounts.forEach(function (t) {
n.utils.isUndefinedOrNull(t) || i.Model.Application.AdditionalAccounts.push(t.BankProduct)
}));
var r = i.qService.defer();
return r.resolve(!0),
r.promise.then(function () {
return t.createNewDebitCardPayload()
}).then(function (n) {
return t.otpHandler.reset({
hints: {
Requirement: String(2),
Method: String(1)
},
payload: n
}).enquire()
})
},
r.push(f),
u = {
templateUrl: 'Templates/Features/Cards/debit/new-request-step2'
},
u.processStep = [
'DebitCardApplicationService',
'AppEventsService',
function (r, u) {
return t.debitImgSrc = t.imageSourceCalc(i.Model.Application.CardTypeID),
t.Model.Application.ProductCode = t.Model.Application.CardTypeID.toString(),
t.Model.Application.ApplicationDate = new Date,
t.newDebitCardApplicationRequest = t.createNewDebitCardPayload(),
t.applRequestSubmitted = !0,
t.otpHandler.result().then(function () {
t.newDebitCardApplicationRequest = t.otpHandler.appendExtraInfoToPayload(t.newDebitCardApplicationRequest);
return t.roleService.isDemo() ? t.qService.when({
ResultCode: 0,
ApplicationID: 0,
ReferenceNumber: '0'
})  : r.createNewDebitCardApplicationReq(t.newDebitCardApplicationRequest)
}).then(function (i) {
return 0 == i.ResultCode ? (t.Model.Application.ReferenceNumber = i.ReferenceNumber, u.publish(n.common.services.AppEventsService.InvalidateAllDebitCardApplicationInfo_Event), u.publish(n.common.services.AppEventsService.InvalidateUserSessionInfo_Event), u.publish(n.common.services.AppEventsService.InvalidateAccounts_Event), !0)  : t.qService.reject(i)
}).catch (function (n) {
return t.qService.reject(n.Error.Message)
})
}
],
r.push(u),
e = {
templateUrl: 'Templates/Features/Cards/debit/new-request-step3'
},
r.push(e),
r
},
i.prototype.exportPDF = function () {
var t = {
};
return t.Parameters = JSON.stringify({
IsPINBySMSInVersion: this.isPINBySMSInVersion,
CardTypeID: this.Model.Application.ProductCode,
Name: this.Model.Application.Name,
LastName: this.Model.Application.LastName,
FatherName: this.Model.Application.FatherName,
Occupation: this.Model.Application.Occupation.OccDescription,
CertificateNo: this.Model.Application.CertificateNo,
CertificateIssuer: this.Model.Application.CertificateIssuer,
Afm: this.Model.Application.Afm,
DOB: this.filterService('date') (this.Model.Application.DOB, 'dd/MM/yyyy', 'UTC+0200'),
Landline: this.Model.Application.Landline,
Mobile: this.Model.Application.Mobile,
Email: this.Model.Application.Email,
MailAddressNo: this.Model.Application.MailAddressNo,
MailAddressStreet: this.Model.Application.MailAddressStreet,
MailAddressTown: this.Model.Application.MailAddressTown,
MailAddressZip: this.Model.Application.MailAddressZip,
MainAccount: this.Model.Application.MainAccount.Code,
AdditionalAccounts: n.utils.isUndefinedOrNull(this.Model.Application.AdditionalAccounts) ? [
] : this.Model.Application.AdditionalAccounts.map(function (t) {
return n.utils.formatString('{0}', [
t.Code
])
}),
WithdrawalLimit: this.Model.Application.WithdrawalLimit,
ApplicationDate: this.filterService('date') (this.Model.Application.ApplicationDate, 'dd/MM/yyyy', 'UTC+0200'),
ReferenceNumber: this.Model.Application.ReferenceNumber
}),
t.PDFRequestType = 31,
t
},
i.prototype.isBonusDebit = function () {
this.isBonusDebitCard = this.Model.Application.CardTypeID == this.enterBonusVisaCode || this.Model.Application.CardTypeID == this.enterBonusMasterCardCode ? !0 : !1
},
i.prototype.showTermsPopup = function () {
var t = this.stringsService.subjectsUpdateLiteral,
n = window.open('', '_blank', 'width=600,height=500');
n && (n.document.open(), n.document.write(t))
},
i.prototype.getCurrentTerms = function () {
var t = {
},
i;
if (t.Parameters = JSON.stringify({
}), this.Model.Application.HasTermDeposit) {
i = this.Model.Application.CardTypeID;
switch (i) {
case 2995:
t.PDFRequestType = this.Model.Application.AlphaEmployee == 0 ? 42 : 33;
break;
case 2944:
t.PDFRequestType = this.Model.Application.AlphaEmployee == 0 ? 68 : 67;
break;
case 2901:
t.PDFRequestType = this.Model.Application.AlphaEmployee == 0 ? 69 : 66
}
this.postNewWindowService(t, 'GetPdf', !1)
} else if (i = this.Model.Application.CardTypeID, n.utils.isUndefinedOrNull(i) || i == 0) alert(this.STRINGS['debitCardApplication.chooseCard']);
 else {
switch (i) {
case 2995:
t.PDFRequestType = this.Model.Application.AlphaEmployee == 0 ? 32 : 33;
break;
case 2923:
t.PDFRequestType = 34;
break;
case 2977:
t.PDFRequestType = 35;
break;
case 2944:
t.PDFRequestType = this.Model.Application.AlphaEmployee == 0 ? 65 : 67;
break;
case 2901:
t.PDFRequestType = this.Model.Application.AlphaEmployee == 0 ? 64 : 66
}
this.postNewWindowService(t, 'GetPdf', !1)
}
},
i.prototype.print = function () {
this.$window.print()
},
i.prototype.createNewDebitCardPayload = function (n) {
return {
DebitCardApplicationInfo: this.Model.Application,
OTP: n
}
},
i.$inject = [
'isInVersion',
'isPINBySMSInVersion',
'$state',
'Model',
'$scope',
'$injector',
'accounts',
'selectedCard',
'VersionFilterService',
'isKYCAuthorized',
'$filter',
'ProductsService',
'postNewWindowService',
'$window',
'onlineStatus',
'RegularExpressionService',
'STRINGS',
'RoleService',
'analytics',
'otpHandler'
],
i
}(n.wizards.VersionFilterWizardController);
n.cards.mainModule.controller('DebitCardApplicationNewRequestController', r);
u = function (t) {
function i(n, i, r, u, f, e, o, s, h, c) {
var l = t.call(this, f, e, n) || this;
return l.isInVersion = n,
l.isPINBySMSInVersion = i,
l.state = r,
l.filterService = u,
l.Model = o,
l.stringsService = s,
l.postNewWindowService = h,
l.$window = c,
l.enterBonusAMEXCodeDeprecated = 2975,
l.enterBonusAMEXCode = 2995,
l.enterVisaCode = 2923,
l.enterMasterCardCode = 2977,
l.enterBonusVisaCode = 2901,
l.enterBonusMasterCardImage = 1074,
l.enterBonusVisaCodeImage = 1075,
l.debitImgSrc = l.imageSourceCalc(l.Model.Item.DebitCardApplicationInfo.ProductCode),
l
}
return __extends(i, t),
i.prototype.imageSourceCalc = function (n) {
var t;
switch (n) {
case '2901':
t = this.enterBonusVisaCodeImage;
break;
case '2944':
t = this.enterBonusMasterCardImage;
break;
default:
t = parseInt(n)
}
return t
},
i.prototype.GoToList = function () {
this.state.go(n.constants.stateNames.debitCardManagement)
},
i.prototype.initialiseSteps = function () {
var n = [
];
return n.push({
templateUrl: 'Templates/Features/Cards/debit/details'
}),
n
},
i.prototype.showTermsPopup = function () {
var t = this.stringsService.subjectsUpdateLiteral,
n = window.open('', '_blank', 'width=500,height=430');
n && (n.document.open(), n.document.write(t))
},
i.prototype.getCurrentTerms = function () {
var n = {
},
t;
n.Parameters = JSON.stringify({
ApplicationId: this.Model.Item.DebitCardApplicationInfo.ApplicationID
});
t = parseInt(this.Model.Item.DebitCardApplicationInfo.ProductCode);
switch (t) {
case 2975:
case 2995:
n.PDFRequestType = this.Model.Item.DebitCardApplicationInfo.Occupation.OccCode != 0 ? 37 : 38;
break;
case 2923:
n.PDFRequestType = 39;
break;
case 2977:
n.PDFRequestType = 40;
break;
case 2944:
n.PDFRequestType = 65;
break;
case 2901:
n.PDFRequestType = 64
}
this.postNewWindowService(n, 'GetPdf', !1)
},
i.prototype.exportDetailPdf = function () {
return this.createDocumentRequest(36)
},
i.prototype.createDocumentRequest = function (t) {
var i = {
},
r = {
CardTypeID: this.Model.Item.DebitCardApplicationInfo.ProductCode,
Name: this.Model.Item.DebitCardApplicationInfo.Name,
LastName: this.Model.Item.DebitCardApplicationInfo.LastName,
FatherName: this.Model.Item.DebitCardApplicationInfo.FatherName,
Occupation: this.Model.Item.DebitCardApplicationInfo.Occupation.OccDescription,
CertificateNo: this.Model.Item.DebitCardApplicationInfo.CertificateNo,
CertificateIssuer: this.Model.Item.DebitCardApplicationInfo.CertificateIssuer,
Afm: this.Model.Item.DebitCardApplicationInfo.Afm,
DOB: this.filterService('date') (this.Model.Item.DebitCardApplicationInfo.DOB, 'dd/MM/yyyy', 'UTC+0200'),
Landline: this.Model.Item.DebitCardApplicationInfo.Landline,
Mobile: this.Model.Item.DebitCardApplicationInfo.Mobile,
Email: this.Model.Item.DebitCardApplicationInfo.Email,
MailAddressNo: this.Model.Item.DebitCardApplicationInfo.MailAddressNo,
MailAddressStreet: this.Model.Item.DebitCardApplicationInfo.MailAddressStreet,
MailAddressTown: this.Model.Item.DebitCardApplicationInfo.MailAddressTown,
MailAddressZip: this.Model.Item.DebitCardApplicationInfo.MailAddressZip,
SendPINCode: this.isPINBySMSInVersion ? this.Model.Item.DebitCardApplicationInfo.SendPINCode : 0,
MainAccount: this.Model.Item.DebitCardApplicationInfo.MainAccount.Code,
AdditionalAccounts: n.utils.isUndefinedOrNull(this.Model.Item.DebitCardApplicationInfo.AdditionalAccounts) ? [
] : this.Model.Item.DebitCardApplicationInfo.AdditionalAccounts.map(function (t) {
return n.utils.formatString('{0}', [
t.Code
])
}),
WithdrawalLimit: this.Model.Item.DebitCardApplicationInfo.WithdrawalLimit,
ApplicationDate: this.filterService('date') (this.Model.Item.DebitCardApplicationInfo.ApplicationDate, 'dd/MM/yyyy', 'UTC+0200'),
ReferenceNumber: this.Model.Item.DebitCardApplicationInfo.ReferenceNumber
};
return i.Parameters = JSON.stringify(r),
i.PDFRequestType = t,
i
},
i.prototype.print = function () {
this.$window.print()
},
i.$inject = [
'isInVersion',
'isPINBySMSInVersion',
'$state',
'$filter',
'$scope',
'$injector',
'Model',
'STRINGS',
'postNewWindowService',
'$window'
],
i
}(n.wizards.VersionFilterWizardController);
n.cards.mainModule.controller('DebitCardApplicationDetailsController', u);
f = function () {
function t() {
}
return t.prototype.decorate = function (t) {
var i = [
];
return null == t ? i : (t.forEach(function (t) {
var r = new n.model.DebitCardApplicationInfoActionDecorator(t);
t.ProductCode == 2917.toString() ? (r.Actions.push(new n.model.MenuAction(n.constants.stateNames.prepaidCardView, {
id: t.ApplicationID,
mode: 'view'
}, null, 'debitCard.burger.View')), r.Actions.push(new n.model.MenuAction(n.constants.stateNames.prepaidCardNew, null, null, 'debitCard.burger.New')))  : (r.Actions.push(new n.model.MenuAction(n.constants.stateNames.debitCardView, {
id: t.ApplicationID,
mode: 'view'
}, null, 'debitCard.burger.View')), r.Actions.push(new n.model.MenuAction(n.constants.stateNames.debitCardNew, null, null, 'debitCard.burger.New')));
i.push(r)
}), i)
},
t
}();
t.AllDebitCardApplictionListActionDecorator = f
}) (t = n.cards || (n.cards = {
}))
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(),
function (n) {
var t;
(function () {
var f = function () {
function n(n, t, i, r) {
this.isInVersion = n;
this.isApplInVersion = t;
this.isPINBySMSInVersion = i;
this.userInfo = r
}
return n.$inject = [
'isInVersion',
'isApplInVersion',
'isPINBySMSInVersion',
'userInfo'
],
n
}(),
t,
i,
r,
u;
n.cards.mainModule.controller('PrepaidCardController', f);
t = function (t) {
function i(i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k, d) {
var g = t.call(this, e, i, r, o, v, null) || this,
nt,
rt,
ut,
tt,
ft,
it;
return g.scope = i,
g.$injector = r,
g.debitAccounts = u,
g.prepaidCards = f,
g.Model = e,
g.isInVersion = s,
g.selectedCard = h,
g.filterService = c,
g.userInfo = l,
g.stateService = a,
g.securityService = p,
g.modal = w,
g.transfersService = k,
g.queriesServiceProxy = d,
g.hasErrors = !1,
g.ignoreAtm24 = !1,
g.isRetail = !1,
g.isAlphaPhone = !1,
g.isIndividualUser = !1,
g.isBleep = !1,
g.canViewAccountBalance = !1,
g.otpModal = {
templateUrl: 'Templates/common/directives/otp-modal',
controller: 'OtpModalInstanceController as vm',
size: 'lg',
backdrop: 'static'
},
g.bleepExpensesModal = {
templateUrl: 'Templates/Features/Transfers/expensesModal',
controller: 'ExpensesModalInstanceCtrl as vm',
size: 'lg',
backdrop: 'static'
},
g.canViewAccountBalance = v.isAccessAllowed('ViewAccountGrossBalance'),
nt = y.document.querySelector('meta[name = \'IgnoreAtm24\']'),
nt && nt.getAttribute('content') == 'true' && (g.ignoreAtm24 = !0),
g.Model.PaymentType = 2,
(g.Model.Online || g.ignoreAtm24) && g.prepaidCards.length == 0 && (g.Model.UseProfileProduct = !1),
n.utils.isUndefinedOrNull(h) || (g.Model.CreditAccount = g.selectedCard),
n.utils.isUndefinedOrNull(e.CreditAccount) || n.utils.isUndefinedOrNull(e.CreditAccount.Code) || (rt = e.CreditAccount.Code),
ut = g,
g.isAlphaPhone = v.isAlphaPhone(),
g.BleepType = 102,
tt = {
},
ft = d.getBackEndConfig(tt).then(function (n) {
var t = n.BleepInfo.filter(function (n) {
return n.Key == 'Regex'
});
return g.Regex = t[0].Value,
g.Regex
}),
g.isRetail = v.IsRetail(),
g.isIndividualUser = v.IsIndividualUser(),
!g.isIndividualUser || l.OTPStatus !== 0 || l.SmsOTPEnabled || g.Model.UseProfileProduct || (it = g.modal.open(g.otpModal).result, it.then(function (t) {
t == 'OK' && g.AppEventsService.publish(n.common.services.AppEventsService.InvalidateUserSessionInfo_Event)
}, function () {
g.stateService.go('root.cards.list')
})),
g
}
return __extends(i, t),
Object.defineProperty(i.prototype, 'userHasOtpEnabled', {
get: function () {
return this.userInfo.OTPStatus == 1 || this.userInfo.OTPStatus == 0
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(i.prototype, 'allowProfileProducts', {
get: function () {
return !this.IsBusy && this.prepaidCards.length > 0
},
enumerable: !0,
configurable: !0
}),
Object.defineProperty(i.prototype, 'allowNonProfileProducts', {
get: function () {
return !this.IsBusy && (this.roleService.IsRetail() || this.userHasOtpEnabled)
},
enumerable: !0,
configurable: !0
}),
i.prototype.reload = function () {
this.stateService.forceReload()
},
i.prototype.initialiseSteps = function () {
var t = this,
i = [
],
r = 0,
f = {
templateUrl: 'Templates/Features/Cards/prepaid/load-step1',
title: '',
index: r++,
stateName: ''
},
u,
e;
return f.processStep = [
'$q',
'TransfersService',
'ProductsService',
'STRINGS',
function (i, r, u, f) {
var e = i.defer(),
o = u.getProductInfo({
Code: t.Model.UseProfileProduct ? t.Model.CreditAccount.Code : t.Model.CreditAccountCode,
ProductID: t.Model.UseProfileProduct ? t.Model.CreditAccount.BankProduct.ProductID : n.constants.pci.defaultProductId,
Family: n.server.ProductTypeFamily.Card,
Scope: n.server.ProductTypeScope.Local
});
return o.then(function (i) {
if (i.ProductInfo && i.ProductInfo.length > 0 && n.utils.isUndefinedOrNullorWhiteSpace(i.ProductInfo[0].ErrorMessage)) {
t.productInfo = i.ProductInfo[0];
var o = !n.utils.isUndefinedOrNull(t.productInfo) && i.ProductInfo.length > 0 ? t.productInfo.Owners : [
];
return t.Model.CreditAccountBeneficiaries = o.map(function (t) {
return new n.model.AccountBeneficiary(t)
}),
u.getProductTypes({
RequestType: n.server.ProductRequestType.AllCards
}).then(function (i) {
var s,
h,
c,
o;
if (i.ResultCode == 0) return s = i.ProductTypes.filter(function (n) {
return n.TypeID == t.productInfo.ProductTypeID
}),
s.length > 0 ? (t.roleService.isDemo() && (s[0].CategoryID = 104), s[0].CategoryID != 104 && e.reject(f.wrongcardtype))  : e.reject('System error'),
t.Model.UseProfileProduct && (h = {
Code: t.Model.CreditAccount.BankProduct.Code,
ProductID: t.Model.CreditAccount.BankProduct.ProductID,
TypeID: t.Model.CreditAccount.BankProduct.TypeID
}, c = u.getCdiMatch(h), c.then(function (n) {
if (n.ResultCode == 0) {
var i = !t.roleService.IsIndividualUser();
i || (i = n.CdiMatch)
}
})),
o = {
},
o.Amount = t.Model.Amount,
o.Currency = t.Model.DebitProduct.CurrencyEnum,
o.DebitAccountNumber = t.Model.DebitProduct.Code,
o.DebitAccountType = t.Model.DebitProduct.TypeID,
t.Model.UseProfileProduct ? (o.CreditAccountNumber = t.Model.CreditAccount.Code, o.CreditAccountType = t.Model.CreditAccount.TypeID, o.CreditProductID = t.Model.CreditAccount.BankProduct.ProductID)  : (o.CreditAccountNumber = t.Model.CreditAccountCode, o.CreditAccountType = t.backendConfigType || 0, o.CreditProductID = n.constants.pci.defaultProductId),
o.ExpensesServiceType = o.CreditAccountType == t.backendConfigType ? t.Model.ExpensesServiceType : 11,
o.FeeType = 1,
r.GetTransferExpenses(o).then(function (n) {
var i = n;
i.Fees != undefined ? (t.Model.Fees = i.Fees, t.Model.AmountLiteral = i.Fees.DebitAmountLiteral, e.resolve(!0))  : e.reject(i.Error.Message)
}).catch (function (n) {
e.reject(n)
});
e.reject(i.Error.Message)
}, function (n) {
e.reject(n)
})
}
i.ProductInfo && i.ProductInfo.length > 0 && !n.utils.isUndefinedOrNullorWhiteSpace(i.ProductInfo[0].ErrorMessage) ? e.reject(i.ProductInfo[0].ErrorMessage)  : e.reject('System error')
}),
e.promise.then(function () {
return t.createExecutionPayload()
}).then(function (n) {
return t.otpHandler.reset({
hints: {
Requirement: String(2),
Method: String(1)
},
payload: n
}).enquire()
})
}
],
i.push(f),
u = {
templateUrl: 'Templates/Features/Cards/prepaid/load-step2',
index: r++,
title: '',
stateName: ''
},
u.processStep = [
'$q',
'PaymentsService',
'AppEventsService',
function (i, r, u) {
var f = i.defer();
return t.otpHandler.result().then(function () {
r.ExecutePayment(t.otpHandler.appendExtraInfoToPayload(t.createExecutionPayload()), t.Model.Online).then(function (i) {
t.setTransactionStatus(i);
n.utils.isUndefinedOrNull(i.TransactionUN) ? f.reject(i.Error.Message)  : (t.Model.CreditAccountBeneficiaries = (i.CreditProductOwners || [
]).map(function (t) {
return new n.model.AccountBeneficiary(t)
}), t.CreditProductCode = i.CreditProductCode, t.Model.TransactionUN = i.TransactionUN, t.Model.ProcessDate = i.ProcessDate, t.Model.ProcessDateLiteral = i.ProcessDateLiteral, u.publish(n.common.services.AppEventsService.InvalidateCards_Event), u.publish(n.common.services.AppEventsService.InvalidateAccounts_Event), f.resolve(!0))
}, function (i) {
t.Model.HasErrors = !0;
t.Model.ErrorMessage = t.STRINGS.failedTransactionSystemError;
n.utils.isUndefinedOrNull(i.Error) && i.data.Message == 'TimeoutError' ? t.Model.ErrorMessage = t.STRINGS.promptForCheckErrorMsg : n.utils.isUndefinedOrNull(i.Error.Message) || (t.Model.ErrorMessage = i.Error.Message);
f.reject(t.Model.ErrorMessage)
})
}, function (n) {
f.reject(n)
}),
f.promise
}
],
i.push(u),
e = {
templateUrl: 'Templates/Features/Cards/prepaid/load-step3',
index: r++,
title: '',
stateName: ''
},
i.push(e),
i
},
i.prototype.createExecutionPayload = function () {
var t = {
};
return t.Amount = this.Model.Amount,
t.Block = !1,
t.DebitProductCode = this.Model.DebitProduct.Code,
t.DebitProductType = this.Model.DebitProduct.TypeID,
t.DebitProductID = this.Model.DebitProduct.BankProduct.ProductID,
t.Currency = this.Model.DebitProduct.CurrencyEnum,
t.CreditProductCode = this.Model.UseProfileProduct ? this.Model.CreditAccount.Code : this.Model.CreditAccountCode,
t.CreditProductID = this.Model.UseProfileProduct ? this.Model.CreditAccount.BankProduct.ProductID : n.constants.pci.defaultProductId,
t.CreditProductType = this.Model.UseProfileProduct ? this.Model.CreditAccount.TypeID : 0,
t.PaymentType = this.Model.PaymentType,
t.IsParentPayment = !1,
!n.utils.isUndefinedOrNull(this.Model.CreditAccountBeneficiaries) && this.Model.CreditAccountBeneficiaries.length > 0 && (t.PaymentDetails = [
], t.PaymentDetails.push(new n.model.Detail(n.model.DetailName.BENEFICIARY_NAME, n.model.DetailDataType.String, this.Model.CreditAccountBeneficiaries[0].DisplayName))),
t
},
i.prototype.checkExpenses = function () {
var t = this,
i = this.modal.open({
templateUrl: 'Templates/Features/Cards/bleepExpensesModal',
controller: 'BleepExpensesModalInstanceCtrl as vm',
size: 'lg',
backdrop: 'static',
resolve: {
Model: [
'TransfersService',
'QueriesService',
function () {
return t.queriesServiceProxy.getBackEndConfig({
}).then(function (i) {
var u = {
hasErrors: !1,
errorMessage: null,
Fees: null
},
r = {
};
r.Amount = t.Model.Amount;
r.CreditAccountNumber = t.Model.UseProfileProduct ? t.Model.CreditAccount.Code : t.Model.CreditAccountCode;
var o = i.BleepInfo.filter(function (n) {
return n.Key == 'TypeId'
}),
f = o[0].Value,
s = i.BleepInfo.filter(function (n) {
return n.Key == 'Regex'
}),
e = new RegExp(s[0].Value);
return t.roleService.isAlphaPhone() && t.Model.UseProfileProduct ? t.Model.CreditAccount.BankProduct.TypeID == parseInt(f) && (r.ExpensesServiceType = 102, r.CreditAccountType = Number(f))  : e.test(r.CreditAccountNumber) ? (r.ExpensesServiceType = e.test(t.Model.UseProfileProduct ? t.Model.CreditAccount.Code : t.Model.CreditAccountCode) || t.Model.CreditAccount.BankProduct.TypeID == parseInt(f) ? 102 : t.Model.ExpensesServiceType, r.CreditAccountType = Number(f))  : (r.ExpensesServiceType = t.Model.ExpensesServiceType, r.CreditAccountType = t.Model.CreditAccount.TypeID),
r.DebitAccountNumber = t.Model.DebitProduct.Code,
r.DebitAccountType = t.Model.DebitProduct.TypeID,
r.CreditProductID = t.Model.UseProfileProduct ? t.Model.CreditAccount.BankProduct.ProductID : n.constants.pci.defaultProductId,
r.FeeType = 1,
r.Currency = t.Model.DebitProduct.CurrencyEnum,
t.transfersService.GetTransferExpenses(r).then(function (n) {
if (n.ResultCode == 0) t.Model.Fees && (t.Model.Fees = n.Fees),
u.Fees = n.Fees;
 else if (n.Error) return t.hasErrors = u.hasErrors = !0,
t.errorMessage = u.errorMessage = n.Error.Message || 'System Error',
u;
return u
})
})
}
]
}
})
},
i.prototype.validateCard = function () {
var t = this,
i = this.queriesServiceProxy.getBackEndConfig({
}).then(function (i) {
if (i.ResultCode != 1) {
var u = i.BleepInfo.filter(function (n) {
return n.Key == 'Regex'
}),
o = u[0].Value,
e = i.BleepInfo.filter(function (n) {
return n.Key == 'TypeId'
}),
r = e[0].Value,
f = new RegExp(u[0].Value);
t.roleService.isAlphaPhone() && t.Model.UseProfileProduct ? t.Model.CreditAccount.BankProduct.TypeID == parseInt(r) && (t.Model.ExpensesServiceType = 102, t.backendConfigType = Number(r), t.Model.Amount && (t.isBleep = !n.utils.isUndefinedOrNull(t.Model.DebitProduct)))  : f.test(t.Model.UseProfileProduct ? t.Model.CreditAccount.Code : t.Model.CreditAccountCode) ? (t.Model.ExpensesServiceType = f.test(t.Model.UseProfileProduct ? t.Model.CreditAccount.Code : t.Model.CreditAccountCode) || t.Model.CreditAccount.BankProduct.TypeID == parseInt(r) ? 102 : t.Model.ExpensesServiceType, t.backendConfigType = Number(r), t.Model.Amount && (t.isBleep = !n.utils.isUndefinedOrNull(t.Model.DebitProduct)))  : t.isBleep = !1
}
})
},
i.prototype.createDocumentData = function () {
var i = '',
t;
return this.Model.CreditAccountBeneficiaries.forEach(function (t) {
i = n.utils.isUndefinedOrNullorWhiteSpace(i) ? t.DisplayName : ', ' + t.DisplayName
}),
t = {
},
t.PDFRequestType = 16,
t.Parameters = JSON.stringify({
SubmittedTimeStamp: this.filterService('date') (this.Model.SubmittedTimeStamp, 'dd/MM/yyyy HH:mm'),
FromAccount: this.Model.DebitProduct.Code,
CardType: this.Model.UseProfileProduct ? this.Model.CreditAccount.TypeName : this.productInfo.ProductTypeName,
ToCard: this.Model.UseProfileProduct ? this.Model.CreditAccount.Code : this.CreditProductCode,
TransactionDate: this.filterService('date') (this.Model.TransactionDate, 'dd/MM/yyyy'),
Amount: this.Model.Amount,
TransactionNumber: this.Model.TransactionUN,
DebitCurrency: this.Model.DebitProduct.Currency,
AmountLiteral: this.Model.Fees.DebitAmountLiteral,
Beneficiaries: i,
BleepExpenses: this.isBleep ? this.Model.Fees.DebitProviderFeesAmount : null,
BleepExpensesLiteral: this.isBleep ? this.Model.Fees.DebitProviderFeesAmountLiteral : null
}),
t
},
i.$inject = [
'$scope',
'$injector',
'debitAccounts',
'prepaidCards',
'Model',
'StateHelperService',
'isInVersion',
'selectedCard',
'$filter',
'userInfo',
'$state',
'RoleService',
'$window',
'SecurityService',
'$modal',
'$rootScope',
'TransfersService',
'QueriesServiceProxy'
],
i
}(n.wizards.payments.PaymentWizardController);
n.cards.mainModule.controller('LoadPrepaidCardController', t);
i = function (t) {
function i(i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k, d) {
var g = t.call(this, e, f, u, o, s, i, r, h, c, l, a, w, b, k, d, null) || this;
return g.scope = i,
g.$injector = r,
g.creditAccounts = u,
g.prepaidDebitCards = f,
g.Model = e,
g.stateService = o,
g.modal = s,
g.userInfo = h,
g.profileProductService = c,
g.$q = a,
g.isInVersion = v,
g.selectedCard = y,
g.filterService = p,
g.showTransferMenu = !1,
g.Model.TransferType = 3,
n.utils.isUndefinedOrNull(y) || (g.Model.DebitProduct = g.selectedCard),
g
}
return __extends(i, t),
i.prototype.initialiseSteps = function () {
var i = this,
o = this,
t = [
],
r = 0,
f = {
templateUrl: 'Templates/Features/Cards/prepaid/unload-step1',
title: '',
index: r++,
stateName: ''
},
u,
e;
return f.processStep = [
'$q',
'TransfersService',
function (t, r) {
var u = i,
f = {
},
e;
return f.Amount = u.Model.Amount,
f.Currency = u.Model.DebitProduct.CurrencyEnum,
f.DebitAccountNumber = u.Model.DebitProduct.Code,
f.DebitAccountType = u.Model.DebitProduct.TypeID,
f.CreditAccountNumber = u.Model.CreditAccount.Code,
f.CreditAccountType = u.Model.CreditAccount.TypeID,
f.ExpensesServiceType = u.Model.ExpensesServiceType,
f.FeeType = 1,
e = t.defer(),
r.GetTransferExpenses(f).then(function (t) {
var i = t;
n.utils.isUndefinedOrNull(i.Fees) ? n.utils.isUndefinedOrNull(i.Error) ? e.reject('We got no message')  : e.reject(i.Error.Message)  : (u.Model.Fees = i.Fees, u.Model.AmountLiteral = i.Fees.DebitAmountLiteral, e.resolve(!0))
}).catch (function (n) {
e.reject(n)
}),
e.promise.then(function () {
return i.getOtpPayload()
}).then(function (n) {
return i.otpHandler.reset({
hints: {
Requirement: String(2),
Method: String(1)
},
payload: n
}).enquire()
})
}
],
t.push(f),
u = {
templateUrl: 'Templates/Features/Cards/prepaid/unload-step2',
index: r++,
title: '',
stateName: ''
},
u.processStep = [
'TransfersService',
'$q',
'AppEventsService',
function (t, i, r) {
var u = this,
f = u.$q.defer();
return u.otpHandler.result().then(function () {
t.ExecuteAlphaProfileAccountTransfer(u.otpHandler.appendExtraInfoToPayload(u.getOtpPayload()), u.Model.Online).then(function (t) {
var e = u.setTransactionStatus(t),
i;
e ? (u.Model.CreditAccountBeneficiaries = [
], i = t.CreditProductOwners, i && i.forEach(function (t) {
u.Model.CreditAccountBeneficiaries.push(new n.model.AccountBeneficiary(t))
}), r.publish(n.common.services.AppEventsService.InvalidateCards_Event), r.publish(n.common.services.AppEventsService.InvalidateAccounts_Event), f.resolve(!0))  : n.utils.isUndefinedOrNull(t.Error) ? f.reject(u.STRINGS.failedTransactionSystemError)  : f.reject(t.Error.Message)
}, function (t) {
u.Model.HasErrors;
u.Model.ErrorMessage = u.STRINGS.failedTransactionSystemError;
n.utils.isUndefinedOrNull(t.Error) && t.data.Message == 'TimeoutError' ? u.Model.ErrorMessage = u.STRINGS.promptForCheckErrorMsg : n.utils.isUndefinedOrNull(t.Error.Message) || (u.Model.ErrorMessage = t.Error.Message);
f.reject(u.Model.ErrorMessage)
})
}, function (n) {
f.reject(n)
}),
f.promise
}
],
t.push(u),
e = {
templateUrl: 'Templates/Features/Cards/prepaid/unload-step3',
index: r++,
title: '',
stateName: ''
},
t.push(e),
t
},
i.prototype.createDocumentData = function () {
var t = {
};
return t.PDFRequestType = 17,
t.Parameters = JSON.stringify({
FromCard: this.Model.DebitProduct.Code,
CardType: this.Model.DebitProduct.TypeName,
ToAccount: this.Model.CreditAccount.Code,
ProcessDate: this.filterService('date') (this.Model.ProcessDate, 'dd/MM/yyyy'),
Amount: this.Model.Amount,
TransactionNumber: this.Model.TransactionUN,
DebitCurrency: this.Model.DebitProduct.Currency,
AmountLiteral: this.Model.Fees.DebitAmountLiteral,
CreditTitle: n.utils.isUndefinedOrNullorWhiteSpace(this.Model.CreditAccount.BankProduct.Title) ? '' : '(' + this.Model.CreditAccount.BankProduct.Title + ')'
}),
t
},
i.prototype.getOtpPayload = function () {
var n = {
};
return n.DebitProductCode = this.Model.DebitProduct.Code,
n.DebitProductType = this.Model.DebitProduct.TypeID,
n.DebitProductID = this.Model.DebitProduct.BankProduct.ProductID,
n.CreditProductCode = this.Model.CreditAccount.Code,
n.CreditProductType = this.Model.CreditAccount.TypeID,
n.CreditProductID = this.Model.CreditAccount.BankProduct.ProductID,
n.Block = this.Model.IsAmountBlocked,
n.TransferCategory = 0,
n.Amount = this.Model.Amount,
n.DebitProductCurrency = this.Model.DebitProduct.CurrencyEnum,
n.AmountCurrency = n.DebitProductCurrency,
n.TransferType = this.Model.TransferType,
n
},
i.$inject = [
'$scope',
'$injector',
'creditAccounts',
'prepaidDebitCards',
'Model',
'$state',
'$modal',
'userInfo',
'ProfileProductsService',
'StateHelperService',
'$q',
'isInVersion',
'selectedCard',
'$filter',
'$parse',
'ProductMatchingService',
'RoleService',
'$window'
],
i
}(n.transfers.TransferWizardController);
n.cards.mainModule.controller('UnloadPrepaidCardController', i);
r = function (t) {
function i(n, i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k) {
var d = t.call(this, f, e, n) || this;
return d.isInVersion = n,
d.isPINBySMSInVersion = i,
d.state = r,
d.Model = u,
d.scope = f,
d.$injector = e,
d.kycInfo = s,
d.filterService = h,
d.productsService = c,
d.postNewWindowService = l,
d.$window = a,
d.onlineStatus = v,
d.regularExpressionProvider = y,
d.stringsService = p,
d.analytics = w,
d.roleService = b,
d.otpHandler = k,
d.agreedToTerms = !1,
d.applRequestSubmitted = !1,
d.prepaidMasterCardCode = 2917,
d.isAlphaPhone = !1,
d.Model.HasErrors || (u.Application.KYCCode = s.KYCCode, u.Application.CardTypeID = 2917, u.Application.SubmissionChannelID = 3, u.Application.SubmissionChannelDesc = 'Alpha Web Banking', d.isPINBySMSInVersion && (u.Application.SendPINCode = 2), u.Application.PromotionConsent = !0, u.Application.Terms = [
s.KYCCode
]),
d.isAlphaPhone = d.roleService.isAlphaPhone(),
d
}
return __extends(i, t),
Object.defineProperty(i.prototype, 'otpKey', {
get: function () {
return this.otpHandler.caller
},
enumerable: !0,
configurable: !0
}),
i.prototype.goToProfile = function () {
this.state.go(n.constants.stateNames.profilePersonalState, {
referer: 'prepaidCardApplication'
})
},
i.prototype.initialiseSteps = function () {
var t = this,
e = this,
i = [
],
u = {
templateUrl: 'Templates/Features/Cards/prepaid/new-request-step1'
},
r,
f;
return u.processStep = function () {
return t.otpHandler.reset({
hints: {
Requirement: String(2),
Method: String(1)
},
payload: t.createNewDebitCardPayload()
}).enquire()
},
i.push(u),
r = {
templateUrl: 'Templates/Features/Cards/prepaid/new-request-step2'
},
r.processStep = [
'DebitCardApplicationService',
'AppEventsService',
function (i, r) {
return t.Model.Application.ProductCode = t.Model.Application.CardTypeID.toString(),
t.Model.Application.ApplicationDate = new Date,
t.newDebitCardApplicationRequest = t.createNewDebitCardPayload(),
t.applRequestSubmitted = !0,
t.otpHandler.result().then(function () {
t.newDebitCardApplicationRequest = t.otpHandler.appendExtraInfoToPayload(t.newDebitCardApplicationRequest);
return t.roleService.isDemo() ? t.qService.when({
ResultCode: 0,
ApplicationID: 0,
ReferenceNumber: '0'
})  : i.createNewDebitCardApplicationReq(t.newDebitCardApplicationRequest)
}).then(function (i) {
return 0 == i.ResultCode ? (t.Model.Application.ReferenceNumber = i.ReferenceNumber, r.publish(n.common.services.AppEventsService.InvalidateAllDebitCardApplicationInfo_Event), r.publish(n.common.services.AppEventsService.InvalidateUserSessionInfo_Event), !0)  : t.qService.reject(i)
}).catch (function (n) {
return t.qService.reject(n.Error.Message)
})
}
],
i.push(r),
f = {
templateUrl: 'Templates/Features/Cards/prepaid/new-request-step3'
},
i.push(f),
i
},
i.prototype.exportPDF = function () {
var n = {
};
return n.Parameters = JSON.stringify({
IsPrepaid: !0,
IsPINBySMSInVersion: this.isPINBySMSInVersion,
CardTypeID: this.Model.Application.ProductCode,
Name: this.Model.Application.Name,
LastName: this.Model.Application.LastName,
FatherName: this.Model.Application.FatherName,
Occupation: this.Model.Application.Occupation.OccDescription,
CertificateNo: this.Model.Application.CertificateNo,
CertificateIssuer: this.Model.Application.CertificateIssuer,
Afm: this.Model.Application.Afm,
DOB: this.filterService('date') (this.Model.Application.DOB, 'dd/MM/yyyy', 'UTC+0200'),
Landline: this.Model.Application.Landline,
Mobile: this.Model.Application.Mobile,
Email: this.Model.Application.Email,
MailAddressNo: this.Model.Application.MailAddressNo,
MailAddressStreet: this.Model.Application.MailAddressStreet,
MailAddressTown: this.Model.Application.MailAddressTown,
MailAddressZip: this.Model.Application.MailAddressZip,
ApplicationDate: this.filterService('date') (this.Model.Application.ApplicationDate, 'dd/MM/yyyy', 'UTC+0200'),
ReferenceNumber: this.Model.Application.ReferenceNumber
}),
n.PDFRequestType = 31,
n
},
i.prototype.showTermsPopup = function () {
var t = this.stringsService.subjectsUpdateLiteral,
n = window.open('', '_blank', 'width=500,height=430');
n && (n.document.open(), n.document.write(t))
},
i.prototype.getCurrentTerms = function () {
if (this.Model.Application.AlphaEmployee != 0) return this.stringsService.prepaidMastercardEmployeeTerms;
switch (this.kycInfo.KYCCode) {
case 0:
return this.stringsService.prepaidMastercardExtendedTerms;
case 4:
case 5:
return this.stringsService.prepaidMastercardLimitedTerms
}
},
i.prototype.print = function () {
this.$window.print()
},
i.prototype.createNewDebitCardPayload = function (n) {
return {
DebitCardApplicationInfo: this.Model.Application,
OTP: n
}
},
i.$inject = [
'isInVersion',
'isPINBySMSInVersion',
'$state',
'Model',
'$scope',
'$injector',
'VersionFilterService',
'kycInfo',
'$filter',
'ProductsService',
'postNewWindowService',
'$window',
'onlineStatus',
'RegularExpressionService',
'STRINGS',
'analytics',
'RoleService',
'otpHandler'
],
i
}(n.wizards.VersionFilterWizardController);
n.cards.mainModule.controller('PrepaidCardApplNewRequestController', r);
u = function (t) {
function i(n, i, r, u, f, e, o, s, h, c) {
var l = t.call(this, f, e, n) || this;
return l.isInVersion = n,
l.isPINBySMSInVersion = i,
l.state = r,
l.filterService = u,
l.Model = o,
l.postNewWindowService = s,
l.$window = h,
l.stringsService = c,
l
}
return __extends(i, t),
i.prototype.GoToList = function () {
this.state.go(n.constants.stateNames.prepaidCardManagement)
},
i.prototype.initialiseSteps = function () {
var n = [
];
return n.push({
templateUrl: 'Templates/Features/Cards/prepaid/details'
}),
n
},
i.prototype.showTermsPopup = function () {
var t = this.stringsService.subjectsUpdateLiteral,
n = window.open('', '_blank', 'width=500,height=430');
n && (n.document.open(), n.document.write(t))
},
i.prototype.getCurrentTerms = function () {
var n = {
};
n.Parameters = JSON.stringify({
ApplicationId: this.Model.Item.DebitCardApplicationInfo.ApplicationID
});
n.PDFRequestType = 48;
this.postNewWindowService(n, 'GetPdf', !1)
},
i.prototype.exportDetailPdf = function () {
return this.createDocumentRequest(36)
},
i.prototype.createDocumentRequest = function (n) {
var t = {
},
i = {
IsPrepaid: !0,
CardTypeID: this.Model.Item.DebitCardApplicationInfo.ProductCode,
Name: this.Model.Item.DebitCardApplicationInfo.Name,
LastName: this.Model.Item.DebitCardApplicationInfo.LastName,
FatherName: this.Model.Item.DebitCardApplicationInfo.FatherName,
Occupation: this.Model.Item.DebitCardApplicationInfo.Occupation.OccDescription,
CertificateNo: this.Model.Item.DebitCardApplicationInfo.CertificateNo,
CertificateIssuer: this.Model.Item.DebitCardApplicationInfo.CertificateIssuer,
Afm: this.Model.Item.DebitCardApplicationInfo.Afm,
DOB: this.filterService('date') (this.Model.Item.DebitCardApplicationInfo.DOB, 'dd/MM/yyyy', 'UTC+0200'),
Landline: this.Model.Item.DebitCardApplicationInfo.Landline,
Mobile: this.Model.Item.DebitCardApplicationInfo.Mobile,
Email: this.Model.Item.DebitCardApplicationInfo.Email,
MailAddressNo: this.Model.Item.DebitCardApplicationInfo.MailAddressNo,
SendPINCode: this.isPINBySMSInVersion ? this.Model.Item.DebitCardApplicationInfo.SendPINCode : 0,
MailAddressStreet: this.Model.Item.DebitCardApplicationInfo.MailAddressStreet,
MailAddressTown: this.Model.Item.DebitCardApplicationInfo.MailAddressTown,
MailAddressZip: this.Model.Item.DebitCardApplicationInfo.MailAddressZip,
ApplicationDate: this.filterService('date') (this.Model.Item.DebitCardApplicationInfo.ApplicationDate, 'dd/MM/yyyy', 'UTC+0200'),
ReferenceNumber: this.Model.Item.DebitCardApplicationInfo.ReferenceNumber
};
return t.Parameters = JSON.stringify(i),
t.PDFRequestType = n,
t
},
i.prototype.print = function () {
this.$window.print()
},
i.$inject = [
'isInVersion',
'isPINBySMSInVersion',
'$state',
'$filter',
'$scope',
'$injector',
'Model',
'postNewWindowService',
'$window',
'STRINGS'
],
i
}(n.wizards.VersionFilterWizardController);
n.cards.mainModule.controller('PrepaidCardApplDetailsController', u)
}) (t = n.cards || (n.cards = {
}))
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(),
function (n) {
var t;
(function () {
var t = function (t) {
function i(n, i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k, d, g, nt) {
var tt = t.call(this, i, u, f, e, o, s, h, c, l, a, v, w, b, d, g, nt) || this;
return tt.transfersService = n,
tt.transferUtilityService = r,
tt.securityService = y,
tt.window = p,
tt.wrapRequestService = k,
tt.RedirectionUrl = null,
tt.windowUnloadListener = null,
tt.Model.HasErrors ? (tt.canShowWizard = !1, tt.signOff())  : (tt.windowUnloadListener = function () {
tt.syncAbortTransaction()
}, p.addEventListener('beforeunload', tt.windowUnloadListener)),
tt
}
return __extends(i, t),
Object.defineProperty(i.prototype, 'myBankModel', {
get: function () {
return this.Model
},
enumerable: !0,
configurable: !0
}),
i.prototype.syncAbortTransaction = function () {
$.ajax({
url: 'api/Transfers.svc//abortTransaction',
type: 'POST',
async: !1,
contentType: 'application/json',
data: JSON.stringify(this.wrapRequestService({
MyBankReferenceID: this.myBankModel.info.AuthorisationID
}))
})
},
i.prototype.initialiseSteps = function () {
var n = this,
t = [
];
return t.push({
title: 'Στοιχεία Πληρωμής',
templateUrl: 'Templates/Features/mybank/step1',
processStep: function () {
return n.otpHandler.reset({
payload: n.transferUtilityService.buildMyBankPayload(n.myBankModel)
}).enquire()
}
}),
t.push({
title: 'Επιβεβαίωση Στοιχείων',
templateUrl: 'Templates/Features/mybank/step2',
processStep: [
'$parse',
function (t) {
return n.otpHandler.result().then(function () {
return n.otpHandler.appendExtraInfoToPayload(n.transferUtilityService.buildMyBankPayload(n.myBankModel))
}).then(function (t) {
return n.transfersService.ExecuteAlphaAccountTransfer(t, !0)
}).then(function (t) {
var i = n.setTransactionStatus(t);
return n.RedirectionUrl = i ? t.MyBankRedirectionURL : null,
i ? n.qService.when(i)  : n.qService.reject(t.Error.Message)
}).catch (function (i) {
var r = typeof i == 'string' || i instanceof String ? i : t('Error.Message') (i);
return n.qService.reject(r || n.STRINGS.failedTransaction)
}).finally (function () {
this.window.removeEventListener('beforeunload', this.windowUnloadListener)
})
}
]
}),
t.push({
title: 'Ολοκλήρωση Πληρωμής',
templateUrl: 'Templates/Features/mybank/step3'
}),
t
},
i.prototype.cancelTransaction = function () {
var n = this;
this.IsBusy = !0;
this.transfersService.AbortTransaction({
MyBankReferenceID: this.myBankModel.info.AuthorisationID
}).then(function (t) {
if (t.ResultCode !== 0) return n.qService.reject(t.Error);
n.RedirectionUrl = t.MyBankRedirectionURL;
n.redirectToSeller()
}).catch (function (t) {
n.Model.ErrorMessage = t.Error.Message;
n.Model.HasErrors = !0;
n.IsBusy = !1
}).finally (function () {
n.window.removeEventListener('beforeunload', n.windowUnloadListener)
})
},
i.prototype.signOff = function () {
return this.securityService.signOff()
},
i.prototype.redirectToSeller = function () {
var n = this,
t = this;
this.signOff().then(function (n) {
return n.ResultCode
}).then(function (t) {
t === 0 && (n.window.location.href = n.RedirectionUrl)
}).catch (function () {
})
},
i.prototype.onProductChange = function () {
var t = this,
i = {
Amount: this.myBankModel.info.Amount,
Currency: this.myBankModel.DebitProduct.CurrencyEnum,
DebitAccountNumber: this.myBankModel.DebitProduct.Code,
DebitAccountType: this.myBankModel.DebitProduct.TypeID,
CreditAccountNumber: this.myBankModel.info.CreditAccount,
CreditAccountType: this.myBankModel.info.CreditProductType,
ExpensesServiceType: this.myBankModel.info.ExpensesType,
MyBankReferenceID: this.myBankModel.info.AuthorisationID,
FeeType: 0
};
this.IsBusy = !0;
this.transfersService.GetTransferExpenses(i).then(function (n) {
if (n.ResultCode !== 0) return t.qService.reject(n.Error);
t.Model.Fees = n.Fees
}).catch (function (i) {
t.Model.ErrorMessage = n.utils.getErrorMsg(i);
t.Model.HasErrors = !0
}).finally (function () {
t.IsBusy = !1
})
},
i.$inject = [
'TransfersService',
'Model',
'TransferUtilityService',
'debitAccounts',
'debitAccountsForOrderedTransfer',
'$state',
'$modal',
'$scope',
'$injector',
'userInfo',
'ProfileProductsService',
'StateHelperService',
'$q',
'SecurityService',
'$window',
'$parse',
'ProductMatchingService',
'WrapRequestService',
'RoleService',
'$window',
'otpHandler'
],
i
}(n.transfers.TransferWizardController);
n.myBank.mainModule.controller('MyBankTransferWizard', t)
}) (t = n.myBank || (n.myBank = {
}))
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(),
function (n) {
var t;
(function () {
var t = function (t) {
function i(n, i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k, d, g, nt, tt) {
var it = t.call(this, i, u, f, e, o, s, h, c, l, a, v, w, b, d, g, nt) || this,
rt;
return it.transfersService = n,
it.transferUtilityService = r,
it.securityService = y,
it.window = p,
it.wrapRequestService = k,
it.$timeout = tt,
it.RedirectionUrl = null,
it.executionDate = null,
it.windowUnloadListener = null,
it.timeRemaining = 0,
it.timer = '',
rt = function () {
var n = Math.floor(it.timeRemaining / 60).toString(),
t = (it.timeRemaining - parseInt(n) * 60).toString();
t.length < 2 && (t = '0' + t);
n.length < 2 && (n = '0' + n);
it.timeRemaining--;
it.timer = n + ':' + t;
it.timeRemaining == 0 && it.redirectToSeller(i.info.RedirectUrl);
tt(rt, 1000)
},
!it.Model.HasErrors && i && i.info ? (it.RedirectionUrl = i.info.RedirectUrl, it.timeRemaining = i.info.ValidityPeriod != null ? parseInt(i.info.ValidityPeriod)  : 300, rt(), it.windowUnloadListener = function () {
it.syncAbortTransaction()
}, p.addEventListener('beforeunload', it.windowUnloadListener))  : (it.canShowWizard = !1, it.signOff()),
it
}
return __extends(i, t),
Object.defineProperty(i.prototype, 'irisModel', {
get: function () {
return this.Model
},
enumerable: !0,
configurable: !0
}),
i.prototype.goBack = function () {
this.$window.history.back();
this.$window.history.back()
},
i.prototype.syncAbortTransaction = function () {
$.ajax({
url: 'api/Transfers.svc//abortTransaction',
type: 'POST',
async: !1,
contentType: 'application/json',
data: JSON.stringify(this.wrapRequestService({
IRISReferenceID: this.irisModel.info.AuthorisationID
}))
})
},
i.prototype.initialiseSteps = function () {
var t = this,
i = [
];
return i.push({
title: 'Στοιχεία Πληρωμής',
templateUrl: 'Templates/Features/iris/step1',
processStep: function () {
return t.otpHandler.reset({
payload: t.transferUtilityService.buildIrisPayload(t.irisModel)
}).enquire()
}
}),
i.push({
title: 'Επιβεβαίωση Στοιχείων',
templateUrl: 'Templates/Features/iris/step2',
processStep: [
function () {
return t.IsBusy = !0,
t.otpHandler.result().then(function () {
return t.otpHandler.appendExtraInfoToPayload(t.transferUtilityService.buildIrisPayload(t.irisModel))
}).then(function (n) {
return t.transfersService.ExecuteAlphaAccountTransfer(n, !0)
}).then(function (n) {
var i = t.setTransactionStatus(n);
return i ? (t.executionDate = n.ProcessDate, i)  : t.qService.reject(n.Error)
}).catch (function (i) {
var r = n.utils.getErrorMsg(i, t.STRINGS.failedTransaction);
return t.qService.reject(r)
}).finally (function () {
t.IsBusy = !1;
t.window.removeEventListener('beforeunload', t.windowUnloadListener)
})
}
]
}),
i.push({
title: 'Ολοκλήρωση Πληρωμής',
templateUrl: 'Templates/Features/iris/step3'
}),
i
},
i.prototype.cancelTransaction = function () {
var t = this;
this.IsBusy = !0;
this.transfersService.AbortTransaction({
IRISAuthorisationReqID: this.irisModel.info.AuthorisationID
}).then(function () {
t.redirectToSeller()
}).catch (function (i) {
t.Model.ErrorMessage = n.utils.getErrorMsg(i);
t.Model.HasErrors = !0;
t.IsBusy = !1
}).finally (function () {
t.window.removeEventListener('beforeunload', t.windowUnloadListener)
})
},
i.prototype.signOff = function () {
return this.securityService.signOff()
},
i.prototype.redirectToSeller = function (n) {
var t = this;
this.signOff().then(function (n) {
return n.ResultCode
}).then(function (i) {
i === 0 && (t.window.location.href = n ? n : t.RedirectionUrl)
}).catch (function () {
})
},
i.prototype.onProductChange = function () {
var t = this,
i = {
Amount: this.irisModel.info.Amount,
Currency: this.irisModel.DebitProduct.CurrencyEnum,
DebitAccountNumber: this.irisModel.DebitProduct.Code,
DebitAccountType: this.irisModel.DebitProduct.TypeID,
CreditAccountNumber: this.irisModel.info.CreditorIBAN,
CreditAccountType: this.irisModel.info.CreditAccountType,
ExpensesServiceType: 103,
IRISAuthorisationID: this.irisModel.info.AuthorisationID,
FeeType: 0
};
this.IsBusy = !0;
this.transfersService.GetTransferExpenses(i).then(function (n) {
if (n.ResultCode !== 0) return t.qService.reject(n.Error);
t.Model.Fees = n.Fees
}).catch (function (i) {
t.Model.ErrorMessage = n.utils.getErrorMsg(i);
t.Model.HasErrors = !0
}).finally (function () {
t.IsBusy = !1
})
},
i.$inject = [
'TransfersService',
'Model',
'TransferUtilityService',
'debitAccounts',
'debitAccountsForOrderedTransfer',
'$state',
'$modal',
'$scope',
'$injector',
'userInfo',
'ProfileProductsService',
'StateHelperService',
'$q',
'SecurityService',
'$window',
'$parse',
'ProductMatchingService',
'WrapRequestService',
'RoleService',
'$window',
'otpHandler',
'$timeout'
],
i
}(n.transfers.TransferWizardController);
n.iris.mainModule.controller('IrisTransferWizard', t)
}) (t = n.iris || (n.iris = {
}))
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(),
function (n) {
var t;
(function (t) {
var i = function () {
function n(n, t) {
this.scope = n;
this.$injector = t
}
return n.$inject = [
'$scope',
'$injector'
],
n
}(),
r;
t.CashManagementOverviewController = i;
n.cashManagement.module.controller('CashManagementOverviewController', i);
r = function (t) {
function i(n, i, r, u, f) {
var e = t.call(this, n, i) || this;
return e.ProfileProductsService = n,
e.stringservice = i,
e.rates = r,
e.scope = u,
e.exchangeService = f,
e.currencies = [
],
e.banks = [
],
e.country = [
],
e.filterConditions = {
},
e.displayedRecords = 10,
e.rate = null,
e.orderByAccountActions = [
],
e.calculateByCurrencyActions = [
],
e.initCalculateByCurrencyActions(),
e.orderByAccountActions = [
],
e
}
return __extends(i, t),
i.prototype.loadProducts = function () {
var n = this;
this.productsPromise = this.ProfileProductsService.getCashManagementProducts(!1).then(function (n) {
return n.filter(function (n) {
return n.Uses.some(function (n) {
return n === 3
}) && n.Uses.some(function (n) {
return n === 5
})
}).sort(function (n, t) {
return n.HasCMError || t.HasCMError ? n.HasCMError ? t.HasCMError ? 0 : 1 : - 1 : 0
})
});
this.productsPromise.then(function () {
setTimeout(function () {
n.fillUniqueValuesOfFilters();
n.initOrderByActions();
n.scope.$apply()
}, 0)
})
},
i.prototype.increaseDisplayedRecords = function () {
this.displayedRecords += 10
},
i.prototype.initOrderByActions = function () {
var t = this;
this.orderByAccountActions.push(new n.model.simpleProductMenuAction('Default', function () {
t.rate = null
}));
this.currencies.map(function (i) {
n.utils.isUndefinedOrNullorWhiteSpace(i) || (i === 'ALL' && (i = 'ALL '), t.orderByAccountActions.push(new n.model.simpleProductMenuAction(i, function () {
i = i.trim();
var n = t.rates.filter(function (n) {
return n.CurrencyName == i
}) [0];
t.previousCurrency = t.rate ? t.rate.CurrencyName : undefined;
t.rate = n
})))
})
},
i.prototype.convertBalance = function (n, t, i) {
var r,
u,
f;
return (n === void 0 && (n = 0), i === void 0 && (i = ''), r = angular.element('meta[name = \'Locale\']'), u = r && r.attr('content') == 'en' ? 'en-GB' : 'el-GR', this.rate && i && t) ? (f = parseFloat(this.exchangeService.ConvertBalanceTo(n, t, i, this.rates)), f.toLocaleString(u))  : n.toLocaleString(u)
},
i.prototype.initCalculateByCurrencyActions = function () {
var t = this;
this.calculateByCurrencyActions.push(new n.model.simpleProductMenuAction('OrderAlphabetΑΖ', function () {
t.selectByOrder = 'Title';
t.reverse = !0
}));
this.calculateByCurrencyActions.push(new n.model.simpleProductMenuAction('OrderAlphabetZA', function () {
t.selectByOrder = 'Title';
t.reverse = !1
}));
this.calculateByCurrencyActions.push(new n.model.simpleProductMenuAction('countryTitle', function () {
t.selectByOrder = 'Country';
t.reverse = !1
}));
this.calculateByCurrencyActions.push(new n.model.simpleProductMenuAction('bankTitle', function () {
t.selectByOrder = 'Bank';
t.reverse = !1
}))
},
i.prototype.fillUniqueValuesOfFilters = function () {
this.currencies = n.utils.getUniqueValues(this.rates, 'CurrencyName');
this.currencies.unshift('');
this.banks = n.utils.getUniqueValues(this.products, 'Bank');
this.banks.unshift('');
this.country = n.utils.getUniqueValues(this.products, 'Country');
this.country.unshift('')
},
i.prototype.calculateSum = function () {
var n = 0;
this.products.map(function (t) {
t.hasError || (n += t.AmountInEUR)
});
this.productbalanceSum = Math.abs(n);
this.productbalanceSumSign = this.stringservice.creditSign;
n < 0 && (this.productbalanceSumSign = this.stringservice.debitSign);
this.loading = !1
},
i.$inject = [
'ProfileProductsService',
'STRINGS',
'rates',
'$scope',
'ExchangeService'
],
i
}(n.overview.ProductCategoryOverviewController);
n.cashManagement.module.controller('CashManagementAccountsController', r)
}) (t = n.cashManagement || (n.cashManagement = {
}))
}(alpha || (alpha = {
})),
function (n) {
var t;
(function () {
n.cashManagement.module.config(['$stateProvider',
function (t) {
t.state('root.cash', {
abstract: !0,
url: '/cash-mgmt',
template: '<div data-ui-view=""></div>',
resolve: {
products: [
'ProfileProductsService',
function (n) {
return n.getCashManagementProducts().then(function (n) {
return n.filter(function (n) {
return n.Uses.some(function (n) {
return n === 3
}) && n.Uses.some(function (n) {
return n === 5
})
})
})
}
]
}
}).state(n.constants.stateNames.cashManagementOverview, {
url: '/overview',
views: {
'': {
templateUrl: 'Templates/Features/CashManagement/overview',
controller: 'CashManagementOverviewController as vm'
},
'approval@root.cash.overview': n.jobs.configApprovals,
'cashManagementAccounts@root.cash.overview': {
templateUrl: 'Templates/Features/CashManagement/cashManagementAccounts',
controller: 'CashManagementAccountsController as vm',
resolve: {
rates: [
'PublicServiceProxy',
function (n) {
return n.getRates({
}).then(function (n) {
return n.Rates
})
}
]
}
}
}
}).state(n.constants.stateNames.cashManagementAccoundDetails, {
templateUrl: 'Templates/Features/CashManagement/accountDetails',
controller: 'ProductDetailsControllerCashManagement as vm',
url: '/details/transactions/:id',
resolve: {
rates: [
'PublicServiceProxy',
function (n) {
return n.getRates({
}).then(function (n) {
return n.Rates
})
}
],
currencies: [
'LookupsService',
function (n) {
return n.getCurrenciesForTransfers()
}
],
product: [
'products',
'ProductsService',
'$stateParams',
'ProfileProductsService',
'CashManagementServiceProxy',
'$q',
function (t, i, r, u, f, e) {
var o = null,
s,
h;
return o = r.id ? r.id : t[0].id,
s = window.atob(o.toString()),
h = + s,
u.getCashManagementProducts().then(function (n) {
return n.filter(function (n) {
return n.BankProduct.ProductID == h
})
}).then(function (t) {
if (!t || t.length <= 0) return e.reject('ProductNotFound');
var i = t[0];
return f.getCMAccountBalance({
ProductCode: i.Code,
ProductTypeID: i.TypeID,
ID: i.BankProduct.ProductID,
Title: i.Title,
ProductDetails: i.BankProduct.Details,
ProviderId: i.BankProduct.ProviderID,
ProviderName: i.BankProduct.TypeName,
Name: i.BankProduct.TypeName
}).then(function (t) {
var r = t.Details,
u;
return r && (u = {
Details: [
{
DataType: 0,
Name: n.server.DetailName.ADDRESS,
Value: r.Address || ''
},
{
DataType: 0,
Name: n.server.DetailName.BIC_CODE,
Value: r.BIC || ''
},
{
DataType: 0,
Name: n.server.DetailName.BANK_NAME,
Value: r.Bank || ''
},
{
DataType: 0,
Name: n.server.DetailName.BENEFICIARY_NAME,
Value: r.BeneficiaryName || ''
},
{
DataType: 0,
Name: n.server.DetailName.CountryDescrEl,
Value: r.Country || ''
},
{
DataType: 0,
Name: n.server.DetailName.CountryDescrEn,
Value: r.Country || ''
},
{
DataType: 0,
Name: n.server.DetailName.IBAN,
Value: r.Code || ''
},
{
DataType: 0,
Name: n.server.DetailName.CMLastUpdateDate,
Value: r.LastUpdatedate || ''
}
]
}, i.BankProduct = n.utilities.cloneProductWithEditedFields(i.BankProduct, u), n.utils.isUndefinedOrNull(r.Balance) || (i.Balance = {
}, i.Balance.WithdrawAmount = r.Balance.WithdrawAmount, i.Balance.WithdrawAmountSign = r.Balance.WithdrawAmountSign, i.Balance.NetBalance = r.Balance.NetBalance, i.Balance.NetBalanceSign = r.Balance.NetBalanceSign, i.Balance.Currency = r.Balance.Currency, i.Balance.Blocks = r.Balance.Blocks, i.Balance.Owners = r.Balance.Owners)),
e.when(i)
}, function (n) {
console.log(n)
})
}, function (n) {
console.log(n)
})
}
]
}
}).state('root.cash.accounts.transactions', {
templateUrl: 'Templates/Features/Accounts/detailsTransactions',
controller: 'AccountsTransactionsController as vm',
url: '/',
resolve: {
statementsResponse: [
'$q',
'CashManagementServiceProxy',
'$stateParams',
'product',
'ProductsService',
function (n, t, i, r, u) {
return r ? r.IsAlphaBankProduct ? u.getAccountStatements(r.Code, r.TypeID, 10, !0)  : t.getAccountCMEStatements({
Product: r.BankProduct,
MaxRecords: 10
}).then(function (n) {
for (var i = [
], t = 0; t < n.Statements.length; ++t) i.push({
Amount: n.Statements[t].amnt,
AmountSign: n.Statements[t].dCFlag,
EntryDate: n.Statements[t].entryDT,
Valeur: n.Statements[t].valueDT,
TransactionUN: n.Statements[t].refField,
HasCumulative: !1,
Priority: 1,
Reason: n.Statements[t].suplDtls
});
return n.Statements = i,
n
}, function () {
return {
}
})  : n.reject('ProductNotFound')
}
]
}
}).state('root.cash.accounts.statements', {
templateUrl: 'Templates/Features/Accounts/detailsEStatements',
controller: 'AccountEStatementsController as vm',
url: '/statements',
resolve: {
estatementsResponse: [
'ProductsService',
'$stateParams',
'product',
function (n, t, i) {
return n.getAccountEStatements({
ProductCode: i.Code,
ProductTypeID: i.TypeID
})
}
]
}
}).state('root.cash.accounts.cheques', {
templateUrl: 'Templates/Features/Accounts/detailsCheques',
controller: 'AccountsChequesController as vm',
url: '/cheques',
resolve: {
cheques: [
'ProductsService',
'$stateParams',
'product',
function (n, t, i) {
return n.getChequeStatus({
ProductCode: i.Code,
ProductTypeID: i.TypeID,
MaxRecords: 10,
ReturnChequeBooksInfo: !0
})
}
]
}
}).state('root.cash.accounts.incomingOrders', {
templateUrl: 'Templates/Features/Accounts/detailsIncomingOrders',
controller: 'AccountsIncomingOrdersController as vm',
url: '/incomingOrders',
resolve: {
incomingOrders: [
'ProductsService',
'$stateParams',
'product',
function (n, t, i) {
return n.getIncomingOrders(i.Code, i.TypeID, 10)
}
],
currenciesLookup: [
'LookupsService',
function (n) {
return n.getCurrenciesForQueries()
}
],
appLocale: [
'$document',
'LanguageService',
function (n, t) {
return t.getLanguage()
}
]
}
}).state('root.cash.accounts.blocks', {
templateUrl: 'Templates/Features/Accounts/detailsBlocks',
controller: 'AccountsBlocksController as vm',
url: '/blocks',
resolve: {
blocksResponse: [
'QueriesService',
'$stateParams',
'product',
function (n, t, i) {
return n.getProductBlocks({
DebitProductCode: i.Code,
DebitProductType: i.TypeID,
MaxRecords: 10
})
}
]
}
}).state('root.cash.accounts.withheld', {
templateUrl: 'Templates/Features/Accounts/detailsHolds',
controller: 'AccountsHoldsController as vm',
url: '/holds',
resolve: {
holdsResponse: [
'QueriesService',
'$stateParams',
'product',
function (n, t, i) {
return n.getProductHolds({
DebitProductCode: i.Code,
DebitProductType: i.TypeID,
MaxRecords: 10
})
}
]
}
}).state('root.cash.accounts.unclear', {
templateUrl: 'Templates/Features/Accounts/detailsUnclears',
controller: 'AccountsUnclearController as vm',
url: '/unclear',
resolve: {
unclearsResponse: [
'QueriesService',
'$stateParams',
'product',
function (n, t, i) {
return n.getProductUnclears({
DebitProductCode: i.Code,
DebitProductType: i.TypeID,
MaxRecords: 10
})
}
]
}
}).state('root.cash.transfer', {
url: '/transfer',
templateUrl: 'Templates/Features/CashManagement/transferContainer',
controller: [
'$scope',
'RoleService',
'$state',
function (n, t, i) {
n.isApproval = !1;
n.role = t.getRoleString();
n.isCashManagement = !0;
n.$state = i
}
],
resolve: {
providerInfo: [
'InquiryServiceProxy',
function (t) {
return t.getProviders({
}).then(function (t) {
return t.Items.filter(function (t) {
return t.IsAffiliated && !n.utils.isUndefinedOrNullorWhiteSpace(t.Country) || t.Country == 'GR'
})
})
}
],
providersIds: [
'providerInfo',
function (n) {
return n.map(function (n) {
return n.Id
})
}
],
debitAccounts: [
'providersIds',
'products',
function (n, t) {
return t.filter(function (t) {
return t.Uses.some(function (n) {
return n == 2
}) && n.some(function (n) {
return n === t.BankProduct.ProviderID
})
})
}
],
potentialCreditAccounts: [
'providersIds',
'ProfileProductsService',
function (n, t) {
return t.getCashManagementProducts().then(function (t) {
return t.filter(function (t) {
return t.Uses.some(function (n) {
return n == 1
}) && n.some(function (n) {
return n === t.BankProduct.ProviderID
})
})
})
}
],
transferCategories: [
'LookupsService',
function (n) {
return n.getTransferCategory()
}
],
userInfo: [
'SecurityService',
function (n) {
return n.getUserSessionInfo()
}
],
debitAccountsForOrderedTransfer: function () {
return []
},
otpHandler: [
'OtpHandlerService',
function (n) {
return n.retrieveHandler(1, {
uiContext: {
isNewScreen: !0
}
})
}
]
}
}).state('root.cash.pending', {
url: '/pending',
templateUrl: 'Templates/Features/CashManagement/transferContainer',
controller: [
'$scope',
'RoleService',
'$state',
function (n, t, i) {
n.isApproval = !0;
n.role = t.getRoleString();
n.isCashManagement = !0;
n.$state = i
}
],
resolve: {
providerInfo: [
'InquiryServiceProxy',
function (t) {
return t.getProviders({
}).then(function (t) {
return t.Items.filter(function (t) {
return t.IsAffiliated && !n.utils.isUndefinedOrNullorWhiteSpace(t.Country) || t.Country == 'GR'
})
})
}
],
providersIds: [
'providerInfo',
function (n) {
return n.map(function (n) {
return n.Id
})
}
],
debitAccounts: [
'providersIds',
'products',
function (n, t) {
return t.filter(function (t) {
return t.Uses.some(function (n) {
return n == 2
}) && n.some(function (n) {
return n === t.BankProduct.ProviderID
}) && null != t.countryISOCode
})
}
],
potentialCreditAccounts: [
'providersIds',
'ProfileProductsService',
function (n, t) {
return t.getCashManagementProducts().then(function (t) {
var i = t.filter(function (n) {
return n.Uses.some(function (n) {
return n === 1
})
});
return t.filter(function (t) {
return t.Uses.some(function (n) {
return n == 1
}) && n.some(function (n) {
return n === t.BankProduct.ProviderID
})
})
})
}
],
transferCategories: [
'LookupsService',
function (n) {
return n.getTransferCategory()
}
],
userInfo: [
'SecurityService',
function (n) {
return n.getUserSessionInfo()
}
],
debitAccountsForOrderedTransfer: function () {
return []
}
}
}).state('root.cash.transfer.BetweenAlphaGroup', {
url: '/transfer',
controller: 'CashManagementTransferInGroupController as vm',
templateUrl: 'Templates/Features/CashManagement/menuWizardWrapper',
resolve: {
Model: [
'QueriesService',
function (t) {
var i = new n.model.TransferInGroup;
return i.UseProfileProduct = !0,
t.getDatesAndOnLineStatus().then(function (n) {
return i.setDatesAndOnlineStatus(n),
i
}, function () {
return i.HasErrors = !0,
i.ErrorMessage = 'Could not get online status and calendar information.',
i
})
}
]
}
}).state('root.cash.pending.BetweenAlphaGroup', {
url: '/jobBetweenAlphaGroup',
controller: 'CashManagementJobTransferInGroupController as vm',
templateUrl: 'Templates/Features/CashManagement/menuWizardWrapper',
resolve: {
Model: [
'QueriesService',
function (t) {
var i = new n.model.TransferInGroup;
return i.UseProfileProduct = !0,
t.getDatesAndOnLineStatus().then(function (n) {
return i.setDatesAndOnlineStatus(n),
i.IsJobSubmission = !0,
i
}, function () {
return i.HasErrors = !0,
i.ErrorMessage = 'Could not get online status and calendar information.',
i
})
}
]
}
}).state(n.constants.stateNames.newBoGTransferState, {
url: '/bankOfGreece/:key',
controller: 'TransferBoGWizardController as vm',
templateUrl: 'Templates/Features/CashManagement/menuWizardWrapper',
resolve: {
Model: [
'QueriesService',
'banks',
'$stateParams',
'StateHelperService',
function (t, i, r, u) {
var f = new n.model.BoGTransferInfo(i[0]),
e;
return f.Banks = i,
f.TransferMethodImmediate = !0,
e = t.getDatesAndOnLineStatus().then(function (n) {
var t = n;
return f.setDatesAndOnlineStatus(t),
f
}, function () {
return f.HasErrors = !0,
f.ErrorMessage = 'Could not get online status and calendar information.',
f
}),
e.then(function (n) {
var t = r.key,
i;
return t && (i = u.getStateData(t), u.setStateData(t, i)),
n
})
}
],
behaviorConfig: function () {
return {
hasFees: !1
}
},
hasFees: function () {
return !1
},
debitAccounts: [
'ProfileProductsService',
function (t) {
return t.getCashManagementProducts().then(function (t) {
return t.filter(function (t) {
return t.Uses.some(function (n) {
return n == 2
}) && t.BankProduct.Currency == n.server.Currency.EUR && t.BankProduct.CategoryType == 10001
})
})
}
],
banks: [
'LookupsService',
function (n) {
var t = [
];
return t.push(n.getBoG()),
t
}
],
interbankCreditAccounts: [
'ProfileProductsService',
function (t) {
return t.getCashManagementProducts().then(function (t) {
return t.filter(function (t) {
return t.Uses.some(function (n) {
return n == 1
}) && t.BankProduct.Currency == n.server.Currency.EUR && (t.BankProduct.ProviderID == 11 || t.BankProduct.ProviderID == 12)
})
})
}
],
userInfo: [
'SecurityService',
function (n) {
return n.getUserSessionInfo()
}
]
}
}).state('root.cash.transfer.toDomesticBankAccount', {
url: 'interbank/',
controller: 'InterBankTransferWizard as vm',
templateUrl: 'Templates/Features/Transfers/newTransferWizard',
resolve: n.transfers.getInterBankAndCashManagement({
Model: [
'QueriesService',
'banks',
'$stateParams',
'StateHelperService',
function (t, i, r, u) {
var f = new n.model.InterBankTransferInfo,
e;
return f.Banks = i,
e = t.getDatesAndOnLineStatus().then(function (n) {
var t = n;
return f.setDatesAndOnlineStatus(t),
f
}, function () {
return f.HasErrors = !0,
f.ErrorMessage = 'Could not get online status and calendar information.',
f
}),
e.then(function (n) {
var f = r.key,
i;
return f && (i = u.getStateData(f), i && i.Transaction) ? t.getTransactionTemplates(t.getTransactionTemplatesRequest(i.ID, 0)).then(function (t) {
return u.setStateData(f, t.Templates[0]),
n
})  : n
})
}
],
debitAccounts: [
'ProfileProductsService',
function (t) {
return t.getCashManagementProducts().then(function (t) {
return t.filter(function (t) {
return t.Uses.some(function (n) {
return n == 2
}) && t.BankProduct.Currency == n.server.Currency.EUR && t.BankProduct.ProviderID == 1
})
})
}
],
banks: [
'LookupsService',
function (n) {
return n.getBanks().then(function (n) {
return n.filter(function (n) {
return n.TypeID != 20042
})
})
}
]
})
}).state('root.cash.transfer.ToOtherBankOUTOfGreece', {
url: '/international',
controller: 'InternationalTransferWizard as vm',
templateUrl: 'Templates/Features/Transfers/newTransferWizard',
resolve: n.transfers.getInternationalCMBankStateResolve({
Model: [
'QueriesService',
'countries',
'banks',
function (t, i, r) {
var u = new n.model.InternationalTransferInfo;
return u.Countries = i,
u.Banks = r,
t.getDatesAndOnLineStatus().then(function (n) {
var t = n;
return u.setDatesAndOnlineStatus(t),
u
}, function () {
return u.HasErrors = !0,
u.ErrorMessage = 'Could not get online status and calendar information.',
u
})
}
],
debitAccounts: [
'ProfileProductsService',
function (n) {
return n.getCashManagementProducts().then(function (n) {
return n.filter(function (n) {
return n.Uses.some(function (n) {
return n == 2
}) && n.BankProduct.CategoryType != 104 && n.BankProduct.ProviderID == 1
})
})
}
]
})
}).state('root.cash.transfer.FromOtherBank', {
url: '/FromOtherBank',
controller: 'fromOtherBankTransferWizard as vm',
templateUrl: 'Templates/Features/Transfers/newTransferWizard',
resolve: n.transfers.getFromOthersBankStateResolve({
Model: [
'QueriesService',
'countries',
'banks',
function (t, i, r) {
var u = new n.model.InternationalTransferInfo;
return u.Countries = i,
u.Banks = r,
t.getDatesAndOnLineStatus().then(function (n) {
var t = n;
return u.setDatesAndOnlineStatus(t),
u
}, function () {
return u.HasErrors = !0,
u.ErrorMessage = 'Could not get online status and calendar information.',
u
})
}
],
otpHandler: [
'OtpHandlerService',
function (n) {
return n.activatedHandler(1, 'awb.transfer.external')
}
]
})
}).state('root.cash.pending.FromOtherBank', {
url: '/FromOtherBank',
controller: 'fromOtherBankJobTransferWizard as vm',
templateUrl: 'Templates/Features/Transfers/newTransferWizard',
resolve: n.transfers.getFromOthersBankStateResolve({
Model: [
'QueriesService',
'countries',
'banks',
function (t, i, r) {
var u = new n.model.InternationalTransferInfo;
return u.IsJobSubmission = !0,
u.ContactNumber = '',
u.Countries = i,
u.Banks = r,
t.getDatesAndOnLineStatus().then(function (n) {
var t = n;
return u.setDatesAndOnlineStatus(t),
u.IsJobSubmission = !0,
u
}, function () {
return u.HasErrors = !0,
u.ErrorMessage = 'Could not get online status and calendar information.',
u
})
}
],
otpHandler: [
'OtpHandlerService',
function (n) {
return n.retrieveHandler(28, {
uiContext: {
isNewScreen: !0
}
})
}
]
})
}).state('root.cash.pending.toDomesticBankAccount', {
url: '/interbank',
controller: 'InterBankJobTransferWizard as vm',
templateUrl: 'Templates/Features/Transfers/newTransferWizard',
resolve: n.transfers.getInterBankAndCashManagement({
Model: [
'QueriesService',
'banks',
'$stateParams',
'StateHelperService',
function (t, i) {
var r = new n.model.InterBankTransferInfo;
return r.Banks = i,
t.getDatesAndOnLineStatus().then(function (n) {
var t = n;
return r.setDatesAndOnlineStatus(t),
r.IsJobSubmission = !0,
r
}, function () {
return r.HasErrors = !0,
r.ErrorMessage = 'Could not get online status and calendar information.',
r
})
}
],
debitAccounts: [
'ProfileProductsService',
function (t) {
return t.getCashManagementProducts().then(function (t) {
return t.filter(function (t) {
return t.Uses.some(function (n) {
return n == 2
}) && t.BankProduct.Currency == n.server.Currency.EUR && t.BankProduct.ProviderID == 1
})
})
}
],
banks: [
'LookupsService',
function (n) {
return n.getBanks().then(function (n) {
return n.filter(function (n) {
return n.TypeID != 20042
})
})
}
]
})
}).state('root.cash.pending.ToOtherBankOUTOfGreece', {
url: '/international',
controller: 'InternationalJobTransferWizard as vm',
templateUrl: 'Templates/Features/Transfers/newTransferWizard',
resolve: n.transfers.getInternationalCMBankStateResolve({
Model: [
'QueriesService',
'countries',
'banks',
function (t, i, r) {
var u = new n.model.InternationalTransferInfo;
return u.ContactNumber = '',
u.Countries = i,
u.Banks = r,
t.getDatesAndOnLineStatus().then(function (n) {
var t = n;
return u.setDatesAndOnlineStatus(t),
u.IsJobSubmission = !0,
u
}, function () {
return u.HasErrors = !0,
u.ErrorMessage = 'Could not get online status and calendar information.',
u
})
}
],
debitAccounts: [
'ProfileProductsService',
function (n) {
return n.getCashManagementProducts().then(function (n) {
return n.filter(function (n) {
return n.Uses.some(function (n) {
return n == 2
}) && n.BankProduct.CategoryType != 104 && n.BankProduct.ProviderID == 1
})
})
}
]
})
}).state('root.cash.transfer.history', angular.extend({
}, n.transfers.transfersHistoryConfig)).state('root.cash.pending.history', angular.extend({
}, n.jobs.jobsHistoryConfig)).state(n.constants.stateNames.newBoGTransferState_Job, {
url: '/jobAccountAtBoG',
controller: 'TransferBoGJobWizardController as vm',
templateUrl: 'Templates/Features/CashManagement/menuWizardWrapper',
resolve: {
Model: [
'QueriesService',
'banks',
function (t, i) {
var r = new n.model.BoGTransferInfo(i[0]);
return r.Banks = i,
r.TransferMethodImmediate = !0,
t.getDatesAndOnLineStatus().then(function (n) {
var t = n;
return r.setDatesAndOnlineStatus(t),
r.IsJobSubmission = !0,
r
}, function () {
return r.HasErrors = !0,
r.ErrorMessage = 'Could not get online status and calendar information.',
r
})
}
],
behaviorConfig: function () {
return {
hasFees: !1
}
},
hasFees: function () {
return !1
},
debitAccounts: [
'ProfileProductsService',
function (t) {
return t.getCashManagementProducts().then(function (t) {
return t.filter(function (t) {
return t.Uses.some(function (n) {
return n == 2
}) && t.BankProduct.Currency == n.server.Currency.EUR && t.BankProduct.CategoryType == 10001
})
})
}
],
banks: [
'LookupsService',
function (n) {
var t = [
];
return t.push(n.getBoG()),
t
}
],
interbankCreditAccounts: [
'ProfileProductsService',
function (t) {
return t.getCashManagementProducts().then(function (t) {
return t.filter(function (t) {
return t.Uses.some(function (n) {
return n == 1
}) && t.BankProduct.Currency == n.server.Currency.EUR && (t.BankProduct.ProviderID == 11 || t.BankProduct.ProviderID == 12)
})
})
}
],
userInfo: [
'SecurityService',
function (n) {
return n.getUserSessionInfo()
}
],
otpHandler: [
'OtpHandlerService',
function (n) {
return n.retrieveHandler(28, {
uiContext: {
isNewScreen: !0
}
})
}
]
}
})
}
])
}) (t = n.cashManagement || (n.cashManagement = {
}))
}(alpha || (alpha = {
})),
function (n) {
var t = function () {
function t(t, i, r, u, f, e, o, s, h, c, l) {
this.CashManagementServiceProxy = t;
this.product = i;
this.stateService = u;
this.SecurityService = f;
this.ProductsService = e;
this.modal = o;
this.postNewWindowService = s;
this.rates = h;
this.exchangeService = c;
this.modalService = l;
this.currencies = [
];
this.displayDetails = {
};
this.errorMessageMT920 = '';
this.today = new Date;
this.currencies = n.utils.getUniqueValues(this.rates, 'CurrencyName');
this.currencies.unshift('');
var a = this;
this.products = r.filter(function (t) {
if (!n.utils.isUndefinedOrNull(t) && !n.utils.isUndefinedOrNull(a.product)) return t.id != a.product.id && !t.hasError
});
this.selectedProduct = this.product;
this.SecurityService.getUserSessionInfo().then(function (n) {
a.currentWorkingDate = n.CurrentWorkingDate
});
n.utils.isUndefinedOrNull(this.product) || (this.mutualDocumentData = this.ProductsService.getMutualInfoRequest(this.product.Code, this.product.TypeID), this.mutualDocumentData.DocumentRequestType = 11);
this.showUpdateBalance = n.utils.getValueFromDetails(i.BankProduct, n.server.DetailName.SWIFT_OPTION_MT941);
this.showUpdateIStatenment = n.utils.getValueFromDetails(i.BankProduct, n.server.DetailName.SWIFT_OPTION_MT941);
this.stockDocumentData = {
DocumentRequestType: 25
};
this.setDisplayDetails()
}
return t.prototype.selectProduct = function (n) {
this.stateService.go('root.cash.accounts.transactions', {
id: n.id
})
},
t.prototype.canIUpdateBalance = function () {
this.update(0)
},
t.prototype.canIUpdateStatenment = function () {
this.update(1)
},
t.prototype.update = function (n) {
var t = this,
i;
this.product && (this.item = n, this.errorMessageMT920 = '', i = {
st_920MsgType: n,
Product: this.product.BankProduct
}, this.CashManagementServiceProxy.statusOfQueryMT920(i).then(function (n) {
t.statusPendingMT920 = n.Status == 1 || n.Status == 2 ? !0 : !1
}, function (n) {
n.ResultCode != 0 && (t.errorMessageMT920 = n.Error.Message)
}).finally (function () {
t.showModal()
}))
},
t.prototype.showModal = function () {
var n = this;
this.modalService.open({
templateUrl: 'Templates/Features/CashManagement/updateAccountModal',
size: 'lg',
backdrop: 'static',
controller: [
'$scope',
'$modalInstance',
function (t, i) {
t.statusPendingMT920 = n.statusPendingMT920;
t.UpdateBalance = n.item === 0;
t.UpdateStatements = !t.UpdateBalance;
t.errorMessage = n.errorMessageMT920;
t.execute = function () {
var i = {
st_920MsgType: n.item,
Product: n.product.BankProduct
};
n.CashManagementServiceProxy.performRequestForUpdateAccounts(i).then(function (n) {
n.ResultCode != 0 ? t.errorMessage = n.Error.Message : t.dismiss()
}, function (t) {
t.ResultCode != 0 && (n.errorMessageMT920 = t.Error.Message)
})
};
t.dismiss = function () {
i.dismiss()
}
}
]
})
},
t.prototype.convertBalance = function (n, t, i) {
return n === void 0 && (n = 0),
i && t ? this.exchangeService.ConvertBalanceTo(n, t, i, this.rates)  : n.toString()
},
t.prototype.getFundDetails = function (t, i, r, u, f) {
var e = this.modal.open({
templateUrl: 'Templates/Features/Investments/fundsModal',
size: 'lg',
controller: 'FundsModalInstanceCtrl as vm',
windowClass: 'custom',
resolve: {
fundDetails: [
'ProductsService',
function (n) {
return n.getMutualDetailsInfo({
ProductCode: t,
ProductTypeID: i,
FundCode: r
})
}
],
shareDate: [
function () {
return u
}
],
balanceDate: [
function () {
return f
}
],
documentData: [
'ProductsService',
function (e) {
var o = e.getMutualDetailsInfoRequest(t, i, r),
s,
h;
return o.DocumentRequestType = 28,
o.KeyValueDictionary = [
],
s = new n.model.KeyValue,
s.Key = 'shareDate',
s.Value = n.utils.isUndefinedOrNullorWhiteSpace(u) ? null : u.toString(),
o.KeyValueDictionary.push(s),
h = new n.model.KeyValue,
h.Key = 'balanceDate',
h.Value = n.utils.isUndefinedOrNullorWhiteSpace(f) ? null : f.toString(),
o.KeyValueDictionary.push(h),
o.ProductCode = t,
o
}
],
portfolioAcc: [
function () {
return t
}
]
}
})
},
t.prototype.getCurrentTerms = function () {
var t = this.product,
n = {
};
n.Parameters = JSON.stringify({
ApplicationId: t.eTimeDeposit.ApplicationId
});
n.PDFRequestType = 13;
this.postNewWindowService(n, 'GetPdf', !1)
},
t.prototype.setDisplayDetails = function () {
var t = this.product.BankProduct.Details;
t && (this.displayDetails.Beneficiary = this.getDetailsValue(t, n.server.DetailName.BENEFICIARY_NAME), this.displayDetails.IBAN = this.product.Code, this.displayDetails.BankName = this.getDetailsValue(t, n.server.DetailName.BANK_NAME), this.displayDetails.Country = this.getDetailsValue(t, n.server.DetailName.CountryDescrEl), this.displayDetails.Bic = this.getDetailsValue(t, n.server.DetailName.BIC_CODE), this.displayDetails.Address = this.getDetailsValue(t, n.server.DetailName.ADDRESS), this.displayDetails.LastUpdatedate = this.getDetailsValue(t, n.server.DetailName.CMLastUpdateDate))
},
t.prototype.getDetailsValue = function (n, t) {
for (var r = n.length, i = 0; i < r; i++) if (n[i].Name == t) return n[i].Value;
return undefined
},
t.$inject = [
'CashManagementServiceProxy',
'product',
'products',
'$state',
'SecurityService',
'ProductsService',
'$modal',
'postNewWindowService',
'rates',
'ExchangeService',
'$modal'
],
t
}();
n.app.controller('ProductDetailsControllerCashManagement', t)
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(),
function (n) {
var t;
(function () {
var t = function (t) {
function i(i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b) {
var k = t.call(this, e, u, u, s, h, i, r, o, c, l, a, v, y, p, w, b) || this,
d,
g;
return k.interbankCreditAccounts = f,
k.creditAccounts = [
],
k.transactionCodes = [
],
k.debitReasonRegExp = null,
k.creditReasonRegExp = null,
k.canShowWizard = !e.HasErrors,
k.parseService = r.get('$parse'),
d = l.getStateData(),
d && (g = d.Transaction ? d.Transaction : d, e = n.transactions.TransactionUtils.TransactionToBogTransferInfo(g, e, u, k.interbankCreditAccounts, y)),
k
}
return __extends(i, t),
i.prototype.createExecuteRequest = function () {
var t = this,
i = t.Model;
return {
Amount: this.Model.Amount,
CreditProductCode: this.Model.CreditAccount.Code,
CreditProductType: this.Model.CreditAccount.TypeID,
CreditReason: this.Model.CreditReason || n.utils.formatString('AWB {0} {1}', [
this.userInfo.Name,
this.userInfo.SurName
]),
DebitProductCode: this.Model.DebitProduct.Code,
DebitProductCurrency: this.Model.DebitProduct.CurrencyEnum,
DebitProductType: this.Model.DebitProduct.TypeID,
DebitReason: this.Model.DebitReason || n.utils.formatString('AWB {0}', [
this.Model.CreditAccount.Code.substr( - 15)
]),
TransferCategory: 0,
TransferDetails: [
new n.model.Detail(n.model.DetailName.BANK_NAME, n.model.DetailDataType.String, i.CreditAccountBank.TypeName),
new n.model.Detail(n.model.DetailName.BIC_CODE, n.model.DetailDataType.String, this.Model.CreditAccount.Bic)
],
TransferType: 13
}
},
i.prototype.initialiseSteps = function () {
var n = this,
t = [
],
u = {
title: 'Στοιχεία Μεταφοράς',
templateUrl: 'Templates/Features/CashManagement/TransferToBoG/step1',
processStep: [
'TransfersService',
function (t) {
return n.otpHandler.reset({
payload: n.createExecuteRequest()
}).enquire().then(function () {
return t.GetTransferExpenses({
Amount: n.Model.Amount,
DebitAccountNumber: n.Model.DebitProduct.Code,
DebitAccountType: n.Model.DebitProduct.TypeID,
CreditAccountNumber: n.Model.CreditAccount.Code,
CreditAccountType: n.Model.CreditAccount.TypeID,
ExpensesServiceType: 0,
Currency: n.Model.DebitProduct.CurrencyEnum,
FeeType: 1
})
}).then(function (t) {
return n.Model.AmountLiteral = t.Fees.DebitAmountLiteral,
t
})
}
]
},
r,
i;
return t.push(u),
r = {
title: 'Επιβεβαίωση Στοιχείων',
templateUrl: 'Templates/Features/CashManagement/TransferToBoG/step2',
processStep: [
'TransfersService',
'JobsServiceProxy',
function (t) {
var r = n.Model,
i = n.createExecuteRequest();
return n.otpHandler.result(i).then(function () {
return n.otpHandler.appendExtraInfoToPayload(i, 'OTP')
}).then(function () {
return t.ExecuteAlphaAccountTransfer(i, r.Online)
}).then(function (t) {
var i = n.setTransactionStatus(t);
return i ? n.$q.when(!0)  : n.$q.reject(n.getErrorMessage(t, 'Error.Message'))
})
}
]
},
t.push(r),
i = {
templateUrl: 'Templates/Features/CashManagement/TransferToBoG/step3',
title: 'Αποτελέσμα συναλλαγής'
},
i.processStep = [
'$q',
function (n) {
var i = this,
r = i.Model,
t = n.defer();
return t.resolve(!1),
t.promise
}
],
t.push(i),
t
},
i.$inject = [
'$scope',
'$injector',
'debitAccounts',
'interbankCreditAccounts',
'Model',
'userInfo',
'$state',
'$modal',
'ProfileProductsService',
'StateHelperService',
'$q',
'$parse',
'ProductMatchingService',
'RoleService',
'$window',
'otpHandler'
],
i
}(n.transfers.TransferWizardController),
i = function (t) {
function i() {
return t !== null && t.apply(this, arguments) || this
}
return __extends(i, t),
i.prototype.initialiseSteps = function () {
var i = this,
r = t.prototype.initialiseSteps.call(this);
return r[1].processStep = function () {
var t = i.createExecuteRequest();
return i.preExecute(t),
i.otpHandler.result().then(function () {
return i.otpHandler.appendExtraInfoToPayload(t, 'OTP')
}).then(function () {
return i.$injector.invoke(n.jobs.submitJob, null, {
jobType: 0,
model: i.Model,
payload: t,
scope: i.scope
})
})
},
r
},
i
}(t);
n.cashManagement.module.controller('TransferBoGWizardController', t);
n.cashManagement.module.controller('TransferBoGJobWizardController', i)
}) (t = n.cashManagement || (n.cashManagement = {
}))
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(),
function (n) {
var t;
(function (t) {
var i = function (t) {
function i(n, i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k, d, g, nt, tt, it, rt, ut, ft) {
var et = t.call(this, n, i, r, h, c, l, a, v, y, p, b, k, g, d, it, ft) || this;
return et.Model = n,
et.debitAccounts = i,
et.debitAccountsForOrderedTransfer = r,
et.creditAccounts = u,
et.banks = f,
et.countries = e,
et.currencies = o,
et.transfersProxy = s,
et.stateService = h,
et.modal = c,
et.scope = l,
et.$injector = a,
et.userInfo = v,
et.profileProductService = y,
et.queriesService = w,
et.$q = b,
et.appEventsService = rt,
et.transfersService = ut,
et.wizzardSteps = [
],
et
}
return __extends(i, t),
i.prototype.onDebitChange = function () {
this.Model.DebitBank = n.utils.getValueFromDetails(this.Model.DebitProduct.BankProduct, 56).Value;
this.Model.DebitCountryISOCode = n.utils.getValueFromDetails(this.Model.DebitProduct.BankProduct, 54).Value;
this.Model.DebitBeneficiaryAddress = n.utils.getValueFromDetails(this.Model.DebitProduct.BankProduct, 8).Value;
this.Model.DebitBicCode = n.utils.getValueFromDetails(this.Model.DebitProduct.BankProduct, 4).Value;
this.Model.transferBeneficiaryFullnameDebit = n.utils.getValueFromDetails(this.Model.DebitProduct.BankProduct, 14) != undefined ? n.utils.getValueFromDetails(this.Model.DebitProduct.BankProduct, 14).Value : n.utils.getValueFromDetails(this.Model.DebitProduct.BankProduct, 60) != undefined ? n.utils.getValueFromDetails(this.Model.DebitProduct.BankProduct, 60).Value : ''
},
i.prototype.onCreditChange = function () {
this.Model.CreditAccountBeneficiaryAddress = n.utils.getValueFromDetails(this.Model.CreditAccount.BankProduct, 8) != undefined ? n.utils.getValueFromDetails(this.Model.CreditAccount.BankProduct, 8).Value : '';
this.Model.transferBeneficiaryFullnameCredit = n.utils.getValueFromDetails(this.Model.CreditAccount.BankProduct, 14) != undefined ? n.utils.getValueFromDetails(this.Model.CreditAccount.BankProduct, 14).Value : n.utils.getValueFromDetails(this.Model.CreditAccount.BankProduct, 60) != undefined ? n.utils.getValueFromDetails(this.Model.CreditAccount.BankProduct, 60).Value : ''
},
i.prototype.createExecuteRequest = function () {
var t = {
},
i;
return t.DebitProductCode = this.Model.DebitProduct.Code,
t.DebitProductTypeName = this.Model.DebitProduct.TypeName,
t.DebitProductTypeId = this.Model.DebitProduct.TypeID,
t.DebitProductReason = this.Model.DebitReason,
t.DebitProductCurrency = this.Model.DebitProduct.CurrencyEnum,
t.DebitProductTitle = this.Model.DebitProduct.Title,
t.DebitProductDetails = this.createProductDetails(this.Model.DebitProduct, this.Model.transferBeneficiaryFullnameDebit),
t.CreditProductCode = this.Model.CreditAccount.Code,
t.CreditProductTypeName = this.Model.CreditAccount.TypeName,
t.CreditProductTypeId = this.Model.CreditAccount.TypeID,
t.CreditProductReason = this.Model.CreditReason,
t.CreditProductTitle = this.Model.CreditAccount.Title,
t.CreditProductDetails = this.createProductDetails(this.Model.CreditAccount, this.Model.transferBeneficiaryFullnameCredit, !0),
t.Amount = this.Model.Amount,
t.AmountCurrency = this.Model.Currency.Currency,
t.TransferType = 14,
t.TransferCategory = 0,
t.TransferDate = n.utils.toShortDateString(this.Model.TransactionDate),
(t.DebitProductReason == '' || t.DebitProductReason == undefined) && (i = this.Model.UseProfileProduct ? this.Model.CreditAccount.Code : this.Model.CreditAccountCode, t.DebitProductReason = 'AWB ' + i.substr( - 15)),
(t.CreditProductReason == '' || t.CreditProductReason == undefined) && (t.CreditProductReason = 'AWB ' + this.userInfo.Name + ' ' + this.userInfo.SurName),
t
},
i.prototype.createProductDetails = function (t, i, r) {
r === void 0 && (r = !1);
var u = [
];
return u.push(new n.model.Detail(n.server.DetailName.ADDRESS, 0, t.BeneficiaryAddress)),
u.push(new n.model.Detail(n.server.DetailName.ALTER_APPLICATION_ACTION_TYPE, 0, 'INS')),
u.push(new n.model.Detail(n.server.DetailName.ALTER_APPLICATION_TYPE, 0, 'CM')),
u.push(new n.model.Detail(n.server.DetailName.BANK_NAME, 0, t.Bank)),
u.push(new n.model.Detail(n.server.DetailName.BIC_CODE, 0, t.Bic)),
u.push(new n.model.Detail(n.server.DetailName.BRIEF_DESCRIPTION, 0, t.Description ? t.Description : '')),
u.push(new n.model.Detail(n.server.DetailName.CountryDescrEn, 0, t.Country)),
u.push(new n.model.Detail(n.server.DetailName.CountryISOCode, 0, t.countryISOCode)),
u.push(new n.model.Detail(n.server.DetailName.CurrencyName, 0, t.Currency)),
u.push(new n.model.Detail(n.server.DetailName.FULLNAME, 0, t.FirstName + ' ' + t.LastName)),
r || (u.push(new n.model.Detail(n.server.DetailName.SWIFT_CODE, 0, t.Code)), u.push(new n.model.Detail(n.server.DetailName.SWIFT_OPTION_DAILY, 0, 'True')), u.push(new n.model.Detail(n.server.DetailName.SWIFT_OPTION_MT101, 0, 'True')), u.push(new n.model.Detail(n.server.DetailName.SWIFT_OPTION_MT941, 0, 'True')), u.push(new n.model.Detail(n.server.DetailName.SWIFT_OPTION_MT942, 0, 'True'))),
u.push(new n.model.Detail(n.server.DetailName.BENEFICIARY_NAME, 0, i)),
u
},
i.prototype.makeStep = function (n, t) {
var i = n;
i.processStep = t;
this.wizzardSteps.push(i)
},
i.prototype.initialiseSteps = function () {
return this.makeStep({
templateUrl: 'Templates/Features/CashManagement/TransferFromOtherBank/step1',
title: 'Στοιχεία Μεταφοράς'
}, this.step1),
this.makeStep({
templateUrl: 'Templates/Features/CashManagement/TransferFromOtherBank/step2',
title: 'Επιβεβαίωση Στοιχείων'
}, this.step2),
this.makeStep({
templateUrl: 'Templates/Features/CashManagement/TransferFromOtherBank/step3',
title: 'Αποτελέσμα συναλλαγής'
}, this.step3),
this.wizzardSteps
},
i.prototype.isDebitBicCodeEmpty = function () {
return n.utils.isUndefinedOrNullorWhiteSpace(this.Model.DebitBicCode)
},
i.prototype.isEUFlag = function (n) {
this.countries.some(function (t) {
return n == t.CountryIso && t.EUFlag
})
},
i.prototype.checkDebitBIC = function () {
return this.isDebitBicCodeEmpty() ? this.$q.when({
ResultCode: 1,
Error: {
Message: 'internationalBicCodeCountryValidation'
},
RelatedBIC: ''
})  : this.queriesService.checkBIC({
InBIC: this.Model.DebitBicCode
})
},
i.prototype.setTransferExpenses = function () {
var n = this;
this.transfersService.GetTransferExpenses({
Amount: this.Model.Amount,
DebitAccountNumber: this.Model.DebitProduct.Code,
DebitAccountType: this.Model.DebitProduct.TypeID,
CreditAccountNumber: this.Model.CreditAccount.Code,
CreditAccountType: this.Model.CreditAccount.TypeID,
ExpensesServiceType: 0,
Currency: this.Model.Currency.Currency,
FeeType: 0
}).then(function (t) {
var i = t;
i.Fees && (n.Model.AmountLiteral = i.Fees.DebitAmountLiteral)
})
},
i.prototype.step1 = function () {
var t = this,
i = this.$q.defer();
return (this.setTransferExpenses(), !this.isDebitBicCodeEmpty() && !n.utils.isUndefinedOrNullorWhiteSpace(this.Model.DebitProduct.countryISOCode) && this.Model.DebitProduct.countryISOCode != this.Model.DebitBicCode.substring(4, 6)) ? (i.reject(this.STRINGS.internationalBicCodeCountryValidation), i.promise)  : (this.checkDebitBIC().then(function (n) {
var u,
r;
if (n.ResultCode == 0 ? n.IsValid || (i.reject(t.STRINGS.internationalBicCodeCountryValidation), u = !0)  : (i.reject(t.STRINGS.internationalBicCodeCountryValidation), u = !0), u) return i.promise;
r = t.Model;
r.DebitBicCode.trim().length == 8 && (r.DebitBicCode = r.DebitBicCode.trim() + 'XXX');
var f = r.CreditAccount.Code,
s = r.CreditAccount.TypeID,
e = t.queriesService.checkProduct(t.queriesService.getCheckProductRequest(f, r.BicCode)),
h = t.Model.transferBeneficiaryFullnameCredit,
c = r.CreditAccount.countryISOCode,
l = function (n) {
return this.transfersService.AmountAnalysis(n)
},
o = t.queriesService.checkMIT101({
BICCode: r.DebitBicCode
});
t.$q.all({
checkProduct: e,
MIT101: o
}).then(function (n) {
var r = n.checkProduct,
u;
r.IsValid || (t.Model.HasErrors = !0, u = r.Error ? r.Error.Message : t.STRINGS.failedTransaction, i.reject(u));
t.Model.HasErrors = !1;
t.Model.ErrorMessage = '';
t.Model.HasErrors ? i.resolve(!0)  : i.resolve(!0)
}, function (n) {
var r = t.getErrorMessage(n, 'Error.Message');
i.reject(r)
})
}, function (n) {
var r = t.getErrorMessage(n, 'Error.Message');
i.reject(r)
}), i.promise.then(function () {
return t.getOtpPayload()
}).then(function (n) {
return t.otpHandler.reset({
hints: {
Requirement: String(2),
Method: String(1)
},
payload: n
}).enquire()
}))
},
i.prototype.step2 = function () {
var t = this,
i = this.Model,
r = this.$q.defer(),
u = function () {
t.appEventsService.publish(n.common.services.AppEventsService.InvalidateLookups_Event, [
n.common.services.LookupsService.DebitAccounts_CacheKey,
n.common.services.LookupsService.DebitAccountsForOrderedTransfer_CacheKey
]);
t.appEventsService.publish(n.common.services.AppEventsService.InvalidateAccounts_Event)
};
return this.isProfileProduct().finally (function () {
t.otpHandler.result().then(function () {
t.transfersProxy.executeReverseTransfer(t.otpHandler.appendExtraInfoToPayload(t.getOtpPayload())).then(function (n) {
var i = t.setTransactionStatus(n);
t.documentData.IsReverseTransfer = !0;
i && u();
r.resolve(!0)
}, function (u) {
i.HasErrors = !0;
i.ErrorMessage = t.STRINGS.failedTransactionSystemError;
n.utils.isUndefinedOrNull(u.Error) && u.data.Message == 'TimeoutError' ? i.ErrorMessage = t.STRINGS.promptForCheckErrorMsg : n.utils.isUndefinedOrNull(u.Error) || n.utils.isUndefinedOrNull(u.Error.Message) || (i.ErrorMessage = u.Error.Message);
r.reject(i.ErrorMessage)
})
}, function (n) {
r.reject(n)
})
}),
r.promise
},
i.prototype.step3 = function () {
var t = this,
i = t.Model,
n = this.$q.defer();
return n.resolve(!1),
n.promise
},
i.prototype.getOtpPayload = function () {
return this.createExecuteRequest()
},
i.$inject = [
'Model',
'debitAccounts',
'debitAccountsForOrderedTransfer',
'creditAccounts',
'banks',
'countries',
'currencies',
'TransfersServiceProxy',
'$state',
'$modal',
'$scope',
'$injector',
'userInfo',
'ProfileProductsService',
'StateHelperService',
'QueriesService',
'$q',
'$parse',
'RoleService',
'ProductMatchingService',
'ProductsService',
'STRINGS',
'$window',
'AppEventsService',
'TransfersService',
'otpHandler'
],
i
}(n.transfers.TransferWizardController),
r;
t.fromOtherBankTransferWizard = i;
r = function (t) {
function i() {
return t !== null && t.apply(this, arguments) || this
}
return __extends(i, t),
i.prototype.initialiseSteps = function () {
var i = this,
r = t.prototype.initialiseSteps.call(this);
return r[1].processStep = [
'JobsServiceProxy',
'SharedDataService',
'AppEventsService',
function (t, r, u) {
var f = i.createExecuteRequest();
return f.JobName = i.Model.JobName,
f.JobType = 9,
i.otpHandler.result().then(function () {
return i.otpHandler.appendExtraInfoToPayload(f, 'OTP')
}).then(function () {
return t.submitReverseTransferJob(f)
}).then(function (t) {
if (i.Model.SubmittedTimeStamp = t.SubmittedTimeStamp, i.Model.JobSubmissionResponse = t, t.CanBeApprove) {
var f = r.GetControllerData(n.server.Controllers.Badge, n.common.services.AppEventsService.jobApprovalCount) + 1;
r.SetControllerData(i.scope, n.server.Controllers.Badge, n.common.services.AppEventsService.jobApprovalCount, f);
u.publish(n.common.services.AppEventsService.jobApprovalCount)
}
return t
})
}
],
r[2].templateUrl = 'Templates/Features/jobs/transfers/transferFromOtherBank/step3',
r
},
i
}(i);
n.cashManagement.module.controller('fromOtherBankTransferWizard', i);
n.cashManagement.module.controller('fromOtherBankJobTransferWizard', r)
}) (t = n.cashManagement || (n.cashManagement = {
}))
}(alpha || (alpha = {
}));
__extends = this && this.__extends || function () {
var n = Object.setPrototypeOf || {
__proto__: [
]
}
instanceof Array && function (n, t) {
n.__proto__ = t
}
|| function (n, t) {
for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i])
};
return function (t, i) {
function r() {
this.constructor = t
}
n(t, i);
t.prototype = i === null ? Object.create(i)  : (r.prototype = i.prototype, new r)
}
}(),
function (n) {
var t;
(function () {
var t = function (t) {
function i(n, i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k, d) {
var g = t.call(this, e, u, h, c, l, n, i, s, a, v, y, p, w, b, k, d) || this;
return g.providers = r,
g.potentialCreditAccounts = f,
g.transferCategories = o,
g.creditAccounts = [
],
g.transactionCodes = [
],
g.debitReasonRegExp = null,
g.creditReasonRegExp = null,
g.canShowWizard = !e.HasErrors,
g
}
return __extends(i, t),
i.prototype.createExecuteRequest = function () {
var t = this.Model,
i = {
DebitProductCode: t.DebitProduct.Code,
DebitProductType: t.DebitProduct.TypeID,
DebitReason: t.DebitReason || n.utils.formatString('AWB {0}', [
t.CreditAccount.Code.substr( - 15)
]),
CreditProductCode: t.CreditAccount.Code,
CreditProductType: t.CreditAccount.TypeID,
CreditReason: t.CreditReason || n.utils.formatString('AWB {0} {1}', [
this.userInfo.Name,
this.userInfo.SurName
]),
Amount: t.Amount,
TransferCategory: t.DebitProduct.IsCorporate ? t.TransferCategory.Value : 0,
DebitProductCurrency: t.DebitProduct.CurrencyEnum,
TransferType: 0,
TransferDetails: [
]
};
return this.transactionCodes.length && i.TransferDetails.push(new n.model.Detail(n.model.DetailName.BOP_CODE, n.model.DetailDataType.String, t.TransactionCode.Id)),
this.providerInfo && this.providerInfo.Details && this.providerInfo.Details.SpecialPayCode && i.TransferDetails.push(new n.model.Detail(n.server.DetailName.BOP_CODE, n.model.DetailDataType.String, this.providerInfo.Details.SpecialPayCode)),
i
},
i.prototype.initialiseSteps = function () {
var n = [
],
r = {
title: 'i think that nobody can see this !!!',
templateUrl: 'Templates/Features/CashManagement/TransferInGroup/step1',
processStep: [
'TransfersService',
'$q',
function (n, t) {
var i = this;
return n.GetTransferExpenses({
Amount: i.Model.Amount,
DebitAccountNumber: i.Model.DebitProduct.Code,
DebitAccountType: i.Model.DebitProduct.TypeID,
CreditAccountNumber: i.Model.CreditAccount.Code,
CreditAccountType: i.Model.CreditAccount.TypeID,
ExpensesServiceType: 0,
Currency: i.Model.DebitProduct.CurrencyEnum,
FeeType: 2
}).then(function (n) {
return i.Model.AmountLiteral = n.Fees.DebitAmountLiteral,
{
}
}, function (n) {
return t.reject(n.Error.Message)
})
}
]
},
t,
i;
return n.push(r),
t = {
title: 'i think that nobody can see this !!!',
templateUrl: 'Templates/Features/CashManagement/TransferInGroup/step2',
processStep: [
'TransfersService',
'$q',
'JobsServiceProxy',
function (n, t) {
var i = this,
u = i.Model,
r = i.createExecuteRequest();
return i.preExecute(r),
n.ExecuteAlphaAccountTransfer(r, u.Online).then(function (n) {
var r = i.setTransactionStatus(n);
return r ? !0 : t.reject(n.Error.Message)
}, function (n) {
return t.reject(n.Error.Message)
})
}
]
},
n.push(t),
i = {
title: 'i think that nobody can see this !!!',
templateUrl: 'Templates/Features/CashManagement/TransferInGroup/step3'
},
n.push(i),
n
},
i.prototype.onDebitProductChange = function (t) {
var i = this;
this.Model.CreditAccount = null;
this.providerInfo = this.providers.filter(function (n) {
return n.Country === t.countryISOCode
}) [0];
this.providerInfo.Details && this.providerInfo.Details.IntraProvider ? (this.creditAccounts = n.utils.Except(this.potentialCreditAccounts.filter(function (n) {
return n.Currency === t.Currency && n.BankProduct.ProviderID === i.providerInfo.Id
}), [
t
]), this.transactionCodes = this.providerInfo.Details.TransactionCodes, this.debitReasonRegExp = this.providerInfo.Details.FromReasonRegExp ? new RegExp(this.providerInfo.Details.FromReasonRegExp)  : null, this.creditReasonRegExp = this.providerInfo.Details.ToReasonRegExp ? new RegExp(this.providerInfo.Details.ToReasonRegExp)  : null)  : (this.creditAccounts = [
], this.transactionCodes = [
], this.debitReasonRegExp = null, this.creditReasonRegExp = null)
},
i.$inject = [
'$scope',
'$injector',
'providerInfo',
'debitAccounts',
'potentialCreditAccounts',
'Model',
'transferCategories',
'userInfo',
'debitAccountsForOrderedTransfer',
'$state',
'$modal',
'ProfileProductsService',
'StateHelperService',
'$q',
'$parse',
'ProductMatchingService',
'RoleService',
'$window',
'otpHandler'
],
i
}(n.transfers.TransferWizardController),
i = function (t) {
function i() {
return t !== null && t.apply(this, arguments) || this
}
return __extends(i, t),
i.prototype.initialiseSteps = function () {
var i = t.prototype.initialiseSteps.call(this);
return i[1].processStep = function () {
var t = this,
i = t.createExecuteRequest();
return t.preExecute(i),
t.$injector.invoke(n.jobs.submitJob, null, {
jobType: 8,
model: t.Model,
payload: i,
scope: t.scope
})
},
i
},
i
}(t);
n.cashManagement.module.controller('CashManagementTransferInGroupController', t);
n.cashManagement.module.controller('CashManagementJobTransferInGroupController', i)
}) (t = n.cashManagement || (n.cashManagement = {
}))
}(alpha || (alpha = {
}))
