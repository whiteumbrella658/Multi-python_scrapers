var hasher = {
    'hash': function (_0x176dd3) {
        _0x176dd3 = unescape(encodeURIComponent(_0x176dd3));
        for (var _0x4ce92a = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6], _0x327399 = (_0x176dd3 += String["fromCharCode"](0x80))["length"] / 0x4 + 0x2, _0xea1c6e = Math["ceil"](_0x327399 / 0x10), _0x3dcd04 = new Array(_0xea1c6e), _0x5de790 = 0x0; _0x5de790 < _0xea1c6e; _0x5de790++) {
            _0x3dcd04[_0x5de790] = new Array(0x10);
            for (var _0x135062 = 0x0; _0x135062 < 0x10; _0x135062++)
                _0x3dcd04[_0x5de790][_0x135062] = _0x176dd3["charCodeAt"](0x40 * _0x5de790 + 0x4 * _0x135062) << 0x18 | _0x176dd3["charCodeAt"](0x40 * _0x5de790 + 0x4 * _0x135062 + 0x1) << 0x10 | _0x176dd3["charCodeAt"](0x40 * _0x5de790 + 0x4 * _0x135062 + 0x2) << 0x8 | _0x176dd3["charCodeAt"](0x40 * _0x5de790 + 0x4 * _0x135062 + 0x3);
        }
        _0x3dcd04[_0xea1c6e - 0x1][0xe] = 0x8 * (_0x176dd3["length"] - 0x1) / Math["pow"](0x2, 0x20),
            _0x3dcd04[_0xea1c6e - 0x1][0xe] = Math["floor"](_0x3dcd04[_0xea1c6e - 0x1][0xe]),
            _0x3dcd04[_0xea1c6e - 0x1][0xf] = 0x8 * (_0x176dd3["length"] - 0x1) & 0xffffffff;
        var _0x55bb64,_0x4f10d4,_0x281ef2,_0x514c6f,_0xbda4c3,_0x8eb89f = 0x67452301,_0x1c542b = 0xefcdab89,_0xb9dc9d = 0x98badcfe,_0x4cc922 = 0x10325476,_0x59038b = 0xc3d2e1f0,_0x5c4305 = new Array(0x50);
        for (_0x5de790 = 0x0; _0x5de790 < _0xea1c6e; _0x5de790++) {
            for (var _0x3d4c2f = 0x0; _0x3d4c2f < 0x10; _0x3d4c2f++)
                _0x5c4305[_0x3d4c2f] = _0x3dcd04[_0x5de790][_0x3d4c2f];
            for (_0x3d4c2f = 0x10; _0x3d4c2f < 0x50; _0x3d4c2f++)
                _0x5c4305[_0x3d4c2f] = hasher["ROTL"](_0x5c4305[_0x3d4c2f - 0x3] ^ _0x5c4305[_0x3d4c2f - 0x8] ^ _0x5c4305[_0x3d4c2f - 0xe] ^ _0x5c4305[_0x3d4c2f - 0x10], 0x1);
            _0x55bb64 = _0x8eb89f,
                _0x4f10d4 = _0x1c542b,
                _0x281ef2 = _0xb9dc9d,
                _0x514c6f = _0x4cc922,
                _0xbda4c3 = _0x59038b;
            for (_0x3d4c2f = 0x0; _0x3d4c2f < 0x50; _0x3d4c2f++) {
                var _0x52faad = Math["floor"](_0x3d4c2f / 0x14),
                    _0x41f00f = hasher["ROTL"](_0x55bb64, 0x5) + hasher['f'](_0x52faad, _0x4f10d4, _0x281ef2, _0x514c6f) + _0xbda4c3 + _0x4ce92a[_0x52faad] + _0x5c4305[_0x3d4c2f] & 0xffffffff;
                _0xbda4c3 = _0x514c6f,
                    _0x514c6f = _0x281ef2,
                    _0x281ef2 = hasher["ROTL"](_0x4f10d4, 0x1e),
                    _0x4f10d4 = _0x55bb64,
                    _0x55bb64 = _0x41f00f;
            }
            _0x8eb89f = _0x8eb89f + _0x55bb64 & 0xffffffff,
                _0x1c542b = _0x1c542b + _0x4f10d4 & 0xffffffff,
                _0xb9dc9d = _0xb9dc9d + _0x281ef2 & 0xffffffff,
                _0x4cc922 = _0x4cc922 + _0x514c6f & 0xffffffff,
                _0x59038b = _0x59038b + _0xbda4c3 & 0xffffffff;
        }
        return hasher["toHexStr"](_0x8eb89f) + hasher["toHexStr"](_0x1c542b) + hasher["toHexStr"](_0xb9dc9d) + hasher["toHexStr"](_0x4cc922) + hasher["toHexStr"](_0x59038b);
    },
    'f': function (_0x1feb6c, _0x1c4879, _0x31fbba, _0x53ac0f) {
        switch (_0x1feb6c) {
            case 0x0:
                return _0x1c4879 & _0x31fbba ^ ~_0x1c4879 & _0x53ac0f;
            case 0x1:
            case 0x3:
                return _0x1c4879 ^ _0x31fbba ^ _0x53ac0f;
            case 0x2:
                return _0x1c4879 & _0x31fbba ^ _0x1c4879 & _0x53ac0f ^ _0x31fbba & _0x53ac0f;
        }
    },
    'ROTL': function (_0x234a5d, _0x1f7336) {
        return _0x234a5d << _0x1f7336 | _0x234a5d >>> 0x20 - _0x1f7336;
    },
    'toHexStr': function (_0x5d8ee3) {
        for (var _0x32e986 = '', _0x2f641d = 0x7; _0x2f641d >= 0x0; _0x2f641d--)
            _0x32e986 += (_0x5d8ee3 >>> 0x4 * _0x2f641d & 0xf)["toString"](0x10);
        return _0x32e986;
    }
}

module.exports = hasher;
