'use strict';

let _stringToHex = function (s) {
    let r = "0x"
    let _46a = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"]
    for (let i = 0; i < s.length; i++) {
        r += _46a[s.charCodeAt(i) >> 4] + _46a[s.charCodeAt(i) & 15]
    }
    return r
}

let _hexToString = function (h) {
    let r = ""
    for (let i = (h.substr(0, 2) == "0x") ? 2 : 0; i < h.length; i += 2) {
        r += String.fromCharCode(parseInt(h.substr(i, 2), 16))
    }
    return r
}

let _des_createKeys = function (key) {
    let pc2bytes0 = new Array(0, 4, 536870912, 536870916, 65536, 65540, 536936448, 536936452, 512, 516, 536871424, 536871428, 66048, 66052, 536936960, 536936964)
    let pc2bytes1 = new Array(0, 1, 1048576, 1048577, 67108864, 67108865, 68157440, 68157441, 256, 257, 1048832, 1048833, 67109120, 67109121, 68157696, 68157697)
    let pc2bytes2 = new Array(0, 8, 2048, 2056, 16777216, 16777224, 16779264, 16779272, 0, 8, 2048, 2056, 16777216, 16777224, 16779264, 16779272)
    let pc2bytes3 = new Array(0, 2097152, 134217728, 136314880, 8192, 2105344, 134225920, 136323072, 131072, 2228224, 134348800, 136445952, 139264, 2236416, 134356992, 136454144)
    let pc2bytes4 = new Array(0, 262144, 16, 262160, 0, 262144, 16, 262160, 4096, 266240, 4112, 266256, 4096, 266240, 4112, 266256)
    let pc2bytes5 = new Array(0, 1024, 32, 1056, 0, 1024, 32, 1056, 33554432, 33555456, 33554464, 33555488, 33554432, 33555456, 33554464, 33555488)
    let pc2bytes6 = new Array(0, 268435456, 524288, 268959744, 2, 268435458, 524290, 268959746, 0, 268435456, 524288, 268959744, 2, 268435458, 524290, 268959746)
    let pc2bytes7 = new Array(0, 65536, 2048, 67584, 536870912, 536936448, 536872960, 536938496, 131072, 196608, 133120, 198656, 537001984, 537067520, 537004032, 537069568)
    let pc2bytes8 = new Array(0, 262144, 0, 262144, 2, 262146, 2, 262146, 33554432, 33816576, 33554432, 33816576, 33554434, 33816578, 33554434, 33816578)
    let pc2bytes9 = new Array(0, 268435456, 8, 268435464, 0, 268435456, 8, 268435464, 1024, 268436480, 1032, 268436488, 1024, 268436480, 1032, 268436488)
    let pc2bytes10 = new Array(0, 32, 0, 32, 1048576, 1048608, 1048576, 1048608, 8192, 8224, 8192, 8224, 1056768, 1056800, 1056768, 1056800)
    let pc2bytes11 = new Array(0, 16777216, 512, 16777728, 2097152, 18874368, 2097664, 18874880, 67108864, 83886080, 67109376, 83886592, 69206016, 85983232, 69206528, 85983744)
    let pc2bytes12 = new Array(0, 4096, 134217728, 134221824, 524288, 528384, 134742016, 134746112, 16, 4112, 134217744, 134221840, 524304, 528400, 134742032, 134746128)
    let pc2bytes13 = new Array(0, 4, 256, 260, 0, 4, 256, 260, 1, 5, 257, 261, 1, 5, 257, 261)
    let _466 = key.length > 8 ? 3 : 1
    let keys = new Array(32 * _466)
    let _467 = new Array(0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0)
    let _468, _469, m = 0, n = 0, temp
    for (let j = 0; j < _466; j++) {
        let left = (key.charCodeAt(m++) << 24) | (key.charCodeAt(m++) << 16) | (key.charCodeAt(m++) << 8) | key.charCodeAt(m++)
        let right = (key.charCodeAt(m++) << 24) | (key.charCodeAt(m++) << 16) | (key.charCodeAt(m++) << 8) | key.charCodeAt(m++)
        temp = ((left >>> 4) ^ right) & 252645135
        right ^= temp
        left ^= (temp << 4)
        temp = ((right >>> -16) ^ left) & 65535
        left ^= temp
        right ^= (temp << -16)
        temp = ((left >>> 2) ^ right) & 858993459
        right ^= temp
        left ^= (temp << 2)
        temp = ((right >>> -16) ^ left) & 65535
        left ^= temp
        right ^= (temp << -16)
        temp = ((left >>> 1) ^ right) & 1431655765
        right ^= temp
        left ^= (temp << 1)
        temp = ((right >>> 8) ^ left) & 16711935
        left ^= temp
        right ^= (temp << 8)
        temp = ((left >>> 1) ^ right) & 1431655765
        right ^= temp
        left ^= (temp << 1)
        temp = (left << 8) | ((right >>> 20) & 240)
        left = (right << 24) | ((right << 8) & 16711680) | ((right >>> 8) & 65280) | ((right >>> 24) & 240)
        right = temp
        for (let i = 0; i < _467.length; i++) {
            if (_467[i]) {
                left = (left << 2) | (left >>> 26)
                right = (right << 2) | (right >>> 26)
            } else {
                left = (left << 1) | (left >>> 27)
                right = (right << 1) | (right >>> 27)
            }
            left &= -15
            right &= -15
            _468 = pc2bytes0[left >>> 28] | pc2bytes1[(left >>> 24) & 15] | pc2bytes2[(left >>> 20) & 15] | pc2bytes3[(left >>> 16) & 15] | pc2bytes4[(left >>> 12) & 15] | pc2bytes5[(left >>> 8) & 15] | pc2bytes6[(left >>> 4) & 15]
            _469 = pc2bytes7[right >>> 28] | pc2bytes8[(right >>> 24) & 15] | pc2bytes9[(right >>> 20) & 15] | pc2bytes10[(right >>> 16) & 15] | pc2bytes11[(right >>> 12) & 15] | pc2bytes12[(right >>> 8) & 15] | pc2bytes13[(right >>> 4) & 15]
            temp = ((_469 >>> 16) ^ _468) & 65535
            keys[n++] = _468 ^ temp
            keys[n++] = _469 ^ (temp << 16)
        }
    }
    return keys
}

let _des = function (key, _44e, _44f, mode, iv, _450) {
    let _451 = new Array(16843776, 0, 65536, 16843780, 16842756, 66564, 4, 65536, 1024, 16843776, 16843780, 1024, 16778244, 16842756, 16777216, 4, 1028, 16778240, 16778240, 66560, 66560, 16842752, 16842752, 16778244, 65540, 16777220, 16777220, 65540, 0, 1028, 66564, 16777216, 65536, 16843780, 4, 16842752, 16843776, 16777216, 16777216, 1024, 16842756, 65536, 66560, 16777220, 1024, 4, 16778244, 66564, 16843780, 65540, 16842752, 16778244, 16777220, 1028, 66564, 16843776, 1028, 16778240, 16778240, 0, 65540, 66560, 0, 16842756)
    let _452 = new Array(-2146402272, -2147450880, 32768, 1081376, 1048576, 32, -2146435040, -2147450848, -2147483616, -2146402272, -2146402304, -2147483648, -2147450880, 1048576, 32, -2146435040, 1081344, 1048608, -2147450848, 0, -2147483648, 32768, 1081376, -2146435072, 1048608, -2147483616, 0, 1081344, 32800, -2146402304, -2146435072, 32800, 0, 1081376, -2146435040, 1048576, -2147450848, -2146435072, -2146402304, 32768, -2146435072, -2147450880, 32, -2146402272, 1081376, 32, 32768, -2147483648, 32800, -2146402304, 1048576, -2147483616, 1048608, -2147450848, -2147483616, 1048608, 1081344, 0, -2147450880, 32800, -2147483648, -2146435040, -2146402272, 1081344)
    let _453 = new Array(520, 134349312, 0, 134348808, 134218240, 0, 131592, 134218240, 131080, 134217736, 134217736, 131072, 134349320, 131080, 134348800, 520, 134217728, 8, 134349312, 512, 131584, 134348800, 134348808, 131592, 134218248, 131584, 131072, 134218248, 8, 134349320, 512, 134217728, 134349312, 134217728, 131080, 520, 131072, 134349312, 134218240, 0, 512, 131080, 134349320, 134218240, 134217736, 512, 0, 134348808, 134218248, 131072, 134217728, 134349320, 8, 131592, 131584, 134217736, 134348800, 134218248, 520, 134348800, 131592, 8, 134348808, 131584)
    let _454 = new Array(8396801, 8321, 8321, 128, 8396928, 8388737, 8388609, 8193, 0, 8396800, 8396800, 8396929, 129, 0, 8388736, 8388609, 1, 8192, 8388608, 8396801, 128, 8388608, 8193, 8320, 8388737, 1, 8320, 8388736, 8192, 8396928, 8396929, 129, 8388736, 8388609, 8396800, 8396929, 129, 0, 0, 8396800, 8320, 8388736, 8388737, 1, 8396801, 8321, 8321, 128, 8396929, 129, 1, 8192, 8388609, 8193, 8396928, 8388737, 8193, 8320, 8388608, 8396801, 128, 8388608, 8192, 8396928)
    let _455 = new Array(256, 34078976, 34078720, 1107296512, 524288, 256, 1073741824, 34078720, 1074266368, 524288, 33554688, 1074266368, 1107296512, 1107820544, 524544, 1073741824, 33554432, 1074266112, 1074266112, 0, 1073742080, 1107820800, 1107820800, 33554688, 1107820544, 1073742080, 0, 1107296256, 34078976, 33554432, 1107296256, 524544, 524288, 1107296512, 256, 33554432, 1073741824, 34078720, 1107296512, 1074266368, 33554688, 1073741824, 1107820544, 34078976, 1074266368, 256, 33554432, 1107820544, 1107820800, 524544, 1107296256, 1107820800, 34078720, 0, 1074266112, 1107296256, 524544, 33554688, 1073742080, 524288, 0, 1074266112, 34078976, 1073742080)
    let _456 = new Array(536870928, 541065216, 16384, 541081616, 541065216, 16, 541081616, 4194304, 536887296, 4210704, 4194304, 536870928, 4194320, 536887296, 536870912, 16400, 0, 4194320, 536887312, 16384, 4210688, 536887312, 16, 541065232, 541065232, 0, 4210704, 541081600, 16400, 4210688, 541081600, 536870912, 536887296, 16, 541065232, 4210688, 541081616, 4194304, 16400, 536870928, 4194304, 536887296, 536870912, 16400, 536870928, 541081616, 4210688, 541065216, 4210704, 541081600, 0, 541065232, 16, 16384, 541065216, 4210704, 16384, 4194320, 536887312, 0, 541081600, 536870912, 4194320, 536887312)
    let _457 = new Array(2097152, 69206018, 67110914, 0, 2048, 67110914, 2099202, 69208064, 69208066, 2097152, 0, 67108866, 2, 67108864, 69206018, 2050, 67110912, 2099202, 2097154, 67110912, 67108866, 69206016, 69208064, 2097154, 69206016, 2048, 2050, 69208066, 2099200, 2, 67108864, 2099200, 67108864, 2099200, 2097152, 67110914, 67110914, 69206018, 69206018, 2, 2097154, 67108864, 67110912, 2097152, 69208064, 2050, 2099202, 69208064, 2050, 67108866, 69208066, 69206016, 2099200, 0, 2, 69208066, 0, 2099202, 69206016, 2048, 67108866, 67110912, 2048, 2097154)
    let _458 = new Array(268439616, 4096, 262144, 268701760, 268435456, 268439616, 64, 268435456, 262208, 268697600, 268701760, 266240, 268701696, 266304, 4096, 64, 268697600, 268435520, 268439552, 4160, 266240, 262208, 268697664, 268701696, 4160, 0, 0, 268697664, 268435520, 268439552, 266304, 262144, 266304, 262144, 268701696, 4096, 64, 268697664, 4096, 266304, 268439552, 64, 268435520, 268697600, 268697664, 268435456, 262144, 268439616, 0, 268701760, 262208, 268435520, 268697600, 268439552, 268439616, 0, 268701760, 266240, 266240, 4160, 4160, 262208, 268435456, 268701696)
    let keys = _des_createKeys(key)
    let m = 0, i, j, temp, _459, _45a, _45b, left, _45c, _45d
    let _45e, _45f, _460, _461
    let _462, _463
    let len = _44e.length
    let _464 = 0
    let _465 = keys.length == 32 ? 3 : 9
    if (_465 == 3) {
        _45d = _44f ? new Array(0, 32, 2) : new Array(30, -2, -2)
    } else {
        _45d = _44f ? new Array(0, 32, 2, 62, 30, -2, 64, 96, 2) : new Array(94, 62, -2, 32, 64, 2, 30, -2, -2)
    }
    if (_450 == 2) {
        _44e += "        "
    } else {
        if (_450 == 1) {
            temp = 8 - (len % 8)
            _44e += String.fromCharCode(temp, temp, temp, temp, temp, temp, temp, temp)
            if (temp == 8) {
                len += 8
            }
        } else {
            if (!_450) {
                _44e += "\x00\x00\x00\x00\x00\x00\x00\x00"
            }
        }
    }
    let result = ""
    let tempresult = ""
    if (mode == 1) {
        _45e = (iv.charCodeAt(m++) << 24) | (iv.charCodeAt(m++) << 16) | (iv.charCodeAt(m++) << 8) | iv.charCodeAt(m++)
        _460 = (iv.charCodeAt(m++) << 24) | (iv.charCodeAt(m++) << 16) | (iv.charCodeAt(m++) << 8) | iv.charCodeAt(m++)
        m = 0
    }
    while (m < len) {
        left = (_44e.charCodeAt(m++) << 24) | (_44e.charCodeAt(m++) << 16) | (_44e.charCodeAt(m++) << 8) | _44e.charCodeAt(m++)
        _45c = (_44e.charCodeAt(m++) << 24) | (_44e.charCodeAt(m++) << 16) | (_44e.charCodeAt(m++) << 8) | _44e.charCodeAt(m++)
        if (mode == 1) {
            if (_44f) {
                left ^= _45e
                _45c ^= _460
            } else {
                _45f = _45e
                _461 = _460
                _45e = left
                _460 = _45c
            }
        }
        temp = ((left >>> 4) ^ _45c) & 252645135
        _45c ^= temp
        left ^= (temp << 4)
        temp = ((left >>> 16) ^ _45c) & 65535
        _45c ^= temp
        left ^= (temp << 16)
        temp = ((_45c >>> 2) ^ left) & 858993459
        left ^= temp
        _45c ^= (temp << 2)
        temp = ((_45c >>> 8) ^ left) & 16711935
        left ^= temp
        _45c ^= (temp << 8)
        temp = ((left >>> 1) ^ _45c) & 1431655765
        _45c ^= temp
        left ^= (temp << 1)
        left = ((left << 1) | (left >>> 31))
        _45c = ((_45c << 1) | (_45c >>> 31))
        for (j = 0; j < _465; j += 3) {
            _462 = _45d[j + 1]
            _463 = _45d[j + 2]
            for (i = _45d[j]; i != _462; i += _463) {
                _45a = _45c ^ keys[i]
                _45b = ((_45c >>> 4) | (_45c << 28)) ^ keys[i + 1]
                temp = left
                left = _45c
                _45c = temp ^ (_452[(_45a >>> 24) & 63] | _454[(_45a >>> 16) & 63] | _456[(_45a >>> 8) & 63] | _458[_45a & 63] | _451[(_45b >>> 24) & 63] | _453[(_45b >>> 16) & 63] | _455[(_45b >>> 8) & 63] | _457[_45b & 63])
            }
            temp = left
            left = _45c
            _45c = temp
        }
        left = ((left >>> 1) | (left << 31))
        _45c = ((_45c >>> 1) | (_45c << 31))
        temp = ((left >>> 1) ^ _45c) & 1431655765
        _45c ^= temp
        left ^= (temp << 1)
        temp = ((_45c >>> 8) ^ left) & 16711935
        left ^= temp
        _45c ^= (temp << 8)
        temp = ((_45c >>> 2) ^ left) & 858993459
        left ^= temp
        _45c ^= (temp << 2)
        temp = ((left >>> 16) ^ _45c) & 65535
        _45c ^= temp
        left ^= (temp << 16)
        temp = ((left >>> 4) ^ _45c) & 252645135
        _45c ^= temp
        left ^= (temp << 4)
        if (mode == 1) {
            if (_44f) {
                _45e = left
                _460 = _45c
            } else {
                left ^= _45f
                _45c ^= _461
            }
        }
        tempresult += String.fromCharCode((left >>> 24), ((left >>> 16) & 255), ((left >>> 8) & 255), (left & 255), (_45c >>> 24), ((_45c >>> 16) & 255), ((_45c >>> 8) & 255), (_45c & 255))
        _464 += 8
        if (_464 == 512) {
            result += tempresult
            tempresult = ""
            _464 = 0
        }
    }
    return result + tempresult
}


let mix = function (map) {
    Object.keys = Object.keys || function (o) {
        let _44a = []
        for (let name in o) {
            if (o.hasOwnProperty(name)) {
                _44a.push(name)
            }
        }
        return _44a
    }

    let _44b = Object.keys(map)
    let _44c = {}
    let _44d
    for (let i = _44b.length - 1; i > 0; i--) {
        let j = Math.floor(Math.random() * (i + 1))
        let temp = _44b[i]
        _44b[i] = _44b[j]
        _44b[j] = temp
    }
    for (let i = 0; i < _44b.length; i++) {
        _44d = _44b[i]
        _44c[_44d] = map[_44d]
    }
    return _44c
}

let cipher = function (key, data) {
    if (key == "" || key == undefined) {
        key = data["dse_form_cipher"]
    }
    let _448 = new String()
    for (let item in data) {
        let elem = data[item]
        _448 = null
        _448 = elem
        if (!(/^dse_/).test(item) && item != "_SD") {
            if (elem instanceof Object) {
                cipher(key, elem)
            } else {
                if (key != "" && key != undefined && elem != undefined) {
                    while (_448.indexOf("€") > -1) {
                        _448 = _448.replace("€", "&#x20ac;")
                    }
                    elem = _448
                    data[item] = _stringToHex(_des(key, elem, true, 0, "", 1))
                }
            }
        }
    }
    return data
};

/**
 * node popular_form_cipher.js {\"a\":\"abc1\",\"b\":\"def2\",\"dse_form_cipher\":\"0x335639514c6f43714c3338\"}
 */
(function () {
    let dataStr = process.argv[2]
    let data = JSON.parse(dataStr)
    let dataMixed = mix(data)
    let dataCiphered = cipher("", dataMixed)
    console.log(JSON.stringify(dataCiphered))
})();
